
Tof_sensor_handling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a684  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0801a7c4  0801a7c4  0001b7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ab24  0801ab24  0001bb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ab2c  0801ab2c  0001bb2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ab30  0801ab30  0001bb30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d0  20000008  0801ab34  0001c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a144  200000d8  0801ac04  0001c0d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2000a21c  0801ac04  0001c21c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001c0d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00065443  00000000  00000000  0001c108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007b54  00000000  00000000  0008154b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000035c0  00000000  00000000  000890a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000298b  00000000  00000000  0008c660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000ed2e  00000000  00000000  0008efeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00040998  00000000  00000000  0009dd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001211d3  00000000  00000000  000de6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ff884  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ef08  00000000  00000000  001ff8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  0020e7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000d8 	.word	0x200000d8
 800015c:	00000000 	.word	0x00000000
 8000160:	0801a7ac 	.word	0x0801a7ac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000dc 	.word	0x200000dc
 800017c:	0801a7ac 	.word	0x0801a7ac

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_ldivmod>:
 8000220:	b97b      	cbnz	r3, 8000242 <__aeabi_ldivmod+0x22>
 8000222:	b972      	cbnz	r2, 8000242 <__aeabi_ldivmod+0x22>
 8000224:	2900      	cmp	r1, #0
 8000226:	bfbe      	ittt	lt
 8000228:	2000      	movlt	r0, #0
 800022a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800022e:	e006      	blt.n	800023e <__aeabi_ldivmod+0x1e>
 8000230:	bf08      	it	eq
 8000232:	2800      	cmpeq	r0, #0
 8000234:	bf1c      	itt	ne
 8000236:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800023a:	f04f 30ff 	movne.w	r0, #4294967295
 800023e:	f000 b9b5 	b.w	80005ac <__aeabi_idiv0>
 8000242:	f1ad 0c08 	sub.w	ip, sp, #8
 8000246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024a:	2900      	cmp	r1, #0
 800024c:	db09      	blt.n	8000262 <__aeabi_ldivmod+0x42>
 800024e:	2b00      	cmp	r3, #0
 8000250:	db1a      	blt.n	8000288 <__aeabi_ldivmod+0x68>
 8000252:	f000 f84d 	bl	80002f0 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	db1b      	blt.n	80002a4 <__aeabi_ldivmod+0x84>
 800026c:	f000 f840 	bl	80002f0 <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	4770      	bx	lr
 8000288:	4252      	negs	r2, r2
 800028a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028e:	f000 f82f 	bl	80002f0 <__udivmoddi4>
 8000292:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029a:	b004      	add	sp, #16
 800029c:	4240      	negs	r0, r0
 800029e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a2:	4770      	bx	lr
 80002a4:	4252      	negs	r2, r2
 80002a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002aa:	f000 f821 	bl	80002f0 <__udivmoddi4>
 80002ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b6:	b004      	add	sp, #16
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d013      	beq.n	80005f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	e000      	b.n	80005dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800060a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800060e:	f023 0218 	bic.w	r2, r3, #24
 8000612:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4313      	orrs	r3, r2
 800061a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800062a:	b480      	push	{r7}
 800062c:	b085      	sub	sp, #20
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000636:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000638:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4313      	orrs	r3, r2
 8000640:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000646:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4013      	ands	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	e009      	b.n	8000682 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	60ba      	str	r2, [r7, #8]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff9a 	bl	80005b0 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	3301      	adds	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	697a      	ldr	r2, [r7, #20]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	429a      	cmp	r2, r3
 8000688:	dbf1      	blt.n	800066e <_write+0x12>
}
return len;
 800068a:	687b      	ldr	r3, [r7, #4]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <print_result>:

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	ed2d 8b02 	vpush	{d8}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	e096      	b.n	80007d4 <print_result+0x140>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 80006a6:	7bfa      	ldrb	r2, [r7, #15]
 80006a8:	6879      	ldr	r1, [r7, #4]
 80006aa:	4613      	mov	r3, r2
 80006ac:	011b      	lsls	r3, r3, #4
 80006ae:	4413      	add	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	440b      	add	r3, r1
 80006b4:	3304      	adds	r3, #4
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	484d      	ldr	r0, [pc, #308]	@ (80007f0 <print_result+0x15c>)
 80006bc:	f019 f8f6 	bl	80198ac <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	73bb      	strb	r3, [r7, #14]
 80006c4:	e076      	b.n	80007b4 <print_result+0x120>
    {
      printf("\n |---> ");
 80006c6:	484b      	ldr	r0, [pc, #300]	@ (80007f4 <print_result+0x160>)
 80006c8:	f019 f8f0 	bl	80198ac <iprintf>

      printf("Status = %ld, Distance = %5ld mm ",
             (long)Result->ZoneResult[i].Status[j],
 80006cc:	7bfa      	ldrb	r2, [r7, #15]
 80006ce:	7bb8      	ldrb	r0, [r7, #14]
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	4613      	mov	r3, r2
 80006d4:	011b      	lsls	r3, r3, #4
 80006d6:	4413      	add	r3, r2
 80006d8:	4403      	add	r3, r0
 80006da:	3304      	adds	r3, #4
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	440b      	add	r3, r1
 80006e0:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80006e2:	461c      	mov	r4, r3
             (long)Result->ZoneResult[i].Distance[j]);
 80006e4:	7bfa      	ldrb	r2, [r7, #15]
 80006e6:	7bb8      	ldrb	r0, [r7, #14]
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	4613      	mov	r3, r2
 80006ec:	011b      	lsls	r3, r3, #4
 80006ee:	4413      	add	r3, r2
 80006f0:	4403      	add	r3, r0
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	440b      	add	r3, r1
 80006f6:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80006f8:	461a      	mov	r2, r3
 80006fa:	4621      	mov	r1, r4
 80006fc:	483e      	ldr	r0, [pc, #248]	@ (80007f8 <print_result+0x164>)
 80006fe:	f019 f8d5 	bl	80198ac <iprintf>

      if (Profile.EnableAmbient)
 8000702:	4b3e      	ldr	r3, [pc, #248]	@ (80007fc <print_result+0x168>)
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d026      	beq.n	8000758 <print_result+0xc4>
        printf(", Ambient = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Ambient[j],
 800070a:	7bfa      	ldrb	r2, [r7, #15]
 800070c:	7bb8      	ldrb	r0, [r7, #14]
 800070e:	6879      	ldr	r1, [r7, #4]
 8000710:	4613      	mov	r3, r2
 8000712:	011b      	lsls	r3, r3, #4
 8000714:	4413      	add	r3, r2
 8000716:	4403      	add	r3, r0
 8000718:	3308      	adds	r3, #8
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	440b      	add	r3, r1
 800071e:	3308      	adds	r3, #8
 8000720:	edd3 7a00 	vldr	s15, [r3]
        printf(", Ambient = %ld.%02ld kcps/spad",
 8000724:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Ambient[j]));
 8000728:	7bfa      	ldrb	r2, [r7, #15]
 800072a:	7bb8      	ldrb	r0, [r7, #14]
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	4413      	add	r3, r2
 8000734:	4403      	add	r3, r0
 8000736:	3308      	adds	r3, #8
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	440b      	add	r3, r1
 800073c:	3308      	adds	r3, #8
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	eeb0 0a67 	vmov.f32	s0, s15
 8000746:	f000 f85f 	bl	8000808 <decimal_part>
 800074a:	4603      	mov	r3, r0
        printf(", Ambient = %ld.%02ld kcps/spad",
 800074c:	461a      	mov	r2, r3
 800074e:	ee18 1a10 	vmov	r1, s16
 8000752:	482b      	ldr	r0, [pc, #172]	@ (8000800 <print_result+0x16c>)
 8000754:	f019 f8aa 	bl	80198ac <iprintf>

      if (Profile.EnableSignal)
 8000758:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <print_result+0x168>)
 800075a:	691b      	ldr	r3, [r3, #16]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d026      	beq.n	80007ae <print_result+0x11a>
        printf(", Signal = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Signal[j],
 8000760:	7bfa      	ldrb	r2, [r7, #15]
 8000762:	7bb8      	ldrb	r0, [r7, #14]
 8000764:	6879      	ldr	r1, [r7, #4]
 8000766:	4613      	mov	r3, r2
 8000768:	011b      	lsls	r3, r3, #4
 800076a:	4413      	add	r3, r2
 800076c:	4403      	add	r3, r0
 800076e:	330c      	adds	r3, #12
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	440b      	add	r3, r1
 8000774:	3308      	adds	r3, #8
 8000776:	edd3 7a00 	vldr	s15, [r3]
        printf(", Signal = %ld.%02ld kcps/spad",
 800077a:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Signal[j]));
 800077e:	7bfa      	ldrb	r2, [r7, #15]
 8000780:	7bb8      	ldrb	r0, [r7, #14]
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	4613      	mov	r3, r2
 8000786:	011b      	lsls	r3, r3, #4
 8000788:	4413      	add	r3, r2
 800078a:	4403      	add	r3, r0
 800078c:	330c      	adds	r3, #12
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	440b      	add	r3, r1
 8000792:	3308      	adds	r3, #8
 8000794:	edd3 7a00 	vldr	s15, [r3]
 8000798:	eeb0 0a67 	vmov.f32	s0, s15
 800079c:	f000 f834 	bl	8000808 <decimal_part>
 80007a0:	4603      	mov	r3, r0
        printf(", Signal = %ld.%02ld kcps/spad",
 80007a2:	461a      	mov	r2, r3
 80007a4:	ee18 1a10 	vmov	r1, s16
 80007a8:	4816      	ldr	r0, [pc, #88]	@ (8000804 <print_result+0x170>)
 80007aa:	f019 f87f 	bl	80198ac <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	3301      	adds	r3, #1
 80007b2:	73bb      	strb	r3, [r7, #14]
 80007b4:	7bb9      	ldrb	r1, [r7, #14]
 80007b6:	7bfa      	ldrb	r2, [r7, #15]
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	4413      	add	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4403      	add	r3, r0
 80007c4:	3304      	adds	r3, #4
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4299      	cmp	r1, r3
 80007ca:	f4ff af7c 	bcc.w	80006c6 <print_result+0x32>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	3301      	adds	r3, #1
 80007d2:	73fb      	strb	r3, [r7, #15]
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	f43f af65 	beq.w	80006a6 <print_result+0x12>
    }
  }
  printf("\n");
 80007dc:	200a      	movs	r0, #10
 80007de:	f019 f877 	bl	80198d0 <putchar>
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	ecbd 8b02 	vpop	{d8}
 80007ec:	bd90      	pop	{r4, r7, pc}
 80007ee:	bf00      	nop
 80007f0:	0801a808 	.word	0x0801a808
 80007f4:	0801a818 	.word	0x0801a818
 80007f8:	0801a824 	.word	0x0801a824
 80007fc:	20000948 	.word	0x20000948
 8000800:	0801a848 	.word	0x0801a848
 8000804:	0801a868 	.word	0x0801a868

08000808 <decimal_part>:
static int32_t decimal_part(float_t x)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t int_part = (int32_t) x;
 8000812:	edd7 7a01 	vldr	s15, [r7, #4]
 8000816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800081a:	ee17 3a90 	vmov	r3, s15
 800081e:	60fb      	str	r3, [r7, #12]
  return (int32_t)((x - int_part) * 100);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	ee07 3a90 	vmov	s15, r3
 8000826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800082a:	ed97 7a01 	vldr	s14, [r7, #4]
 800082e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000832:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000850 <decimal_part+0x48>
 8000836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800083a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800083e:	ee17 3a90 	vmov	r3, s15
}
 8000842:	4618      	mov	r0, r3
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	42c80000 	.word	0x42c80000

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000858:	f011 fd3e 	bl	80122d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085c:	f000 f8a0 	bl	80009a0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000860:	f000 f914 	bl	8000a8c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000864:	f000 f9a6 	bl	8000bb4 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000868:	f000 f97c 	bl	8000b64 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 800086c:	f000 f92c 	bl	8000ac8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  status = VL53L4A2_RANGING_SENSOR_Init(VL53L4A2_DEV_CENTER);
 8000870:	2001      	movs	r0, #1
 8000872:	f000 fea8 	bl	80015c6 <VL53L4A2_RANGING_SENSOR_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	4a36      	ldr	r2, [pc, #216]	@ (8000954 <main+0x100>)
 800087a:	6013      	str	r3, [r2, #0]
  if (status != BSP_ERROR_NONE)
 800087c:	4b35      	ldr	r3, [pc, #212]	@ (8000954 <main+0x100>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d004      	beq.n	800088e <main+0x3a>
    {
      printf("VL53L4A2_RANGING_SENSOR_Init failed\n");
 8000884:	4834      	ldr	r0, [pc, #208]	@ (8000958 <main+0x104>)
 8000886:	f019 f881 	bl	801998c <puts>
      Error_Handler();
 800088a:	f000 fa4f 	bl	8000d2c <Error_Handler>
    }
  Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 800088e:	4b33      	ldr	r3, [pc, #204]	@ (800095c <main+0x108>)
 8000890:	2202      	movs	r2, #2
 8000892:	601a      	str	r2, [r3, #0]
    Profile.TimingBudget = TIMING_BUDGET;
 8000894:	4b31      	ldr	r3, [pc, #196]	@ (800095c <main+0x108>)
 8000896:	221e      	movs	r2, #30
 8000898:	605a      	str	r2, [r3, #4]
    Profile.Frequency = 0; /* Induces intermeasurement period, NOT USED for normal ranging */
 800089a:	4b30      	ldr	r3, [pc, #192]	@ (800095c <main+0x108>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
    Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 80008a0:	4b2e      	ldr	r3, [pc, #184]	@ (800095c <main+0x108>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	60da      	str	r2, [r3, #12]
    Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 80008a6:	4b2d      	ldr	r3, [pc, #180]	@ (800095c <main+0x108>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	611a      	str	r2, [r3, #16]
    status = VL53L4A2_RANGING_SENSOR_ConfigProfile(VL53L4A2_DEV_CENTER, &Profile);
 80008ac:	492b      	ldr	r1, [pc, #172]	@ (800095c <main+0x108>)
 80008ae:	2001      	movs	r0, #1
 80008b0:	f000 fe9e 	bl	80015f0 <VL53L4A2_RANGING_SENSOR_ConfigProfile>
 80008b4:	4603      	mov	r3, r0
 80008b6:	4a27      	ldr	r2, [pc, #156]	@ (8000954 <main+0x100>)
 80008b8:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 80008ba:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <main+0x100>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d008      	beq.n	80008d4 <main+0x80>
    {
        printf("VL53L4A2_RANGING_SENSOR_ConfigProfile failed with status %ld\n", status);
 80008c2:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <main+0x100>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4619      	mov	r1, r3
 80008c8:	4825      	ldr	r0, [pc, #148]	@ (8000960 <main+0x10c>)
 80008ca:	f018 ffef 	bl	80198ac <iprintf>
        Error_Handler();
 80008ce:	f000 fa2d 	bl	8000d2c <Error_Handler>
 80008d2:	e002      	b.n	80008da <main+0x86>
    }
    else
    {
        printf("VL53L4A2_RANGING_SENSOR_ConfigProfile succeeded\n");
 80008d4:	4823      	ldr	r0, [pc, #140]	@ (8000964 <main+0x110>)
 80008d6:	f019 f859 	bl	801998c <puts>
    }
    status = VL53L4A2_RANGING_SENSOR_Start(VL53L4A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 80008da:	2101      	movs	r1, #1
 80008dc:	2001      	movs	r0, #1
 80008de:	f000 fed7 	bl	8001690 <VL53L4A2_RANGING_SENSOR_Start>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000954 <main+0x100>)
 80008e6:	6013      	str	r3, [r2, #0]

      if (status != BSP_ERROR_NONE)
 80008e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <main+0x100>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d004      	beq.n	80008fa <main+0xa6>
      {
        printf("VL53L4A2_RANGING_SENSOR_Start failed\n");
 80008f0:	481d      	ldr	r0, [pc, #116]	@ (8000968 <main+0x114>)
 80008f2:	f019 f84b 	bl	801998c <puts>
        while (1);
 80008f6:	bf00      	nop
 80008f8:	e7fd      	b.n	80008f6 <main+0xa2>
      }
      //VL53L4A2_RANGING_SENSOR_OffsetCalibration(VL53L4A2_DEV_CENTER, 100);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008fa:	f015 fea3 	bl	8016644 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80008fe:	481b      	ldr	r0, [pc, #108]	@ (800096c <main+0x118>)
 8000900:	f015 ff97 	bl	8016832 <osMutexNew>
 8000904:	4603      	mov	r3, r0
 8000906:	4a1a      	ldr	r2, [pc, #104]	@ (8000970 <main+0x11c>)
 8000908:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ToFData_Queue */
  ToFData_QueueHandle = osMessageQueueNew (16, sizeof(RANGING_SENSOR_Result_t), &ToFData_Queue_attributes);
 800090a:	4a1a      	ldr	r2, [pc, #104]	@ (8000974 <main+0x120>)
 800090c:	2148      	movs	r1, #72	@ 0x48
 800090e:	2010      	movs	r0, #16
 8000910:	f016 f815 	bl	801693e <osMessageQueueNew>
 8000914:	4603      	mov	r3, r0
 8000916:	4a18      	ldr	r2, [pc, #96]	@ (8000978 <main+0x124>)
 8000918:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800091a:	4a18      	ldr	r2, [pc, #96]	@ (800097c <main+0x128>)
 800091c:	2100      	movs	r1, #0
 800091e:	4818      	ldr	r0, [pc, #96]	@ (8000980 <main+0x12c>)
 8000920:	f015 feda 	bl	80166d8 <osThreadNew>
 8000924:	4603      	mov	r3, r0
 8000926:	4a17      	ldr	r2, [pc, #92]	@ (8000984 <main+0x130>)
 8000928:	6013      	str	r3, [r2, #0]

  /* creation of Ack_ToF_Data */
  Ack_ToF_DataHandle = osThreadNew(StartAck_ToF_Data, NULL, &Ack_ToF_Data_attributes);
 800092a:	4a17      	ldr	r2, [pc, #92]	@ (8000988 <main+0x134>)
 800092c:	2100      	movs	r1, #0
 800092e:	4817      	ldr	r0, [pc, #92]	@ (800098c <main+0x138>)
 8000930:	f015 fed2 	bl	80166d8 <osThreadNew>
 8000934:	4603      	mov	r3, r0
 8000936:	4a16      	ldr	r2, [pc, #88]	@ (8000990 <main+0x13c>)
 8000938:	6013      	str	r3, [r2, #0]

  /* creation of SendData */
  SendDataHandle = osThreadNew(StartSendData, NULL, &SendData_attributes);
 800093a:	4a16      	ldr	r2, [pc, #88]	@ (8000994 <main+0x140>)
 800093c:	2100      	movs	r1, #0
 800093e:	4816      	ldr	r0, [pc, #88]	@ (8000998 <main+0x144>)
 8000940:	f015 feca 	bl	80166d8 <osThreadNew>
 8000944:	4603      	mov	r3, r0
 8000946:	4a15      	ldr	r2, [pc, #84]	@ (800099c <main+0x148>)
 8000948:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800094a:	f015 fe9f 	bl	801668c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800094e:	bf00      	nop
 8000950:	e7fd      	b.n	800094e <main+0xfa>
 8000952:	bf00      	nop
 8000954:	200009a4 	.word	0x200009a4
 8000958:	0801a888 	.word	0x0801a888
 800095c:	20000948 	.word	0x20000948
 8000960:	0801a8ac 	.word	0x0801a8ac
 8000964:	0801a8ec 	.word	0x0801a8ec
 8000968:	0801a91c 	.word	0x0801a91c
 800096c:	0801aa18 	.word	0x0801aa18
 8000970:	20000944 	.word	0x20000944
 8000974:	0801aa00 	.word	0x0801aa00
 8000978:	20000470 	.word	0x20000470
 800097c:	0801a994 	.word	0x0801a994
 8000980:	08000c81 	.word	0x08000c81
 8000984:	20000464 	.word	0x20000464
 8000988:	0801a9b8 	.word	0x0801a9b8
 800098c:	08000c91 	.word	0x08000c91
 8000990:	20000468 	.word	0x20000468
 8000994:	0801a9dc 	.word	0x0801a9dc
 8000998:	08000cd9 	.word	0x08000cd9
 800099c:	2000046c 	.word	0x2000046c

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b09a      	sub	sp, #104	@ 0x68
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0320 	add.w	r3, r7, #32
 80009aa:	2248      	movs	r2, #72	@ 0x48
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f019 f8cc 	bl	8019b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
 80009c2:	615a      	str	r2, [r3, #20]
 80009c4:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80009c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80009d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80009d4:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80009d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	f023 0303 	bic.w	r3, r3, #3
 80009e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009ea:	f012 ff67 	bl	80138bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff fe05 	bl	80005fe <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f4:	4b24      	ldr	r3, [pc, #144]	@ (8000a88 <SystemClock_Config+0xe8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80009fc:	4a22      	ldr	r2, [pc, #136]	@ (8000a88 <SystemClock_Config+0xe8>)
 80009fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a02:	6013      	str	r3, [r2, #0]
 8000a04:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <SystemClock_Config+0xe8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000a10:	2327      	movs	r3, #39	@ 0x27
 8000a12:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a28:	2340      	movs	r3, #64	@ 0x40
 8000a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a30:	2360      	movs	r3, #96	@ 0x60
 8000a32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a38:	f107 0320 	add.w	r3, r7, #32
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f013 fadd 	bl	8013ffc <HAL_RCC_OscConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a48:	f000 f970 	bl	8000d2c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000a4c:	236f      	movs	r3, #111	@ 0x6f
 8000a4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a50:	2302      	movs	r3, #2
 8000a52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f013 fe39 	bl	80146e4 <HAL_RCC_ClockConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000a78:	f000 f958 	bl	8000d2c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a7c:	f014 fc26 	bl	80152cc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a80:	bf00      	nop
 8000a82:	3768      	adds	r7, #104	@ 0x68
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	58000400 	.word	0x58000400

08000a8c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	@ 0x50
 8000a90:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a92:	463b      	mov	r3, r7
 8000a94:	2250      	movs	r2, #80	@ 0x50
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f019 f857 	bl	8019b4c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aac:	463b      	mov	r3, r7
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f014 fa96 	bl	8014fe0 <HAL_RCCEx_PeriphCLKConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000aba:	f000 f937 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000abe:	bf00      	nop
 8000ac0:	3750      	adds	r7, #80	@ 0x50
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000acc:	4b23      	ldr	r3, [pc, #140]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000ace:	4a24      	ldr	r2, [pc, #144]	@ (8000b60 <MX_USART1_UART_Init+0x98>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ad2:	4b22      	ldr	r3, [pc, #136]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000ada:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000adc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ae0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000af0:	220c      	movs	r2, #12
 8000af2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af4:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afa:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b00:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0c:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b12:	4812      	ldr	r0, [pc, #72]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000b14:	f014 ff7e 	bl	8015a14 <HAL_UART_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000b1e:	f000 f905 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b22:	2100      	movs	r1, #0
 8000b24:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000b26:	f015 fc45 	bl	80163b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000b30:	f000 f8fc 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b34:	2100      	movs	r1, #0
 8000b36:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000b38:	f015 fc7a 	bl	8016430 <HAL_UARTEx_SetRxFifoThreshold>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000b42:	f000 f8f3 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000b48:	f015 fbfb 	bl	8016342 <HAL_UARTEx_DisableFifoMode>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000b52:	f000 f8eb 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200000f4 	.word	0x200000f4
 8000b60:	40013800 	.word	0x40013800

08000b64 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000b68:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <MX_USB_PCD_Init+0x48>)
 8000b6a:	4a11      	ldr	r2, [pc, #68]	@ (8000bb0 <MX_USB_PCD_Init+0x4c>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <MX_USB_PCD_Init+0x48>)
 8000b70:	2208      	movs	r2, #8
 8000b72:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b74:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <MX_USB_PCD_Init+0x48>)
 8000b76:	2202      	movs	r2, #2
 8000b78:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <MX_USB_PCD_Init+0x48>)
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <MX_USB_PCD_Init+0x48>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b86:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <MX_USB_PCD_Init+0x48>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <MX_USB_PCD_Init+0x48>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b92:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <MX_USB_PCD_Init+0x48>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	@ (8000bac <MX_USB_PCD_Init+0x48>)
 8000b9a:	f012 fd96 	bl	80136ca <HAL_PCD_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ba4:	f000 f8c2 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000188 	.word	0x20000188
 8000bb0:	40006800 	.word	0x40006800

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc8:	2004      	movs	r0, #4
 8000bca:	f7ff fd2e 	bl	800062a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f7ff fd2b 	bl	800062a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff fd28 	bl	800062a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	2008      	movs	r0, #8
 8000bdc:	f7ff fd25 	bl	800062a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2123      	movs	r1, #35	@ 0x23
 8000be4:	4823      	ldr	r0, [pc, #140]	@ (8000c74 <MX_GPIO_Init+0xc0>)
 8000be6:	f011 fef1 	bl	80129cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bea:	2310      	movs	r3, #16
 8000bec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481e      	ldr	r0, [pc, #120]	@ (8000c78 <MX_GPIO_Init+0xc4>)
 8000bfe:	f011 fc97 	bl	8012530 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000c02:	2323      	movs	r3, #35	@ 0x23
 8000c04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4817      	ldr	r0, [pc, #92]	@ (8000c74 <MX_GPIO_Init+0xc0>)
 8000c18:	f011 fc8a 	bl	8012530 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c20:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4813      	ldr	r0, [pc, #76]	@ (8000c7c <MX_GPIO_Init+0xc8>)
 8000c30:	f011 fc7e 	bl	8012530 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000c34:	2302      	movs	r3, #2
 8000c36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	4619      	mov	r1, r3
 8000c44:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <MX_GPIO_Init+0xc8>)
 8000c46:	f011 fc73 	bl	8012530 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2105      	movs	r1, #5
 8000c4e:	2006      	movs	r0, #6
 8000c50:	f011 fc46 	bl	80124e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c54:	2006      	movs	r0, #6
 8000c56:	f011 fc5d 	bl	8012514 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2105      	movs	r1, #5
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f011 fc3e 	bl	80124e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c64:	200a      	movs	r0, #10
 8000c66:	f011 fc55 	bl	8012514 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	48000400 	.word	0x48000400
 8000c78:	48000800 	.word	0x48000800
 8000c7c:	48000c00 	.word	0x48000c00

08000c80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f015 fdb7 	bl	80167fc <osDelay>
 8000c8e:	e7fb      	b.n	8000c88 <StartDefaultTask+0x8>

08000c90 <StartAck_ToF_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAck_ToF_Data */
void StartAck_ToF_Data(void *argument)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAck_ToF_Data */
  /* Infinite loop */
  for(;;)
  {
	  status = VL53L4A2_RANGING_SENSOR_GetDistance(VL53L4A2_DEV_CENTER, &Result);
 8000c98:	490c      	ldr	r1, [pc, #48]	@ (8000ccc <StartAck_ToF_Data+0x3c>)
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 fcd0 	bl	8001640 <VL53L4A2_RANGING_SENSOR_GetDistance>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd0 <StartAck_ToF_Data+0x40>)
 8000ca4:	6013      	str	r3, [r2, #0]
	      if (status == BSP_ERROR_NONE)
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <StartAck_ToF_Data+0x40>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10a      	bne.n	8000cc4 <StartAck_ToF_Data+0x34>
	      {

	    	  print_result(&Result);
 8000cae:	4807      	ldr	r0, [pc, #28]	@ (8000ccc <StartAck_ToF_Data+0x3c>)
 8000cb0:	f7ff fcf0 	bl	8000694 <print_result>
	        osMessageQueuePut(ToFData_QueueHandle, &Result, 1, osWaitForever);
 8000cb4:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <StartAck_ToF_Data+0x44>)
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4903      	ldr	r1, [pc, #12]	@ (8000ccc <StartAck_ToF_Data+0x3c>)
 8000cc0:	f015 feb0 	bl	8016a24 <osMessageQueuePut>
	      }
	      osDelay(POLLING_PERIOD);
 8000cc4:	20fa      	movs	r0, #250	@ 0xfa
 8000cc6:	f015 fd99 	bl	80167fc <osDelay>
	  status = VL53L4A2_RANGING_SENSOR_GetDistance(VL53L4A2_DEV_CENTER, &Result);
 8000cca:	e7e5      	b.n	8000c98 <StartAck_ToF_Data+0x8>
 8000ccc:	2000095c 	.word	0x2000095c
 8000cd0:	200009a4 	.word	0x200009a4
 8000cd4:	20000470 	.word	0x20000470

08000cd8 <StartSendData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendData */
void StartSendData(void *argument)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //osMutexAcquire(myMutex01Handle, osWaitForever);

	  osMessageQueueGet(ToFData_QueueHandle, &result, 1, osWaitForever);
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <StartSendData+0x28>)
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4906      	ldr	r1, [pc, #24]	@ (8000d04 <StartSendData+0x2c>)
 8000cec:	f015 fefa 	bl	8016ae4 <osMessageQueueGet>
	  print_result(&result);
 8000cf0:	4804      	ldr	r0, [pc, #16]	@ (8000d04 <StartSendData+0x2c>)
 8000cf2:	f7ff fccf 	bl	8000694 <print_result>

	   //osMutexRelease(myMutex01Handle);
    osDelay(1);
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f015 fd80 	bl	80167fc <osDelay>
	  osMessageQueueGet(ToFData_QueueHandle, &result, 1, osWaitForever);
 8000cfc:	bf00      	nop
 8000cfe:	e7ef      	b.n	8000ce0 <StartSendData+0x8>
 8000d00:	20000470 	.word	0x20000470
 8000d04:	200009a8 	.word	0x200009a8

08000d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1a:	f011 fafd 	bl	8012318 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40014800 	.word	0x40014800

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <Error_Handler+0x8>

08000d38 <LL_AHB2_GRP1_EnableClock>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000da4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000da8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000daa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000db8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	210f      	movs	r1, #15
 8000dd6:	f06f 0001 	mvn.w	r0, #1
 8000dda:	f011 fb81 	bl	80124e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b09c      	sub	sp, #112	@ 0x70
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2250      	movs	r2, #80	@ 0x50
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f018 fea1 	bl	8019b4c <memset>
  if(huart->Instance==USART1)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a16      	ldr	r2, [pc, #88]	@ (8000e68 <HAL_UART_MspInit+0x84>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d124      	bne.n	8000e5e <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4618      	mov	r0, r3
 8000e22:	f014 f8dd 	bl	8014fe0 <HAL_RCCEx_PeriphCLKConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e2c:	f7ff ff7e 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e30:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e34:	f7ff ffb2 	bl	8000d9c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f7ff ff7d 	bl	8000d38 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e3e:	23c0      	movs	r3, #192	@ 0xc0
 8000e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e4e:	2307      	movs	r3, #7
 8000e50:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e56:	4619      	mov	r1, r3
 8000e58:	4804      	ldr	r0, [pc, #16]	@ (8000e6c <HAL_UART_MspInit+0x88>)
 8000e5a:	f011 fb69 	bl	8012530 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e5e:	bf00      	nop
 8000e60:	3770      	adds	r7, #112	@ 0x70
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40013800 	.word	0x40013800
 8000e6c:	48000400 	.word	0x48000400

08000e70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b09c      	sub	sp, #112	@ 0x70
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2250      	movs	r2, #80	@ 0x50
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f018 fe5b 	bl	8019b4c <memset>
  if(hpcd->Instance==USB)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f18 <HAL_PCD_MspInit+0xa8>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d136      	bne.n	8000f0e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ea0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000ea6:	2318      	movs	r3, #24
 8000ea8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000eaa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eae:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000eb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000eb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000eb6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000eba:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000ebc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ec0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000ec2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000ec6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f014 f887 	bl	8014fe0 <HAL_RCCEx_PeriphCLKConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000ed8:	f7ff ff28 	bl	8000d2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	2001      	movs	r0, #1
 8000ede:	f7ff ff2b 	bl	8000d38 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ee2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f02:	f011 fb15 	bl	8012530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f06:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000f0a:	f7ff ff2e 	bl	8000d6a <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000f0e:	bf00      	nop
 8000f10:	3770      	adds	r7, #112	@ 0x70
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40006800 	.word	0x40006800

08000f1c <LL_APB2_GRP1_EnableClock>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f40:	68fb      	ldr	r3, [r7, #12]
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	@ 0x30
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	201a      	movs	r0, #26
 8000f66:	f011 fabb 	bl	80124e0 <HAL_NVIC_SetPriority>
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000f6a:	201a      	movs	r0, #26
 8000f6c:	f011 fad2 	bl	8012514 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000f70:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000f74:	f7ff ffd2 	bl	8000f1c <LL_APB2_GRP1_EnableClock>
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f78:	f107 0208 	add.w	r2, r7, #8
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f013 fd9a 	bl	8014abc <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f88:	f013 fd82 	bl	8014a90 <HAL_RCC_GetPCLK2Freq>
 8000f8c:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f90:	4a12      	ldr	r2, [pc, #72]	@ (8000fdc <HAL_InitTick+0x8c>)
 8000f92:	fba2 2303 	umull	r2, r3, r2, r3
 8000f96:	0c9b      	lsrs	r3, r3, #18
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <HAL_InitTick+0x90>)
 8000f9e:	4a11      	ldr	r2, [pc, #68]	@ (8000fe4 <HAL_InitTick+0x94>)
 8000fa0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <HAL_InitTick+0x90>)
 8000fa4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fa8:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000faa:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe0 <HAL_InitTick+0x90>)
 8000fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fae:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <HAL_InitTick+0x90>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <HAL_InitTick+0x90>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000fbc:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <HAL_InitTick+0x90>)
 8000fbe:	f014 fa9c 	bl	80154fa <HAL_TIM_Base_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d104      	bne.n	8000fd2 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000fc8:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <HAL_InitTick+0x90>)
 8000fca:	f014 faf7 	bl	80155bc <HAL_TIM_Base_Start_IT>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3730      	adds	r7, #48	@ 0x30
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	431bde83 	.word	0x431bde83
 8000fe0:	200009f0 	.word	0x200009f0
 8000fe4:	40014800 	.word	0x40014800

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <NMI_Handler+0x4>

08000ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <MemManage_Handler+0x4>

08001000 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <UsageFault_Handler+0x4>

08001010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8001022:	2001      	movs	r0, #1
 8001024:	f011 fcea 	bl	80129fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001030:	2010      	movs	r0, #16
 8001032:	f011 fce3 	bl	80129fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001042:	f014 fb09 	bl	8015658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200009f0 	.word	0x200009f0

08001050 <LL_AHB2_GRP1_EnableClock>:
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800105c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800105e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4313      	orrs	r3, r2
 8001066:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800106c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4013      	ands	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001074:	68fb      	ldr	r3, [r7, #12]
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_APB1_GRP1_EnableClock>:
{
 8001082:	b480      	push	{r7}
 8001084:	b085      	sub	sp, #20
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800108a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800108e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001090:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4313      	orrs	r3, r2
 8001098:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800109a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800109e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4013      	ands	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_APB1_GRP1_DisableClock>:
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80010bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010ca:	4013      	ands	r3, r2
 80010cc:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80010e6:	4b19      	ldr	r3, [pc, #100]	@ (800114c <BSP_I2C1_Init+0x70>)
 80010e8:	4a19      	ldr	r2, [pc, #100]	@ (8001150 <BSP_I2C1_Init+0x74>)
 80010ea:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <BSP_I2C1_Init+0x78>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	4918      	ldr	r1, [pc, #96]	@ (8001154 <BSP_I2C1_Init+0x78>)
 80010f4:	600a      	str	r2, [r1, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d122      	bne.n	8001140 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80010fa:	4814      	ldr	r0, [pc, #80]	@ (800114c <BSP_I2C1_Init+0x70>)
 80010fc:	f011 ff8e 	bl	801301c <HAL_I2C_GetState>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d11c      	bne.n	8001140 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001106:	4811      	ldr	r0, [pc, #68]	@ (800114c <BSP_I2C1_Init+0x70>)
 8001108:	f000 f8ee 	bl	80012e8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d116      	bne.n	8001140 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001112:	480e      	ldr	r0, [pc, #56]	@ (800114c <BSP_I2C1_Init+0x70>)
 8001114:	f000 f8a4 	bl	8001260 <MX_I2C1_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800111e:	f06f 0307 	mvn.w	r3, #7
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	e00c      	b.n	8001140 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001126:	2100      	movs	r1, #0
 8001128:	4808      	ldr	r0, [pc, #32]	@ (800114c <BSP_I2C1_Init+0x70>)
 800112a:	f012 fa37 	bl	801359c <HAL_I2CEx_ConfigAnalogFilter>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001134:	f06f 0307 	mvn.w	r3, #7
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	e001      	b.n	8001140 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001140:	687b      	ldr	r3, [r7, #4]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000a3c 	.word	0x20000a3c
 8001150:	40005400 	.word	0x40005400
 8001154:	20000a90 	.word	0x20000a90

08001158 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001162:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <BSP_I2C1_DeInit+0x48>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d014      	beq.n	8001194 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800116a:	4b0d      	ldr	r3, [pc, #52]	@ (80011a0 <BSP_I2C1_DeInit+0x48>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	3b01      	subs	r3, #1
 8001170:	4a0b      	ldr	r2, [pc, #44]	@ (80011a0 <BSP_I2C1_DeInit+0x48>)
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <BSP_I2C1_DeInit+0x48>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10b      	bne.n	8001194 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800117c:	4809      	ldr	r0, [pc, #36]	@ (80011a4 <BSP_I2C1_DeInit+0x4c>)
 800117e:	f000 f8f7 	bl	8001370 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001182:	4808      	ldr	r0, [pc, #32]	@ (80011a4 <BSP_I2C1_DeInit+0x4c>)
 8001184:	f011 fcf8 	bl	8012b78 <HAL_I2C_DeInit>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800118e:	f06f 0307 	mvn.w	r3, #7
 8001192:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001194:	687b      	ldr	r3, [r7, #4]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000a90 	.word	0x20000a90
 80011a4:	20000a3c 	.word	0x20000a3c

080011a8 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	80fb      	strh	r3, [r7, #6]
 80011b4:	4613      	mov	r3, r2
 80011b6:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80011bc:	88bb      	ldrh	r3, [r7, #4]
 80011be:	88f9      	ldrh	r1, [r7, #6]
 80011c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011c4:	9200      	str	r2, [sp, #0]
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	480b      	ldr	r0, [pc, #44]	@ (80011f8 <BSP_I2C1_Send+0x50>)
 80011ca:	f011 fd19 	bl	8012c00 <HAL_I2C_Master_Transmit>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00c      	beq.n	80011ee <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80011d4:	4808      	ldr	r0, [pc, #32]	@ (80011f8 <BSP_I2C1_Send+0x50>)
 80011d6:	f011 ff2f 	bl	8013038 <HAL_I2C_GetError>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d003      	beq.n	80011e8 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80011e0:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	e002      	b.n	80011ee <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80011e8:	f06f 0303 	mvn.w	r3, #3
 80011ec:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000a3c 	.word	0x20000a3c

080011fc <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af02      	add	r7, sp, #8
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	80fb      	strh	r3, [r7, #6]
 8001208:	4613      	mov	r3, r2
 800120a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001210:	88bb      	ldrh	r3, [r7, #4]
 8001212:	88f9      	ldrh	r1, [r7, #6]
 8001214:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001218:	9200      	str	r2, [sp, #0]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	480b      	ldr	r0, [pc, #44]	@ (800124c <BSP_I2C1_Recv+0x50>)
 800121e:	f011 fe07 	bl	8012e30 <HAL_I2C_Master_Receive>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001228:	4808      	ldr	r0, [pc, #32]	@ (800124c <BSP_I2C1_Recv+0x50>)
 800122a:	f011 ff05 	bl	8013038 <HAL_I2C_GetError>
 800122e:	4603      	mov	r3, r0
 8001230:	2b04      	cmp	r3, #4
 8001232:	d003      	beq.n	800123c <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001234:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	e002      	b.n	8001242 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800123c:	f06f 0303 	mvn.w	r3, #3
 8001240:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000a3c 	.word	0x20000a3c

08001250 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001254:	f011 f874 	bl	8012340 <HAL_GetTick>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a1c      	ldr	r2, [pc, #112]	@ (80012e0 <MX_I2C1_Init+0x80>)
 8001270:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00B07CB4;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a1b      	ldr	r2, [pc, #108]	@ (80012e4 <MX_I2C1_Init+0x84>)
 8001276:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f011 fbcd 	bl	8012a42 <HAL_I2C_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f012 f971 	bl	801359c <HAL_I2CEx_ConfigAnalogFilter>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80012c4:	2100      	movs	r1, #0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f012 f9b3 	bl	8013632 <HAL_I2CEx_ConfigDigitalFilter>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40005400 	.word	0x40005400
 80012e4:	00b07cb4 	.word	0x00b07cb4

080012e8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b09c      	sub	sp, #112	@ 0x70
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	2250      	movs	r2, #80	@ 0x50
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f018 fc27 	bl	8019b4c <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012fe:	2304      	movs	r3, #4
 8001300:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001302:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4618      	mov	r0, r3
 800130e:	f013 fe67 	bl	8014fe0 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	2002      	movs	r0, #2
 8001314:	f7ff fe9c 	bl	8001050 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001318:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800131c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800131e:	2312      	movs	r3, #18
 8001320:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800132a:	2304      	movs	r3, #4
 800132c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800132e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001332:	4619      	mov	r1, r3
 8001334:	480d      	ldr	r0, [pc, #52]	@ (800136c <I2C1_MspInit+0x84>)
 8001336:	f011 f8fb 	bl	8012530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800133a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800133e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001340:	2312      	movs	r3, #18
 8001342:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800134c:	2304      	movs	r3, #4
 800134e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001350:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001354:	4619      	mov	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <I2C1_MspInit+0x84>)
 8001358:	f011 f8ea 	bl	8012530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800135c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001360:	f7ff fe8f 	bl	8001082 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001364:	bf00      	nop
 8001366:	3770      	adds	r7, #112	@ 0x70
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	48000400 	.word	0x48000400

08001370 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001378:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800137c:	f7ff fe9a 	bl	80010b4 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001380:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <I2C1_MspDeInit+0x2c>)
 8001386:	f011 fa43 	bl	8012810 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800138a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800138e:	4803      	ldr	r0, [pc, #12]	@ (800139c <I2C1_MspDeInit+0x2c>)
 8001390:	f011 fa3e 	bl	8012810 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	48000400 	.word	0x48000400

080013a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e00a      	b.n	80013c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013b2:	f3af 8000 	nop.w
 80013b6:	4601      	mov	r1, r0
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	60ba      	str	r2, [r7, #8]
 80013be:	b2ca      	uxtb	r2, r1
 80013c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf0      	blt.n	80013b2 <_read+0x12>
  }

  return len;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_close>:
  }
  return len;
}

int _close(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001402:	605a      	str	r2, [r3, #4]
  return 0;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_isatty>:

int _isatty(int file)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	@ (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001474:	f018 fc22 	bl	8019cbc <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20030000 	.word	0x20030000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	20000a94 	.word	0x20000a94
 80014ac:	2000a220 	.word	0x2000a220

080014b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80014b4:	4b24      	ldr	r3, [pc, #144]	@ (8001548 <SystemInit+0x98>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ba:	4a23      	ldr	r2, [pc, #140]	@ (8001548 <SystemInit+0x98>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80014d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014d8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80014dc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80014de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014e8:	4b18      	ldr	r3, [pc, #96]	@ (800154c <SystemInit+0x9c>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014fa:	f023 0305 	bic.w	r3, r3, #5
 80014fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001506:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800150a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800151a:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <SystemInit+0xa0>)
 800151c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800151e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001522:	4a0b      	ldr	r2, [pc, #44]	@ (8001550 <SystemInit+0xa0>)
 8001524:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001530:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001534:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00
 800154c:	faf6fefb 	.word	0xfaf6fefb
 8001550:	22041000 	.word	0x22041000

08001554 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001554:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001556:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001558:	3304      	adds	r3, #4

0800155a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800155e:	d3f9      	bcc.n	8001554 <CopyDataInit>
  bx lr
 8001560:	4770      	bx	lr

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001562:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001564:	3004      	adds	r0, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001566:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>
  bx lr
 800156a:	4770      	bx	lr

0800156c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800156c:	480c      	ldr	r0, [pc, #48]	@ (80015a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800156e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001570:	f7ff ff9e 	bl	80014b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001574:	480b      	ldr	r0, [pc, #44]	@ (80015a4 <LoopForever+0x6>)
 8001576:	490c      	ldr	r1, [pc, #48]	@ (80015a8 <LoopForever+0xa>)
 8001578:	4a0c      	ldr	r2, [pc, #48]	@ (80015ac <LoopForever+0xe>)
 800157a:	2300      	movs	r3, #0
 800157c:	f7ff ffed 	bl	800155a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001580:	480b      	ldr	r0, [pc, #44]	@ (80015b0 <LoopForever+0x12>)
 8001582:	490c      	ldr	r1, [pc, #48]	@ (80015b4 <LoopForever+0x16>)
 8001584:	4a0c      	ldr	r2, [pc, #48]	@ (80015b8 <LoopForever+0x1a>)
 8001586:	2300      	movs	r3, #0
 8001588:	f7ff ffe7 	bl	800155a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800158c:	480b      	ldr	r0, [pc, #44]	@ (80015bc <LoopForever+0x1e>)
 800158e:	490c      	ldr	r1, [pc, #48]	@ (80015c0 <LoopForever+0x22>)
 8001590:	2300      	movs	r3, #0
 8001592:	f7ff ffe8 	bl	8001566 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001596:	f018 fb97 	bl	8019cc8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800159a:	f7ff f95b 	bl	8000854 <main>

0800159e <LoopForever>:

LoopForever:
  b LoopForever
 800159e:	e7fe      	b.n	800159e <LoopForever>
  ldr   r0, =_estack
 80015a0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80015a4:	20000008 	.word	0x20000008
 80015a8:	200000d8 	.word	0x200000d8
 80015ac:	0801ab34 	.word	0x0801ab34
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80015b0:	20030000 	.word	0x20030000
 80015b4:	20030000 	.word	0x20030000
 80015b8:	0801ac04 	.word	0x0801ac04
  INIT_BSS _sbss, _ebss
 80015bc:	200000d8 	.word	0x200000d8
 80015c0:	2000a21c 	.word	0x2000a21c

080015c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015c4:	e7fe      	b.n	80015c4 <ADC1_IRQHandler>

080015c6 <VL53L4A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d903      	bls.n	80015dc <VL53L4A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015d4:	f06f 0301 	mvn.w	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e003      	b.n	80015e4 <VL53L4A2_RANGING_SENSOR_Init+0x1e>
  }
  else
  {
    ret = VL53L4CX_Probe(Instance);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f87f 	bl	80016e0 <VL53L4CX_Probe>
 80015e2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80015e4:	68fb      	ldr	r3, [r7, #12]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <VL53L4A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d903      	bls.n	8001608 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001600:	f06f 0301 	mvn.w	r3, #1
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e012      	b.n	800162e <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L4A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x48>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	490b      	ldr	r1, [pc, #44]	@ (800163c <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001616:	6839      	ldr	r1, [r7, #0]
 8001618:	4610      	mov	r0, r2
 800161a:	4798      	blx	r3
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	da03      	bge.n	800162a <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001622:	f06f 0304 	mvn.w	r3, #4
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	e001      	b.n	800162e <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000aa4 	.word	0x20000aa4
 800163c:	20000a98 	.word	0x20000a98

08001640 <VL53L4A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d903      	bls.n	8001658 <VL53L4A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001650:	f06f 0301 	mvn.w	r3, #1
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	e012      	b.n	800167e <VL53L4A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->GetDistance(VL53L4A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001658:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <VL53L4A2_RANGING_SENSOR_GetDistance+0x48>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	490b      	ldr	r1, [pc, #44]	@ (800168c <VL53L4A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	4610      	mov	r0, r2
 800166a:	4798      	blx	r3
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	da03      	bge.n	800167a <VL53L4A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001672:	f06f 0304 	mvn.w	r3, #4
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	e001      	b.n	800167e <VL53L4A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000aa4 	.word	0x20000aa4
 800168c:	20000a98 	.word	0x20000a98

08001690 <VL53L4A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d903      	bls.n	80016a8 <VL53L4A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016a0:	f06f 0301 	mvn.w	r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	e012      	b.n	80016ce <VL53L4A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->Start(VL53L4A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 80016a8:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <VL53L4A2_RANGING_SENSOR_Start+0x48>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	490b      	ldr	r1, [pc, #44]	@ (80016dc <VL53L4A2_RANGING_SENSOR_Start+0x4c>)
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016b6:	6839      	ldr	r1, [r7, #0]
 80016b8:	4610      	mov	r0, r2
 80016ba:	4798      	blx	r3
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	da03      	bge.n	80016ca <VL53L4A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80016c2:	f06f 0304 	mvn.w	r3, #4
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	e001      	b.n	80016ce <VL53L4A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000aa4 	.word	0x20000aa4
 80016dc:	20000a98 	.word	0x20000a98

080016e0 <VL53L4CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L4CX_Probe(uint32_t Instance)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	@ 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  VL53L4CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L4CX_Object_t   VL53L4CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L4CX_ADDRESS;
 80016e8:	2352      	movs	r3, #82	@ 0x52
 80016ea:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L4A2_I2C_INIT;
 80016ec:	4b38      	ldr	r3, [pc, #224]	@ (80017d0 <VL53L4CX_Probe+0xf0>)
 80016ee:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L4A2_I2C_DEINIT;
 80016f0:	4b38      	ldr	r3, [pc, #224]	@ (80017d4 <VL53L4CX_Probe+0xf4>)
 80016f2:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L4A2_I2C_WRITEREG;
 80016f4:	4b38      	ldr	r3, [pc, #224]	@ (80017d8 <VL53L4CX_Probe+0xf8>)
 80016f6:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L4A2_I2C_READREG;
 80016f8:	4b38      	ldr	r3, [pc, #224]	@ (80017dc <VL53L4CX_Probe+0xfc>)
 80016fa:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L4A2_GETTICK;
 80016fc:	4b38      	ldr	r3, [pc, #224]	@ (80017e0 <VL53L4CX_Probe+0x100>)
 80016fe:	623b      	str	r3, [r7, #32]

  if (VL53L4CX_RegisterBusIO(&(VL53L4CXObj[Instance]), &IOCtx) != VL53L4CX_OK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f242 42f0 	movw	r2, #9456	@ 0x24f0
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	4a36      	ldr	r2, [pc, #216]	@ (80017e4 <VL53L4CX_Probe+0x104>)
 800170c:	4413      	add	r3, r2
 800170e:	f107 020c 	add.w	r2, r7, #12
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f010 f9aa 	bl	8011a6e <VL53L4CX_RegisterBusIO>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <VL53L4CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001720:	f06f 0304 	mvn.w	r3, #4
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
 8001726:	e04d      	b.n	80017c4 <VL53L4CX_Probe+0xe4>
  }
  else
  {
    VL53L4A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L4CX_RANGING_SENSOR_Driver;
 8001728:	4b2f      	ldr	r3, [pc, #188]	@ (80017e8 <VL53L4CX_Probe+0x108>)
 800172a:	4a30      	ldr	r2, [pc, #192]	@ (80017ec <VL53L4CX_Probe+0x10c>)
 800172c:	601a      	str	r2, [r3, #0]
    VL53L4A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L4CXObj[Instance]);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f242 42f0 	movw	r2, #9456	@ 0x24f0
 8001734:	fb02 f303 	mul.w	r3, r2, r3
 8001738:	4a2a      	ldr	r2, [pc, #168]	@ (80017e4 <VL53L4CX_Probe+0x104>)
 800173a:	441a      	add	r2, r3
 800173c:	492c      	ldr	r1, [pc, #176]	@ (80017f0 <VL53L4CX_Probe+0x110>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (VL53L4CX_ReadID(&(VL53L4CXObj[Instance]), &id) != VL53L4CX_OK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f242 42f0 	movw	r2, #9456	@ 0x24f0
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	4a25      	ldr	r2, [pc, #148]	@ (80017e4 <VL53L4CX_Probe+0x104>)
 8001750:	4413      	add	r3, r2
 8001752:	f107 0208 	add.w	r2, r7, #8
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f010 fa3a 	bl	8011bd2 <VL53L4CX_ReadID>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <VL53L4CX_Probe+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001764:	f06f 0304 	mvn.w	r3, #4
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
 800176a:	e02b      	b.n	80017c4 <VL53L4CX_Probe+0xe4>
    }
    else if (id != VL53L4CX_ID)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f64e 32aa 	movw	r2, #60330	@ 0xebaa
 8001772:	4293      	cmp	r3, r2
 8001774:	d003      	beq.n	800177e <VL53L4CX_Probe+0x9e>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001776:	f06f 0306 	mvn.w	r3, #6
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
 800177c:	e022      	b.n	80017c4 <VL53L4CX_Probe+0xe4>
    }
    else if (VL53L4A2_RANGING_SENSOR_Drv->Init(VL53L4A2_RANGING_SENSOR_CompObj[Instance]) != VL53L4CX_OK)
 800177e:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <VL53L4CX_Probe+0x108>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	491a      	ldr	r1, [pc, #104]	@ (80017f0 <VL53L4CX_Probe+0x110>)
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800178c:	4610      	mov	r0, r2
 800178e:	4798      	blx	r3
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <VL53L4CX_Probe+0xbe>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001796:	f06f 0304 	mvn.w	r3, #4
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
 800179c:	e012      	b.n	80017c4 <VL53L4CX_Probe+0xe4>
    }
    else if (VL53L4A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L4A2_RANGING_SENSOR_CompObj[Instance],
 800179e:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <VL53L4CX_Probe+0x108>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4912      	ldr	r1, [pc, #72]	@ (80017f0 <VL53L4CX_Probe+0x110>)
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017ac:	4911      	ldr	r1, [pc, #68]	@ (80017f4 <VL53L4CX_Probe+0x114>)
 80017ae:	4610      	mov	r0, r2
 80017b0:	4798      	blx	r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <VL53L4CX_Probe+0xe0>
                                                          &VL53L4A2_RANGING_SENSOR_Cap) != VL53L4CX_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80017b8:	f06f 0304 	mvn.w	r3, #4
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80017be:	e001      	b.n	80017c4 <VL53L4CX_Probe+0xe4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3728      	adds	r7, #40	@ 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	080010dd 	.word	0x080010dd
 80017d4:	08001159 	.word	0x08001159
 80017d8:	080011a9 	.word	0x080011a9
 80017dc:	080011fd 	.word	0x080011fd
 80017e0:	08001251 	.word	0x08001251
 80017e4:	20000ab8 	.word	0x20000ab8
 80017e8:	20000aa4 	.word	0x20000aa4
 80017ec:	20000038 	.word	0x20000038
 80017f0:	20000a98 	.word	0x20000a98
 80017f4:	20000aa8 	.word	0x20000aa8

080017f8 <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001804:	2300      	movs	r3, #0
 8001806:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3318      	adds	r3, #24
 800180c:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8001814:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	b2db      	uxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	2101      	movs	r1, #1
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f00f ff2b 	bl	801167c <VL53LX_WrByte>
 8001826:	4603      	mov	r3, r0
 8001828:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	085b      	lsrs	r3, r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001834:	b2da      	uxtb	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800183a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800184e:	2300      	movs	r3, #0
 8001850:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 8001852:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d105      	bne.n	8001866 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 800185a:	2101      	movs	r1, #1
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f001 fcfc 	bl	800325a <VL53LX_data_init>
 8001862:	4603      	mov	r3, r0
 8001864:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8001866:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d107      	bne.n	800187e <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 800186e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001872:	2102      	movs	r1, #2
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f885 	bl	8001984 <SetPresetModeL3CX>
 800187a:	4603      	mov	r3, r0
 800187c:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 800187e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001886:	f248 2135 	movw	r1, #33333	@ 0x8235
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f980 	bl	8001b90 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8001890:	4603      	mov	r3, r0
 8001892:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8001894:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10a      	bne.n	80018b2 <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3318      	adds	r3, #24
 80018a0:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 80018a8:	220c      	movs	r2, #12
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f018 f94d 	bl	8019b4c <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 80018b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d105      	bne.n	80018c6 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 80018ba:	2102      	movs	r1, #2
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f003 fef0 	bl	80056a2 <VL53LX_set_dmax_mode>
 80018c2:	4603      	mov	r3, r0
 80018c4:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 80018c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d105      	bne.n	80018da <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 80018ce:	2100      	movs	r1, #0
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 ff43 	bl	800275c <VL53LX_SmudgeCorrectionEnable>
 80018d6:	4603      	mov	r3, r0
 80018d8:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80018da:	2320      	movs	r3, #32
 80018dc:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 24e0 	strb.w	r2, [r3, #1248]	@ 0x4e0
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 80018f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 8001908:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f00f fa6f 	bl	8010df0 <VL53LX_poll_for_boot_completion>
 8001912:	4603      	mov	r3, r0
 8001914:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001916:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001930:	2300      	movs	r3, #0
 8001932:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8001934:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <ComputeDevicePresetMode+0x5c>)
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	4611      	mov	r1, r2
 800193e:	8019      	strh	r1, [r3, #0]
 8001940:	3302      	adds	r3, #2
 8001942:	0c12      	lsrs	r2, r2, #16
 8001944:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d002      	beq.n	8001952 <ComputeDevicePresetMode+0x2e>
 800194c:	2b02      	cmp	r3, #2
 800194e:	d003      	beq.n	8001958 <ComputeDevicePresetMode+0x34>
 8001950:	e005      	b.n	800195e <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
		break;
 8001956:	e004      	b.n	8001962 <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
		break;
 800195c:	e001      	b.n	8001962 <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 800195e:	2302      	movs	r3, #2
 8001960:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	3310      	adds	r3, #16
 8001966:	443b      	add	r3, r7
 8001968:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	701a      	strb	r2, [r3, #0]

	return Status;
 8001970:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	0801a944 	.word	0x0801a944

08001984 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001984:	b5b0      	push	{r4, r5, r7, lr}
 8001986:	b08e      	sub	sp, #56	@ 0x38
 8001988:	af04      	add	r7, sp, #16
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	460b      	mov	r3, r1
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80019a8:	2320      	movs	r3, #32
 80019aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 80019ae:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 80019b2:	7afb      	ldrb	r3, [r7, #11]
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ffb4 	bl	8001924 <ComputeDevicePresetMode>
 80019bc:	4603      	mov	r3, r0
 80019be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 80019c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d112      	bne.n	80019f0 <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 80019ca:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80019ce:	f107 001c 	add.w	r0, r7, #28
 80019d2:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	f107 0318 	add.w	r3, r7, #24
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	4603      	mov	r3, r0
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f002 f89b 	bl	8003b20 <VL53LX_get_preset_mode_timing_cfg>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 80019f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d112      	bne.n	8001a1e <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 80019f8:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 80019fc:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 80019fe:	69fd      	ldr	r5, [r7, #28]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	9102      	str	r1, [sp, #8]
 8001a08:	9201      	str	r2, [sp, #4]
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	462b      	mov	r3, r5
 8001a0e:	4622      	mov	r2, r4
 8001a10:	4601      	mov	r1, r0
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f002 f8e5 	bl	8003be2 <VL53LX_set_preset_mode>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001a1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d103      	bne.n	8001a2e <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001a2c:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 8001a2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3728      	adds	r7, #40	@ 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bdb0      	pop	{r4, r5, r7, pc}

08001a3a <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b085      	sub	sp, #20
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3318      	adds	r3, #24
 8001a4a:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f893 3393 	ldrb.w	r3, [r3, #915]	@ 0x393
 8001a52:	2baa      	cmp	r3, #170	@ 0xaa
 8001a54:	d106      	bne.n	8001a64 <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f893 3392 	ldrb.w	r3, [r3, #914]	@ 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001a5c:	2beb      	cmp	r3, #235	@ 0xeb
 8001a5e:	d101      	bne.n	8001a64 <IsL4+0x2a>
		devL4 = 1;
 8001a60:	2301      	movs	r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
	return devL4;
 8001a64:	68fb      	ldr	r3, [r7, #12]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b085      	sub	sp, #20
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001a7e:	793b      	ldrb	r3, [r7, #4]
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d808      	bhi.n	8001a96 <CheckValidRectRoi+0x24>
 8001a84:	797b      	ldrb	r3, [r7, #5]
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	d805      	bhi.n	8001a96 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001a8a:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d802      	bhi.n	8001a96 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	2b0f      	cmp	r3, #15
 8001a94:	d901      	bls.n	8001a9a <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001a96:	23fc      	movs	r3, #252	@ 0xfc
 8001a98:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001a9a:	793a      	ldrb	r2, [r7, #4]
 8001a9c:	79bb      	ldrb	r3, [r7, #6]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d803      	bhi.n	8001aaa <CheckValidRectRoi+0x38>
 8001aa2:	797a      	ldrb	r2, [r7, #5]
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d201      	bcs.n	8001aae <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001aaa:	23fc      	movs	r3, #252	@ 0xfc
 8001aac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b088      	sub	sp, #32
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d008      	beq.n	8001af2 <VL53LX_SetDistanceMode+0x34>
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d005      	beq.n	8001af2 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d002      	beq.n	8001af2 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 8001aec:	f06f 0303 	mvn.w	r3, #3
 8001af0:	e049      	b.n	8001b86 <VL53LX_SetDistanceMode+0xc8>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffa1 	bl	8001a3a <IsL4>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <VL53LX_SetDistanceMode+0x4c>
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d102      	bne.n	8001b0a <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001b04:	f06f 0303 	mvn.w	r3, #3
 8001b08:	e03d      	b.n	8001b86 <VL53LX_SetDistanceMode+0xc8>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0e:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001b10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10a      	bne.n	8001b2e <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	f107 0210 	add.w	r2, r7, #16
 8001b20:	f107 010c 	add.w	r1, r7, #12
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f001 fed6 	bl	80038d6 <VL53LX_get_timeouts_us>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 8001b2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d107      	bne.n	8001b46 <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff21 	bl	8001984 <SetPresetModeL3CX>
 8001b42:	4603      	mov	r3, r0
 8001b44:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 8001b46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <VL53LX_SetDistanceMode+0x9e>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b54:	461a      	mov	r2, r3
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	f882 34e0 	strb.w	r3, [r2, #1248]	@ 0x4e0
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001b5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10e      	bne.n	8001b82 <VL53LX_SetDistanceMode+0xc4>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001b64:	68f9      	ldr	r1, [r7, #12]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f001 fe7a 	bl	8003864 <VL53LX_set_timeouts_us>
 8001b70:	4603      	mov	r3, r0
 8001b72:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 8001b74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <VL53LX_SetDistanceMode+0xc4>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	629a      	str	r2, [r3, #40]	@ 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001b82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3720      	adds	r7, #32
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	@ 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001bac:	4b31      	ldr	r3, [pc, #196]	@ (8001c74 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 8001bae:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4a31      	ldr	r2, [pc, #196]	@ (8001c78 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d902      	bls.n	8001bbe <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001bb8:	23fc      	movs	r3, #252	@ 0xfc
 8001bba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (Status == VL53LX_ERROR_NONE)
 8001bbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10b      	bne.n	8001bde <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	f107 0210 	add.w	r2, r7, #16
 8001bce:	f107 010c 	add.w	r1, r7, #12
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f001 fe7f 	bl	80038d6 <VL53LX_get_timeouts_us>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 8001bde:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8001be2:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 8001be4:	2306      	movs	r3, #6
 8001be6:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff26 	bl	8001a3a <IsL4>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 8001bf4:	4b21      	ldr	r3, [pc, #132]	@ (8001c7c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 8001bf6:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d803      	bhi.n	8001c08 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001c00:	23fc      	movs	r3, #252	@ 0xfc
 8001c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001c06:	e003      	b.n	8001c10 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8001c0e:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001c10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d11c      	bne.n	8001c52 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	6a3a      	ldr	r2, [r7, #32]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d203      	bcs.n	8001c28 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 8001c20:	23fc      	movs	r3, #252	@ 0xfc
 8001c22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001c26:	e00d      	b.n	8001c44 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 8001c32:	68f9      	ldr	r1, [r7, #12]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f001 fe13 	bl	8003864 <VL53LX_set_timeouts_us>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 8001c44:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	629a      	str	r2, [r3, #40]	@ 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001c52:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd8>
		VL53LXDevDataSet(Dev,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001c60:	461a      	mov	r2, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f8c2 34e4 	str.w	r3, [r2, #1252]	@ 0x4e4
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001c68:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3728      	adds	r7, #40	@ 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	00086470 	.word	0x00086470
 8001c78:	00989680 	.word	0x00989680
 8001c7c:	00030d40 	.word	0x00030d40

08001c80 <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b092      	sub	sp, #72	@ 0x48
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4613      	mov	r3, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff feeb 	bl	8001a72 <CheckValidRectRoi>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (Status != VL53LX_ERROR_NONE)
 8001ca2:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <VL53LX_SetUserROI+0x30>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001caa:	f06f 0303 	mvn.w	r3, #3
 8001cae:	e050      	b.n	8001d52 <VL53LX_SetUserROI+0xd2>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	789b      	ldrb	r3, [r3, #2]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	0fda      	lsrs	r2, r3, #31
 8001cc0:	4413      	add	r3, r2
 8001cc2:	105b      	asrs	r3, r3, #1
 8001cc4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	78db      	ldrb	r3, [r3, #3]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	0fda      	lsrs	r2, r3, #31
 8001cd8:	4413      	add	r3, r2
 8001cda:	105b      	asrs	r3, r3, #1
 8001cdc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	789a      	ldrb	r2, [r3, #2]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	785a      	ldrb	r2, [r3, #1]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	78db      	ldrb	r3, [r3, #3]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	zone_cfg.max_zones = 1;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 8001d04:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001d08:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 8001d0c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001d10:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	zone_cfg.user_zones[0].width = width;
 8001d14:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	zone_cfg.user_zones[0].height = height;
 8001d1c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001d20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if ((width < 3) || (height < 3))
 8001d24:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d903      	bls.n	8001d34 <VL53LX_SetUserROI+0xb4>
 8001d2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d803      	bhi.n	8001d3c <VL53LX_SetUserROI+0xbc>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001d34:	23fc      	movs	r3, #252	@ 0xfc
 8001d36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001d3a:	e008      	b.n	8001d4e <VL53LX_SetUserROI+0xce>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	4619      	mov	r1, r3
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f001 fea9 	bl	8003a9a <VL53LX_set_zone_config>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 8001d4e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3748      	adds	r7, #72	@ 0x48
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3318      	adds	r3, #24
 8001d6a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f001 f911 	bl	8002f94 <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001d72:	2300      	movs	r3, #0
 8001d74:	75bb      	strb	r3, [r7, #22]
 8001d76:	e01a      	b.n	8001dae <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001d78:	7dbb      	ldrb	r3, [r7, #22]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001d80:	3308      	adds	r3, #8
 8001d82:	2100      	movs	r1, #0
 8001d84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8001d88:	7dbb      	ldrb	r3, [r7, #22]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001d92:	3318      	adds	r3, #24
 8001d94:	22ff      	movs	r2, #255	@ 0xff
 8001d96:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8001d98:	7dbb      	ldrb	r3, [r7, #22]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001da2:	331c      	adds	r3, #28
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001da8:	7dbb      	ldrb	r3, [r7, #22]
 8001daa:	3301      	adds	r3, #1
 8001dac:	75bb      	strb	r3, [r7, #22]
 8001dae:	7dbb      	ldrb	r3, [r7, #22]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d9e1      	bls.n	8001d78 <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
	pdev->PreviousRangeActiveResults = 0;
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7edb      	ldrb	r3, [r3, #27]
 8001dd0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8001dd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d107      	bne.n	8001dea <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2206      	movs	r2, #6
 8001dde:	4619      	mov	r1, r3
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f001 ffc1 	bl	8003d68 <VL53LX_init_and_start_range>
 8001de6:	4603      	mov	r3, r0
 8001de8:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 8001dea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f002 fa7e 	bl	8004304 <VL53LX_stop_range>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f001 f9ef 	bl	80031f0 <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7edb      	ldrb	r3, [r3, #27]
 8001e2e:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8001e30:	7bbb      	ldrb	r3, [r7, #14]
 8001e32:	4619      	mov	r1, r3
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f002 ff7c 	bl	8004d32 <VL53LX_clear_interrupt_and_enable_next_range>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 8001e58:	6839      	ldr	r1, [r7, #0]
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f00e ff8e 	bl	8010d7c <VL53LX_is_new_data_ready>
 8001e60:	4603      	mov	r3, r0
 8001e62:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	3b05      	subs	r3, #5
 8001e7e:	2b12      	cmp	r3, #18
 8001e80:	d840      	bhi.n	8001f04 <ConvertStatusHisto+0x94>
 8001e82:	a201      	add	r2, pc, #4	@ (adr r2, 8001e88 <ConvertStatusHisto+0x18>)
 8001e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e88:	08001ed5 	.word	0x08001ed5
 8001e8c:	08001edb 	.word	0x08001edb
 8001e90:	08001ee7 	.word	0x08001ee7
 8001e94:	08001f05 	.word	0x08001f05
 8001e98:	08001eff 	.word	0x08001eff
 8001e9c:	08001f05 	.word	0x08001f05
 8001ea0:	08001f05 	.word	0x08001f05
 8001ea4:	08001f05 	.word	0x08001f05
 8001ea8:	08001f05 	.word	0x08001f05
 8001eac:	08001f05 	.word	0x08001f05
 8001eb0:	08001f05 	.word	0x08001f05
 8001eb4:	08001f05 	.word	0x08001f05
 8001eb8:	08001f05 	.word	0x08001f05
 8001ebc:	08001f05 	.word	0x08001f05
 8001ec0:	08001ee1 	.word	0x08001ee1
 8001ec4:	08001ef3 	.word	0x08001ef3
 8001ec8:	08001f05 	.word	0x08001f05
 8001ecc:	08001ef9 	.word	0x08001ef9
 8001ed0:	08001eed 	.word	0x08001eed
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	73fb      	strb	r3, [r7, #15]
		break;
 8001ed8:	e016      	b.n	8001f08 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
		break;
 8001ede:	e013      	b.n	8001f08 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 8001ee0:	2306      	movs	r3, #6
 8001ee2:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 8001ee4:	e010      	b.n	8001f08 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	73fb      	strb	r3, [r7, #15]
		break;
 8001eea:	e00d      	b.n	8001f08 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8001eec:	230c      	movs	r3, #12
 8001eee:	73fb      	strb	r3, [r7, #15]
		break;
 8001ef0:	e00a      	b.n	8001f08 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8001ef2:	2307      	movs	r3, #7
 8001ef4:	73fb      	strb	r3, [r7, #15]
		break;
 8001ef6:	e007      	b.n	8001f08 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8001ef8:	230b      	movs	r3, #11
 8001efa:	73fb      	strb	r3, [r7, #15]
		break;
 8001efc:	e004      	b.n	8001f08 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
		break;
 8001f02:	e001      	b.n	8001f08 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 8001f04:	23ff      	movs	r3, #255	@ 0xff
 8001f06:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop

08001f18 <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08e      	sub	sp, #56	@ 0x38
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	4608      	mov	r0, r1
 8001f22:	4611      	mov	r1, r2
 8001f24:	461a      	mov	r2, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	70fb      	strb	r3, [r7, #3]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	70bb      	strb	r3, [r7, #2]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	VL53LX_LLDriverData_t *pdev =
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3318      	adds	r3, #24
 8001f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8001f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f40:	33f8      	adds	r3, #248	@ 0xf8
 8001f42:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
	int16_t AddOffset;
	uint8_t histo_merge_nb;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8001f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f4a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001f56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f58:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001f5a:	025b      	lsls	r3, r3, #9
 8001f5c:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8001f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f60:	6a3a      	ldr	r2, [r7, #32]
 8001f62:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f66:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001f68:	025b      	lsls	r3, r3, #9
 8001f6a:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8001f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001f72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f74:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001f76:	025b      	lsls	r3, r3, #9
 8001f78:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8001f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8001f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f82:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 8001f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f88:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8001f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f8c:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 8001f90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f92:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8001f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f96:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	@ 0x44
 8001f9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f9c:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 8001f9e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001fa2:	2b11      	cmp	r3, #17
 8001fa4:	d009      	beq.n	8001fba <SetTargetData+0xa2>
 8001fa6:	2b11      	cmp	r3, #17
 8001fa8:	dc0f      	bgt.n	8001fca <SetTargetData+0xb2>
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	dc02      	bgt.n	8001fb4 <SetTargetData+0x9c>
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	dc03      	bgt.n	8001fba <SetTargetData+0xa2>
 8001fb2:	e00a      	b.n	8001fca <SetTargetData+0xb2>
 8001fb4:	2b0d      	cmp	r3, #13
 8001fb6:	d004      	beq.n	8001fc2 <SetTargetData+0xaa>
 8001fb8:	e007      	b.n	8001fca <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8001fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fbc:	2205      	movs	r2, #5
 8001fbe:	749a      	strb	r2, [r3, #18]
		break;
 8001fc0:	e006      	b.n	8001fd0 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 8001fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fc4:	220d      	movs	r2, #13
 8001fc6:	749a      	strb	r2, [r3, #18]
		break;
 8001fc8:	e002      	b.n	8001fd0 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 8001fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fcc:	2200      	movs	r2, #0
 8001fce:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8001fd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fd2:	7c9b      	ldrb	r3, [r3, #18]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d117      	bne.n	8002008 <SetTargetData+0xf0>
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d114      	bne.n	8002008 <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 8001fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fe0:	22ff      	movs	r2, #255	@ 0xff
 8001fe2:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 8001fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 8001fea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 8001ff0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ff2:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001ff6:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 8001ff8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ffa:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001ffe:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 8002000:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002002:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8002006:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 8002008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800200a:	7c9b      	ldrb	r3, [r3, #18]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d108      	bne.n	8002022 <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 8002010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff2b 	bl	8001e70 <ConvertStatusHisto>
 800201a:	4603      	mov	r3, r0
 800201c:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 800201e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002020:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	461a      	mov	r2, r3
 8002028:	f248 0191 	movw	r1, #32913	@ 0x8091
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f003 fb79 	bl	8005724 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8002032:	78bb      	ldrb	r3, [r7, #2]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8002040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002042:	8a1b      	ldrh	r3, [r3, #16]
 8002044:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	86bb      	strh	r3, [r7, #52]	@ 0x34

	pRangeData->ExtendedRange = 0;
 800204a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800204c:	2200      	movs	r2, #0
 800204e:	74da      	strb	r2, [r3, #19]


	Status = VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8002050:	f107 030b 	add.w	r3, r7, #11
 8002054:	4619      	mov	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f009 fa83 	bl	800b562 <VL53LX_compute_histo_merge_nb>
 800205c:	4603      	mov	r3, r0
 800205e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if ((active_results != 1) ||
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d109      	bne.n	800207c <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 8002068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800206a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800206e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
	if ((active_results != 1) ||
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 8002076:	7afb      	ldrb	r3, [r7, #11]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <SetTargetData+0x168>
		ExtendedRangeEnabled = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 81db 	beq.w	800243e <SetTargetData+0x526>
		(pRangeData->RangeStatus ==
 8002088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800208a:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 800208c:	2b07      	cmp	r3, #7
 800208e:	d004      	beq.n	800209a <SetTargetData+0x182>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8002090:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002092:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002094:	2b04      	cmp	r3, #4
 8002096:	f040 81d2 	bne.w	800243e <SetTargetData+0x526>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 800209a:	787b      	ldrb	r3, [r7, #1]
 800209c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800209e:	4413      	add	r3, r2
 80020a0:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80020a4:	3318      	adds	r3, #24
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b07      	cmp	r3, #7
 80020aa:	d01c      	beq.n	80020e6 <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 80020ac:	787b      	ldrb	r3, [r7, #1]
 80020ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80020b6:	3318      	adds	r3, #24
 80020b8:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d013      	beq.n	80020e6 <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 80020be:	787b      	ldrb	r3, [r7, #1]
 80020c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80020c8:	3318      	adds	r3, #24
 80020ca:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f040 81b6 	bne.w	800243e <SetTargetData+0x526>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 80020d2:	787b      	ldrb	r3, [r7, #1]
 80020d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80020dc:	331c      	adds	r3, #28
 80020de:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	f040 81ac 	bne.w	800243e <SetTargetData+0x526>
	{
		if (((pdev->PreviousStreamCount) ==
 80020e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020ec:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80020f0:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 80020f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020f4:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 80020f8:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d00c      	beq.n	8002118 <SetTargetData+0x200>
		|| ((pdev->PreviousStreamCount) ==
 80020fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002100:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002104:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002108:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 800210a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800210c:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 8002110:	337f      	adds	r3, #127	@ 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8002112:	429a      	cmp	r2, r3
 8002114:	f040 816b 	bne.w	80023ee <SetTargetData+0x4d6>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8002118:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800211a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800211e:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8002120:	787b      	ldrb	r3, [r7, #1]
 8002122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002124:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8002128:	3308      	adds	r3, #8
 800212a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800212e:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	b29b      	uxth	r3, r3
 8002134:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 8002136:	2301      	movs	r3, #1
 8002138:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		switch (pdev->preset_mode) {
 800213c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800213e:	785b      	ldrb	r3, [r3, #1]
 8002140:	2b21      	cmp	r3, #33	@ 0x21
 8002142:	d008      	beq.n	8002156 <SetTargetData+0x23e>
 8002144:	2b21      	cmp	r3, #33	@ 0x21
 8002146:	f300 814e 	bgt.w	80023e6 <SetTargetData+0x4ce>
 800214a:	2b1b      	cmp	r3, #27
 800214c:	f000 80d7 	beq.w	80022fe <SetTargetData+0x3e6>
 8002150:	2b1e      	cmp	r3, #30
 8002152:	d004      	beq.n	800215e <SetTargetData+0x246>
 8002154:	e147      	b.n	80023e6 <SetTargetData+0x4ce>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 800215c:	e147      	b.n	80023ee <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800215e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002160:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 8002164:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002168:	429a      	cmp	r2, r3
 800216a:	dd0e      	ble.n	800218a <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 800216c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216e:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8002172:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002176:	429a      	cmp	r2, r3
 8002178:	da07      	bge.n	800218a <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 800217a:	7dfb      	ldrb	r3, [r7, #23]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d104      	bne.n	800218a <SetTargetData+0x272>
					sequency == 1) {
					AddOffset =
 8002180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002182:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8002186:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002188:	e0b8      	b.n	80022fc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 800218a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800218e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002190:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 8002194:	425b      	negs	r3, r3
 8002196:	429a      	cmp	r2, r3
 8002198:	da0f      	bge.n	80021ba <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 800219a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800219e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a0:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
 80021a4:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80021a6:	429a      	cmp	r2, r3
 80021a8:	dd07      	ble.n	80021ba <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d104      	bne.n	80021ba <SetTargetData+0x2a2>
					sequency == 0) {
					AddOffset =
 80021b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b2:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 80021b6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80021b8:	e0a0      	b.n	80022fc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80021ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021bc:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 80021c0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dd0e      	ble.n	80021e6 <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80021c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ca:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80021ce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	da07      	bge.n	80021e6 <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d104      	bne.n	80021e6 <SetTargetData+0x2ce>
					sequency == 0) {
					AddOffset =
 80021dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021de:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 80021e2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80021e4:	e08a      	b.n	80022fc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80021e6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80021ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ec:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 80021f0:	425b      	negs	r3, r3
 80021f2:	429a      	cmp	r2, r3
 80021f4:	da0f      	bge.n	8002216 <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80021f6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80021fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021fc:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 8002200:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8002202:	429a      	cmp	r2, r3
 8002204:	dd07      	ble.n	8002216 <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8002206:	7dfb      	ldrb	r3, [r7, #23]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d104      	bne.n	8002216 <SetTargetData+0x2fe>
					sequency == 1) {
					AddOffset =
 800220c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8002212:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002214:	e072      	b.n	80022fc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8002216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002218:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 800221c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002220:	429a      	cmp	r2, r3
 8002222:	dd0e      	ble.n	8002242 <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002226:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800222a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800222e:	429a      	cmp	r2, r3
 8002230:	da07      	bge.n	8002242 <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002232:	7dfb      	ldrb	r3, [r7, #23]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d104      	bne.n	8002242 <SetTargetData+0x32a>
					sequency == 1) {
					AddOffset =
 8002238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800223e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002240:	e05c      	b.n	80022fc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8002242:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002248:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 800224c:	425b      	negs	r3, r3
 800224e:	429a      	cmp	r2, r3
 8002250:	da0f      	bge.n	8002272 <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002252:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002258:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
 800225c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 800225e:	429a      	cmp	r2, r3
 8002260:	dd07      	ble.n	8002272 <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002262:	7dfb      	ldrb	r3, [r7, #23]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d104      	bne.n	8002272 <SetTargetData+0x35a>
					sequency == 0) {
					AddOffset =
 8002268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 800226e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002270:	e044      	b.n	80022fc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002274:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 8002278:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800227c:	429a      	cmp	r2, r3
 800227e:	dd0e      	ble.n	800229e <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002282:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002286:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800228a:	429a      	cmp	r2, r3
 800228c:	da07      	bge.n	800229e <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800228e:	7dfb      	ldrb	r3, [r7, #23]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d104      	bne.n	800229e <SetTargetData+0x386>
					sequency == 0) {
					AddOffset =
 8002294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002296:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800229a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800229c:	e02e      	b.n	80022fc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800229e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a4:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 80022a8:	425b      	negs	r3, r3
 80022aa:	429a      	cmp	r2, r3
 80022ac:	da0f      	bge.n	80022ce <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80022ae:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b4:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
 80022b8:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80022ba:	429a      	cmp	r2, r3
 80022bc:	dd07      	ble.n	80022ce <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d104      	bne.n	80022ce <SetTargetData+0x3b6>
					sequency == 1) {
					AddOffset =
 80022c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 80022ca:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80022cc:	e016      	b.n	80022fc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80022ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d0:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	@ 0xa0
 80022d4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022d8:	429a      	cmp	r2, r3
 80022da:	da0b      	bge.n	80022f4 <SetTargetData+0x3dc>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 80022dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022de:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	@ 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80022e2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	dd04      	ble.n	80022f4 <SetTargetData+0x3dc>
					AddOffset =
 80022ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ec:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80022f0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80022f2:	e003      	b.n	80022fc <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 80022fa:	e078      	b.n	80023ee <SetTargetData+0x4d6>
 80022fc:	e077      	b.n	80023ee <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80022fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002300:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8002304:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002308:	429a      	cmp	r2, r3
 800230a:	dd0e      	ble.n	800232a <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800230c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002312:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002316:	429a      	cmp	r2, r3
 8002318:	da07      	bge.n	800232a <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800231a:	7dfb      	ldrb	r3, [r7, #23]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d104      	bne.n	800232a <SetTargetData+0x412>
					sequency == 0) {
					AddOffset =
 8002320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002322:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 8002326:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002328:	e05c      	b.n	80023e4 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800232a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800232e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002330:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8002334:	425b      	negs	r3, r3
 8002336:	429a      	cmp	r2, r3
 8002338:	da0f      	bge.n	800235a <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800233a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800233e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002340:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8002344:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8002346:	429a      	cmp	r2, r3
 8002348:	dd07      	ble.n	800235a <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800234a:	7dfb      	ldrb	r3, [r7, #23]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d104      	bne.n	800235a <SetTargetData+0x442>
					sequency == 1) {
					AddOffset =
 8002350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002352:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8002356:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002358:	e044      	b.n	80023e4 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 800235a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235c:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8002360:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002364:	429a      	cmp	r2, r3
 8002366:	dd0e      	ble.n	8002386 <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8002368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236a:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 800236e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002372:	429a      	cmp	r2, r3
 8002374:	da07      	bge.n	8002386 <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8002376:	7dfb      	ldrb	r3, [r7, #23]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d104      	bne.n	8002386 <SetTargetData+0x46e>
					sequency == 1) {
					AddOffset =
 800237c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237e:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8002382:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002384:	e02e      	b.n	80023e4 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8002386:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800238a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800238c:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8002390:	425b      	negs	r3, r3
 8002392:	429a      	cmp	r2, r3
 8002394:	da0f      	bge.n	80023b6 <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8002396:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800239a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239c:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 80023a0:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80023a2:	429a      	cmp	r2, r3
 80023a4:	dd07      	ble.n	80023b6 <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d104      	bne.n	80023b6 <SetTargetData+0x49e>
					sequency == 0) {
					AddOffset =
 80023ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ae:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 80023b2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80023b4:	e016      	b.n	80023e4 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80023b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b8:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 80023bc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	da0b      	bge.n	80023dc <SetTargetData+0x4c4>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 80023c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c6:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80023ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	dd04      	ble.n	80023dc <SetTargetData+0x4c4>
					AddOffset =
 80023d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d4:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 80023d8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80023da:	e003      	b.n	80023e4 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 80023e2:	e004      	b.n	80023ee <SetTargetData+0x4d6>
 80023e4:	e003      	b.n	80023ee <SetTargetData+0x4d6>

			default:
				uwr_status = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 80023ec:	bf00      	nop
			}
		}

		if (uwr_status) {
 80023ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d023      	beq.n	800243e <SetTargetData+0x526>
			pRangeData->RangeMilliMeter += AddOffset;
 80023f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023f8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002400:	4413      	add	r3, r2
 8002402:	b29b      	uxth	r3, r3
 8002404:	b21a      	sxth	r2, r3
 8002406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002408:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 800240a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800240c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002410:	b29a      	uxth	r2, r3
 8002412:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002414:	4413      	add	r3, r2
 8002416:	b29b      	uxth	r3, r3
 8002418:	b21a      	sxth	r2, r3
 800241a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800241c:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 800241e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002424:	b29a      	uxth	r2, r3
 8002426:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002428:	4413      	add	r3, r2
 800242a:	b29b      	uxth	r3, r3
 800242c:	b21a      	sxth	r2, r3
 800242e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002430:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 8002432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002434:	2201      	movs	r2, #1
 8002436:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 8002438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800243a:	2200      	movs	r2, #0
 800243c:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 800243e:	787b      	ldrb	r3, [r7, #1]
 8002440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002442:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8002446:	3308      	adds	r3, #8
 8002448:	8ab9      	ldrh	r1, [r7, #20]
 800244a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 800244e:	787b      	ldrb	r3, [r7, #1]
 8002450:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002452:	7c91      	ldrb	r1, [r2, #18]
 8002454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002456:	4413      	add	r3, r2
 8002458:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 800245c:	3318      	adds	r3, #24
 800245e:	460a      	mov	r2, r1
 8002460:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8002462:	787b      	ldrb	r3, [r7, #1]
 8002464:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002466:	7cd1      	ldrb	r1, [r2, #19]
 8002468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800246a:	4413      	add	r3, r2
 800246c:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8002470:	331c      	adds	r3, #28
 8002472:	460a      	mov	r2, r1
 8002474:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8002476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002478:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800247c:	461a      	mov	r2, r3
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	f882 30a0 	strb.w	r3, [r2, #160]	@ 0xa0

	Range = pRangeData->RangeMilliMeter;
 8002484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002486:	8a1b      	ldrh	r3, [r3, #16]
 8002488:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 800248a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800248c:	7c9b      	ldrb	r3, [r3, #18]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d110      	bne.n	80024b4 <SetTargetData+0x59c>
 8002492:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	da0c      	bge.n	80024b4 <SetTargetData+0x59c>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 800249a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800249e:	4b08      	ldr	r3, [pc, #32]	@ (80024c0 <SetTargetData+0x5a8>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	da03      	bge.n	80024ae <SetTargetData+0x596>
			pRangeData->RangeStatus =
 80024a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024a8:	220e      	movs	r2, #14
 80024aa:	749a      	strb	r2, [r3, #18]
 80024ac:	e002      	b.n	80024b4 <SetTargetData+0x59c>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 80024ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024b0:	2200      	movs	r2, #0
 80024b2:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 80024b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3738      	adds	r7, #56	@ 0x38
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	2000000c 	.word	0x2000000c

080024c4 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b08f      	sub	sp, #60	@ 0x3c
 80024c8:	af04      	add	r7, sp, #16
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	3318      	adds	r3, #24
 80024d4:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	7c9a      	ldrb	r2, [r3, #18]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58


	pMultiRangingData->TimeStamp = 0;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	78da      	ldrb	r2, [r3, #3]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	7c9b      	ldrb	r3, [r3, #18]
 8002502:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 8002504:	7ffb      	ldrb	r3, [r7, #31]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <SetMeasurementData+0x4e>

		iteration = 1;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002510:	e002      	b.n	8002518 <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 8002512:	7ffb      	ldrb	r3, [r7, #31]
 8002514:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	for (i = 0; i < iteration; i++) {
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800251e:	e035      	b.n	800258c <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8002520:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	3308      	adds	r3, #8
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 8002534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002538:	224c      	movs	r2, #76	@ 0x4c
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	3310      	adds	r3, #16
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	4413      	add	r3, r2
 8002544:	3304      	adds	r3, #4
 8002546:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 8002548:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800254c:	2b00      	cmp	r3, #0
 800254e:	d113      	bne.n	8002578 <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7918      	ldrb	r0, [r3, #4]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	7c1b      	ldrb	r3, [r3, #16]
 8002558:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 800255c:	7ff9      	ldrb	r1, [r7, #31]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	9202      	str	r2, [sp, #8]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	9201      	str	r2, [sp, #4]
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	4623      	mov	r3, r4
 800256a:	4602      	mov	r2, r0
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f7ff fcd3 	bl	8001f18 <SetTargetData>
 8002572:	4603      	mov	r3, r0
 8002574:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	for (i = 0; i < iteration; i++) {
 8002582:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002586:	3301      	adds	r3, #1
 8002588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800258c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002590:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002594:	429a      	cmp	r2, r3
 8002596:	d3c3      	bcc.n	8002520 <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	f893 243f 	ldrb.w	r2, [r3, #1087]	@ 0x43f
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80025a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80025ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80025b0:	e01f      	b.n	80025f2 <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80025b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025b6:	6a3a      	ldr	r2, [r7, #32]
 80025b8:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 80025bc:	3308      	adds	r3, #8
 80025be:	2100      	movs	r1, #0
 80025c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 80025c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025c8:	6a3a      	ldr	r2, [r7, #32]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80025d0:	3318      	adds	r3, #24
 80025d2:	22ff      	movs	r2, #255	@ 0xff
 80025d4:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80025d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025da:	6a3a      	ldr	r2, [r7, #32]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80025e2:	331c      	adds	r3, #28
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80025e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025ec:	3301      	adds	r3, #1
 80025ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80025f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d9db      	bls.n	80025b2 <SetMeasurementData+0xee>
	}

	return Status;
 80025fa:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
}
 80025fe:	4618      	mov	r0, r3
 8002600:	372c      	adds	r7, #44	@ 0x2c
 8002602:	46bd      	mov	sp, r7
 8002604:	bd90      	pop	{r4, r7, pc}

08002606 <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002610:	2300      	movs	r3, #0
 8002612:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3318      	adds	r3, #24
 8002618:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 8002620:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8002622:	225c      	movs	r2, #92	@ 0x5c
 8002624:	21ff      	movs	r1, #255	@ 0xff
 8002626:	6838      	ldr	r0, [r7, #0]
 8002628:	f017 fa90 	bl	8019b4c <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	2102      	movs	r1, #2
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f001 ff76 	bl	8004522 <VL53LX_get_device_results>
 8002636:	4603      	mov	r3, r0
 8002638:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	68f9      	ldr	r1, [r7, #12]
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ff40 	bl	80024c4 <SetMeasurementData>
 8002644:	4603      	mov	r3, r0
 8002646:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 8002648:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b090      	sub	sp, #64	@ 0x40
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800265c:	2300      	movs	r3, #0
 800265e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8002662:	f240 3305 	movw	r3, #773	@ 0x305
 8002666:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3318      	adds	r3, #24
 800266c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pc = &pdev->customer;
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002670:	3348      	adds	r3, #72	@ 0x48
 8002672:	637b      	str	r3, [r7, #52]	@ 0x34

	DistanceMode = VL53LXDevDataGet(Dev,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800267a:	f893 34e0 	ldrb.w	r3, [r3, #1248]	@ 0x4e0
 800267e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			CurrentParameters.DistanceMode);

	if (Status == VL53LX_ERROR_NONE)
 8002682:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8002686:	2b00      	cmp	r3, #0
 8002688:	d108      	bne.n	800269c <VL53LX_PerformRefSpadManagement+0x48>
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 800268a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800268e:	4619      	mov	r1, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f8db 	bl	800284c <VL53LX_run_ref_spad_char>
 8002696:	4603      	mov	r3, r0
 8002698:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 800269c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80026a0:	f113 0f1d 	cmn.w	r3, #29
 80026a4:	d14e      	bne.n	8002744 <VL53LX_PerformRefSpadManagement+0xf0>

		Status = VL53LX_read_nvm_raw_data(Dev,
 80026a6:	f107 0310 	add.w	r3, r7, #16
 80026aa:	2206      	movs	r2, #6
 80026ac:	2128      	movs	r1, #40	@ 0x28
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f00c fdd8 	bl	800f264 <VL53LX_read_nvm_raw_data>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 80026ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <VL53LX_PerformRefSpadManagement+0x82>
			Status = VL53LX_WriteMulti(Dev,
 80026c2:	f107 020c 	add.w	r2, r7, #12
 80026c6:	2302      	movs	r3, #2
 80026c8:	2114      	movs	r1, #20
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f00e ff6a 	bl	80115a4 <VL53LX_WriteMulti>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 80026d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d105      	bne.n	80026ea <VL53LX_PerformRefSpadManagement+0x96>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 80026de:	7b3a      	ldrb	r2, [r7, #12]
 80026e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e2:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 80026e4:	7b7a      	ldrb	r2, [r7, #13]
 80026e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e8:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 80026ea:	f107 0310 	add.w	r3, r7, #16
 80026ee:	3310      	adds	r3, #16
 80026f0:	62fb      	str	r3, [r7, #44]	@ 0x2c



		if (Status == VL53LX_ERROR_NONE)
 80026f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d108      	bne.n	800270c <VL53LX_PerformRefSpadManagement+0xb8>
			Status = VL53LX_WriteMulti(Dev,
 80026fa:	2306      	movs	r3, #6
 80026fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026fe:	210d      	movs	r1, #13
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f00e ff4f 	bl	80115a4 <VL53LX_WriteMulti>
 8002706:	4603      	mov	r3, r0
 8002708:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 800270c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8002710:	2b00      	cmp	r3, #0
 8002712:	d117      	bne.n	8002744 <VL53LX_PerformRefSpadManagement+0xf0>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8002714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271a:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 800271c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271e:	785a      	ldrb	r2, [r3, #1]
 8002720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002722:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8002724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002726:	789a      	ldrb	r2, [r3, #2]
 8002728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272a:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 800272c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800272e:	78da      	ldrb	r2, [r3, #3]
 8002730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002732:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8002734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002736:	791a      	ldrb	r2, [r3, #4]
 8002738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800273a:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 800273c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273e:	795a      	ldrb	r2, [r3, #5]
 8002740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002742:	715a      	strb	r2, [r3, #5]
		}

	}


	VL53LX_SetDistanceMode(Dev, DistanceMode);
 8002744:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002748:	4619      	mov	r1, r3
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff f9b7 	bl	8001abe <VL53LX_SetDistanceMode>

	LOG_FUNCTION_END(Status);
	return Status;
 8002750:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8002754:	4618      	mov	r0, r3
 8002756:	3740      	adds	r7, #64	@ 0x40
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 800276c:	2300      	movs	r3, #0
 800276e:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 8002770:	2300      	movs	r3, #0
 8002772:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8002774:	2300      	movs	r3, #0
 8002776:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	2b03      	cmp	r3, #3
 800277c:	d84a      	bhi.n	8002814 <VL53LX_SmudgeCorrectionEnable+0xb8>
 800277e:	a201      	add	r2, pc, #4	@ (adr r2, 8002784 <VL53LX_SmudgeCorrectionEnable+0x28>)
 8002780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002784:	08002795 	.word	0x08002795
 8002788:	080027b5 	.word	0x080027b5
 800278c:	080027d5 	.word	0x080027d5
 8002790:	080027f5 	.word	0x080027f5
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f003 fed0 	bl	800653a <VL53LX_dynamic_xtalk_correction_disable>
 800279a:	4603      	mov	r3, r0
 800279c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f003 fee2 	bl	8006568 <VL53LX_dynamic_xtalk_correction_apply_disable>
 80027a4:	4603      	mov	r3, r0
 80027a6:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f003 ff0b 	bl	80065c4 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80027ae:	4603      	mov	r3, r0
 80027b0:	733b      	strb	r3, [r7, #12]
		break;
 80027b2:	e032      	b.n	800281a <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f003 fea9 	bl	800650c <VL53LX_dynamic_xtalk_correction_enable>
 80027ba:	4603      	mov	r3, r0
 80027bc:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f003 ff17 	bl	80065f2 <VL53LX_dynamic_xtalk_correction_apply_enable>
 80027c4:	4603      	mov	r3, r0
 80027c6:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f003 fefb 	bl	80065c4 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80027ce:	4603      	mov	r3, r0
 80027d0:	733b      	strb	r3, [r7, #12]
		break;
 80027d2:	e022      	b.n	800281a <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f003 fe99 	bl	800650c <VL53LX_dynamic_xtalk_correction_enable>
 80027da:	4603      	mov	r3, r0
 80027dc:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f003 ff07 	bl	80065f2 <VL53LX_dynamic_xtalk_correction_apply_enable>
 80027e4:	4603      	mov	r3, r0
 80027e6:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f003 fed4 	bl	8006596 <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 80027ee:	4603      	mov	r3, r0
 80027f0:	733b      	strb	r3, [r7, #12]
		break;
 80027f2:	e012      	b.n	800281a <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f003 fe89 	bl	800650c <VL53LX_dynamic_xtalk_correction_enable>
 80027fa:	4603      	mov	r3, r0
 80027fc:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f003 feb2 	bl	8006568 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002804:	4603      	mov	r3, r0
 8002806:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f003 fedb 	bl	80065c4 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 800280e:	4603      	mov	r3, r0
 8002810:	733b      	strb	r3, [r7, #12]
		break;
 8002812:	e002      	b.n	800281a <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002814:	23fc      	movs	r3, #252	@ 0xfc
 8002816:	73fb      	strb	r3, [r7, #15]
		break;
 8002818:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 800281a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8002822:	7bbb      	ldrb	r3, [r7, #14]
 8002824:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8002826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 800282e:	7b7b      	ldrb	r3, [r7, #13]
 8002830:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8002832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 800283a:	7b3b      	ldrb	r3, [r7, #12]
 800283c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop

0800284c <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 800284c:	b5b0      	push	{r4, r5, r7, lr}
 800284e:	b08c      	sub	sp, #48	@ 0x30
 8002850:	af04      	add	r7, sp, #16
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002856:	2300      	movs	r3, #0
 8002858:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3318      	adds	r3, #24
 800285e:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8002866:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002868:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d104      	bne.n	800287a <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f005 fe94 	bl	800859e <VL53LX_enable_powerforce>
 8002876:	4603      	mov	r3, r0
 8002878:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800287a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d117      	bne.n	80028b2 <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	7858      	ldrb	r0, [r3, #1]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	685c      	ldr	r4, [r3, #4]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	891d      	ldrh	r5, [r3, #8]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	899b      	ldrh	r3, [r3, #12]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	8952      	ldrh	r2, [r2, #10]
 8002896:	69b9      	ldr	r1, [r7, #24]
 8002898:	f8b1 12de 	ldrh.w	r1, [r1, #734]	@ 0x2de
 800289c:	9102      	str	r1, [sp, #8]
 800289e:	9201      	str	r2, [sp, #4]
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	462b      	mov	r3, r5
 80028a4:	4622      	mov	r2, r4
 80028a6:	4601      	mov	r1, r0
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f007 fd67 	bl	800a37c <VL53LX_set_ref_spad_char_config>
 80028ae:	4603      	mov	r3, r0
 80028b0:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 80028b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d107      	bne.n	80028ca <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	4619      	mov	r1, r3
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f890 	bl	80029e6 <VL53LX_run_device_test>
 80028c6:	4603      	mov	r3, r0
 80028c8:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 80028ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d108      	bne.n	80028e4 <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 80028d2:	f107 020c 	add.w	r2, r7, #12
 80028d6:	2302      	movs	r3, #2
 80028d8:	21d9      	movs	r1, #217	@ 0xd9
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f00e fe98 	bl	8011610 <VL53LX_ReadMulti>
 80028e0:	4603      	mov	r3, r0
 80028e2:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 80028e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10b      	bne.n	8002904 <VL53LX_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 80028ec:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028f4:	f883 235f 	strb.w	r2, [r3, #863]	@ 0x35f
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 80028f8:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002900:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360
	}



	if (status == VL53LX_ERROR_NONE)
 8002904:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d108      	bne.n	800291e <VL53LX_run_ref_spad_char+0xd2>
		status =
			VL53LX_WriteMulti(
 800290c:	f107 020c 	add.w	r2, r7, #12
 8002910:	2302      	movs	r3, #2
 8002912:	2114      	movs	r1, #20
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f00e fe45 	bl	80115a4 <VL53LX_WriteMulti>
 800291a:	4603      	mov	r3, r0
 800291c:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 800291e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d107      	bne.n	8002936 <VL53LX_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8002926:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 800292e:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 8002936:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d108      	bne.n	8002950 <VL53LX_run_ref_spad_char+0x104>
		status =
			VL53LX_ReadMulti(
 800293e:	f107 020c 	add.w	r2, r7, #12
 8002942:	2306      	movs	r3, #6
 8002944:	21ac      	movs	r1, #172	@ 0xac
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f00e fe62 	bl	8011610 <VL53LX_ReadMulti>
 800294c:	4603      	mov	r3, r0
 800294e:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 8002950:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d108      	bne.n	800296a <VL53LX_run_ref_spad_char+0x11e>
		status =
			VL53LX_WriteMulti(
 8002958:	f107 020c 	add.w	r2, r7, #12
 800295c:	2306      	movs	r3, #6
 800295e:	210d      	movs	r1, #13
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f00e fe1f 	bl	80115a4 <VL53LX_WriteMulti>
 8002966:	4603      	mov	r3, r0
 8002968:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 800296a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d117      	bne.n	80029a2 <VL53LX_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8002972:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 800297a:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8002982:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 800298a:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8002992:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 800299a:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 80029a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d114      	bne.n	80029d4 <VL53LX_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f893 3367 	ldrb.w	r3, [r3, #871]	@ 0x367
 80029b0:	2b10      	cmp	r3, #16
 80029b2:	d00c      	beq.n	80029ce <VL53LX_run_ref_spad_char+0x182>
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	dc0d      	bgt.n	80029d4 <VL53LX_run_ref_spad_char+0x188>
 80029b8:	2b0e      	cmp	r3, #14
 80029ba:	d002      	beq.n	80029c2 <VL53LX_run_ref_spad_char+0x176>
 80029bc:	2b0f      	cmp	r3, #15
 80029be:	d003      	beq.n	80029c8 <VL53LX_run_ref_spad_char+0x17c>
 80029c0:	e008      	b.n	80029d4 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 80029c2:	23e4      	movs	r3, #228	@ 0xe4
 80029c4:	77fb      	strb	r3, [r7, #31]
			break;
 80029c6:	e005      	b.n	80029d4 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 80029c8:	23e3      	movs	r3, #227	@ 0xe3
 80029ca:	77fb      	strb	r3, [r7, #31]
			break;
 80029cc:	e002      	b.n	80029d4 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 80029ce:	23e2      	movs	r3, #226	@ 0xe2
 80029d0:	77fb      	strb	r3, [r7, #31]
			break;
 80029d2:	bf00      	nop
		}
	}



	*pcal_status = status;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	7ffa      	ldrb	r2, [r7, #31]
 80029d8:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 80029da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3720      	adds	r7, #32
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bdb0      	pop	{r4, r5, r7, pc}

080029e6 <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b086      	sub	sp, #24
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3318      	adds	r3, #24
 80029fa:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002a00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d108      	bne.n	8002a1a <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 8002a08:	f107 030b 	add.w	r3, r7, #11
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2130      	movs	r1, #48	@ 0x30
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f00e fe8f 	bl	8011734 <VL53LX_RdByte>
 8002a16:	4603      	mov	r3, r0
 8002a18:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 8002a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8002a22:	7afa      	ldrb	r2, [r7, #11]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a


	if (status == VL53LX_ERROR_NONE)
 8002a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	4619      	mov	r1, r3
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f005 fd35 	bl	80084a6 <VL53LX_start_test>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 8002a40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d104      	bne.n	8002a52 <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f00e f95e 	bl	8010d0a <VL53LX_wait_for_test_completion>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8002a52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d108      	bne.n	8002a6c <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 8002a5a:	f107 020c 	add.w	r2, r7, #12
 8002a5e:	2302      	movs	r3, #2
 8002a60:	2189      	movs	r1, #137	@ 0x89
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f00e fdd4 	bl	8011610 <VL53LX_ReadMulti>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8002a6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8002a74:	7b3a      	ldrb	r2, [r7, #12]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f883 2367 	strb.w	r2, [r3, #871]	@ 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 8002a7c:	7b7a      	ldrb	r2, [r7, #13]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f883 2368 	strb.w	r2, [r3, #872]	@ 0x368
	}



	pdev->sys_results.result__range_status &=
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f893 3367 	ldrb.w	r3, [r3, #871]	@ 0x367
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f883 2367 	strb.w	r2, [r3, #871]	@ 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 8002a96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d108      	bne.n	8002ab0 <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 8002a9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d104      	bne.n	8002ab0 <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f005 fd9d 	bl	80085e6 <VL53LX_clear_interrupt>
 8002aac:	4603      	mov	r3, r0
 8002aae:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 8002ab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8002ab8:	2100      	movs	r1, #0
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f005 fcf3 	bl	80084a6 <VL53LX_start_test>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8002ac4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	785b      	ldrb	r3, [r3, #1]
 8002ae2:	2b21      	cmp	r3, #33	@ 0x21
 8002ae4:	d006      	beq.n	8002af4 <select_offset_per_vcsel+0x24>
 8002ae6:	2b21      	cmp	r3, #33	@ 0x21
 8002ae8:	dc2b      	bgt.n	8002b42 <select_offset_per_vcsel+0x72>
 8002aea:	2b1b      	cmp	r3, #27
 8002aec:	d01c      	beq.n	8002b28 <select_offset_per_vcsel+0x58>
 8002aee:	2b1e      	cmp	r3, #30
 8002af0:	d00d      	beq.n	8002b0e <select_offset_per_vcsel+0x3e>
 8002af2:	e026      	b.n	8002b42 <select_offset_per_vcsel+0x72>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002afa:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8002afe:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b06:	f8b3 3c02 	ldrh.w	r3, [r3, #3074]	@ 0xc02
 8002b0a:	817b      	strh	r3, [r7, #10]
		break;
 8002b0c:	e02b      	b.n	8002b66 <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b14:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	@ 0xc04
 8002b18:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b20:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	@ 0xc06
 8002b24:	817b      	strh	r3, [r7, #10]
		break;
 8002b26:	e01e      	b.n	8002b66 <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b2e:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 8002b32:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b3a:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 8002b3e:	817b      	strh	r3, [r7, #10]
		break;
 8002b40:	e011      	b.n	8002b66 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b48:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 8002b4c:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b54:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 8002b58:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8002b5a:	23fc      	movs	r3, #252	@ 0xfc
 8002b5c:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2200      	movs	r2, #0
 8002b62:	801a      	strh	r2, [r3, #0]
		break;
 8002b64:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8002b6c:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8002b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10b      	bne.n	8002b8e <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8002b76:	7a7b      	ldrb	r3, [r7, #9]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <select_offset_per_vcsel+0xb6>
 8002b80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b84:	e001      	b.n	8002b8a <select_offset_per_vcsel+0xba>
 8002b86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	8013      	strh	r3, [r2, #0]

	return status;
 8002b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8002b9e:	b490      	push	{r4, r7}
 8002ba0:	b08a      	sub	sp, #40	@ 0x28
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	4611      	mov	r1, r2
 8002baa:	461a      	mov	r2, r3
 8002bac:	460b      	mov	r3, r1
 8002bae:	71fb      	strb	r3, [r7, #7]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int32_t    total_rate_pre = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002bd0:	e021      	b.n	8002c16 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8002bd2:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	0052      	lsls	r2, r2, #1
 8002be0:	441a      	add	r2, r3
 8002be2:	00d3      	lsls	r3, r2, #3
 8002be4:	461a      	mov	r2, r3
 8002be6:	460b      	mov	r3, r1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	440b      	add	r3, r1
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	4413      	add	r3, r2
 8002bf0:	4423      	add	r3, r4
 8002bf2:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002bf6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8002bfa:	6a3a      	ldr	r2, [r7, #32]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8002c00:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	3206      	adds	r2, #6
 8002c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002c10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c12:	3301      	adds	r3, #1
 8002c14:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002c16:	79bb      	ldrb	r3, [r7, #6]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d3d8      	bcc.n	8002bd2 <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d047      	beq.n	8002cb6 <vl53lx_diff_histo_stddev+0x118>
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d044      	beq.n	8002cb6 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002c34:	e03a      	b.n	8002cac <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8002c36:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	461a      	mov	r2, r3
 8002c42:	0052      	lsls	r2, r2, #1
 8002c44:	441a      	add	r2, r3
 8002c46:	00d3      	lsls	r3, r2, #3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	440b      	add	r3, r1
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	4413      	add	r3, r2
 8002c54:	4423      	add	r3, r4
 8002c56:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002c5a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002c5e:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c66:	fb03 f202 	mul.w	r2, r3, r2
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c70:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8002c72:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	3206      	adds	r2, #6
 8002c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c80:	fb03 f202 	mul.w	r2, r3, r2
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c8a:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	69b9      	ldr	r1, [r7, #24]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8002c96:	69b8      	ldr	r0, [r7, #24]
 8002c98:	6979      	ldr	r1, [r7, #20]
 8002c9a:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	441a      	add	r2, r3
 8002ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca4:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002ca6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ca8:	3301      	adds	r3, #1
 8002caa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002cac:	79bb      	ldrb	r3, [r7, #6]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d3bf      	bcc.n	8002c36 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8002cb6:	bf00      	nop
 8002cb8:	3728      	adds	r7, #40	@ 0x28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc90      	pop	{r4, r7}
 8002cbe:	4770      	bx	lr

08002cc0 <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8002cc0:	b5b0      	push	{r4, r5, r7, lr}
 8002cc2:	b08c      	sub	sp, #48	@ 0x30
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3318      	adds	r3, #24
 8002cce:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t    i                        = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	int32_t    TuningBinRecSize		    = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t    timing					= 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8002cf0:	2318      	movs	r3, #24
 8002cf2:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	f248 018f 	movw	r1, #32911	@ 0x808f
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f002 fd10 	bl	8005724 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f248 018e 	movw	r1, #32910	@ 0x808e
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f002 fd08 	bl	8005724 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d1a:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f040 811a 	bne.w	8002f58 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bf0c      	ite	eq
 8002d32:	2301      	moveq	r3, #1
 8002d34:	2300      	movne	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8002d3e:	7efb      	ldrb	r3, [r7, #27]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	7eba      	ldrb	r2, [r7, #26]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d50:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d5e:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002d62:	3b01      	subs	r3, #1
 8002d64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d68:	e004      	b.n	8002d74 <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8002d74:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8002d78:	7efb      	ldrb	r3, [r7, #27]
 8002d7a:	69f8      	ldr	r0, [r7, #28]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	0052      	lsls	r2, r2, #1
 8002d80:	441a      	add	r2, r3
 8002d82:	0153      	lsls	r3, r2, #5
 8002d84:	461a      	mov	r2, r3
 8002d86:	460b      	mov	r3, r1
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	440b      	add	r3, r1
 8002d8c:	019b      	lsls	r3, r3, #6
 8002d8e:	4413      	add	r3, r2
 8002d90:	4403      	add	r3, r0
 8002d92:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	dd0c      	ble.n	8002db6 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 8002d9c:	7e79      	ldrb	r1, [r7, #25]
 8002d9e:	7efa      	ldrb	r2, [r7, #27]
 8002da0:	f107 030c 	add.w	r3, r7, #12
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	460b      	mov	r3, r1
 8002dae:	6839      	ldr	r1, [r7, #0]
 8002db0:	69f8      	ldr	r0, [r7, #28]
 8002db2:	f7ff fef4 	bl	8002b9e <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	db23      	blt.n	8002e06 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8002dc4:	3310      	adds	r3, #16
 8002dc6:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f016 febd 	bl	8019b4c <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c

			recom_been_reset = 1;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

			if (timing == 0)
 8002de4:	7efb      	ldrb	r3, [r7, #27]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002df0:	2206      	movs	r2, #6
 8002df2:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
 8002df6:	e034      	b.n	8002e62 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dfe:	2207      	movs	r2, #7
 8002e00:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
 8002e04:	e02d      	b.n	8002e62 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e0c:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002e10:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002e18:	e01e      	b.n	8002e58 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8002e1a:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8002e1e:	7e39      	ldrb	r1, [r7, #24]
 8002e20:	7efb      	ldrb	r3, [r7, #27]
 8002e22:	f897 5025 	ldrb.w	r5, [r7, #37]	@ 0x25
					pdata->bin_data[i];
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	3006      	adds	r0, #6
 8002e2a:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8002e2e:	69f8      	ldr	r0, [r7, #28]
 8002e30:	461a      	mov	r2, r3
 8002e32:	0052      	lsls	r2, r2, #1
 8002e34:	441a      	add	r2, r3
 8002e36:	00d3      	lsls	r3, r2, #3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	440b      	add	r3, r1
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	4413      	add	r3, r2
 8002e44:	442b      	add	r3, r5
 8002e46:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002e4a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8002e4e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002e52:	3301      	adds	r3, #1
 8002e54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002e58:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8002e5c:	7ebb      	ldrb	r3, [r7, #26]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d3db      	bcc.n	8002e1a <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e68:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d109      	bne.n	8002e8a <vl53lx_histo_merge+0x1ca>
 8002e76:	7efb      	ldrb	r3, [r7, #27]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d106      	bne.n	8002e8a <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
 8002e88:	e00e      	b.n	8002ea8 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 8002e8a:	7efb      	ldrb	r3, [r7, #27]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d10b      	bne.n	8002ea8 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e96:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea4:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8002ea8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d102      	bne.n	8002eb6 <vl53lx_histo_merge+0x1f6>
 8002eb0:	7efb      	ldrb	r3, [r7, #27]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d069      	beq.n	8002f8a <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ebc:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d162      	bne.n	8002f8a <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002ec8:	e008      	b.n	8002edc <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 8002eca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	3206      	adds	r2, #6
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8002ed6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ed8:	3301      	adds	r3, #1
 8002eda:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002edc:	7ebb      	ldrb	r3, [r7, #26]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d3f1      	bcc.n	8002eca <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002eea:	e02f      	b.n	8002f4c <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002ef2:	e023      	b.n	8002f3c <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 8002ef4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	3206      	adds	r2, #6
 8002efa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8002efe:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8002f02:	7efb      	ldrb	r3, [r7, #27]
 8002f04:	8cfd      	ldrh	r5, [r7, #38]	@ 0x26
 8002f06:	69fc      	ldr	r4, [r7, #28]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	0052      	lsls	r2, r2, #1
 8002f0c:	441a      	add	r2, r3
 8002f0e:	00d3      	lsls	r3, r2, #3
 8002f10:	461a      	mov	r2, r3
 8002f12:	460b      	mov	r3, r1
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	440b      	add	r3, r1
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	4413      	add	r3, r2
 8002f1c:	442b      	add	r3, r5
 8002f1e:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002f22:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8002f26:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002f28:	18c1      	adds	r1, r0, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	3206      	adds	r2, #6
 8002f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8002f32:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002f36:	3301      	adds	r3, #1
 8002f38:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002f3c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	dbd6      	blt.n	8002ef4 <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 8002f46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002f48:	3301      	adds	r3, #1
 8002f4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002f4c:	7ebb      	ldrb	r3, [r7, #26]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d3ca      	bcc.n	8002eec <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8002f56:	e018      	b.n	8002f8a <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f5e:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f6c:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
		if (pdev->pos_before_next_recom == 255)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f76:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 8002f7a:	2bff      	cmp	r3, #255	@ 0xff
 8002f7c:	d105      	bne.n	8002f8a <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
}
 8002f8a:	bf00      	nop
 8002f8c:	3728      	adds	r7, #40	@ 0x28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002f94 <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b0c6      	sub	sp, #280	@ 0x118
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f9e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002fa2:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	int32_t patch_tuning = 0;
 8002faa:	2300      	movs	r3, #0
 8002fac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8002fb0:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <VL53LX_load_patch+0x3c>
		status = VL53LX_WrByte(Dev,
 8002fb8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002fbc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2185      	movs	r1, #133	@ 0x85
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	f00e fb59 	bl	801167c <VL53LX_WrByte>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8002fd0:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d106      	bne.n	8002fe6 <VL53LX_load_patch+0x52>
		VL53LX_enable_powerforce(Dev);
 8002fd8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002fdc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	f005 fadc 	bl	800859e <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 8002fe6:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8002fea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002fee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ff2:	f248 018c 	movw	r1, #32908	@ 0x808c
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	f002 fb94 	bl	8005724 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8002ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003000:	2b03      	cmp	r3, #3
 8003002:	d81b      	bhi.n	800303c <VL53LX_load_patch+0xa8>
 8003004:	a201      	add	r2, pc, #4	@ (adr r2, 800300c <VL53LX_load_patch+0x78>)
 8003006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300a:	bf00      	nop
 800300c:	0800301d 	.word	0x0800301d
 8003010:	08003025 	.word	0x08003025
 8003014:	0800302d 	.word	0x0800302d
 8003018:	08003035 	.word	0x08003035
	case 0:
		patch_power = 0x00;
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8003022:	e00e      	b.n	8003042 <VL53LX_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8003024:	2310      	movs	r3, #16
 8003026:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 800302a:	e00a      	b.n	8003042 <VL53LX_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 800302c:	2320      	movs	r3, #32
 800302e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8003032:	e006      	b.n	8003042 <VL53LX_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8003034:	2340      	movs	r3, #64	@ 0x40
 8003036:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 800303a:	e002      	b.n	8003042 <VL53LX_load_patch+0xae>
	default:
		patch_power = 0x00;
 800303c:	2300      	movs	r3, #0
 800303e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 8003042:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8003046:	2b00      	cmp	r3, #0
 8003048:	d134      	bne.n	80030b4 <VL53LX_load_patch+0x120>

		comms_buffer[0] = 0x29;
 800304a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800304e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003052:	2229      	movs	r2, #41	@ 0x29
 8003054:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8003056:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800305a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800305e:	22c9      	movs	r2, #201	@ 0xc9
 8003060:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8003062:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003066:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800306a:	220e      	movs	r2, #14
 800306c:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800306e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003072:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003076:	2240      	movs	r2, #64	@ 0x40
 8003078:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800307a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800307e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003082:	2228      	movs	r2, #40	@ 0x28
 8003084:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8003086:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800308a:	b2da      	uxtb	r2, r3
 800308c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003090:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003094:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 8003096:	f107 020c 	add.w	r2, r7, #12
 800309a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800309e:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80030a2:	2306      	movs	r3, #6
 80030a4:	f240 4176 	movw	r1, #1142	@ 0x476
 80030a8:	6800      	ldr	r0, [r0, #0]
 80030aa:	f00e fa7b 	bl	80115a4 <VL53LX_WriteMulti>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 80030b4:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d132      	bne.n	8003122 <VL53LX_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 80030bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80030c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80030c4:	2203      	movs	r2, #3
 80030c6:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 80030c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80030cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80030d0:	226d      	movs	r2, #109	@ 0x6d
 80030d2:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 80030d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80030d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80030dc:	2203      	movs	r2, #3
 80030de:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 80030e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80030e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80030e8:	226f      	movs	r2, #111	@ 0x6f
 80030ea:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 80030ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80030f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80030f4:	2207      	movs	r2, #7
 80030f6:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80030f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80030fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003100:	2229      	movs	r2, #41	@ 0x29
 8003102:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 8003104:	f107 020c 	add.w	r2, r7, #12
 8003108:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800310c:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8003110:	2306      	movs	r3, #6
 8003112:	f240 4196 	movw	r1, #1174	@ 0x496
 8003116:	6800      	ldr	r0, [r0, #0]
 8003118:	f00e fa44 	bl	80115a4 <VL53LX_WriteMulti>
 800311c:	4603      	mov	r3, r0
 800311e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003122:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8003126:	2b00      	cmp	r3, #0
 8003128:	d11a      	bne.n	8003160 <VL53LX_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 800312a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800312e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8003136:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800313a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800313e:	2207      	movs	r2, #7
 8003140:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8003142:	f107 020c 	add.w	r2, r7, #12
 8003146:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800314a:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800314e:	2302      	movs	r3, #2
 8003150:	f240 4172 	movw	r1, #1138	@ 0x472
 8003154:	6800      	ldr	r0, [r0, #0]
 8003156:	f00e fa25 	bl	80115a4 <VL53LX_WriteMulti>
 800315a:	4603      	mov	r3, r0
 800315c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003160:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8003164:	2b00      	cmp	r3, #0
 8003166:	d11a      	bne.n	800319e <VL53LX_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8003168:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800316c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003170:	2200      	movs	r2, #0
 8003172:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8003174:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003178:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800317c:	2207      	movs	r2, #7
 800317e:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8003180:	f107 020c 	add.w	r2, r7, #12
 8003184:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003188:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800318c:	2302      	movs	r3, #2
 800318e:	f240 4174 	movw	r1, #1140	@ 0x474
 8003192:	6800      	ldr	r0, [r0, #0]
 8003194:	f00e fa06 	bl	80115a4 <VL53LX_WriteMulti>
 8003198:	4603      	mov	r3, r0
 800319a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 800319e:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10c      	bne.n	80031c0 <VL53LX_load_patch+0x22c>
		status = VL53LX_WrByte(Dev,
 80031a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80031aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80031ae:	2201      	movs	r2, #1
 80031b0:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	f00e fa61 	bl	801167c <VL53LX_WrByte>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 80031c0:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10b      	bne.n	80031e0 <VL53LX_load_patch+0x24c>
		status = VL53LX_WrByte(Dev,
 80031c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80031cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80031d0:	2201      	movs	r2, #1
 80031d2:	2185      	movs	r1, #133	@ 0x85
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	f00e fa51 	bl	801167c <VL53LX_WrByte>
 80031da:	4603      	mov	r3, r0
 80031dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80031e0:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop

080031f0 <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 80031fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d106      	bne.n	8003212 <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 8003204:	2200      	movs	r2, #0
 8003206:	2185      	movs	r1, #133	@ 0x85
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f00e fa37 	bl	801167c <VL53LX_WrByte>
 800320e:	4603      	mov	r3, r0
 8003210:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d102      	bne.n	8003220 <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f005 f9d1 	bl	80085c2 <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 8003220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d107      	bne.n	8003238 <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 8003228:	2200      	movs	r2, #0
 800322a:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f00e fa24 	bl	801167c <VL53LX_WrByte>
 8003234:	4603      	mov	r3, r0
 8003236:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d106      	bne.n	800324e <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 8003240:	2201      	movs	r2, #1
 8003242:	2185      	movs	r1, #133	@ 0x85
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f00e fa19 	bl	801167c <VL53LX_WrByte>
 800324a:	4603      	mov	r3, r0
 800324c:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800324e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800325a:	b5b0      	push	{r4, r5, r7, lr}
 800325c:	b08a      	sub	sp, #40	@ 0x28
 800325e:	af04      	add	r7, sp, #16
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8003266:	2300      	movs	r3, #0
 8003268:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3318      	adds	r3, #24
 800326e:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003276:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 800327c:	2162      	movs	r1, #98	@ 0x62
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f004 fa12 	bl	80076a8 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2204      	movs	r2, #4
 8003288:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2205      	movs	r2, #5
 8003294:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
	pres->zone_results.active_zones    = 0;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80032a0:	2300      	movs	r3, #0
 80032a2:	75bb      	strb	r3, [r7, #22]
 80032a4:	e01b      	b.n	80032de <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 80032a6:	7dba      	ldrb	r2, [r7, #22]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4413      	add	r3, r2
 80032b8:	3308      	adds	r3, #8
 80032ba:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2200      	movs	r2, #0
 80032c0:	639a      	str	r2, [r3, #56]	@ 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2200      	movs	r2, #0
 80032c6:	63da      	str	r2, [r3, #60]	@ 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		pobjects->xmonitor.range_status =
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80032d8:	7dbb      	ldrb	r3, [r7, #22]
 80032da:	3301      	adds	r3, #1
 80032dc:	75bb      	strb	r3, [r7, #22]
 80032de:	7dbb      	ldrb	r3, [r7, #22]
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d9e0      	bls.n	80032a6 <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2205      	movs	r2, #5
 80032e8:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
	pres->zone_hists.active_zones      = 0;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 232d 	strb.w	r2, [r3, #813]	@ 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2205      	movs	r2, #5
 80032f8:	f883 238f 	strb.w	r2, [r3, #911]	@ 0x38f
	pres->zone_cal.active_zones        = 0;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2390 	strb.w	r2, [r3, #912]	@ 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003304:	2300      	movs	r3, #0
 8003306:	75bb      	strb	r3, [r7, #22]
 8003308:	e039      	b.n	800337e <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 800330a:	7dba      	ldrb	r2, [r7, #22]
 800330c:	68f9      	ldr	r1, [r7, #12]
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	f503 7365 	add.w	r3, r3, #916	@ 0x394
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 8003320:	7dba      	ldrb	r2, [r7, #22]
 8003322:	68f9      	ldr	r1, [r7, #12]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 8003336:	7dba      	ldrb	r2, [r7, #22]
 8003338:	68f9      	ldr	r1, [r7, #12]
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	f503 7367 	add.w	r3, r3, #924	@ 0x39c
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 800334c:	7dba      	ldrb	r2, [r7, #22]
 800334e:	68f9      	ldr	r1, [r7, #12]
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 8003362:	7dba      	ldrb	r2, [r7, #22]
 8003364:	68f9      	ldr	r1, [r7, #12]
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	f503 736b 	add.w	r3, r3, #940	@ 0x3ac
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003378:	7dbb      	ldrb	r3, [r7, #22]
 800337a:	3301      	adds	r3, #1
 800337c:	75bb      	strb	r3, [r7, #22]
 800337e:	7dbb      	ldrb	r3, [r7, #22]
 8003380:	2b04      	cmp	r3, #4
 8003382:	d9c2      	bls.n	800330a <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	221e      	movs	r2, #30
 800338e:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2200      	movs	r2, #0
 8003394:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	2200      	movs	r2, #0
 800339a:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2201      	movs	r2, #1
 80033a0:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2201      	movs	r2, #1
 80033a6:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2201      	movs	r2, #1
 80033ac:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80033b4:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80033bc:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80033c4:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2264      	movs	r2, #100	@ 0x64
 80033ca:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80033d2:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033e2:	2203      	movs	r2, #3
 80033e4:	f883 22e2 	strb.w	r2, [r3, #738]	@ 0x2e2
	pdev->offset_results.active_results = 0;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3



	pdev->gain_cal.standard_ranging_gain_factor =
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f240 72db 	movw	r2, #2011	@ 0x7db
 80033fa:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 8003404:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f004 f931 	bl	8007670 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8003414:	3310      	adds	r3, #16
 8003416:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f016 fb95 	bl	8019b4c <memset>
	pdev->bin_rec_pos = 0;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
	pdev->pos_before_next_recom = 0;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <VL53LX_data_init+0x1f8>
 8003440:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d104      	bne.n	8003452 <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f8b7 	bl	80035bc <VL53LX_read_p2p_data>
 800344e:	4603      	mov	r3, r0
 8003450:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8003452:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003460:	4618      	mov	r0, r3
 8003462:	f003 f8dd 	bl	8006620 <VL53LX_init_refspadchar_config_struct>
 8003466:	4603      	mov	r3, r0
 8003468:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 800346a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d107      	bne.n	8003482 <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003478:	4618      	mov	r0, r3
 800347a:	f003 f8f5 	bl	8006668 <VL53LX_init_ssc_config_struct>
 800347e:	4603      	mov	r3, r0
 8003480:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003482:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10b      	bne.n	80034a2 <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
 800349a:	f003 f906 	bl	80066aa <VL53LX_init_xtalk_config_struct>
 800349e:	4603      	mov	r3, r0
 80034a0:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 80034a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d107      	bne.n	80034ba <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 f96d 	bl	8006790 <VL53LX_init_xtalk_extract_config_struct>
 80034b6:	4603      	mov	r3, r0
 80034b8:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 80034ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d107      	bne.n	80034d2 <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f003 f990 	bl	80067ee <VL53LX_init_offset_cal_config_struct>
 80034ce:	4603      	mov	r3, r0
 80034d0:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 80034d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80034e0:	4618      	mov	r0, r3
 80034e2:	f003 f9ab 	bl	800683c <VL53LX_init_zone_cal_config_struct>
 80034e6:	4603      	mov	r3, r0
 80034e8:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 80034ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10b      	bne.n	800350a <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80034fe:	4619      	mov	r1, r3
 8003500:	4610      	mov	r0, r2
 8003502:	f003 f9bf 	bl	8006884 <VL53LX_init_hist_post_process_config_struct>
 8003506:	4603      	mov	r3, r0
 8003508:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 800350a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d107      	bne.n	8003522 <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003518:	4618      	mov	r0, r3
 800351a:	f003 fbbe 	bl	8006c9a <VL53LX_init_hist_gen3_dmax_config_struct>
 800351e:	4603      	mov	r3, r0
 8003520:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003522:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	33f8      	adds	r3, #248	@ 0xf8
 800352e:	4618      	mov	r0, r3
 8003530:	f003 fa17 	bl	8006962 <VL53LX_init_tuning_parm_storage_struct>
 8003534:	4603      	mov	r3, r0
 8003536:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 8003538:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d116      	bne.n	800356e <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	7858      	ldrb	r0, [r3, #1]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	8b1c      	ldrh	r4, [r3, #24]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	689d      	ldr	r5, [r3, #8]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	6912      	ldr	r2, [r2, #16]
 8003554:	6939      	ldr	r1, [r7, #16]
 8003556:	6949      	ldr	r1, [r1, #20]
 8003558:	9102      	str	r1, [sp, #8]
 800355a:	9201      	str	r2, [sp, #4]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	462b      	mov	r3, r5
 8003560:	4622      	mov	r2, r4
 8003562:	4601      	mov	r1, r0
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fb3c 	bl	8003be2 <VL53LX_set_preset_mode>
 800356a:	4603      	mov	r3, r0
 800356c:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003574:	461a      	mov	r2, r3
 8003576:	2118      	movs	r1, #24
 8003578:	2000      	movs	r0, #0
 800357a:	f008 fc74 	bl	800be66 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8003584:	461a      	mov	r2, r3
 8003586:	2118      	movs	r1, #24
 8003588:	2000      	movs	r0, #0
 800358a:	f008 fc6c 	bl	800be66 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f203 531c 	addw	r3, r3, #1308	@ 0x51c
 8003594:	461a      	mov	r2, r3
 8003596:	210c      	movs	r1, #12
 8003598:	2000      	movs	r0, #0
 800359a:	f004 fe25 	bl	80081e8 <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f007 fe45 	bl	800b22e <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f007 fd4b 	bl	800b040 <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f007 fe6a 	bl	800b284 <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80035b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bdb0      	pop	{r4, r5, r7, pc}

080035bc <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b091      	sub	sp, #68	@ 0x44
 80035c0:	af04      	add	r7, sp, #16
 80035c2:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3318      	adds	r3, #24
 80035ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80035d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d2:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80035d6:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80035d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035da:	3348      	adds	r3, #72	@ 0x48
 80035dc:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 80035de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e0:	339c      	adds	r3, #156	@ 0x9c
 80035e2:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80035e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 80035ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ee:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 80035f2:	4619      	mov	r1, r3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f00b ffb2 	bl	800f55e <VL53LX_get_static_nvm_managed>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 8003600:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003604:	2b00      	cmp	r3, #0
 8003606:	d108      	bne.n	800361a <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 8003608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360a:	3348      	adds	r3, #72	@ 0x48
 800360c:	4619      	mov	r1, r3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f00c f8e3 	bl	800f7da <VL53LX_get_customer_nvm_managed>
 8003614:	4603      	mov	r3, r0
 8003616:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 800361a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800361e:	2b00      	cmp	r3, #0
 8003620:	d117      	bne.n	8003652 <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 8003622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003624:	f203 3392 	addw	r3, r3, #914	@ 0x392
 8003628:	4619      	mov	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f00c ffdf 	bl	80105ee <VL53LX_get_nvm_copy_data>
 8003630:	4603      	mov	r3, r0
 8003632:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 8003636:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 800363e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003640:	f203 3292 	addw	r2, r3, #914	@ 0x392
 8003644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003646:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800364a:	4619      	mov	r1, r3
 800364c:	4610      	mov	r0, r2
 800364e:	f004 fb21 	bl	8007c94 <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 8003652:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10e      	bne.n	8003678 <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	895b      	ldrh	r3, [r3, #10]
 800365e:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8003660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003662:	62da      	str	r2, [r3, #44]	@ 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	865a      	strh	r2, [r3, #50]	@ 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 8003678:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800367c:	2b00      	cmp	r3, #0
 800367e:	d108      	bne.n	8003692 <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 8003680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003682:	33c0      	adds	r3, #192	@ 0xc0
 8003684:	4619      	mov	r1, r3
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f00b fe1d 	bl	800f2c6 <VL53LX_read_nvm_optical_centre>
 800368c:	4603      	mov	r3, r0
 800368e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 8003692:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003696:	2b00      	cmp	r3, #0
 8003698:	d108      	bne.n	80036ac <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 800369a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369c:	3360      	adds	r3, #96	@ 0x60
 800369e:	4619      	mov	r1, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f00b fe33 	bl	800f30c <VL53LX_read_nvm_cal_peak_rate_map>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 80036ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d12d      	bne.n	8003710 <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b6:	339c      	adds	r3, #156	@ 0x9c
 80036b8:	4619      	mov	r1, r3
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f00b fe4c 	bl	800f358 <VL53LX_read_nvm_additional_offset_cal_data>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	889b      	ldrh	r3, [r3, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d120      	bne.n	8003710 <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d11c      	bne.n	8003710 <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	2280      	movs	r2, #128	@ 0x80
 80036da:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80036e2:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 80036e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e6:	f893 03c2 	ldrb.w	r0, [r3, #962]	@ 0x3c2
 80036ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ec:	f893 43c3 	ldrb.w	r4, [r3, #963]	@ 0x3c3
 80036f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f2:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	69f9      	ldr	r1, [r7, #28]
 80036fa:	3102      	adds	r1, #2
 80036fc:	9103      	str	r1, [sp, #12]
 80036fe:	9202      	str	r2, [sp, #8]
 8003700:	2238      	movs	r2, #56	@ 0x38
 8003702:	9201      	str	r2, [sp, #4]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	23ff      	movs	r3, #255	@ 0xff
 8003708:	22c7      	movs	r2, #199	@ 0xc7
 800370a:	4621      	mov	r1, r4
 800370c:	f006 fb30 	bl	8009d70 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 8003710:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003714:	2b00      	cmp	r3, #0
 8003716:	d12f      	bne.n	8003778 <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8003718:	f107 030c 	add.w	r3, r7, #12
 800371c:	461a      	mov	r2, r3
 800371e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f00b fe3b 	bl	800f39e <VL53LX_read_nvm_fmt_range_results_data>
 8003728:	4603      	mov	r3, r0
 800372a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 800372e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003732:	2b00      	cmp	r3, #0
 8003734:	d120      	bne.n	8003778 <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8003736:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8003738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373a:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 800373e:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8003740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003742:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8003746:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8003748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374a:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 800374e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003750:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003754:	2b00      	cmp	r3, #0
 8003756:	d006      	beq.n	8003766 <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8003758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 800375e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003760:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
 8003764:	e003      	b.n	800376e <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8003766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003768:	2214      	movs	r2, #20
 800376a:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 800376e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003770:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003774:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 8003778:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10b      	bne.n	8003798 <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 8003780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003782:	f503 539b 	add.w	r3, r3, #4960	@ 0x1360
 8003786:	3304      	adds	r3, #4
 8003788:	461a      	mov	r2, r3
 800378a:	21de      	movs	r1, #222	@ 0xde
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f00e f805 	bl	801179c <VL53LX_RdWord>
 8003792:	4603      	mov	r3, r0
 8003794:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8003798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379a:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 800379e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a2:	d204      	bcs.n	80037ae <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80037a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a6:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 80037aa:	f8a3 22de 	strh.w	r2, [r3, #734]	@ 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 80037ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d108      	bne.n	80037c8 <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 80037b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b8:	33bc      	adds	r3, #188	@ 0xbc
 80037ba:	4619      	mov	r1, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f918 	bl	80039f2 <VL53LX_get_mode_mitigation_roi>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 80037c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ca:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d114      	bne.n	80037fc <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 80037d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d4:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10f      	bne.n	80037fc <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 80037dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037de:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 80037e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 80037ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ee:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 80037f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 80037fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8003800:	4618      	mov	r0, r3
 8003802:	3734      	adds	r7, #52	@ 0x34
 8003804:	46bd      	mov	sp, r7
 8003806:	bd90      	pop	{r4, r7, pc}

08003808 <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003812:	2300      	movs	r3, #0
 8003814:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3318      	adds	r3, #24
 800381a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003822:	f8b3 3364 	ldrh.w	r3, [r3, #868]	@ 0x364
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800382a:	23f1      	movs	r3, #241	@ 0xf1
 800382c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 800382e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10e      	bne.n	8003854 <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003842:	f8b3 3364 	ldrh.w	r3, [r3, #868]	@ 0x364
 8003846:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 8003854:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003872:	2300      	movs	r3, #0
 8003874:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3318      	adds	r3, #24
 800387a:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003886:	23f1      	movs	r3, #241	@ 0xf1
 8003888:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 800388a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d11b      	bne.n	80038ca <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f8b3 12de 	ldrh.w	r1, [r3, #734]	@ 0x2de
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	f502 724d 	add.w	r2, r2, #820	@ 0x334
 80038b6:	9201      	str	r2, [sp, #4]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	460b      	mov	r3, r1
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	68b8      	ldr	r0, [r7, #8]
 80038c2:	f005 f834 	bl	800892e <VL53LX_calc_timeout_register_values>
 80038c6:	4603      	mov	r3, r0
 80038c8:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 80038ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b088      	sub	sp, #32
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3318      	adds	r3, #24
 80038ec:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003900:	23f1      	movs	r3, #241	@ 0xf1
 8003902:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8003904:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d148      	bne.n	800399e <VL53LX_get_timeouts_us+0xc8>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f8b3 22de 	ldrh.w	r2, [r3, #734]	@ 0x2de
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 8003918:	4619      	mov	r1, r3
 800391a:	4610      	mov	r0, r2
 800391c:	f004 fe80 	bl	8008620 <VL53LX_calc_macro_period_us>
 8003920:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
			VL53LX_calc_timeout_us(
 8003928:	6979      	ldr	r1, [r7, #20]
 800392a:	4618      	mov	r0, r3
 800392c:	f004 ff3f 	bl	80087ae <VL53LX_calc_timeout_us>
 8003930:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
		timeout_encoded =
 800393c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800393e:	8a7b      	ldrh	r3, [r7, #18]
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	f892 2335 	ldrb.w	r2, [r2, #821]	@ 0x335
		timeout_encoded = (timeout_encoded << 8) +
 800394a:	4413      	add	r3, r2
 800394c:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 800394e:	8a7b      	ldrh	r3, [r7, #18]
 8003950:	6979      	ldr	r1, [r7, #20]
 8003952:	4618      	mov	r0, r3
 8003954:	f004 ff92 	bl	800887c <VL53LX_calc_decoded_timeout_us>
 8003958:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
		timeout_encoded =
 8003964:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003966:	8a7b      	ldrh	r3, [r7, #18]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	b29b      	uxth	r3, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	f892 2339 	ldrb.w	r2, [r2, #825]	@ 0x339
		timeout_encoded = (timeout_encoded << 8) +
 8003972:	4413      	add	r3, r2
 8003974:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8003976:	8a7b      	ldrh	r3, [r7, #18]
 8003978:	6979      	ldr	r1, [r7, #20]
 800397a:	4618      	mov	r0, r3
 800397c:	f004 ff7e 	bl	800887c <VL53LX_calc_decoded_timeout_us>
 8003980:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800399e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3318      	adds	r3, #24
 80039bc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	7858      	ldrb	r0, [r3, #1]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	7819      	ldrb	r1, [r3, #0]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f203 335b 	addw	r3, r3, #859	@ 0x35b
 80039cc:	461a      	mov	r2, r3
 80039ce:	f006 f84e 	bl	8009a6e <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	7898      	ldrb	r0, [r3, #2]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	78d9      	ldrb	r1, [r3, #3]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80039e0:	461a      	mov	r2, r3
 80039e2:	f006 f883 	bl	8009aec <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 80039e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b086      	sub	sp, #24
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3318      	adds	r3, #24
 8003a04:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f893 33c2 	ldrb.w	r3, [r3, #962]	@ 0x3c2
 8003a18:	f107 020e 	add.w	r2, r7, #14
 8003a1c:	f107 010d 	add.w	r1, r7, #13
 8003a20:	4618      	mov	r0, r3
 8003a22:	f008 fac9 	bl	800bfb8 <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8003a26:	7bba      	ldrb	r2, [r7, #14]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8003a2c:	7b7a      	ldrb	r2, [r7, #13]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f893 33c3 	ldrb.w	r3, [r3, #963]	@ 0x3c3
 8003a38:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8003a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73fb      	strb	r3, [r7, #15]
 8003a6c:	e008      	b.n	8003a80 <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	4413      	add	r3, r2
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	for (i = 0; i < pdata->max_zones; i++)
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	7bfa      	ldrb	r2, [r7, #15]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d3f1      	bcc.n	8003a6e <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8003a8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3318      	adds	r3, #24
 8003aac:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f103 00de 	add.w	r0, r3, #222	@ 0xde
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	331c      	adds	r3, #28
 8003ab8:	2214      	movs	r2, #20
 8003aba:	4619      	mov	r1, r3
 8003abc:	f016 f92b 	bl	8019d16 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	781a      	ldrb	r2, [r3, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	785a      	ldrb	r2, [r3, #1]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	33c2      	adds	r3, #194	@ 0xc2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff ffbf 	bl	8003a5c <VL53LX_init_zone_config_histogram_bins>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	785b      	ldrb	r3, [r3, #1]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d104      	bne.n	8003af4 <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
 8003af2:	e00f      	b.n	8003b14 <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	785b      	ldrb	r3, [r3, #1]
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d807      	bhi.n	8003b0c <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	785b      	ldrb	r3, [r3, #1]
 8003b00:	3301      	adds	r3, #1
 8003b02:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
 8003b0a:	e003      	b.n	8003b14 <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2206      	movs	r2, #6
 8003b10:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8003b14:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3318      	adds	r3, #24
 8003b38:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8003b3a:	7afb      	ldrb	r3, [r7, #11]
 8003b3c:	2b21      	cmp	r3, #33	@ 0x21
 8003b3e:	d030      	beq.n	8003ba2 <VL53LX_get_preset_mode_timing_cfg+0x82>
 8003b40:	2b21      	cmp	r3, #33	@ 0x21
 8003b42:	dc43      	bgt.n	8003bcc <VL53LX_get_preset_mode_timing_cfg+0xac>
 8003b44:	2b1b      	cmp	r3, #27
 8003b46:	d002      	beq.n	8003b4e <VL53LX_get_preset_mode_timing_cfg+0x2e>
 8003b48:	2b1e      	cmp	r3, #30
 8003b4a:	d015      	beq.n	8003b78 <VL53LX_get_preset_mode_timing_cfg+0x58>
 8003b4c:	e03e      	b.n	8003bcc <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
		*pphasecal_config_timeout_us =
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	601a      	str	r2, [r3, #0]

	break;
 8003b76:	e02c      	b.n	8003bd2 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
		*pphasecal_config_timeout_us =
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9e:	601a      	str	r2, [r3, #0]
	break;
 8003ba0:	e017      	b.n	8003bd2 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
		*pphasecal_config_timeout_us =
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	601a      	str	r2, [r3, #0]
	break;
 8003bca:	e002      	b.n	8003bd2 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003bcc:	23fc      	movs	r3, #252	@ 0xfc
 8003bce:	75fb      	strb	r3, [r7, #23]
		break;
 8003bd0:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8003bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b096      	sub	sp, #88	@ 0x58
 8003be6:	af06      	add	r7, sp, #24
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	607b      	str	r3, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	72fb      	strb	r3, [r7, #11]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53LX_LLDriverData_t *pdev =
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3318      	adds	r3, #24
 8003bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003c06:	637b      	str	r3, [r7, #52]	@ 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8003c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0a:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003c0e:	633b      	str	r3, [r7, #48]	@ 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c12:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8003c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8003c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c1a:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8003c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c22:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2a:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003c2e:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c32:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003c36:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003c3e:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8003c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c42:	33c2      	adds	r3, #194	@ 0xc2
 8003c44:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8003c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c48:	33f8      	adds	r3, #248	@ 0xf8
 8003c4a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4e:	7afa      	ldrb	r2, [r7, #11]
 8003c50:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8003c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c56:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8003c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c5c:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003c62:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 8003c64:	2103      	movs	r1, #3
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f003 fd1e 	bl	80076a8 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8003c6c:	7afb      	ldrb	r3, [r7, #11]
 8003c6e:	2b21      	cmp	r3, #33	@ 0x21
 8003c70:	d02e      	beq.n	8003cd0 <VL53LX_set_preset_mode+0xee>
 8003c72:	2b21      	cmp	r3, #33	@ 0x21
 8003c74:	dc40      	bgt.n	8003cf8 <VL53LX_set_preset_mode+0x116>
 8003c76:	2b1b      	cmp	r3, #27
 8003c78:	d002      	beq.n	8003c80 <VL53LX_set_preset_mode+0x9e>
 8003c7a:	2b1e      	cmp	r3, #30
 8003c7c:	d014      	beq.n	8003ca8 <VL53LX_set_preset_mode+0xc6>
 8003c7e:	e03b      	b.n	8003cf8 <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	9304      	str	r3, [sp, #16]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	9303      	str	r3, [sp, #12]
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	9302      	str	r3, [sp, #8]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	9301      	str	r3, [sp, #4]
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c9c:	f003 fa41 	bl	8007122 <VL53LX_preset_mode_histogram_long_range>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003ca6:	e02b      	b.n	8003d00 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	9304      	str	r3, [sp, #16]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	9303      	str	r3, [sp, #12]
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	9302      	str	r3, [sp, #8]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cc4:	f003 facb 	bl	800725e <VL53LX_preset_mode_histogram_medium_range>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003cce:	e017      	b.n	8003d00 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	9304      	str	r3, [sp, #16]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	9303      	str	r3, [sp, #12]
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	9302      	str	r3, [sp, #8]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ce8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cec:	f003 fb55 	bl	800739a <VL53LX_preset_mode_histogram_short_range>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003cf6:	e003      	b.n	8003d00 <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003cf8:	23fc      	movs	r3, #252	@ 0xfc
 8003cfa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		break;
 8003cfe:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 8003d00:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 8003d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0a:	893a      	ldrh	r2, [r7, #8]
 8003d0c:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d10:	893a      	ldrh	r2, [r7, #8]
 8003d12:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 8003d14:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d108      	bne.n	8003d2e <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 8003d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f7ff fd9e 	bl	8003864 <VL53LX_set_timeouts_us>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 8003d2e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8003d36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f7ff fd65 	bl	8003808 <VL53LX_set_inter_measurement_period_ms>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8003d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d46:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
	V53L1_init_zone_results_structure(
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d50:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003d54:	4619      	mov	r1, r3
 8003d56:	4610      	mov	r0, r2
 8003d58:	f004 f8bc 	bl	8007ed4 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8003d5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3740      	adds	r7, #64	@ 0x40
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b0d2      	sub	sp, #328	@ 0x148
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d72:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003d76:	6018      	str	r0, [r3, #0]
 8003d78:	4608      	mov	r0, r1
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d80:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8003d84:	4602      	mov	r2, r0
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d8c:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003d90:	460a      	mov	r2, r1
 8003d92:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003d9a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d9e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3318      	adds	r3, #24
 8003da6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	VL53LX_LLDriverResults_t  *pres =
 8003daa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003dae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003db8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8003dbc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003dc0:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8003dc4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8003dc8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003dcc:	3348      	adds	r3, #72	@ 0x48
 8003dce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003dd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003dd6:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8003dda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003dde:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003de2:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003de6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003dea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003dee:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003df2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003df6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003dfa:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003dfe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003e02:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e06:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003e0a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8003e0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e12:	332c      	adds	r3, #44	@ 0x2c
 8003e14:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003e18:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e1c:	3348      	adds	r3, #72	@ 0x48
 8003e1e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8003e22:	f107 030c 	add.w	r3, r7, #12
 8003e26:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint16_t i                          = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t i2c_index                  = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8003e42:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e46:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8003e4a:	f2a2 1245 	subw	r2, r2, #325	@ 0x145
 8003e4e:	7812      	ldrb	r2, [r2, #0]
 8003e50:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8003e52:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003e56:	791b      	ldrb	r3, [r3, #4]
 8003e58:	b25b      	sxtb	r3, r3
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8003e60:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e64:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8003e68:	f993 3000 	ldrsb.w	r3, [r3]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	b25b      	sxtb	r3, r3
 8003e70:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8003e72:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003e76:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8003e78:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e7c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
		VL53LX_set_user_zone(
 8003e80:	3336      	adds	r3, #54	@ 0x36
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8003e88:	4413      	add	r3, r2
 8003e8a:	1d9a      	adds	r2, r3, #6
 8003e8c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e90:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003e94:	4611      	mov	r1, r2
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	f7ff fd87 	bl	80039aa <VL53LX_set_user_zone>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8003ea2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003ea6:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d019      	beq.n	8003ee2 <VL53LX_init_and_start_range+0x17a>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8003eae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003eb2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003eb6:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003ec4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003ec8:	4413      	add	r3, r2
 8003eca:	1c9a      	adds	r2, r3, #2
 8003ecc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ed0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	6818      	ldr	r0, [r3, #0]
 8003ed8:	f001 fbbc 	bl	8005654 <VL53LX_set_zone_dss_config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8003ee2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003ee6:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10d      	bne.n	8003f0e <VL53LX_init_and_start_range+0x1a6>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8003ef2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d107      	bne.n	8003f0e <VL53LX_init_and_start_range+0x1a6>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8003efe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003f02:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	@ 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8003f06:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003f0a:	f8a3 2316 	strh.w	r2, [r3, #790]	@ 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8003f0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f16:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8003f1a:	2bff      	cmp	r3, #255	@ 0xff
 8003f1c:	d106      	bne.n	8003f2c <VL53LX_init_and_start_range+0x1c4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8003f1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003f22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003f2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003f30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f34:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d139      	bne.n	8003fb0 <VL53LX_init_and_start_range+0x248>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8003f3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003f40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f44:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d131      	bne.n	8003fb0 <VL53LX_init_and_start_range+0x248>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8003f4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003f50:	f893 2320 	ldrb.w	r2, [r3, #800]	@ 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 8003f54:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f5c:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8003f60:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 8003f6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003f6e:	f893 335d 	ldrb.w	r3, [r3, #861]	@ 0x35d
 8003f72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d109      	bne.n	8003f8e <VL53LX_init_and_start_range+0x226>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8003f7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f7e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003f82:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8003f84:	b21a      	sxth	r2, r3
 8003f86:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f8a:	825a      	strh	r2, [r3, #18]
 8003f8c:	e003      	b.n	8003f96 <VL53LX_init_and_start_range+0x22e>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8003f8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f92:	2200      	movs	r2, #0
 8003f94:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8003f96:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f9a:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d805      	bhi.n	8003fb0 <VL53LX_init_and_start_range+0x248>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8003fa4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003fa8:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003fac:	2205      	movs	r2, #5
 8003fae:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003fb0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fb8:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d117      	bne.n	8003ff0 <VL53LX_init_and_start_range+0x288>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8003fc0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003fc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fc8:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d10f      	bne.n	8003ff0 <VL53LX_init_and_start_range+0x288>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8003fd0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003fd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fd8:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
		pdev->gen_cfg.system__interrupt_config_gpio =
 8003fdc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003fe0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 8003fe4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003fe8:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003fec:	2206      	movs	r2, #6
 8003fee:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 8003ff0:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <VL53LX_init_and_start_range+0x2a4>
		status = VL53LX_save_cfg_data(Dev);
 8003ff8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ffc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	f006 f81f 	bl	800a044 <VL53LX_save_cfg_data>
 8004006:	4603      	mov	r3, r0
 8004008:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147



	switch (device_config_level) {
 800400c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004010:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	3b01      	subs	r3, #1
 8004018:	2b05      	cmp	r3, #5
 800401a:	d827      	bhi.n	800406c <VL53LX_init_and_start_range+0x304>
 800401c:	a201      	add	r2, pc, #4	@ (adr r2, 8004024 <VL53LX_init_and_start_range+0x2bc>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004065 	.word	0x08004065
 8004028:	0800405d 	.word	0x0800405d
 800402c:	08004055 	.word	0x08004055
 8004030:	0800404d 	.word	0x0800404d
 8004034:	08004045 	.word	0x08004045
 8004038:	0800403d 	.word	0x0800403d
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 800403c:	2301      	movs	r3, #1
 800403e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8004042:	e017      	b.n	8004074 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8004044:	230d      	movs	r3, #13
 8004046:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 800404a:	e013      	b.n	8004074 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 800404c:	2324      	movs	r3, #36	@ 0x24
 800404e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8004052:	e00f      	b.n	8004074 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 8004054:	2344      	movs	r3, #68	@ 0x44
 8004056:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 800405a:	e00b      	b.n	8004074 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 800405c:	235a      	movs	r3, #90	@ 0x5a
 800405e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8004062:	e007      	b.n	8004074 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 8004064:	2371      	movs	r3, #113	@ 0x71
 8004066:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 800406a:	e003      	b.n	8004074 <VL53LX_init_and_start_range+0x30c>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 800406c:	2383      	movs	r3, #131	@ 0x83
 800406e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8004072:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8004074:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8004078:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 800407c:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8004080:	f107 030c 	add.w	r3, r7, #12
 8004084:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8004088:	2300      	movs	r3, #0
 800408a:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 800408e:	e00b      	b.n	80040a8 <VL53LX_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8004090:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	f8c7 2140 	str.w	r2, [r7, #320]	@ 0x140
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 800409e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 80040a2:	3301      	adds	r3, #1
 80040a4:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 80040a8:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
 80040ac:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d3ed      	bcc.n	8004090 <VL53LX_init_and_start_range+0x328>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 80040b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040b8:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d917      	bls.n	80040f2 <VL53LX_init_and_start_range+0x38a>
 80040c2:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d113      	bne.n	80040f2 <VL53LX_init_and_start_range+0x38a>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80040ca:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80040ce:	f1c3 0301 	rsb	r3, r3, #1
 80040d2:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80040d6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 80040da:	f107 020c 	add.w	r2, r7, #12
 80040de:	4413      	add	r3, r2
 80040e0:	461a      	mov	r2, r3
 80040e2:	210b      	movs	r1, #11
 80040e4:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80040e8:	f00b f984 	bl	800f3f4 <VL53LX_i2c_encode_static_nvm_managed>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80040f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040f6:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d917      	bls.n	8004130 <VL53LX_init_and_start_range+0x3c8>
 8004100:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004104:	2b00      	cmp	r3, #0
 8004106:	d113      	bne.n	8004130 <VL53LX_init_and_start_range+0x3c8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004108:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800410c:	f1c3 030d 	rsb	r3, r3, #13
 8004110:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004114:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8004118:	f107 020c 	add.w	r2, r7, #12
 800411c:	4413      	add	r3, r2
 800411e:	461a      	mov	r2, r3
 8004120:	2117      	movs	r1, #23
 8004122:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8004126:	f00b fa41 	bl	800f5ac <VL53LX_i2c_encode_customer_nvm_managed>
 800412a:	4603      	mov	r3, r0
 800412c:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8004130:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004134:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d917      	bls.n	800416e <VL53LX_init_and_start_range+0x406>
 800413e:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004142:	2b00      	cmp	r3, #0
 8004144:	d113      	bne.n	800416e <VL53LX_init_and_start_range+0x406>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004146:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800414a:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 800414e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004152:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_config(
 8004156:	f107 020c 	add.w	r2, r7, #12
 800415a:	4413      	add	r3, r2
 800415c:	461a      	mov	r2, r3
 800415e:	2120      	movs	r1, #32
 8004160:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8004164:	f00b fb84 	bl	800f870 <VL53LX_i2c_encode_static_config>
 8004168:	4603      	mov	r3, r0
 800416a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800416e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004172:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d917      	bls.n	80041ac <VL53LX_init_and_start_range+0x444>
 800417c:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004180:	2b00      	cmp	r3, #0
 8004182:	d113      	bne.n	80041ac <VL53LX_init_and_start_range+0x444>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004184:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8004188:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 800418c:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004190:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_general_config(
 8004194:	f107 020c 	add.w	r2, r7, #12
 8004198:	4413      	add	r3, r2
 800419a:	461a      	mov	r2, r3
 800419c:	2116      	movs	r1, #22
 800419e:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80041a2:	f00b fc48 	bl	800fa36 <VL53LX_i2c_encode_general_config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80041ac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80041b0:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d917      	bls.n	80041ea <VL53LX_init_and_start_range+0x482>
 80041ba:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d113      	bne.n	80041ea <VL53LX_init_and_start_range+0x482>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80041c2:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80041c6:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 80041ca:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80041ce:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_timing_config(
 80041d2:	f107 020c 	add.w	r2, r7, #12
 80041d6:	4413      	add	r3, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	2117      	movs	r1, #23
 80041dc:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80041e0:	f00b fcad 	bl	800fb3e <VL53LX_i2c_encode_timing_config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80041ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80041ee:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d036      	beq.n	8004266 <VL53LX_init_and_start_range+0x4fe>
 80041f8:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d132      	bne.n	8004266 <VL53LX_init_and_start_range+0x4fe>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004200:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8004204:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8004208:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 800420c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004210:	791b      	ldrb	r3, [r3, #4]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	d017      	beq.n	800424a <VL53LX_init_and_start_range+0x4e2>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421e:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	b2da      	uxtb	r2, r3
 8004226:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800422a:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 800422c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004230:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	b2da      	uxtb	r2, r3
 8004238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800423c:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004242:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8004244:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004248:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800424a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_dynamic_config(
 800424e:	f107 020c 	add.w	r2, r7, #12
 8004252:	4413      	add	r3, r2
 8004254:	461a      	mov	r2, r3
 8004256:	2112      	movs	r1, #18
 8004258:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800425c:	f00b fcf1 	bl	800fc42 <VL53LX_i2c_encode_dynamic_config>
 8004260:	4603      	mov	r3, r0
 8004262:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 8004266:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800426a:	2b00      	cmp	r3, #0
 800426c:	d113      	bne.n	8004296 <VL53LX_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 800426e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8004272:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 8004276:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800427a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_system_control(
 800427e:	f107 020c 	add.w	r2, r7, #12
 8004282:	4413      	add	r3, r2
 8004284:	461a      	mov	r2, r3
 8004286:	2105      	movs	r1, #5
 8004288:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800428c:	f00b fd5e 	bl	800fd4c <VL53LX_i2c_encode_system_control>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 8004296:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10f      	bne.n	80042be <VL53LX_init_and_start_range+0x556>
		status =
			VL53LX_WriteMulti(
 800429e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80042a2:	f107 020c 	add.w	r2, r7, #12
 80042a6:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 80042aa:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80042ae:	f5a0 70a2 	sub.w	r0, r0, #324	@ 0x144
 80042b2:	6800      	ldr	r0, [r0, #0]
 80042b4:	f00d f976 	bl	80115a4 <VL53LX_WriteMulti>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 80042be:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <VL53LX_init_and_start_range+0x572>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 80042c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80042ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	f003 fa1a 	bl	8007708 <VL53LX_update_ll_driver_rd_state>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	if (status == VL53LX_ERROR_NONE)
 80042da:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <VL53LX_init_and_start_range+0x58e>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 80042e2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80042e6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	f003 fbac 	bl	8007a48 <VL53LX_update_ll_driver_cfg_state>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	LOG_FUNCTION_END(status);

	return status;
 80042f6:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800430c:	2300      	movs	r3, #0
 800430e:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3318      	adds	r3, #24
 8004314:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800431c:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8004324:	b25b      	sxtb	r3, r3
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800432c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004330:	b25b      	sxtb	r3, r3
 8004332:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f883 2364 	strb.w	r2, [r3, #868]	@ 0x364
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004340:	4619      	mov	r1, r3
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f00b fd3d 	bl	800fdc2 <VL53LX_set_system_control>
 8004348:	4603      	mov	r3, r0
 800434a:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f883 2364 	strb.w	r2, [r3, #868]	@ 0x364
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 800435e:	2103      	movs	r1, #3
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f003 f9a1 	bl	80076a8 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
	V53L1_init_zone_results_structure(
 800436c:	3301      	adds	r3, #1
 800436e:	b2da      	uxtb	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f003 fdab 	bl	8007ed4 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f003 fddd 	bl	8007f3e <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800438a:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 800438e:	2b01      	cmp	r3, #1
 8004390:	d102      	bne.n	8004398 <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f006 ffbe 	bl	800b314 <VL53LX_low_power_auto_data_stop_range>

	return status;
 8004398:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b0c8      	sub	sp, #288	@ 0x120
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80043ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80043b2:	6018      	str	r0, [r3, #0]
 80043b4:	460a      	mov	r2, r1
 80043b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80043ba:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80043be:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80043c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80043ca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3318      	adds	r3, #24
 80043d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 80043d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80043da:	f203 3366 	addw	r3, r3, #870	@ 0x366
 80043de:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 80043e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80043e6:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 80043ea:	3318      	adds	r3, #24
 80043ec:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 80043f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80043f4:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 80043f8:	331c      	adds	r3, #28
 80043fa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 80043fe:	2388      	movs	r3, #136	@ 0x88
 8004400:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8004410:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004414:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d008      	beq.n	8004430 <VL53LX_get_measurement_results+0x8c>
 800441e:	2b02      	cmp	r3, #2
 8004420:	d10d      	bne.n	800443e <VL53LX_get_measurement_results+0x9a>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8004422:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8004426:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 800442a:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800442e:	e00a      	b.n	8004446 <VL53LX_get_measurement_results+0xa2>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8004430:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8004434:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 8004438:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800443c:	e003      	b.n	8004446 <VL53LX_get_measurement_results+0xa2>
	default:
		i2c_buffer_size_bytes =
 800443e:	232c      	movs	r3, #44	@ 0x2c
 8004440:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8004444:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 8004446:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10f      	bne.n	800446e <VL53LX_get_measurement_results+0xca>
		status =
			VL53LX_ReadMulti(
 800444e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8004452:	f107 0208 	add.w	r2, r7, #8
 8004456:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 800445a:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 800445e:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 8004462:	6800      	ldr	r0, [r0, #0]
 8004464:	f00d f8d4 	bl	8011610 <VL53LX_ReadMulti>
 8004468:	4603      	mov	r3, r0
 800446a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 800446e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004472:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d917      	bls.n	80044ac <VL53LX_get_measurement_results+0x108>
 800447c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8004480:	2b00      	cmp	r3, #0
 8004482:	d113      	bne.n	80044ac <VL53LX_get_measurement_results+0x108>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004484:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8004488:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 800448c:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004490:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_debug_results(
 8004494:	f107 0208 	add.w	r2, r7, #8
 8004498:	4413      	add	r3, r2
 800449a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800449e:	4619      	mov	r1, r3
 80044a0:	2038      	movs	r0, #56	@ 0x38
 80044a2:	f00b fe0c 	bl	80100be <VL53LX_i2c_decode_debug_results>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 80044ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80044b0:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d017      	beq.n	80044ea <VL53LX_get_measurement_results+0x146>
 80044ba:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d113      	bne.n	80044ea <VL53LX_get_measurement_results+0x146>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80044c2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80044c6:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 80044ca:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80044ce:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_core_results(
 80044d2:	f107 0208 	add.w	r2, r7, #8
 80044d6:	4413      	add	r3, r2
 80044d8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80044dc:	4619      	mov	r1, r3
 80044de:	2021      	movs	r0, #33	@ 0x21
 80044e0:	f00b fd8c 	bl	800fffc <VL53LX_i2c_decode_core_results>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 80044ea:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d110      	bne.n	8004514 <VL53LX_get_measurement_results+0x170>

		i2c_buffer_offset_bytes = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80044f8:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_system_results(
 80044fc:	f107 0208 	add.w	r2, r7, #8
 8004500:	4413      	add	r3, r2
 8004502:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004506:	4619      	mov	r1, r3
 8004508:	202c      	movs	r0, #44	@ 0x2c
 800450a:	f00b fc81 	bl	800fe10 <VL53LX_i2c_decode_system_results>
 800450e:	4603      	mov	r3, r0
 8004510:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8004514:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8004518:	4618      	mov	r0, r3
 800451a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 8004522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004526:	b0a0      	sub	sp, #128	@ 0x80
 8004528:	af06      	add	r7, sp, #24
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	460b      	mov	r3, r1
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004532:	2300      	movs	r3, #0
 8004534:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	VL53LX_LLDriverData_t *pdev =
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	3318      	adds	r3, #24
 800453c:	663b      	str	r3, [r7, #96]	@ 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8004544:	65fb      	str	r3, [r7, #92]	@ 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 8004546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004548:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 800454a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800454c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004550:	657b      	str	r3, [r7, #84]	@ 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 8004552:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004554:	332c      	adds	r3, #44	@ 0x2c
 8004556:	653b      	str	r3, [r7, #80]	@ 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 8004558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800455a:	33c2      	adds	r3, #194	@ 0xc2
 800455c:	64fb      	str	r3, [r7, #76]	@ 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 800455e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004560:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 8004564:	64bb      	str	r3, [r7, #72]	@ 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8004566:	f107 0314 	add.w	r3, r7, #20
 800456a:	647b      	str	r3, [r7, #68]	@ 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800456c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800456e:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8004572:	643b      	str	r3, [r7, #64]	@ 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8004574:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004576:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800457a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 800457c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800457e:	f503 539f 	add.w	r3, r3, #5088	@ 0x13e0
 8004582:	3310      	adds	r3, #16
 8004584:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8004586:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004588:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800458c:	637b      	str	r3, [r7, #52]	@ 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 800458e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004590:	3348      	adds	r3, #72	@ 0x48
 8004592:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 8004594:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004596:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 800459a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800459c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800459e:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 80045a2:	331c      	adds	r3, #28
 80045a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 80045a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045a8:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 8296 	beq.w	8004ae2 <VL53LX_get_device_results+0x5c0>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 80045b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045b8:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80045bc:	4619      	mov	r1, r3
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fbd2 	bl	8004d68 <VL53LX_get_histogram_bin_data>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 80045ca:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d118      	bne.n	8004604 <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 80045d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d4:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d114      	bne.n	8004604 <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 80045da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045dc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80045e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 80045e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045ec:	4413      	add	r3, r2
 80045ee:	1d1a      	adds	r2, r3, #4
 80045f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045f2:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80045f6:	4619      	mov	r1, r3
 80045f8:	4610      	mov	r0, r2
 80045fa:	f004 fa11 	bl	8008a20 <VL53LX_hist_copy_and_scale_ambient_info>
 80045fe:	4603      	mov	r3, r0
 8004600:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 8004604:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004608:	2b00      	cmp	r3, #0
 800460a:	f040 8206 	bne.w	8004a1a <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800460e:	f107 0313 	add.w	r3, r7, #19
 8004612:	4619      	mov	r1, r3
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f006 ffa4 	bl	800b562 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800461a:	7cfb      	ldrb	r3, [r7, #19]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 8004620:	2301      	movs	r3, #1
 8004622:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	3b01      	subs	r3, #1
 8004628:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 800462c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800462e:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8004632:	2b01      	cmp	r3, #1
 8004634:	d107      	bne.n	8004646 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8004636:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800463a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463c:	3202      	adds	r2, #2
 800463e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8004642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004644:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8004646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004648:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	@ 0xba
		pHP->gain_factor =
 800464c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800464e:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 8004650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004656:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800465a:	4619      	mov	r1, r3
 800465c:	4610      	mov	r0, r2
 800465e:	f004 f8e7 	bl	8008830 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 8004662:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004666:	62da      	str	r2, [r3, #44]	@ 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800466a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800466e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004670:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004674:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8004678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800467a:	865a      	strh	r2, [r3, #50]	@ 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 800467c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800467e:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8004680:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004682:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8004686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004688:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 800468a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800468c:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8004690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004692:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8004694:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004696:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 800469a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800469c:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	@ 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 80046a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046a2:	f8a3 226c 	strh.w	r2, [r3, #620]	@ 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 80046a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046a8:	f893 2331 	ldrb.w	r2, [r3, #817]	@ 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 80046ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046ae:	f883 226e 	strb.w	r2, [r3, #622]	@ 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 80046b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b4:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 80046b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ba:	86da      	strh	r2, [r3, #54]	@ 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 80046bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046be:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 80046c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046c4:	869a      	strh	r2, [r3, #52]	@ 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 80046c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c8:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 80046ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046cc:	871a      	strh	r2, [r3, #56]	@ 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 80046ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d0:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 80046d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046d4:	875a      	strh	r2, [r3, #58]	@ 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 80046d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046d8:	f203 3292 	addw	r2, r3, #914	@ 0x392
 80046dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046de:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80046e2:	4619      	mov	r1, r3
 80046e4:	4610      	mov	r0, r2
 80046e6:	f003 fad5 	bl	8007c94 <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 80046ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046ec:	795b      	ldrb	r3, [r3, #5]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d002      	beq.n	80046f8 <VL53LX_get_device_results+0x1d6>
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d02e      	beq.n	8004754 <VL53LX_get_device_results+0x232>
 80046f6:	e03d      	b.n	8004774 <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 80046f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046fa:	f893 3331 	ldrb.w	r3, [r3, #817]	@ 0x331
 80046fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 8004702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004704:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8004708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470a:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 800470e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004710:	f893 e3c2 	ldrb.w	lr, [r3, #962]	@ 0x3c2
 8004714:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004716:	f893 83c3 	ldrb.w	r8, [r3, #963]	@ 0x3c3
 800471a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471c:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8004720:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004722:	f892 20a9 	ldrb.w	r2, [r2, #169]	@ 0xa9
 8004726:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004728:	319c      	adds	r1, #156	@ 0x9c
 800472a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800472c:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 8004730:	f897 4025 	ldrb.w	r4, [r7, #37]	@ 0x25
 8004734:	b2a4      	uxth	r4, r4
 8004736:	6c3d      	ldr	r5, [r7, #64]	@ 0x40
 8004738:	351c      	adds	r5, #28
 800473a:	9505      	str	r5, [sp, #20]
 800473c:	9404      	str	r4, [sp, #16]
 800473e:	9003      	str	r0, [sp, #12]
 8004740:	9102      	str	r1, [sp, #8]
 8004742:	9201      	str	r2, [sp, #4]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	4643      	mov	r3, r8
 8004748:	4672      	mov	r2, lr
 800474a:	4661      	mov	r1, ip
 800474c:	4630      	mov	r0, r6
 800474e:	f005 f8de 	bl	800990e <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8004752:	e013      	b.n	800477c <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8004754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004756:	331c      	adds	r3, #28
 8004758:	4619      	mov	r1, r3
 800475a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800475c:	f7fe f9b8 	bl	8002ad0 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8004760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004762:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004766:	b29b      	uxth	r3, r3
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	b29b      	uxth	r3, r3
 800476c:	b21a      	sxth	r2, r3
 800476e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004770:	839a      	strh	r2, [r3, #28]
		break;
 8004772:	e003      	b.n	800477c <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 8004774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004776:	2200      	movs	r2, #0
 8004778:	839a      	strh	r2, [r3, #28]
		break;
 800477a:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 800477c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004780:	2b00      	cmp	r3, #0
 8004782:	f040 814c 	bne.w	8004a1e <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8004786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004788:	f893 00a8 	ldrb.w	r0, [r3, #168]	@ 0xa8
 800478c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800478e:	f893 10a9 	ldrb.w	r1, [r3, #169]	@ 0xa9
 8004792:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004794:	f503 72ec 	add.w	r2, r3, #472	@ 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8004798:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800479a:	f893 3331 	ldrb.w	r3, [r3, #817]	@ 0x331
		VL53LX_calc_max_effective_spads(
 800479e:	461c      	mov	r4, r3
 80047a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047a2:	f203 236a 	addw	r3, r3, #618	@ 0x26a
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	4623      	mov	r3, r4
 80047aa:	f005 fa53 	bl	8009c54 <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 80047ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047b0:	799b      	ldrb	r3, [r3, #6]
 80047b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047b4:	4619      	mov	r1, r3
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 ff89 	bl	80056ce <VL53LX_get_dmax_calibration_data>
 80047bc:	4603      	mov	r3, r0
 80047be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 80047c2:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 812b 	bne.w	8004a22 <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 80047cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047ce:	f503 7515 	add.w	r5, r3, #596	@ 0x254
 80047d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047d4:	f503 7605 	add.w	r6, r3, #532	@ 0x214
 80047d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047da:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80047de:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047e0:	f202 521c 	addw	r2, r2, #1308	@ 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 80047e4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80047e6:	f501 51a0 	add.w	r1, r1, #5120	@ 0x1400
				pdev->wArea2,
 80047ea:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80047ec:	f500 50d0 	add.w	r0, r0, #6656	@ 0x1a00
		status = VL53LX_ipp_hist_process_data(
 80047f0:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 80047f2:	9405      	str	r4, [sp, #20]
 80047f4:	f107 0413 	add.w	r4, r7, #19
 80047f8:	9404      	str	r4, [sp, #16]
 80047fa:	9003      	str	r0, [sp, #12]
 80047fc:	9102      	str	r1, [sp, #8]
 80047fe:	9201      	str	r2, [sp, #4]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	4633      	mov	r3, r6
 8004804:	462a      	mov	r2, r5
 8004806:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f00d f90f 	bl	8011a2c <VL53LX_ipp_hist_process_data>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004814:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004816:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800481a:	2b01      	cmp	r3, #1
 800481c:	d150      	bne.n	80048c0 <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 800481e:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004820:	2b01      	cmp	r3, #1
 8004822:	d94d      	bls.n	80048c0 <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004824:	2300      	movs	r3, #0
 8004826:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800482a:	e045      	b.n	80048b8 <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 800482c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004830:	224c      	movs	r2, #76	@ 0x4c
 8004832:	fb02 f303 	mul.w	r3, r2, r3
 8004836:	3310      	adds	r3, #16
 8004838:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800483a:	4413      	add	r3, r2
 800483c:	3304      	adds	r3, #4
 800483e:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004844:	7cfa      	ldrb	r2, [r7, #19]
 8004846:	fbb3 f2f2 	udiv	r2, r3, r2
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004852:	7cfa      	ldrb	r2, [r7, #19]
 8004854:	fbb3 f2f2 	udiv	r2, r3, r2
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004860:	7cfa      	ldrb	r2, [r7, #19]
 8004862:	fb93 f2f2 	sdiv	r2, r3, r2
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800486e:	461a      	mov	r2, r3
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	fb92 f3f3 	sdiv	r3, r2, r3
 8004876:	b29a      	uxth	r2, r3
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004880:	461a      	mov	r2, r3
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	fb92 f3f3 	sdiv	r3, r2, r3
 8004888:	b29a      	uxth	r2, r3
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004892:	461a      	mov	r2, r3
 8004894:	7cfb      	ldrb	r3, [r7, #19]
 8004896:	fb92 f3f3 	sdiv	r3, r2, r3
 800489a:	b29a      	uxth	r2, r3
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a4:	7cfa      	ldrb	r2, [r7, #19]
 80048a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	639a      	str	r2, [r3, #56]	@ 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80048ae:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80048b2:	3301      	adds	r3, #1
 80048b4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80048b8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d9b5      	bls.n	800482c <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 80048c0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f040 80ae 	bne.w	8004a26 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 80048ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048cc:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 80048d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048d2:	f503 7171 	add.w	r1, r3, #964	@ 0x3c4
 80048d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048d8:	330e      	adds	r3, #14
 80048da:	461a      	mov	r2, r3
 80048dc:	f004 ffe1 	bl	80098a2 <VL53LX_hist_wrap_dmax>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 80048e6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 809d 	bne.w	8004a2a <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80048f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048f2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80048f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 80048fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004902:	4413      	add	r3, r2
 8004904:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004906:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 800490a:	4613      	mov	r3, r2
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004916:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004918:	4413      	add	r3, r2
 800491a:	f103 0208 	add.w	r2, r3, #8
 800491e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f004 fadc 	bl	8008ede <VL53LX_hist_phase_consistency_check>
 8004926:	4603      	mov	r3, r0
 8004928:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 800492c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004930:	2b00      	cmp	r3, #0
 8004932:	d17c      	bne.n	8004a2e <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8004934:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004936:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800493a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 800493e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004946:	4413      	add	r3, r2
 8004948:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 800494a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 800494e:	4613      	mov	r3, r2
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800495a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800495c:	4413      	add	r3, r2
 800495e:	f103 0208 	add.w	r2, r3, #8
 8004962:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004964:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f004 ff42 	bl	80097f2 <VL53LX_hist_xmonitor_consistency_check>
 800496e:	4603      	mov	r3, r0
 8004970:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 8004974:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004978:	2b00      	cmp	r3, #0
 800497a:	d15a      	bne.n	8004a32 <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 800497c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800497e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8004986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004988:	2205      	movs	r2, #5
 800498a:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 800498c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800498e:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8004992:	3301      	adds	r3, #1
 8004994:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8004996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004998:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 800499a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80049a0:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 80049a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049a4:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
		if (zid <
 80049a8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d222      	bcs.n	80049f6 <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 80049b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			phist_info =
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049b8:	4413      	add	r3, r2
 80049ba:	3304      	adds	r3, #4
 80049bc:	64bb      	str	r3, [r7, #72]	@ 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 80049be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c0:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 80049c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c4:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 80049c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c8:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 80049ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049cc:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 80049ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d0:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
			phist_info->result__dss_actual_effective_spads =
 80049d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049d6:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 80049d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049da:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
			phist_info->VL53LX_p_005 =
 80049de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049e0:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 80049e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
			phist_info->total_periods_elapsed =
 80049e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ea:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 80049ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			phist_info->ambient_events_sum =
 80049f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049f4:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 80049f6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d11b      	bne.n	8004a36 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 80049fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a00:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
 8004a04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a06:	f203 3266 	addw	r2, r3, #870	@ 0x366
 8004a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a0c:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 8004a10:	3318      	adds	r3, #24
 8004a12:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004a14:	f005 fa7b 	bl	8009f0e <VL53LX_hist_copy_results_to_sys_and_core>
 8004a18:	e00e      	b.n	8004a38 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a1a:	bf00      	nop
 8004a1c:	e00c      	b.n	8004a38 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a1e:	bf00      	nop
 8004a20:	e00a      	b.n	8004a38 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a22:	bf00      	nop
 8004a24:	e008      	b.n	8004a38 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a26:	bf00      	nop
 8004a28:	e006      	b.n	8004a38 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a2a:	bf00      	nop
 8004a2c:	e004      	b.n	8004a38 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a2e:	bf00      	nop
 8004a30:	e002      	b.n	8004a38 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a32:	bf00      	nop
 8004a34:	e000      	b.n	8004a38 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a36:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8004a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a3a:	785b      	ldrb	r3, [r3, #1]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d036      	beq.n	8004aae <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 8004a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a42:	79db      	ldrb	r3, [r3, #7]
 8004a44:	2b06      	cmp	r3, #6
 8004a46:	d00a      	beq.n	8004a5e <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 8004a48:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d106      	bne.n	8004a5e <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 8004a50:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f005 fb2f 	bl	800a0b6 <VL53LX_dynamic_zone_update>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004a64:	e015      	b.n	8004a92 <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8004a66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a68:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
						& 0x01) ?
 8004a6c:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <VL53LX_get_device_results+0x556>
 8004a74:	2103      	movs	r1, #3
 8004a76:	e000      	b.n	8004a7a <VL53LX_get_device_results+0x558>
 8004a78:	2101      	movs	r1, #1
 8004a7a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004a7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a80:	4413      	add	r3, r2
 8004a82:	460a      	mov	r2, r1
 8004a84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004a88:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004a92:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d9e5      	bls.n	8004a66 <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8004a9a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d105      	bne.n	8004aae <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f005 fb81 	bl	800a1aa <VL53LX_multizone_hist_bins_update>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 8004aae:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d105      	bne.n	8004ac2 <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f006 f81c 	bl	800aaf4 <VL53LX_dynamic_xtalk_correction_corrector>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004ac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ac4:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d157      	bne.n	8004b7c <VL53LX_get_device_results+0x65a>
			(histo_merge_nb != 0))
 8004acc:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d054      	beq.n	8004b7c <VL53LX_get_device_results+0x65a>
			pC->algo__crosstalk_compensation_plane_offset_kcps /=
 8004ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	7cfa      	ldrb	r2, [r7, #19]
 8004ad8:	fbb3 f2f2 	udiv	r2, r3, r2
 8004adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	e04c      	b.n	8004b7c <VL53LX_get_device_results+0x65a>
				histo_merge_nb;
	} else {

		if (status == VL53LX_ERROR_NONE)
 8004ae2:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d107      	bne.n	8004afa <VL53LX_get_device_results+0x5d8>
			status = VL53LX_get_measurement_results(
 8004aea:	7afb      	ldrb	r3, [r7, #11]
 8004aec:	4619      	mov	r1, r3
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f7ff fc58 	bl	80043a4 <VL53LX_get_measurement_results>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 8004afa:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10d      	bne.n	8004b1e <VL53LX_get_device_results+0x5fc>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8004b02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b04:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 8004b08:	4618      	mov	r0, r3
 8004b0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b0c:	f203 3166 	addw	r1, r3, #870	@ 0x366
 8004b10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b12:	f503 5299 	add.w	r2, r3, #4896	@ 0x1320
 8004b16:	3218      	adds	r2, #24
 8004b18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b1a:	f000 fc27 	bl	800536c <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b20:	785b      	ldrb	r3, [r3, #1]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d12a      	bne.n	8004b7c <VL53LX_get_device_results+0x65a>

			if ((status == VL53LX_ERROR_NONE) &&
 8004b26:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10d      	bne.n	8004b4a <VL53LX_get_device_results+0x628>
				(pL->low_power_auto_range_count == 0)) {
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b30:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <VL53LX_get_device_results+0x628>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f006 fc38 	bl	800b3ac <VL53LX_low_power_auto_setup_manual_calibration>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8004b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b44:	2201      	movs	r2, #1
 8004b46:	709a      	strb	r2, [r3, #2]
 8004b48:	e00a      	b.n	8004b60 <VL53LX_get_device_results+0x63e>
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004b4a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <VL53LX_get_device_results+0x63e>
				(pL->low_power_auto_range_count == 1)) {
 8004b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b54:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d102      	bne.n	8004b60 <VL53LX_get_device_results+0x63e>
				pL->low_power_auto_range_count = 2;
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 8004b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b62:	789b      	ldrb	r3, [r3, #2]
 8004b64:	2bff      	cmp	r3, #255	@ 0xff
 8004b66:	d009      	beq.n	8004b7c <VL53LX_get_device_results+0x65a>
 8004b68:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <VL53LX_get_device_results+0x65a>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f006 fc6d 	bl	800b450 <VL53LX_low_power_auto_update_DSS>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8004b7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b7e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004b82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b84:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8004b86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b88:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8004b8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b8e:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8004b90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b92:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8004b96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b98:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 8004b9a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f040 80b0 	bne.w	8004d04 <VL53LX_get_device_results+0x7e2>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8004ba4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ba6:	2205      	movs	r2, #5
 8004ba8:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8004bac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bae:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bb8:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 8004bbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bbe:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (zid < pres->zone_results.max_zones) {
 8004bc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bc8:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
 8004bcc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	f080 8097 	bcs.w	8004d04 <VL53LX_get_device_results+0x7e2>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8004bd6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
			pobjects =
 8004bda:	4613      	mov	r3, r2
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004be6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004be8:	4413      	add	r3, r2
 8004bea:	3308      	adds	r3, #8
 8004bec:	657b      	str	r3, [r7, #84]	@ 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8004bee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bf0:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8004bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bf4:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8004bf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bf8:	785a      	ldrb	r2, [r3, #1]
 8004bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bfc:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8004bfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c00:	789a      	ldrb	r2, [r3, #2]
 8004c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c04:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8004c06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c08:	78da      	ldrb	r2, [r3, #3]
 8004c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c0c:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 8004c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c10:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 8004c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c16:	639a      	str	r2, [r3, #56]	@ 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 8004c18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c1a:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 8004c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c20:	63da      	str	r2, [r3, #60]	@ 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 8004c22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c24:	f8b3 2184 	ldrh.w	r2, [r3, #388]	@ 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 8004c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8004c2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c30:	f893 218e 	ldrb.w	r2, [r3, #398]	@ 0x18e
			pobjects->xmonitor.range_status =
 8004c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

			pobjects->max_objects      = presults->max_results;
 8004c3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c3c:	7c5a      	ldrb	r2, [r3, #17]
 8004c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c40:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8004c42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c44:	7c9a      	ldrb	r2, [r3, #18]
 8004c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c48:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004c50:	e052      	b.n	8004cf8 <VL53LX_get_device_results+0x7d6>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004c52:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004c56:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004c5a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004c5c:	204c      	movs	r0, #76	@ 0x4c
 8004c5e:	fb00 f303 	mul.w	r3, r0, r3
 8004c62:	440b      	add	r3, r1
 8004c64:	3338      	adds	r3, #56	@ 0x38
 8004c66:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004c68:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4403      	add	r3, r0
 8004c74:	3308      	adds	r3, #8
 8004c76:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004c78:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004c7c:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004c80:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004c82:	204c      	movs	r0, #76	@ 0x4c
 8004c84:	fb00 f303 	mul.w	r3, r0, r3
 8004c88:	440b      	add	r3, r1
 8004c8a:	333c      	adds	r3, #60	@ 0x3c
 8004c8c:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004c8e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004c90:	4613      	mov	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4403      	add	r3, r0
 8004c9a:	330c      	adds	r3, #12
 8004c9c:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004c9e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004ca2:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004ca6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004ca8:	204c      	movs	r0, #76	@ 0x4c
 8004caa:	fb00 f303 	mul.w	r3, r0, r3
 8004cae:	440b      	add	r3, r1
 8004cb0:	3354      	adds	r3, #84	@ 0x54
 8004cb2:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004cb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	4413      	add	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	3310      	adds	r3, #16
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8004cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8004cca:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].range_status;
 8004cce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004cd0:	204c      	movs	r0, #76	@ 0x4c
 8004cd2:	fb00 f303 	mul.w	r3, r0, r3
 8004cd6:	440b      	add	r3, r1
 8004cd8:	335e      	adds	r3, #94	@ 0x5e
 8004cda:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 8004cdc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cde:	4613      	mov	r3, r2
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	3312      	adds	r3, #18
 8004cea:	4602      	mov	r2, r0
 8004cec:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8004cee:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004cf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cfa:	7c9b      	ldrb	r3, [r3, #18]
 8004cfc:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d3a6      	bcc.n	8004c52 <VL53LX_get_device_results+0x730>
		}
	}



	memcpy(
 8004d04:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8004d08:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f015 f803 	bl	8019d16 <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 8004d10:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d105      	bne.n	8004d24 <VL53LX_get_device_results+0x802>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f002 fde3 	bl	80078e4 <VL53LX_check_ll_driver_rd_state>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8004d24:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3768      	adds	r7, #104	@ 0x68
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d32 <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 8004d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d107      	bne.n	8004d5a <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff f809 	bl	8003d68 <VL53LX_init_and_start_range>
 8004d56:	4603      	mov	r3, r0
 8004d58:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8004d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b0d2      	sub	sp, #328	@ 0x148
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d72:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004d76:	6018      	str	r0, [r3, #0]
 8004d78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d7c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004d80:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev =
 8004d88:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d8c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3318      	adds	r3, #24
 8004d94:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004d98:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d9c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8004da6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8004daa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004dae:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8004db2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8004db6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004dba:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8004dbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8004dc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004dc6:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8004dca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8004dce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004dd2:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8004dd6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 8004dda:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004dde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8004de2:	f107 030c 	add.w	r3, r7, #12
 8004de6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint8_t    bin_23_0 = 0x00;
 8004dea:	2300      	movs	r3, #0
 8004dec:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
	uint16_t   bin                      = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8004df6:	2300      	movs	r3, #0
 8004df8:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
	uint16_t   encoded_timeout          = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c

	uint32_t   pll_period_us            = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t    i                        = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b

	int32_t    hist_merge				= 0;
 8004e14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004e18:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8004e20:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10d      	bne.n	8004e44 <VL53LX_get_histogram_bin_data+0xdc>
		status = VL53LX_ReadMulti(
 8004e28:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004e2c:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 8004e30:	2353      	movs	r3, #83	@ 0x53
 8004e32:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8004e36:	2188      	movs	r1, #136	@ 0x88
 8004e38:	6800      	ldr	r0, [r0, #0]
 8004e3a:	f00c fbe9 	bl	8011610 <VL53LX_ReadMulti>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8004e44:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004e48:	781a      	ldrb	r2, [r3, #0]
 8004e4a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004e4e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8004e58:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004e5c:	785a      	ldrb	r2, [r3, #1]
 8004e5e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004e62:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8004e6c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004e70:	789a      	ldrb	r2, [r3, #2]
 8004e72:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004e76:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8004e80:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004e84:	78da      	ldrb	r2, [r3, #3]
 8004e86:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004e8a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 8004e94:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	2002      	movs	r0, #2
 8004e9e:	f003 fa21 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8004ea6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004eaa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c



	i2c_buffer_offset_bytes =
 8004eb4:	234e      	movs	r3, #78	@ 0x4e
 8004eb6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004eba:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004ebe:	f107 020c 	add.w	r2, r7, #12
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8004ec8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004ecc:	2002      	movs	r0, #2
 8004ece:	f003 fa09 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8004ed6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004eda:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

	i2c_buffer_offset_bytes =
 8004ee4:	2350      	movs	r3, #80	@ 0x50
 8004ee6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8004eea:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004eee:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004ef2:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004ef6:	5cd2      	ldrb	r2, [r2, r3]
 8004ef8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004efc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8004f06:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f0a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8b3 207e 	ldrh.w	r2, [r3, #126]	@ 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8004f14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004f18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f1c:	f8a3 235c 	strh.w	r2, [r3, #860]	@ 0x35c
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8004f20:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f24:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8004f2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004f32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f36:	f883 235e 	strb.w	r2, [r3, #862]	@ 0x35e



	i2c_buffer_offset_bytes =
 8004f3a:	2351      	movs	r3, #81	@ 0x51
 8004f3c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8004f40:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004f44:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004f48:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004f4c:	5cd3      	ldrb	r3, [r2, r3]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 8004f54:	2352      	movs	r3, #82	@ 0x52
 8004f56:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8004f5a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004f5e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004f62:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004f66:	5cd2      	ldrb	r2, [r2, r3]
 8004f68:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 8004f72:	234d      	movs	r3, #77	@ 0x4d
 8004f74:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8004f78:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004f7c:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004f80:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004f84:	f897 111b 	ldrb.w	r1, [r7, #283]	@ 0x11b
 8004f88:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8004f8a:	2306      	movs	r3, #6
 8004f8c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004f90:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004f94:	f107 020c 	add.w	r2, r7, #12
 8004f98:	4413      	add	r3, r2
 8004f9a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8004fa4:	e01a      	b.n	8004fdc <VL53LX_get_histogram_bin_data+0x274>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8004fa6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004faa:	2003      	movs	r0, #3
 8004fac:	f003 fa39 	bl	8008422 <VL53LX_i2c_decode_uint32_t>
 8004fb0:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8004fb2:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8004fb6:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8004fb8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004fbc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3206      	adds	r2, #6
 8004fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8004fc8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004fcc:	3303      	adds	r3, #3
 8004fce:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004fd2:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8004fdc:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8004fe0:	2b17      	cmp	r3, #23
 8004fe2:	d9e0      	bls.n	8004fa6 <VL53LX_get_histogram_bin_data+0x23e>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 8004fe4:	f107 0208 	add.w	r2, r7, #8
 8004fe8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004fec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004ff0:	f248 018d 	movw	r1, #32909	@ 0x808d
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	f000 fb95 	bl	8005724 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 8004ffa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ffe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8005008:	2b00      	cmp	r3, #0
 800500a:	d118      	bne.n	800503e <VL53LX_get_histogram_bin_data+0x2d6>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800500c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005010:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8005014:	3310      	adds	r3, #16
 8005016:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 800501a:	2100      	movs	r1, #0
 800501c:	4618      	mov	r0, r3
 800501e:	f014 fd95 	bl	8019b4c <memset>
		pdev->bin_rec_pos = 0;
 8005022:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
		pdev->pos_before_next_recom = 0;
 8005030:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
	}

	if (hist_merge == 1)
 800503e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005042:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d10b      	bne.n	8005064 <VL53LX_get_histogram_bin_data+0x2fc>
		vl53lx_histo_merge(Dev, pdata);
 800504c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005050:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 8005054:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005058:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800505c:	6811      	ldr	r1, [r2, #0]
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	f7fd fe2e 	bl	8002cc0 <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8005064:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005068:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800506c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005070:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 8005078:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800507c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2200      	movs	r2, #0
 8005084:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8005086:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800508a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2218      	movs	r2, #24
 8005092:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8005094:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005098:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2218      	movs	r2, #24
 80050a0:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 80050a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80050a6:	78da      	ldrb	r2, [r3, #3]
 80050a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 80050b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80050ba:	799b      	ldrb	r3, [r3, #6]
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 80050c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->vcsel_width +=
 80050ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050d2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 80050dc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80050e0:	7c12      	ldrb	r2, [r2, #16]
	pdata->vcsel_width +=
 80050e2:	4413      	add	r3, r2
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050ea:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 80050f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80050f8:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 80050fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050fe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 8005108:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800510c:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 8005110:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005114:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005118:	6811      	ldr	r1, [r2, #0]
 800511a:	6818      	ldr	r0, [r3, #0]
 800511c:	f003 fd81 	bl	8008c22 <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8005120:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005124:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005128:	2b00      	cmp	r3, #0
 800512a:	d115      	bne.n	8005158 <VL53LX_get_histogram_bin_data+0x3f0>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 800512c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005130:	791b      	ldrb	r3, [r3, #4]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8005136:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800513a:	7952      	ldrb	r2, [r2, #5]
		encoded_timeout =
 800513c:	4413      	add	r3, r2
 800513e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 8005142:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005146:	799a      	ldrb	r2, [r3, #6]
 8005148:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800514c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8005156:	e014      	b.n	8005182 <VL53LX_get_histogram_bin_data+0x41a>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8005158:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800515c:	79db      	ldrb	r3, [r3, #7]
 800515e:	021b      	lsls	r3, r3, #8
 8005160:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8005162:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8005166:	7a12      	ldrb	r2, [r2, #8]
		encoded_timeout =
 8005168:	4413      	add	r3, r2
 800516a:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 800516e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005172:	7a5a      	ldrb	r2, [r3, #9]
 8005174:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005178:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8005182:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005186:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2200      	movs	r2, #0
 800518e:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8005190:	2300      	movs	r3, #0
 8005192:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8005196:	e01f      	b.n	80051d8 <VL53LX_get_histogram_bin_data+0x470>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8005198:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 800519c:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80051a0:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	4413      	add	r3, r2
 80051a8:	7b1b      	ldrb	r3, [r3, #12]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	2b07      	cmp	r3, #7
 80051b0:	d10d      	bne.n	80051ce <VL53LX_get_histogram_bin_data+0x466>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 80051b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80051b6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	7adb      	ldrb	r3, [r3, #11]
 80051be:	3304      	adds	r3, #4
 80051c0:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 80051c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80051c6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 80051ce:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 80051d2:	3301      	adds	r3, #1
 80051d4:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 80051d8:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 80051dc:	2b05      	cmp	r3, #5
 80051de:	d9db      	bls.n	8005198 <VL53LX_get_histogram_bin_data+0x430>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 80051e0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80051e4:	4618      	mov	r0, r3
 80051e6:	f003 fb8c 	bl	8008902 <VL53LX_decode_timeout>
 80051ea:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 80051ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80051f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 80051fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80051fe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8005208:	4618      	mov	r0, r3
 800520a:	f006 f9ea 	bl	800b5e2 <VL53LX_calc_pll_period_us>
 800520e:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8005212:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005216:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005220:	3301      	adds	r3, #1
 8005222:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8005226:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800522a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		VL53LX_duration_maths(
 8005234:	4619      	mov	r1, r3
 8005236:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800523a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800523e:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8005242:	f006 f9e5 	bl	800b610 <VL53LX_duration_maths>
 8005246:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8005248:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800524c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8005256:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800525a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2200      	movs	r2, #0
 8005262:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 8005266:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800526a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	f006 faf4 	bl	800b85c <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 8005274:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005278:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	f006 ff0c 	bl	800c09a <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8005282:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005286:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800528a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800528e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8005296:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800529a:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800529e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80052a2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 80052aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80052ae:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	789b      	ldrb	r3, [r3, #2]
 80052b6:	461a      	mov	r2, r3
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80052c4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80052c8:	4413      	add	r3, r2
 80052ca:	3302      	adds	r3, #2
 80052cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 80052d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052d4:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 80052d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80052da:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 80052e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052e8:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 80052ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80052ee:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 80052f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052fc:	2200      	movs	r2, #0
 80052fe:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8005300:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005304:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	2b11      	cmp	r3, #17
 8005314:	bf8c      	ite	hi
 8005316:	2201      	movhi	r2, #1
 8005318:	2200      	movls	r2, #0
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	2a00      	cmp	r2, #0
 800531e:	d11c      	bne.n	800535a <VL53LX_get_histogram_bin_data+0x5f2>
 8005320:	4a11      	ldr	r2, [pc, #68]	@ (8005368 <VL53LX_get_histogram_bin_data+0x600>)
 8005322:	fa22 f303 	lsr.w	r3, r2, r3
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	bf14      	ite	ne
 800532e:	2301      	movne	r3, #1
 8005330:	2300      	moveq	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d010      	beq.n	800535a <VL53LX_get_histogram_bin_data+0x5f2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8005338:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800533c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	b2da      	uxtb	r2, r3
 800534c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005350:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 8005352:	23fa      	movs	r3, #250	@ 0xfa
 8005354:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	break;
 8005358:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800535a:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 800535e:	4618      	mov	r0, r3
 8005360:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	0002200e 	.word	0x0002200e

0800536c <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 800536c:	b480      	push	{r7}
 800536e:	b08b      	sub	sp, #44	@ 0x2c
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800537a:	2300      	movs	r3, #0
 800537c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2200      	movs	r2, #0
 800538c:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	78da      	ldrb	r2, [r3, #3]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2200      	movs	r2, #0
 800539a:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2204      	movs	r2, #4
 80053a0:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2201      	movs	r2, #1
 80053a6:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	8a1b      	ldrh	r3, [r3, #16]
 80053ac:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	8a9b      	ldrh	r3, [r3, #20]
 80053b2:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	8a5b      	ldrh	r3, [r3, #18]
 80053b8:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 80053ba:	2300      	movs	r3, #0
 80053bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80053c0:	e00b      	b.n	80053da <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 80053c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	4413      	add	r3, r2
 80053cc:	2200      	movs	r2, #0
 80053ce:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 80053d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053d4:	3301      	adds	r3, #1
 80053d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80053da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d9ef      	bls.n	80053c2 <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	3314      	adds	r3, #20
 80053e6:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 80053e8:	2300      	movs	r3, #0
 80053ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80053ee:	e0fe      	b.n	80055ee <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80053f6:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	2200      	movs	r2, #0
 80053fc:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	78db      	ldrb	r3, [r3, #3]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	785b      	ldrb	r3, [r3, #1]
 800540a:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800540e:	2b09      	cmp	r3, #9
 8005410:	d104      	bne.n	800541c <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	2213      	movs	r2, #19
 8005416:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 800541a:	e007      	b.n	800542c <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	785b      	ldrb	r3, [r3, #1]
 8005420:	f003 031f 	and.w	r3, r3, #31
 8005424:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	2200      	movs	r2, #0
 8005430:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	2200      	movs	r2, #0
 8005436:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	2200      	movs	r2, #0
 800543c:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	2200      	movs	r2, #0
 8005442:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	2200      	movs	r2, #0
 8005448:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	2200      	movs	r2, #0
 800544e:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8005450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 8005458:	2b01      	cmp	r3, #1
 800545a:	d05c      	beq.n	8005516 <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 800545c:	e0a8      	b.n	80055b0 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	789b      	ldrb	r3, [r3, #2]
 8005462:	2b07      	cmp	r3, #7
 8005464:	d103      	bne.n	800546e <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	8a7a      	ldrh	r2, [r7, #18]
 800546a:	82da      	strh	r2, [r3, #22]
 800546c:	e00b      	b.n	8005486 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	789b      	ldrb	r3, [r3, #2]
 8005472:	2b08      	cmp	r3, #8
 8005474:	d103      	bne.n	800547e <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	8aba      	ldrh	r2, [r7, #20]
 800547a:	82da      	strh	r2, [r3, #22]
 800547c:	e003      	b.n	8005486 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	8afa      	ldrh	r2, [r7, #22]
 800548a:	861a      	strh	r2, [r3, #48]	@ 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	895b      	ldrh	r3, [r3, #10]
 80054a0:	015b      	lsls	r3, r3, #5
 80054a2:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054aa:	d302      	bcc.n	80054b2 <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 80054ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054b0:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 80054c8:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	fb02 f303 	mul.w	r3, r2, r3
 80054d2:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054da:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	da01      	bge.n	80054e6 <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 80054e2:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80054e6:	12db      	asrs	r3, r3, #11
 80054e8:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	b21a      	sxth	r2, r3
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 8005514:	e04c      	b.n	80055b0 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps =
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800552c:	865a      	strh	r2, [r3, #50]	@ 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	8bdb      	ldrh	r3, [r3, #30]
 800553a:	015b      	lsls	r3, r3, #5
 800553c:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005544:	d302      	bcc.n	800554c <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8005546:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800554a:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	b29a      	uxth	r2, r3
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm = (int32_t)(
 8005562:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	fb02 f303 	mul.w	r3, r2, r3
 800556c:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005574:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	da01      	bge.n	8005580 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 800557c:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8005580:	12db      	asrs	r3, r3, #11
 8005582:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	b21a      	sxth	r2, r3
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 80055ae:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

		pdata++;
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	334c      	adds	r3, #76	@ 0x4c
 80055e2:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 80055e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055e8:	3301      	adds	r3, #1
 80055ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80055ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	f67f aefc 	bls.w	80053f0 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2200      	movs	r2, #0
 80055fc:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	785b      	ldrb	r3, [r3, #1]
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	2b11      	cmp	r3, #17
 8005608:	bf8c      	ite	hi
 800560a:	2201      	movhi	r2, #1
 800560c:	2200      	movls	r2, #0
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	2a00      	cmp	r2, #0
 8005612:	d117      	bne.n	8005644 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
 8005614:	4a0e      	ldr	r2, [pc, #56]	@ (8005650 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 8005616:	fa22 f303 	lsr.w	r3, r2, r3
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	bf14      	ite	ne
 8005622:	2301      	movne	r3, #1
 8005624:	2300      	moveq	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00b      	beq.n	8005644 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	785b      	ldrb	r3, [r3, #1]
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	b2da      	uxtb	r2, r3
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 8005642:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8005644:	bf00      	nop
 8005646:	372c      	adds	r7, #44	@ 0x2c
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	0002200e 	.word	0x0002200e

08005654 <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800565e:	2300      	movs	r3, #0
 8005660:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3318      	adds	r3, #24
 8005666:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	332c      	adds	r3, #44	@ 0x2c
 800566c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b05      	cmp	r3, #5
 8005674:	d109      	bne.n	800568a <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2202      	movs	r2, #2
 800567a:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
 8005688:	e003      	b.n	8005692 <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8005692:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005696:	4618      	mov	r0, r3
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	460b      	mov	r3, r1
 80056ac:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3318      	adds	r3, #24
 80056b6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	78fa      	ldrb	r2, [r7, #3]
 80056bc:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 80056be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b086      	sub	sp, #24
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	460b      	mov	r3, r1
 80056d8:	607a      	str	r2, [r7, #4]
 80056da:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80056dc:	2300      	movs	r3, #0
 80056de:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3318      	adds	r3, #24
 80056e4:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 80056e6:	7afb      	ldrb	r3, [r7, #11]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d009      	beq.n	8005700 <VL53LX_get_dmax_calibration_data+0x32>
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d10f      	bne.n	8005710 <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	33ae      	adds	r3, #174	@ 0xae
		memcpy(
 80056f4:	220a      	movs	r2, #10
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f014 fb0c 	bl	8019d16 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 80056fe:	e00a      	b.n	8005716 <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	33a4      	adds	r3, #164	@ 0xa4
		memcpy(
 8005704:	220a      	movs	r2, #10
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f014 fb04 	bl	8019d16 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800570e:	e002      	b.n	8005716 <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8005710:	23fc      	movs	r3, #252	@ 0xfc
 8005712:	75fb      	strb	r3, [r7, #23]
	break;
 8005714:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005716:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8005724:	b480      	push	{r7}
 8005726:	b089      	sub	sp, #36	@ 0x24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	460b      	mov	r3, r1
 800572e:	607a      	str	r2, [r7, #4]
 8005730:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005732:	2300      	movs	r3, #0
 8005734:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3318      	adds	r3, #24
 800573a:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8005742:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800574a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800574c:	897b      	ldrh	r3, [r7, #10]
 800574e:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8005752:	2bb9      	cmp	r3, #185	@ 0xb9
 8005754:	f200 86ca 	bhi.w	80064ec <VL53LX_get_tuning_parm+0xdc8>
 8005758:	a201      	add	r2, pc, #4	@ (adr r2, 8005760 <VL53LX_get_tuning_parm+0x3c>)
 800575a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575e:	bf00      	nop
 8005760:	08005a49 	.word	0x08005a49
 8005764:	08005a59 	.word	0x08005a59
 8005768:	08005a69 	.word	0x08005a69
 800576c:	08005a79 	.word	0x08005a79
 8005770:	08005a87 	.word	0x08005a87
 8005774:	08005a95 	.word	0x08005a95
 8005778:	08005aa3 	.word	0x08005aa3
 800577c:	08005ab1 	.word	0x08005ab1
 8005780:	08005abf 	.word	0x08005abf
 8005784:	08005acd 	.word	0x08005acd
 8005788:	08005adb 	.word	0x08005adb
 800578c:	08005ae7 	.word	0x08005ae7
 8005790:	08005af5 	.word	0x08005af5
 8005794:	08005b03 	.word	0x08005b03
 8005798:	08005b0f 	.word	0x08005b0f
 800579c:	08005b1d 	.word	0x08005b1d
 80057a0:	08005b2b 	.word	0x08005b2b
 80057a4:	08005b3b 	.word	0x08005b3b
 80057a8:	08005b4b 	.word	0x08005b4b
 80057ac:	08005b59 	.word	0x08005b59
 80057b0:	08005b69 	.word	0x08005b69
 80057b4:	08005b77 	.word	0x08005b77
 80057b8:	08005b87 	.word	0x08005b87
 80057bc:	08005b97 	.word	0x08005b97
 80057c0:	08005ba7 	.word	0x08005ba7
 80057c4:	08005bb7 	.word	0x08005bb7
 80057c8:	08005bc7 	.word	0x08005bc7
 80057cc:	08005bd7 	.word	0x08005bd7
 80057d0:	08005be7 	.word	0x08005be7
 80057d4:	08005bf7 	.word	0x08005bf7
 80057d8:	08005c07 	.word	0x08005c07
 80057dc:	08005c15 	.word	0x08005c15
 80057e0:	08005c25 	.word	0x08005c25
 80057e4:	08005c35 	.word	0x08005c35
 80057e8:	08005c45 	.word	0x08005c45
 80057ec:	08005c55 	.word	0x08005c55
 80057f0:	08005c65 	.word	0x08005c65
 80057f4:	08005c75 	.word	0x08005c75
 80057f8:	08005c85 	.word	0x08005c85
 80057fc:	08005c95 	.word	0x08005c95
 8005800:	08005ca5 	.word	0x08005ca5
 8005804:	08005cb5 	.word	0x08005cb5
 8005808:	08005cc5 	.word	0x08005cc5
 800580c:	08005cd5 	.word	0x08005cd5
 8005810:	08005ce5 	.word	0x08005ce5
 8005814:	08005cf5 	.word	0x08005cf5
 8005818:	08005d03 	.word	0x08005d03
 800581c:	08005d11 	.word	0x08005d11
 8005820:	08005d1f 	.word	0x08005d1f
 8005824:	08005d2d 	.word	0x08005d2d
 8005828:	08005d3b 	.word	0x08005d3b
 800582c:	08005d49 	.word	0x08005d49
 8005830:	08005d57 	.word	0x08005d57
 8005834:	08005d65 	.word	0x08005d65
 8005838:	08005d73 	.word	0x08005d73
 800583c:	08005d81 	.word	0x08005d81
 8005840:	08005d8f 	.word	0x08005d8f
 8005844:	08005d9d 	.word	0x08005d9d
 8005848:	08005dab 	.word	0x08005dab
 800584c:	08005db9 	.word	0x08005db9
 8005850:	08005dc7 	.word	0x08005dc7
 8005854:	08005dd5 	.word	0x08005dd5
 8005858:	08005de3 	.word	0x08005de3
 800585c:	08005df1 	.word	0x08005df1
 8005860:	08005dff 	.word	0x08005dff
 8005864:	08005e0d 	.word	0x08005e0d
 8005868:	08005e1b 	.word	0x08005e1b
 800586c:	08005e29 	.word	0x08005e29
 8005870:	08005e37 	.word	0x08005e37
 8005874:	08005e45 	.word	0x08005e45
 8005878:	08005e53 	.word	0x08005e53
 800587c:	08005e61 	.word	0x08005e61
 8005880:	08005e6f 	.word	0x08005e6f
 8005884:	08005e7d 	.word	0x08005e7d
 8005888:	08005e89 	.word	0x08005e89
 800588c:	08005e97 	.word	0x08005e97
 8005890:	08005ea5 	.word	0x08005ea5
 8005894:	08005eb1 	.word	0x08005eb1
 8005898:	08005ebd 	.word	0x08005ebd
 800589c:	08005ec9 	.word	0x08005ec9
 80058a0:	08005ed5 	.word	0x08005ed5
 80058a4:	08005ee1 	.word	0x08005ee1
 80058a8:	08005eed 	.word	0x08005eed
 80058ac:	08005efb 	.word	0x08005efb
 80058b0:	08005f09 	.word	0x08005f09
 80058b4:	08005f17 	.word	0x08005f17
 80058b8:	08005f25 	.word	0x08005f25
 80058bc:	08005f33 	.word	0x08005f33
 80058c0:	08005f41 	.word	0x08005f41
 80058c4:	08005f4f 	.word	0x08005f4f
 80058c8:	08005f5d 	.word	0x08005f5d
 80058cc:	08005f6b 	.word	0x08005f6b
 80058d0:	08005f79 	.word	0x08005f79
 80058d4:	08005f87 	.word	0x08005f87
 80058d8:	08005f95 	.word	0x08005f95
 80058dc:	08005fa3 	.word	0x08005fa3
 80058e0:	08005fb1 	.word	0x08005fb1
 80058e4:	08005fbf 	.word	0x08005fbf
 80058e8:	08005fcd 	.word	0x08005fcd
 80058ec:	08005fdb 	.word	0x08005fdb
 80058f0:	08005fe9 	.word	0x08005fe9
 80058f4:	08005ff7 	.word	0x08005ff7
 80058f8:	08006005 	.word	0x08006005
 80058fc:	08006013 	.word	0x08006013
 8005900:	08006021 	.word	0x08006021
 8005904:	0800602f 	.word	0x0800602f
 8005908:	0800603d 	.word	0x0800603d
 800590c:	0800604b 	.word	0x0800604b
 8005910:	08006059 	.word	0x08006059
 8005914:	08006067 	.word	0x08006067
 8005918:	08006075 	.word	0x08006075
 800591c:	08006083 	.word	0x08006083
 8005920:	08006091 	.word	0x08006091
 8005924:	0800609f 	.word	0x0800609f
 8005928:	080060ad 	.word	0x080060ad
 800592c:	080060bb 	.word	0x080060bb
 8005930:	080060c9 	.word	0x080060c9
 8005934:	080060d7 	.word	0x080060d7
 8005938:	080060e5 	.word	0x080060e5
 800593c:	080060f7 	.word	0x080060f7
 8005940:	08006109 	.word	0x08006109
 8005944:	0800611b 	.word	0x0800611b
 8005948:	0800612d 	.word	0x0800612d
 800594c:	0800613f 	.word	0x0800613f
 8005950:	08006151 	.word	0x08006151
 8005954:	08006163 	.word	0x08006163
 8005958:	08006175 	.word	0x08006175
 800595c:	08006187 	.word	0x08006187
 8005960:	08006199 	.word	0x08006199
 8005964:	080061ab 	.word	0x080061ab
 8005968:	080061bd 	.word	0x080061bd
 800596c:	080061cf 	.word	0x080061cf
 8005970:	080061e1 	.word	0x080061e1
 8005974:	080061f3 	.word	0x080061f3
 8005978:	08006205 	.word	0x08006205
 800597c:	08006217 	.word	0x08006217
 8005980:	08006229 	.word	0x08006229
 8005984:	0800623b 	.word	0x0800623b
 8005988:	08006249 	.word	0x08006249
 800598c:	08006257 	.word	0x08006257
 8005990:	08006265 	.word	0x08006265
 8005994:	08006273 	.word	0x08006273
 8005998:	08006281 	.word	0x08006281
 800599c:	0800628f 	.word	0x0800628f
 80059a0:	0800629d 	.word	0x0800629d
 80059a4:	080062af 	.word	0x080062af
 80059a8:	080062bd 	.word	0x080062bd
 80059ac:	080062cb 	.word	0x080062cb
 80059b0:	080062d9 	.word	0x080062d9
 80059b4:	080062e7 	.word	0x080062e7
 80059b8:	080062f5 	.word	0x080062f5
 80059bc:	08006303 	.word	0x08006303
 80059c0:	08006311 	.word	0x08006311
 80059c4:	0800631f 	.word	0x0800631f
 80059c8:	0800632d 	.word	0x0800632d
 80059cc:	0800633b 	.word	0x0800633b
 80059d0:	08006349 	.word	0x08006349
 80059d4:	08006357 	.word	0x08006357
 80059d8:	08006365 	.word	0x08006365
 80059dc:	08006373 	.word	0x08006373
 80059e0:	08006381 	.word	0x08006381
 80059e4:	0800638f 	.word	0x0800638f
 80059e8:	0800639d 	.word	0x0800639d
 80059ec:	080063ab 	.word	0x080063ab
 80059f0:	080063b9 	.word	0x080063b9
 80059f4:	080063c7 	.word	0x080063c7
 80059f8:	080063d5 	.word	0x080063d5
 80059fc:	080063e3 	.word	0x080063e3
 8005a00:	080063f1 	.word	0x080063f1
 8005a04:	080063ff 	.word	0x080063ff
 8005a08:	0800640d 	.word	0x0800640d
 8005a0c:	0800641b 	.word	0x0800641b
 8005a10:	08006429 	.word	0x08006429
 8005a14:	08006437 	.word	0x08006437
 8005a18:	08006445 	.word	0x08006445
 8005a1c:	08006453 	.word	0x08006453
 8005a20:	08006461 	.word	0x08006461
 8005a24:	0800646f 	.word	0x0800646f
 8005a28:	0800647d 	.word	0x0800647d
 8005a2c:	0800648b 	.word	0x0800648b
 8005a30:	08006499 	.word	0x08006499
 8005a34:	080064a7 	.word	0x080064a7
 8005a38:	080064b5 	.word	0x080064b5
 8005a3c:	080064c3 	.word	0x080064c3
 8005a40:	080064d1 	.word	0x080064d1
 8005a44:	080064df 	.word	0x080064df

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8005a4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	601a      	str	r2, [r3, #0]
	break;
 8005a54:	f000 bd51 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8005a5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	601a      	str	r2, [r3, #0]
	break;
 8005a64:	f000 bd49 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 8005a6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	601a      	str	r2, [r3, #0]
	break;
 8005a74:	f000 bd41 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	601a      	str	r2, [r3, #0]
	break;
 8005a82:	f000 bd3a 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	785b      	ldrb	r3, [r3, #1]
 8005a8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	601a      	str	r2, [r3, #0]
	break;
 8005a90:	f000 bd33 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	789b      	ldrb	r3, [r3, #2]
 8005a98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	601a      	str	r2, [r3, #0]
	break;
 8005a9e:	f000 bd2c 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	78db      	ldrb	r3, [r3, #3]
 8005aa6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	601a      	str	r2, [r3, #0]
	break;
 8005aac:	f000 bd25 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	791b      	ldrb	r3, [r3, #4]
 8005ab4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	601a      	str	r2, [r3, #0]
	break;
 8005aba:	f000 bd1e 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	795b      	ldrb	r3, [r3, #5]
 8005ac2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	601a      	str	r2, [r3, #0]
	break;
 8005ac8:	f000 bd17 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	799b      	ldrb	r3, [r3, #6]
 8005ad0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
	break;
 8005ad6:	f000 bd10 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	601a      	str	r2, [r3, #0]
	break;
 8005ae2:	f000 bd0a 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	891b      	ldrh	r3, [r3, #8]
 8005aea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	601a      	str	r2, [r3, #0]
	break;
 8005af0:	f000 bd03 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	8a1b      	ldrh	r3, [r3, #16]
 8005af8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	601a      	str	r2, [r3, #0]
	break;
 8005afe:	f000 bcfc 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	601a      	str	r2, [r3, #0]
	break;
 8005b0a:	f000 bcf6 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	7e1b      	ldrb	r3, [r3, #24]
 8005b12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	601a      	str	r2, [r3, #0]
	break;
 8005b18:	f000 bcef 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	8b5b      	ldrh	r3, [r3, #26]
 8005b20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	601a      	str	r2, [r3, #0]
	break;
 8005b26:	f000 bce8 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8005b30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	601a      	str	r2, [r3, #0]
	break;
 8005b36:	f000 bce0 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005b40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	601a      	str	r2, [r3, #0]
	break;
 8005b46:	f000 bcd8 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	601a      	str	r2, [r3, #0]
	break;
 8005b54:	f000 bcd1 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8005b5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	601a      	str	r2, [r3, #0]
	break;
 8005b64:	f000 bcc9 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005b6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	601a      	str	r2, [r3, #0]
	break;
 8005b72:	f000 bcc2 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8005b7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	601a      	str	r2, [r3, #0]
	break;
 8005b82:	f000 bcba 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8005b8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	601a      	str	r2, [r3, #0]
	break;
 8005b92:	f000 bcb2 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8005b9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	601a      	str	r2, [r3, #0]
	break;
 8005ba2:	f000 bcaa 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 8005bac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	601a      	str	r2, [r3, #0]
	break;
 8005bb2:	f000 bca2 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8005bbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	601a      	str	r2, [r3, #0]
	break;
 8005bc2:	f000 bc9a 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 8005bcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	601a      	str	r2, [r3, #0]
	break;
 8005bd2:	f000 bc92 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	@ 0x2a6
		*ptuning_parm_value = (int32_t)(
 8005bdc:	461a      	mov	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	601a      	str	r2, [r3, #0]
	break;
 8005be2:	f000 bc8a 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	@ 0x2a8
		*ptuning_parm_value = (int32_t)(
 8005bec:	461a      	mov	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	601a      	str	r2, [r3, #0]
	break;
 8005bf2:	f000 bc82 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	@ 0x2ac
 8005bfc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	601a      	str	r2, [r3, #0]
	break;
 8005c02:	f000 bc7a 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	601a      	str	r2, [r3, #0]
	break;
 8005c10:	f000 bc73 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	@ 0x2aa
		*ptuning_parm_value = (int32_t)(
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	601a      	str	r2, [r3, #0]
	break;
 8005c20:	f000 bc6b 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	601a      	str	r2, [r3, #0]
	break;
 8005c30:	f000 bc63 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	@ 0x29e
 8005c3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	601a      	str	r2, [r3, #0]
	break;
 8005c40:	f000 bc5b 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8005c4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	601a      	str	r2, [r3, #0]
	break;
 8005c50:	f000 bc53 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 8005c5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	601a      	str	r2, [r3, #0]
	break;
 8005c60:	f000 bc4b 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8005c6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	601a      	str	r2, [r3, #0]
	break;
 8005c70:	f000 bc43 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8005c7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	601a      	str	r2, [r3, #0]
	break;
 8005c80:	f000 bc3b 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8005c8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	601a      	str	r2, [r3, #0]
	break;
 8005c90:	f000 bc33 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8005c9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	601a      	str	r2, [r3, #0]
	break;
 8005ca0:	f000 bc2b 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8005caa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	601a      	str	r2, [r3, #0]
	break;
 8005cb0:	f000 bc23 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	f8b3 3114 	ldrh.w	r3, [r3, #276]	@ 0x114
 8005cba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	601a      	str	r2, [r3, #0]
	break;
 8005cc0:	f000 bc1b 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
		*ptuning_parm_value = (int32_t)(
 8005cca:	461a      	mov	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	601a      	str	r2, [r3, #0]
	break;
 8005cd0:	f000 bc13 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8005cda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	601a      	str	r2, [r3, #0]
	break;
 8005ce0:	f000 bc0b 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
		*ptuning_parm_value = (int32_t)(
 8005cea:	461a      	mov	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	601a      	str	r2, [r3, #0]
	break;
 8005cf0:	f000 bc03 	b.w	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8005cfa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	601a      	str	r2, [r3, #0]
	break;
 8005d00:	e3fb      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8005d08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	601a      	str	r2, [r3, #0]
	break;
 8005d0e:	e3f4      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8005d16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	601a      	str	r2, [r3, #0]
	break;
 8005d1c:	e3ed      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	f893 32a2 	ldrb.w	r3, [r3, #674]	@ 0x2a2
 8005d24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	601a      	str	r2, [r3, #0]
	break;
 8005d2a:	e3e6      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 8005d32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	601a      	str	r2, [r3, #0]
	break;
 8005d38:	e3df      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8005d40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	601a      	str	r2, [r3, #0]
	break;
 8005d46:	e3d8      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8005d4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	601a      	str	r2, [r3, #0]
	break;
 8005d54:	e3d1      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	@ 0x2a0
 8005d5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	601a      	str	r2, [r3, #0]
	break;
 8005d62:	e3ca      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8005d6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	601a      	str	r2, [r3, #0]
	break;
 8005d70:	e3c3      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 8005d78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	601a      	str	r2, [r3, #0]
	break;
 8005d7e:	e3bc      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8005d86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	601a      	str	r2, [r3, #0]
	break;
 8005d8c:	e3b5      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8005d94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	601a      	str	r2, [r3, #0]
	break;
 8005d9a:	e3ae      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8005da2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	601a      	str	r2, [r3, #0]
	break;
 8005da8:	e3a7      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	f893 3103 	ldrb.w	r3, [r3, #259]	@ 0x103
 8005db0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	601a      	str	r2, [r3, #0]
	break;
 8005db6:	e3a0      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8005dbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]
	break;
 8005dc4:	e399      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8005dcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	601a      	str	r2, [r3, #0]
	break;
 8005dd2:	e392      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	f8b3 3260 	ldrh.w	r3, [r3, #608]	@ 0x260
 8005dda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	601a      	str	r2, [r3, #0]
	break;
 8005de0:	e38b      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	f8b3 3262 	ldrh.w	r3, [r3, #610]	@ 0x262
 8005de8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	601a      	str	r2, [r3, #0]
	break;
 8005dee:	e384      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005df6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	601a      	str	r2, [r3, #0]
	break;
 8005dfc:	e37d      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	f8b3 3266 	ldrh.w	r3, [r3, #614]	@ 0x266
 8005e04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	601a      	str	r2, [r3, #0]
	break;
 8005e0a:	e376      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	f8b3 3268 	ldrh.w	r3, [r3, #616]	@ 0x268
 8005e12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	601a      	str	r2, [r3, #0]
	break;
 8005e18:	e36f      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 8005e20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	601a      	str	r2, [r3, #0]
	break;
 8005e26:	e368      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 8005e2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	601a      	str	r2, [r3, #0]
	break;
 8005e34:	e361      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 8005e3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	601a      	str	r2, [r3, #0]
	break;
 8005e42:	e35a      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 8005e4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	601a      	str	r2, [r3, #0]
	break;
 8005e50:	e353      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8005e58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	601a      	str	r2, [r3, #0]
	break;
 8005e5e:	e34c      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8005e66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	601a      	str	r2, [r3, #0]
	break;
 8005e6c:	e345      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8005e74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	601a      	str	r2, [r3, #0]
	break;
 8005e7a:	e33e      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	7c1b      	ldrb	r3, [r3, #16]
 8005e80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	601a      	str	r2, [r3, #0]
	break;
 8005e86:	e338      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005e8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	601a      	str	r2, [r3, #0]
	break;
 8005e94:	e331      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005e9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	601a      	str	r2, [r3, #0]
	break;
 8005ea2:	e32a      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	601a      	str	r2, [r3, #0]
	break;
 8005eae:	e324      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	601a      	str	r2, [r3, #0]
	break;
 8005eba:	e31e      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	8adb      	ldrh	r3, [r3, #22]
 8005ec0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	601a      	str	r2, [r3, #0]
	break;
 8005ec6:	e318      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	8b1b      	ldrh	r3, [r3, #24]
 8005ecc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	601a      	str	r2, [r3, #0]
	break;
 8005ed2:	e312      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	601a      	str	r2, [r3, #0]
	break;
 8005ede:	e30c      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	601a      	str	r2, [r3, #0]
	break;
 8005eea:	e306      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005ef2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	601a      	str	r2, [r3, #0]
	break;
 8005ef8:	e2ff      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	601a      	str	r2, [r3, #0]
	break;
 8005f06:	e2f8      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	601a      	str	r2, [r3, #0]
	break;
 8005f14:	e2f1      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	601a      	str	r2, [r3, #0]
	break;
 8005f22:	e2ea      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	f893 32c0 	ldrb.w	r3, [r3, #704]	@ 0x2c0
 8005f2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	601a      	str	r2, [r3, #0]
	break;
 8005f30:	e2e3      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f893 32c1 	ldrb.w	r3, [r3, #705]	@ 0x2c1
 8005f38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	601a      	str	r2, [r3, #0]
	break;
 8005f3e:	e2dc      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	f893 32c2 	ldrb.w	r3, [r3, #706]	@ 0x2c2
 8005f46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	601a      	str	r2, [r3, #0]
	break;
 8005f4c:	e2d5      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	@ 0x2c4
 8005f54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	601a      	str	r2, [r3, #0]
	break;
 8005f5a:	e2ce      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005f62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	601a      	str	r2, [r3, #0]
	break;
 8005f68:	e2c7      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	@ 0x2cc
 8005f70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	601a      	str	r2, [r3, #0]
	break;
 8005f76:	e2c0      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	@ 0x2d4
 8005f7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	601a      	str	r2, [r3, #0]
	break;
 8005f84:	e2b9      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8005f8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	601a      	str	r2, [r3, #0]
	break;
 8005f92:	e2b2      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	@ 0x2d6
 8005f9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	601a      	str	r2, [r3, #0]
	break;
 8005fa0:	e2ab      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	f893 3209 	ldrb.w	r3, [r3, #521]	@ 0x209
 8005fa8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	601a      	str	r2, [r3, #0]
	break;
 8005fae:	e2a4      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f893 320a 	ldrb.w	r3, [r3, #522]	@ 0x20a
 8005fb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	601a      	str	r2, [r3, #0]
	break;
 8005fbc:	e29d      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8005fc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	601a      	str	r2, [r3, #0]
	break;
 8005fca:	e296      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 8005fd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]
	break;
 8005fd8:	e28f      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	f8b3 3126 	ldrh.w	r3, [r3, #294]	@ 0x126
 8005fe0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	601a      	str	r2, [r3, #0]
	break;
 8005fe6:	e288      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 8005fee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	601a      	str	r2, [r3, #0]
	break;
 8005ff4:	e281      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	f8b3 312a 	ldrh.w	r3, [r3, #298]	@ 0x12a
 8005ffc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	601a      	str	r2, [r3, #0]
	break;
 8006002:	e27a      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800600a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	601a      	str	r2, [r3, #0]
	break;
 8006010:	e273      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8006018:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	601a      	str	r2, [r3, #0]
	break;
 800601e:	e26c      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8006026:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	601a      	str	r2, [r3, #0]
	break;
 800602c:	e265      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8006034:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	601a      	str	r2, [r3, #0]
	break;
 800603a:	e25e      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006042:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	601a      	str	r2, [r3, #0]
	break;
 8006048:	e257      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8006050:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	601a      	str	r2, [r3, #0]
	break;
 8006056:	e250      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800605e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	601a      	str	r2, [r3, #0]
	break;
 8006064:	e249      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800606c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	601a      	str	r2, [r3, #0]
	break;
 8006072:	e242      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800607a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	601a      	str	r2, [r3, #0]
	break;
 8006080:	e23b      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006088:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	601a      	str	r2, [r3, #0]
	break;
 800608e:	e234      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8006096:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	601a      	str	r2, [r3, #0]
	break;
 800609c:	e22d      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80060a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	601a      	str	r2, [r3, #0]
	break;
 80060aa:	e226      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 80060b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	601a      	str	r2, [r3, #0]
	break;
 80060b8:	e21f      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80060c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	601a      	str	r2, [r3, #0]
	break;
 80060c6:	e218      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 80060ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	601a      	str	r2, [r3, #0]
	break;
 80060d4:	e211      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80060dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	601a      	str	r2, [r3, #0]
	break;
 80060e2:	e20a      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060ea:	f8b3 3398 	ldrh.w	r3, [r3, #920]	@ 0x398
 80060ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	601a      	str	r2, [r3, #0]
	break;
 80060f4:	e201      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060fc:	f8d3 339c 	ldr.w	r3, [r3, #924]	@ 0x39c
 8006100:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	601a      	str	r2, [r3, #0]
	break;
 8006106:	e1f8      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800610e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8006112:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	601a      	str	r2, [r3, #0]
	break;
 8006118:	e1ef      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006120:	f893 33a4 	ldrb.w	r3, [r3, #932]	@ 0x3a4
 8006124:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	601a      	str	r2, [r3, #0]
	break;
 800612a:	e1e6      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006132:	f8d3 33a8 	ldr.w	r3, [r3, #936]	@ 0x3a8
 8006136:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	601a      	str	r2, [r3, #0]
	break;
 800613c:	e1dd      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006144:	f8d3 33ac 	ldr.w	r3, [r3, #940]	@ 0x3ac
 8006148:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	601a      	str	r2, [r3, #0]
	break;
 800614e:	e1d4      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006156:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800615a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	601a      	str	r2, [r3, #0]
	break;
 8006160:	e1cb      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006168:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800616c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	601a      	str	r2, [r3, #0]
	break;
 8006172:	e1c2      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800617a:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800617e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	601a      	str	r2, [r3, #0]
	break;
 8006184:	e1b9      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800618c:	f9b3 33be 	ldrsh.w	r3, [r3, #958]	@ 0x3be
 8006190:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	601a      	str	r2, [r3, #0]
	break;
 8006196:	e1b0      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800619e:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	@ 0x3c0
 80061a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	601a      	str	r2, [r3, #0]
	break;
 80061a8:	e1a7      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061b0:	f893 33c2 	ldrb.w	r3, [r3, #962]	@ 0x3c2
 80061b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	601a      	str	r2, [r3, #0]
	break;
 80061ba:	e19e      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061c2:	f893 3396 	ldrb.w	r3, [r3, #918]	@ 0x396
 80061c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	601a      	str	r2, [r3, #0]
	break;
 80061cc:	e195      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061d4:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
		*ptuning_parm_value = (int32_t)(
 80061d8:	461a      	mov	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
	break;
 80061de:	e18c      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80061ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	601a      	str	r2, [r3, #0]
	break;
 80061f0:	e183      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80061fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	601a      	str	r2, [r3, #0]
	break;
 8006202:	e17a      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800620a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800620e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	601a      	str	r2, [r3, #0]
	break;
 8006214:	e171      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800621c:	f8b3 33d0 	ldrh.w	r3, [r3, #976]	@ 0x3d0
 8006220:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
	break;
 8006226:	e168      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800622e:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 8006232:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	601a      	str	r2, [r3, #0]
	break;
 8006238:	e15f      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8006240:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	601a      	str	r2, [r3, #0]
	break;
 8006246:	e158      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800624e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	601a      	str	r2, [r3, #0]
	break;
 8006254:	e151      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	f8b3 312c 	ldrh.w	r3, [r3, #300]	@ 0x12c
 800625c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	601a      	str	r2, [r3, #0]
	break;
 8006262:	e14a      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800626a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	601a      	str	r2, [r3, #0]
	break;
 8006270:	e143      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8006278:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	601a      	str	r2, [r3, #0]
	break;
 800627e:	e13c      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8006286:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	601a      	str	r2, [r3, #0]
	break;
 800628c:	e135      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8006294:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	601a      	str	r2, [r3, #0]
	break;
 800629a:	e12e      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80062a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	601a      	str	r2, [r3, #0]
	break;
 80062ac:	e125      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 80062b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	601a      	str	r2, [r3, #0]
	break;
 80062ba:	e11e      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	@ 0x186
 80062c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	601a      	str	r2, [r3, #0]
	break;
 80062c8:	e117      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	@ 0x188
 80062d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	601a      	str	r2, [r3, #0]
	break;
 80062d6:	e110      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	@ 0x18a
 80062de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	601a      	str	r2, [r3, #0]
	break;
 80062e4:	e109      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	@ 0x18c
 80062ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	601a      	str	r2, [r3, #0]
	break;
 80062f2:	e102      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	@ 0x18e
 80062fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	601a      	str	r2, [r3, #0]
	break;
 8006300:	e0fb      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	@ 0x190
 8006308:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	601a      	str	r2, [r3, #0]
	break;
 800630e:	e0f4      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	@ 0x192
 8006316:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	601a      	str	r2, [r3, #0]
	break;
 800631c:	e0ed      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	@ 0x194
 8006324:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	601a      	str	r2, [r3, #0]
	break;
 800632a:	e0e6      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	@ 0x196
 8006332:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	601a      	str	r2, [r3, #0]
	break;
 8006338:	e0df      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	@ 0x198
 8006340:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	601a      	str	r2, [r3, #0]
	break;
 8006346:	e0d8      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	@ 0x19a
 800634e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
	break;
 8006354:	e0d1      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	@ 0x19c
 800635c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	601a      	str	r2, [r3, #0]
	break;
 8006362:	e0ca      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	@ 0x19e
 800636a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	601a      	str	r2, [r3, #0]
	break;
 8006370:	e0c3      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	@ 0x1a0
 8006378:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	601a      	str	r2, [r3, #0]
	break;
 800637e:	e0bc      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	@ 0x1a2
 8006386:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	601a      	str	r2, [r3, #0]
	break;
 800638c:	e0b5      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	@ 0x1a4
 8006394:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	601a      	str	r2, [r3, #0]
	break;
 800639a:	e0ae      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	@ 0x1a6
 80063a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	601a      	str	r2, [r3, #0]
	break;
 80063a8:	e0a7      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	@ 0x1a8
 80063b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	601a      	str	r2, [r3, #0]
	break;
 80063b6:	e0a0      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	@ 0x1aa
 80063be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	601a      	str	r2, [r3, #0]
	break;
 80063c4:	e099      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	@ 0x1ac
 80063cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	601a      	str	r2, [r3, #0]
	break;
 80063d2:	e092      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	@ 0x1ae
 80063da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	601a      	str	r2, [r3, #0]
	break;
 80063e0:	e08b      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	@ 0x1b0
 80063e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	601a      	str	r2, [r3, #0]
	break;
 80063ee:	e084      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	@ 0x1b2
 80063f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	601a      	str	r2, [r3, #0]
	break;
 80063fc:	e07d      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	@ 0x1b4
 8006404:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	601a      	str	r2, [r3, #0]
	break;
 800640a:	e076      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	@ 0x1b6
 8006412:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	601a      	str	r2, [r3, #0]
	break;
 8006418:	e06f      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	@ 0x1b8
 8006420:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	601a      	str	r2, [r3, #0]
	break;
 8006426:	e068      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	@ 0x1ba
 800642e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	601a      	str	r2, [r3, #0]
	break;
 8006434:	e061      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	@ 0x1bc
 800643c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	601a      	str	r2, [r3, #0]
	break;
 8006442:	e05a      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	@ 0x1be
 800644a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	601a      	str	r2, [r3, #0]
	break;
 8006450:	e053      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	@ 0x1c0
 8006458:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	601a      	str	r2, [r3, #0]
	break;
 800645e:	e04c      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	@ 0x1c2
 8006466:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	601a      	str	r2, [r3, #0]
	break;
 800646c:	e045      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	@ 0x1c4
 8006474:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	601a      	str	r2, [r3, #0]
	break;
 800647a:	e03e      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	@ 0x1c6
 8006482:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	601a      	str	r2, [r3, #0]
	break;
 8006488:	e037      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	@ 0x1c8
 8006490:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	601a      	str	r2, [r3, #0]
	break;
 8006496:	e030      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	@ 0x1ca
 800649e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	601a      	str	r2, [r3, #0]
	break;
 80064a4:	e029      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	@ 0x1cc
 80064ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	601a      	str	r2, [r3, #0]
	break;
 80064b2:	e022      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	@ 0x1ce
 80064ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	601a      	str	r2, [r3, #0]
	break;
 80064c0:	e01b      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	@ 0x1d0
 80064c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	601a      	str	r2, [r3, #0]
	break;
 80064ce:	e014      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	@ 0x1d2
 80064d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	601a      	str	r2, [r3, #0]
	break;
 80064dc:	e00d      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	@ 0x1d4
 80064e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	601a      	str	r2, [r3, #0]
	break;
 80064ea:	e006      	b.n	80064fa <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80064f2:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 80064f4:	23fc      	movs	r3, #252	@ 0xfc
 80064f6:	77fb      	strb	r3, [r7, #31]
	break;
 80064f8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80064fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3724      	adds	r7, #36	@ 0x24
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop

0800650c <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006514:	2300      	movs	r3, #0
 8006516:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3318      	adds	r3, #24
 800651c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394

	LOG_FUNCTION_END(status);

	return status;
 800652a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 800653a:	b480      	push	{r7}
 800653c:	b085      	sub	sp, #20
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3318      	adds	r3, #24
 800654a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394

	LOG_FUNCTION_END(status);

	return status;
 8006558:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006570:	2300      	movs	r3, #0
 8006572:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3318      	adds	r3, #24
 8006578:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395

	LOG_FUNCTION_END(status);

	return status;
 8006586:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8006596:	b480      	push	{r7}
 8006598:	b085      	sub	sp, #20
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800659e:	2300      	movs	r3, #0
 80065a0:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3318      	adds	r3, #24
 80065a6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396

	LOG_FUNCTION_END(status);

	return status;
 80065b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80065cc:	2300      	movs	r3, #0
 80065ce:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	3318      	adds	r3, #24
 80065d4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396

	LOG_FUNCTION_END(status);

	return status;
 80065e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b085      	sub	sp, #20
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80065fa:	2300      	movs	r3, #0
 80065fc:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3318      	adds	r3, #24
 8006602:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395

	LOG_FUNCTION_END(status);

	return status;
 8006610:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006628:	2300      	movs	r3, #0
 800662a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2208      	movs	r2, #8
 8006630:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	220b      	movs	r2, #11
 8006636:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800663e:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006646:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800664e:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006656:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006658:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006670:	2300      	movs	r3, #0
 8006672:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2212      	movs	r2, #18
 800667e:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	220f      	movs	r2, #15
 8006684:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8006692:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	220c      	movs	r2, #12
 8006698:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800669a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80066b4:	2300      	movs	r3, #0
 80066b6:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	895b      	ldrh	r3, [r3, #10]
 80066bc:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	895b      	ldrh	r3, [r3, #10]
 80066da:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2200      	movs	r2, #0
 80066f8:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2200      	movs	r2, #0
 80066fe:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2240      	movs	r2, #64	@ 0x40
 8006704:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10d      	bne.n	800672a <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d108      	bne.n	800672a <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d103      	bne.n	800672a <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2200      	movs	r2, #0
 8006726:	741a      	strb	r2, [r3, #16]
 8006728:	e002      	b.n	8006730 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2201      	movs	r2, #1
 800672e:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 8006730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d114      	bne.n	8006762 <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 800673c:	2b01      	cmp	r3, #1
 800673e:	d110      	bne.n	8006762 <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	7d9b      	ldrb	r3, [r3, #22]
 8006754:	f001 ff94 	bl	8008680 <VL53LX_calc_range_ignore_threshold>
 8006758:	4603      	mov	r3, r0
 800675a:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	831a      	strh	r2, [r3, #24]
 8006760:	e002      	b.n	8006768 <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2200      	movs	r2, #0
 8006766:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 800676e:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2232      	movs	r2, #50	@ 0x32
 8006774:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800677c:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	228c      	movs	r2, #140	@ 0x8c
 8006782:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006784:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006798:	2300      	movs	r3, #0
 800679a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80067a2:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80067aa:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2207      	movs	r2, #7
 80067b0:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80067b8:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80067c0:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f64f 72ba 	movw	r2, #65466	@ 0xffba
 80067c8:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2246      	movs	r2, #70	@ 0x46
 80067ce:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80067d6:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	228c      	movs	r2, #140	@ 0x8c
 80067dc:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 80067de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80067f6:	2300      	movs	r3, #0
 80067f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006800:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006808:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006810:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006818:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2208      	movs	r2, #8
 800681e:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2228      	movs	r2, #40	@ 0x28
 8006824:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2209      	movs	r2, #9
 800682a:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800682c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006844:	2300      	movs	r3, #0
 8006846:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 800684e:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006856:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800685e:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006866:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2210      	movs	r2, #16
 800686c:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2208      	movs	r2, #8
 8006872:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	4603      	mov	r3, r0
 800688c:	6039      	str	r1, [r7, #0]
 800688e:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006890:	2300      	movs	r3, #0
 8006892:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2204      	movs	r2, #4
 8006898:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2201      	movs	r2, #1
 800689e:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2201      	movs	r2, #1
 80068a4:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2202      	movs	r2, #2
 80068aa:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2201      	movs	r2, #1
 80068b0:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2250      	movs	r2, #80	@ 0x50
 80068b6:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	2264      	movs	r2, #100	@ 0x64
 80068bc:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	f241 023d 	movw	r2, #4157	@ 0x103d
 80068c4:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2210      	movs	r2, #16
 80068ca:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2232      	movs	r2, #50	@ 0x32
 80068d0:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2264      	movs	r2, #100	@ 0x64
 80068d6:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2201      	movs	r2, #1
 80068dc:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	22b4      	movs	r2, #180	@ 0xb4
 80068e2:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2200      	movs	r2, #0
 80068e8:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 80068f0:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2208      	movs	r2, #8
 80068f6:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2288      	movs	r2, #136	@ 0x88
 80068fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2208      	movs	r2, #8
 8006906:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006918:	849a      	strh	r2, [r3, #36]	@ 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2200      	movs	r2, #0
 800691e:	84da      	strh	r2, [r3, #38]	@ 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	79fa      	ldrb	r2, [r7, #7]
 8006924:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 800692e:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2232      	movs	r2, #50	@ 0x32
 8006934:	86da      	strh	r2, [r3, #54]	@ 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800693c:	871a      	strh	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	228c      	movs	r2, #140	@ 0x8c
 8006942:	875a      	strh	r2, [r3, #58]	@ 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2250      	movs	r2, #80	@ 0x50
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2232      	movs	r2, #50	@ 0x32
 8006950:	87da      	strh	r2, [r3, #62]	@ 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8006952:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800696a:	2300      	movs	r3, #0
 800696c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	221e      	movs	r2, #30
 8006972:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	220e      	movs	r2, #14
 8006978:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f642 7294 	movw	r2, #12180	@ 0x2f94
 8006980:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	220e      	movs	r2, #14
 8006986:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	220a      	movs	r2, #10
 800698c:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2206      	movs	r2, #6
 8006992:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	220e      	movs	r2, #14
 8006998:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	220a      	movs	r2, #10
 800699e:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2206      	movs	r2, #6
 80069a4:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2209      	movs	r2, #9
 80069aa:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2205      	movs	r2, #5
 80069b0:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2203      	movs	r2, #3
 80069b6:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2206      	movs	r2, #6
 80069bc:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2206      	movs	r2, #6
 80069c2:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2206      	movs	r2, #6
 80069c8:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2202      	movs	r2, #2
 80069ce:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2221      	movs	r2, #33	@ 0x21
 80069d4:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	223c      	movs	r2, #60	@ 0x3c
 80069e6:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	223c      	movs	r2, #60	@ 0x3c
 80069ec:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	223c      	movs	r2, #60	@ 0x3c
 80069f2:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2280      	movs	r2, #128	@ 0x80
 80069f8:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2280      	movs	r2, #128	@ 0x80
 80069fe:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2280      	movs	r2, #128	@ 0x80
 8006a04:	845a      	strh	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2208      	movs	r2, #8
 8006a0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2210      	movs	r2, #16
 8006a12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2202      	movs	r2, #2
 8006a22:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2202      	movs	r2, #2
 8006a32:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006a4c:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f640 22be 	movw	r2, #2750	@ 0xabe
 8006a56:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	22fa      	movs	r2, #250	@ 0xfa
 8006a5e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a68:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8006a72:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8006a7c:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8006a86:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8006a90:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8006a9a:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	22c8      	movs	r2, #200	@ 0xc8
 8006aa2:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f640 1238 	movw	r2, #2360	@ 0x938
 8006aac:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f640 1247 	movw	r2, #2375	@ 0x947
 8006abe:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f640 4235 	movw	r2, #3125	@ 0xc35
 8006ac8:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f241 2270 	movw	r2, #4720	@ 0x1270
 8006ad2:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f640 429e 	movw	r2, #3230	@ 0xc9e
 8006adc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f241 228e 	movw	r2, #4750	@ 0x128e
 8006ae6:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f641 02ce 	movw	r2, #6350	@ 0x18ce
 8006af0:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	22fa      	movs	r2, #250	@ 0xfa
 8006b08:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8006b12:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f640 42b2 	movw	r2, #3250	@ 0xcb2
 8006b1c:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f241 1294 	movw	r2, #4500	@ 0x1194
 8006b26:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8006b30:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	22c8      	movs	r2, #200	@ 0xc8
 8006b38:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f640 720a 	movw	r2, #3850	@ 0xf0a
 8006b62:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8006b6c:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f640 720a 	movw	r2, #3850	@ 0xf0a
 8006b76:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f8a3 20da 	strh.w	r2, [r3, #218]	@ 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006bb8:	859a      	strh	r2, [r3, #44]	@ 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006bc0:	85da      	strh	r2, [r3, #46]	@ 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006bc8:	861a      	strh	r2, [r3, #48]	@ 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006bd0:	865a      	strh	r2, [r3, #50]	@ 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006bd8:	639a      	str	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006be0:	63da      	str	r2, [r3, #60]	@ 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006be8:	641a      	str	r2, [r3, #64]	@ 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006bf0:	645a      	str	r2, [r3, #68]	@ 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006bf8:	649a      	str	r2, [r3, #72]	@ 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f242 3228 	movw	r2, #9000	@ 0x2328
 8006c00:	64da      	str	r2, [r3, #76]	@ 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f241 7270 	movw	r2, #6000	@ 0x1770
 8006c08:	651a      	str	r2, [r3, #80]	@ 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006c10:	655a      	str	r2, [r3, #84]	@ 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006c18:	659a      	str	r2, [r3, #88]	@ 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006c20:	65da      	str	r2, [r3, #92]	@ 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006c28:	661a      	str	r2, [r3, #96]	@ 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006c30:	665a      	str	r2, [r3, #100]	@ 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8006c38:	66da      	str	r2, [r3, #108]	@ 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8006c40:	671a      	str	r2, [r3, #112]	@ 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8006c48:	675a      	str	r2, [r3, #116]	@ 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006c50:	679a      	str	r2, [r3, #120]	@ 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	669a      	str	r2, [r3, #104]	@ 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8006c5e:	67da      	str	r2, [r3, #124]	@ 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8006c66:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2206      	movs	r2, #6
 8006c86:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b085      	sub	sp, #20
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006cac:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2238      	movs	r2, #56	@ 0x38
 8006cb2:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2270      	movs	r2, #112	@ 0x70
 8006cbe:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2210      	movs	r2, #16
 8006cc4:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2264      	movs	r2, #100	@ 0x64
 8006cca:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006cd2:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	220f      	movs	r2, #15
 8006cd8:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2234      	movs	r2, #52	@ 0x34
 8006cde:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	22c8      	movs	r2, #200	@ 0xc8
 8006ce4:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006cec:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006cf4:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b087      	sub	sp, #28
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
 8006d12:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006d14:	2300      	movs	r3, #0
 8006d16:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006d1e:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2211      	movs	r2, #17
 8006d60:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2202      	movs	r2, #2
 8006d66:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2202      	movs	r2, #2
 8006d72:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2208      	movs	r2, #8
 8006d78:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8006d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d82:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8006d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8c:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8006d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d96:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	22ff      	movs	r2, #255	@ 0xff
 8006dba:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8006dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbe:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8006dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc6:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2220      	movs	r2, #32
 8006dee:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	220b      	movs	r2, #11
 8006df4:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8006df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df8:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2202      	movs	r2, #2
 8006e02:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	220d      	movs	r2, #13
 8006e08:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8006e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0c:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8006e30:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2238      	movs	r2, #56	@ 0x38
 8006e3c:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	22ff      	movs	r2, #255	@ 0xff
 8006e42:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	221a      	movs	r2, #26
 8006e54:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2201      	movs	r2, #1
 8006e66:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	22cc      	movs	r2, #204	@ 0xcc
 8006e6c:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	220b      	movs	r2, #11
 8006e72:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2201      	movs	r2, #1
 8006e78:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	22f5      	movs	r2, #245	@ 0xf5
 8006e7e:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2209      	movs	r2, #9
 8006e84:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8006e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e88:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8006e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e90:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2208      	movs	r2, #8
 8006e9a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2278      	movs	r2, #120	@ 0x78
 8006ea0:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2207      	movs	r2, #7
 8006eb2:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2221      	movs	r2, #33	@ 0x21
 8006eb8:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2243      	movs	r2, #67	@ 0x43
 8006ebe:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2210      	movs	r2, #16
 8006ec4:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2232      	movs	r2, #50	@ 0x32
 8006eca:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2254      	movs	r2, #84	@ 0x54
 8006ed0:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2207      	movs	r2, #7
 8006ed6:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2221      	movs	r2, #33	@ 0x21
 8006edc:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2243      	movs	r2, #67	@ 0x43
 8006ee2:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2210      	movs	r2, #16
 8006ee8:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2202      	movs	r2, #2
 8006eee:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2243      	movs	r2, #67	@ 0x43
 8006ef4:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2205      	movs	r2, #5
 8006efa:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	2200      	movs	r2, #0
 8006f00:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2207      	movs	r2, #7
 8006f06:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2221      	movs	r2, #33	@ 0x21
 8006f0c:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2243      	movs	r2, #67	@ 0x43
 8006f12:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2210      	movs	r2, #16
 8006f18:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2232      	movs	r2, #50	@ 0x32
 8006f1e:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2254      	movs	r2, #84	@ 0x54
 8006f24:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f2c:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f34:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8006f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f3e:	2205      	movs	r2, #5
 8006f40:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8006f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f44:	2200      	movs	r2, #0
 8006f46:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8006f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f4a:	220f      	movs	r2, #15
 8006f4c:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8006f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f50:	220f      	movs	r2, #15
 8006f52:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8006f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f56:	2208      	movs	r2, #8
 8006f58:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8006f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5c:	2208      	movs	r2, #8
 8006f5e:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	2201      	movs	r2, #1
 8006f64:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	2200      	movs	r2, #0
 8006f76:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8006f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
	pdynamic->system__seed_config =
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	220b      	movs	r2, #11
 8006f86:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	2209      	movs	r2, #9
 8006f8c:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8006f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f90:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8006f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f98:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8006fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa6:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
	pdynamic->sd_config__first_order_select =
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8006fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb0:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
	pdynamic->sd_config__quantifier         =
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	22c7      	movs	r2, #199	@ 0xc7
 8006fbc:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	22ff      	movs	r2, #255	@ 0xff
 8006fc2:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	22db      	movs	r2, #219	@ 0xdb
 8006fc8:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd8:	2201      	movs	r2, #1
 8006fda:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fde:	2201      	movs	r2, #1
 8006fe0:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe4:	2221      	movs	r2, #33	@ 0x21
 8006fe6:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8006fe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	371c      	adds	r7, #28
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b090      	sub	sp, #64	@ 0x40
 8006ffc:	af0a      	add	r7, sp, #40	@ 0x28
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007006:	2300      	movs	r3, #0
 8007008:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	9303      	str	r3, [sp, #12]
 800700e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007010:	9302      	str	r3, [sp, #8]
 8007012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007014:	9301      	str	r3, [sp, #4]
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	68b8      	ldr	r0, [r7, #8]
 8007022:	f7ff fe70 	bl	8006d06 <VL53LX_preset_mode_standard_ranging>
 8007026:	4603      	mov	r3, r0
 8007028:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800702a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d171      	bne.n	8007116 <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8007038:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	9308      	str	r3, [sp, #32]
 800703e:	2305      	movs	r3, #5
 8007040:	9307      	str	r3, [sp, #28]
 8007042:	2304      	movs	r3, #4
 8007044:	9306      	str	r3, [sp, #24]
 8007046:	2303      	movs	r3, #3
 8007048:	9305      	str	r3, [sp, #20]
 800704a:	2302      	movs	r3, #2
 800704c:	9304      	str	r3, [sp, #16]
 800704e:	2301      	movs	r3, #1
 8007050:	9303      	str	r3, [sp, #12]
 8007052:	2300      	movs	r3, #0
 8007054:	9302      	str	r3, [sp, #8]
 8007056:	2304      	movs	r3, #4
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	2303      	movs	r3, #3
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	2302      	movs	r3, #2
 8007060:	2201      	movs	r2, #1
 8007062:	2100      	movs	r1, #0
 8007064:	2007      	movs	r0, #7
 8007066:	f000 ff9f 	bl	8007fa8 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	3302      	adds	r3, #2
 800706e:	9308      	str	r3, [sp, #32]
 8007070:	2305      	movs	r3, #5
 8007072:	9307      	str	r3, [sp, #28]
 8007074:	2304      	movs	r3, #4
 8007076:	9306      	str	r3, [sp, #24]
 8007078:	2303      	movs	r3, #3
 800707a:	9305      	str	r3, [sp, #20]
 800707c:	2302      	movs	r3, #2
 800707e:	9304      	str	r3, [sp, #16]
 8007080:	2301      	movs	r3, #1
 8007082:	9303      	str	r3, [sp, #12]
 8007084:	2300      	movs	r3, #0
 8007086:	9302      	str	r3, [sp, #8]
 8007088:	2304      	movs	r3, #4
 800708a:	9301      	str	r3, [sp, #4]
 800708c:	2303      	movs	r3, #3
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	2302      	movs	r3, #2
 8007092:	2201      	movs	r2, #1
 8007094:	2100      	movs	r1, #0
 8007096:	2007      	movs	r0, #7
 8007098:	f001 f816 	bl	80080c8 <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	2209      	movs	r2, #9
 80070a0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	220b      	movs	r2, #11
 80070a6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80070a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070aa:	2209      	movs	r2, #9
 80070ac:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	220b      	movs	r2, #11
 80070b2:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	2200      	movs	r2, #0
 80070b8:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	2220      	movs	r2, #32
 80070be:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	2200      	movs	r2, #0
 80070c4:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	221a      	movs	r2, #26
 80070ca:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	2200      	movs	r2, #0
 80070d0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	2228      	movs	r2, #40	@ 0x28
 80070d6:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	2200      	movs	r2, #0
 80070dc:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	2221      	movs	r2, #33	@ 0x21
 80070e2:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	22f5      	movs	r2, #245	@ 0xf5
 80070e8:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2208      	movs	r2, #8
 80070ee:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2288      	movs	r2, #136	@ 0x88
 80070f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 80070fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	68b9      	ldr	r1, [r7, #8]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f9e6 	bl	80074d6 <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 800710a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710c:	229b      	movs	r2, #155	@ 0x9b
 800710e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007112:	2226      	movs	r2, #38	@ 0x26
 8007114:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007116:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b090      	sub	sp, #64	@ 0x40
 8007126:	af0a      	add	r7, sp, #40	@ 0x28
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	607a      	str	r2, [r7, #4]
 800712e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007130:	2300      	movs	r3, #0
 8007132:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007136:	9304      	str	r3, [sp, #16]
 8007138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713a:	9303      	str	r3, [sp, #12]
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	9302      	str	r3, [sp, #8]
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	9301      	str	r3, [sp, #4]
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	68b9      	ldr	r1, [r7, #8]
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f7ff ff52 	bl	8006ff8 <VL53LX_preset_mode_histogram_ranging>
 8007154:	4603      	mov	r3, r0
 8007156:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007158:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d178      	bne.n	8007252 <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	9308      	str	r3, [sp, #32]
 8007164:	2305      	movs	r3, #5
 8007166:	9307      	str	r3, [sp, #28]
 8007168:	2304      	movs	r3, #4
 800716a:	9306      	str	r3, [sp, #24]
 800716c:	2303      	movs	r3, #3
 800716e:	9305      	str	r3, [sp, #20]
 8007170:	2302      	movs	r3, #2
 8007172:	9304      	str	r3, [sp, #16]
 8007174:	2301      	movs	r3, #1
 8007176:	9303      	str	r3, [sp, #12]
 8007178:	2300      	movs	r3, #0
 800717a:	9302      	str	r3, [sp, #8]
 800717c:	2304      	movs	r3, #4
 800717e:	9301      	str	r3, [sp, #4]
 8007180:	2303      	movs	r3, #3
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	2302      	movs	r3, #2
 8007186:	2201      	movs	r2, #1
 8007188:	2100      	movs	r1, #0
 800718a:	2007      	movs	r0, #7
 800718c:	f000 ff0c 	bl	8007fa8 <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007192:	3302      	adds	r3, #2
 8007194:	9308      	str	r3, [sp, #32]
 8007196:	2305      	movs	r3, #5
 8007198:	9307      	str	r3, [sp, #28]
 800719a:	2304      	movs	r3, #4
 800719c:	9306      	str	r3, [sp, #24]
 800719e:	2303      	movs	r3, #3
 80071a0:	9305      	str	r3, [sp, #20]
 80071a2:	2302      	movs	r3, #2
 80071a4:	9304      	str	r3, [sp, #16]
 80071a6:	2301      	movs	r3, #1
 80071a8:	9303      	str	r3, [sp, #12]
 80071aa:	2300      	movs	r3, #0
 80071ac:	9302      	str	r3, [sp, #8]
 80071ae:	2304      	movs	r3, #4
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	2303      	movs	r3, #3
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	2302      	movs	r3, #2
 80071b8:	2201      	movs	r2, #1
 80071ba:	2100      	movs	r1, #0
 80071bc:	2007      	movs	r0, #7
 80071be:	f000 ff83 	bl	80080c8 <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80071c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	68b9      	ldr	r1, [r7, #8]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f982 	bl	80074d6 <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	2209      	movs	r2, #9
 80071d6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	220b      	movs	r2, #11
 80071dc:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	2200      	movs	r2, #0
 80071e2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	2221      	movs	r2, #33	@ 0x21
 80071e8:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	2200      	movs	r2, #0
 80071ee:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	221b      	movs	r2, #27
 80071f4:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	2200      	movs	r2, #0
 80071fa:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	2229      	movs	r2, #41	@ 0x29
 8007200:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	2200      	movs	r2, #0
 8007206:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	2222      	movs	r2, #34	@ 0x22
 800720c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2209      	movs	r2, #9
 8007212:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	22f5      	movs	r2, #245	@ 0xf5
 8007218:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721c:	2209      	movs	r2, #9
 800721e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8007220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007222:	220b      	movs	r2, #11
 8007224:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 8007226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007228:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 800722e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007230:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8007232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007234:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2208      	movs	r2, #8
 800723a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2288      	movs	r2, #136	@ 0x88
 8007242:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 8007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007248:	229b      	movs	r2, #155	@ 0x9b
 800724a:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800724c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724e:	2226      	movs	r2, #38	@ 0x26
 8007250:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007252:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b090      	sub	sp, #64	@ 0x40
 8007262:	af0a      	add	r7, sp, #40	@ 0x28
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	607a      	str	r2, [r7, #4]
 800726a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800726c:	2300      	movs	r3, #0
 800726e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007272:	9304      	str	r3, [sp, #16]
 8007274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007276:	9303      	str	r3, [sp, #12]
 8007278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727a:	9302      	str	r3, [sp, #8]
 800727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f7ff feb4 	bl	8006ff8 <VL53LX_preset_mode_histogram_ranging>
 8007290:	4603      	mov	r3, r0
 8007292:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d178      	bne.n	800738e <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	9308      	str	r3, [sp, #32]
 80072a0:	2303      	movs	r3, #3
 80072a2:	9307      	str	r3, [sp, #28]
 80072a4:	2302      	movs	r3, #2
 80072a6:	9306      	str	r3, [sp, #24]
 80072a8:	2301      	movs	r3, #1
 80072aa:	9305      	str	r3, [sp, #20]
 80072ac:	2302      	movs	r3, #2
 80072ae:	9304      	str	r3, [sp, #16]
 80072b0:	2301      	movs	r3, #1
 80072b2:	9303      	str	r3, [sp, #12]
 80072b4:	2300      	movs	r3, #0
 80072b6:	9302      	str	r3, [sp, #8]
 80072b8:	2302      	movs	r3, #2
 80072ba:	9301      	str	r3, [sp, #4]
 80072bc:	2302      	movs	r3, #2
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	2301      	movs	r3, #1
 80072c2:	2201      	movs	r2, #1
 80072c4:	2100      	movs	r1, #0
 80072c6:	2007      	movs	r0, #7
 80072c8:	f000 fe6e 	bl	8007fa8 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80072cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ce:	3302      	adds	r3, #2
 80072d0:	9308      	str	r3, [sp, #32]
 80072d2:	2303      	movs	r3, #3
 80072d4:	9307      	str	r3, [sp, #28]
 80072d6:	2302      	movs	r3, #2
 80072d8:	9306      	str	r3, [sp, #24]
 80072da:	2301      	movs	r3, #1
 80072dc:	9305      	str	r3, [sp, #20]
 80072de:	2302      	movs	r3, #2
 80072e0:	9304      	str	r3, [sp, #16]
 80072e2:	2301      	movs	r3, #1
 80072e4:	9303      	str	r3, [sp, #12]
 80072e6:	2300      	movs	r3, #0
 80072e8:	9302      	str	r3, [sp, #8]
 80072ea:	2302      	movs	r3, #2
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	2302      	movs	r3, #2
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	2301      	movs	r3, #1
 80072f4:	2201      	movs	r2, #1
 80072f6:	2100      	movs	r1, #0
 80072f8:	2007      	movs	r0, #7
 80072fa:	f000 fee5 	bl	80080c8 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80072fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	68b9      	ldr	r1, [r7, #8]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f8e4 	bl	80074d6 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	2205      	movs	r2, #5
 8007312:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	2207      	movs	r2, #7
 8007318:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	2200      	movs	r2, #0
 800731e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	2236      	movs	r2, #54	@ 0x36
 8007324:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	2200      	movs	r2, #0
 800732a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	2228      	movs	r2, #40	@ 0x28
 8007330:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	2200      	movs	r2, #0
 8007336:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	2244      	movs	r2, #68	@ 0x44
 800733c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	2200      	movs	r2, #0
 8007342:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	2233      	movs	r2, #51	@ 0x33
 8007348:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2205      	movs	r2, #5
 800734e:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	22f5      	movs	r2, #245	@ 0xf5
 8007354:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	2205      	movs	r2, #5
 800735a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 800735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735e:	2207      	movs	r2, #7
 8007360:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 8007362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007364:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 800736a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736c:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007370:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2208      	movs	r2, #8
 8007376:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2248      	movs	r2, #72	@ 0x48
 800737e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 8007382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007384:	229b      	movs	r2, #155	@ 0x9b
 8007386:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738a:	2226      	movs	r2, #38	@ 0x26
 800738c:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800738e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b090      	sub	sp, #64	@ 0x40
 800739e:	af0a      	add	r7, sp, #40	@ 0x28
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	607a      	str	r2, [r7, #4]
 80073a6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80073a8:	2300      	movs	r3, #0
 80073aa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80073ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ae:	9304      	str	r3, [sp, #16]
 80073b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b2:	9303      	str	r3, [sp, #12]
 80073b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b6:	9302      	str	r3, [sp, #8]
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	9301      	str	r3, [sp, #4]
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	68b9      	ldr	r1, [r7, #8]
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f7ff fe16 	bl	8006ff8 <VL53LX_preset_mode_histogram_ranging>
 80073cc:	4603      	mov	r3, r0
 80073ce:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80073d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d178      	bne.n	80074ca <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	9308      	str	r3, [sp, #32]
 80073dc:	2302      	movs	r3, #2
 80073de:	9307      	str	r3, [sp, #28]
 80073e0:	2302      	movs	r3, #2
 80073e2:	9306      	str	r3, [sp, #24]
 80073e4:	2301      	movs	r3, #1
 80073e6:	9305      	str	r3, [sp, #20]
 80073e8:	2301      	movs	r3, #1
 80073ea:	9304      	str	r3, [sp, #16]
 80073ec:	2301      	movs	r3, #1
 80073ee:	9303      	str	r3, [sp, #12]
 80073f0:	2300      	movs	r3, #0
 80073f2:	9302      	str	r3, [sp, #8]
 80073f4:	2301      	movs	r3, #1
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	2301      	movs	r3, #1
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	2301      	movs	r3, #1
 80073fe:	2200      	movs	r2, #0
 8007400:	2107      	movs	r1, #7
 8007402:	2007      	movs	r0, #7
 8007404:	f000 fdd0 	bl	8007fa8 <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740a:	3302      	adds	r3, #2
 800740c:	9308      	str	r3, [sp, #32]
 800740e:	2302      	movs	r3, #2
 8007410:	9307      	str	r3, [sp, #28]
 8007412:	2302      	movs	r3, #2
 8007414:	9306      	str	r3, [sp, #24]
 8007416:	2301      	movs	r3, #1
 8007418:	9305      	str	r3, [sp, #20]
 800741a:	2301      	movs	r3, #1
 800741c:	9304      	str	r3, [sp, #16]
 800741e:	2301      	movs	r3, #1
 8007420:	9303      	str	r3, [sp, #12]
 8007422:	2300      	movs	r3, #0
 8007424:	9302      	str	r3, [sp, #8]
 8007426:	2301      	movs	r3, #1
 8007428:	9301      	str	r3, [sp, #4]
 800742a:	2301      	movs	r3, #1
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	2301      	movs	r3, #1
 8007430:	2200      	movs	r2, #0
 8007432:	2107      	movs	r1, #7
 8007434:	2007      	movs	r0, #7
 8007436:	f000 fe47 	bl	80080c8 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f846 	bl	80074d6 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	2203      	movs	r2, #3
 800744e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	2205      	movs	r2, #5
 8007454:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	2200      	movs	r2, #0
 800745a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	2252      	movs	r2, #82	@ 0x52
 8007460:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	2200      	movs	r2, #0
 8007466:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	2237      	movs	r2, #55	@ 0x37
 800746c:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	2200      	movs	r2, #0
 8007472:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	2266      	movs	r2, #102	@ 0x66
 8007478:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	2200      	movs	r2, #0
 800747e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	2244      	movs	r2, #68	@ 0x44
 8007484:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2203      	movs	r2, #3
 800748a:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	22f5      	movs	r2, #245	@ 0xf5
 8007490:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	2203      	movs	r2, #3
 8007496:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8007498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749a:	2205      	movs	r2, #5
 800749c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800749e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a0:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 80074a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a8:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 80074aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ac:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2208      	movs	r2, #8
 80074b2:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2228      	movs	r2, #40	@ 0x28
 80074ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	22bb      	movs	r2, #187	@ 0xbb
 80074c2:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80074c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c6:	2226      	movs	r2, #38	@ 0x26
 80074c8:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80074ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b085      	sub	sp, #20
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]
 80074e2:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 8007518:	021b      	lsls	r3, r3, #8
 800751a:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	7a12      	ldrb	r2, [r2, #8]
 8007520:	4413      	add	r3, r2
 8007522:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 800755c:	021b      	lsls	r3, r3, #8
 800755e:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	7892      	ldrb	r2, [r2, #2]
 8007564:	4413      	add	r3, r2
 8007566:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	7912      	ldrb	r2, [r2, #4]
 8007578:	4413      	add	r3, r2
 800757a:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 80075a8:	bf00      	nop
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 80075f4:	021b      	lsls	r3, r3, #8
 80075f6:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	7a12      	ldrb	r2, [r2, #8]
 80075fc:	4413      	add	r3, r2
 80075fe:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 8007630:	021b      	lsls	r3, r3, #8
 8007632:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	7892      	ldrb	r2, [r2, #2]
 8007638:	4413      	add	r3, r2
 800763a:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 8007644:	021b      	lsls	r3, r3, #8
 8007646:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	7912      	ldrb	r2, [r2, #4]
 800764c:	4413      	add	r3, r2
 800764e:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3318      	adds	r3, #24
 800767c:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800769c:	bf00      	nop
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3318      	adds	r3, #24
 80076b8:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	332c      	adds	r3, #44	@ 0x2c
 80076be:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	78fa      	ldrb	r2, [r7, #3]
 80076c4:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2200      	movs	r2, #0
 80076ca:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2202      	movs	r2, #2
 80076d0:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2200      	movs	r2, #0
 80076d6:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2200      	movs	r2, #0
 80076dc:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2200      	movs	r2, #0
 80076e8:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2202      	movs	r2, #2
 80076ee:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2200      	movs	r2, #0
 80076f4:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2200      	movs	r2, #0
 80076fa:	735a      	strb	r2, [r3, #13]

}
 80076fc:	bf00      	nop
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 8007710:	2300      	movs	r3, #0
 8007712:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3318      	adds	r3, #24
 8007718:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	332c      	adds	r3, #44	@ 0x2c
 800771e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8007726:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d115      	bne.n	800775a <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2203      	movs	r2, #3
 8007732:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2202      	movs	r2, #2
 800774a:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	735a      	strb	r2, [r3, #13]
 8007758:	e0be      	b.n	80078d8 <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	7a1b      	ldrb	r3, [r3, #8]
 800775e:	2bff      	cmp	r3, #255	@ 0xff
 8007760:	d103      	bne.n	800776a <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2280      	movs	r2, #128	@ 0x80
 8007766:	721a      	strb	r2, [r3, #8]
 8007768:	e005      	b.n	8007776 <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	7a1b      	ldrb	r3, [r3, #8]
 800776e:	3301      	adds	r3, #1
 8007770:	b2da      	uxtb	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	7a19      	ldrb	r1, [r3, #8]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f103 0209 	add.w	r2, r3, #9
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	330a      	adds	r3, #10
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f002 fdba 	bl	800a2fe <VL53LX_update_internal_stream_counters>
 800778a:	4603      	mov	r3, r0
 800778c:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	7adb      	ldrb	r3, [r3, #11]
 8007792:	f083 0302 	eor.w	r3, r3, #2
 8007796:	b2da      	uxtb	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	79db      	ldrb	r3, [r3, #7]
 80077a0:	3b03      	subs	r3, #3
 80077a2:	2b05      	cmp	r3, #5
 80077a4:	f200 8082 	bhi.w	80078ac <VL53LX_update_ll_driver_rd_state+0x1a4>
 80077a8:	a201      	add	r2, pc, #4	@ (adr r2, 80077b0 <VL53LX_update_ll_driver_rd_state+0xa8>)
 80077aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ae:	bf00      	nop
 80077b0:	080077c9 	.word	0x080077c9
 80077b4:	080078ad 	.word	0x080078ad
 80077b8:	080078ad 	.word	0x080078ad
 80077bc:	0800781b 	.word	0x0800781b
 80077c0:	08007851 	.word	0x08007851
 80077c4:	0800787b 	.word	0x0800787b

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	f893 335e 	ldrb.w	r3, [r3, #862]	@ 0x35e
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	dd03      	ble.n	80077de <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2206      	movs	r2, #6
 80077da:	71da      	strb	r2, [r3, #7]
 80077dc:	e00d      	b.n	80077fa <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
				if (pstate->rd_zone_id >=
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d303      	bcc.n	80077f4 <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2208      	movs	r2, #8
 80077f0:	71da      	strb	r2, [r3, #7]
 80077f2:	e002      	b.n	80077fa <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2207      	movs	r2, #7
 80077f8:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	735a      	strb	r2, [r3, #13]

			break;
 8007818:	e05e      	b.n	80078d8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 800783c:	429a      	cmp	r2, r3
 800783e:	d303      	bcc.n	8007848 <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2208      	movs	r2, #8
 8007844:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8007846:	e047      	b.n	80078d8 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2207      	movs	r2, #7
 800784c:	71da      	strb	r2, [r3, #7]
			break;
 800784e:	e043      	b.n	80078d8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	7b5b      	ldrb	r3, [r3, #13]
 8007854:	3301      	adds	r3, #1
 8007856:	b2da      	uxtb	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 8007866:	429a      	cmp	r2, r3
 8007868:	d303      	bcc.n	8007872 <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2208      	movs	r2, #8
 800786e:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8007870:	e032      	b.n	80078d8 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2207      	movs	r2, #7
 8007876:	71da      	strb	r2, [r3, #7]
			break;
 8007878:	e02e      	b.n	80078d8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	7b1b      	ldrb	r3, [r3, #12]
 8007884:	f083 0301 	eor.w	r3, r3, #1
 8007888:	b2da      	uxtb	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 8007898:	429a      	cmp	r2, r3
 800789a:	d303      	bcc.n	80078a4 <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2208      	movs	r2, #8
 80078a0:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 80078a2:	e019      	b.n	80078d8 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2207      	movs	r2, #7
 80078a8:	71da      	strb	r2, [r3, #7]
			break;
 80078aa:	e015      	b.n	80078d8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2203      	movs	r2, #3
 80078b0:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2202      	movs	r2, #2
 80078c8:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	735a      	strb	r2, [r3, #13]
			break;
 80078d6:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 80078d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b08d      	sub	sp, #52	@ 0x34
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 80078ec:	2300      	movs	r3, #0
 80078ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t  *pdev =
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3318      	adds	r3, #24
 80078f6:	62bb      	str	r3, [r7, #40]	@ 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80078fe:	627b      	str	r3, [r7, #36]	@ 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8007900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007902:	332c      	adds	r3, #44	@ 0x2c
 8007904:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 8007906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007908:	f203 3366 	addw	r3, r3, #870	@ 0x366
 800790c:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800790e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007910:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8007914:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800791c:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint8_t   histogram_mode        = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 8007930:	2300      	movs	r3, #0
 8007932:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 8007934:	2300      	movs	r3, #0
 8007936:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800793c:	f003 031f 	and.w	r3, r3, #31
 8007940:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	78db      	ldrb	r3, [r3, #3]
 8007946:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 8007948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794a:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 800794e:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 8007952:	2b00      	cmp	r3, #0
 8007954:	bf14      	ite	ne
 8007956:	2301      	movne	r3, #1
 8007958:	2300      	moveq	r3, #0
 800795a:	b2db      	uxtb	r3, r3
	histogram_mode =
 800795c:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8007962:	111b      	asrs	r3, r3, #4
 8007964:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	if (histogram_mode)
 800796e:	7c7b      	ldrb	r3, [r7, #17]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d008      	beq.n	8007986 <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800797a:	111b      	asrs	r3, r3, #4
 800797c:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 8007986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007988:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 800798c:	f003 0320 	and.w	r3, r3, #32
 8007990:	2b00      	cmp	r3, #0
 8007992:	d04e      	beq.n	8007a32 <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	79db      	ldrb	r3, [r3, #7]
 8007998:	2b06      	cmp	r3, #6
 800799a:	d109      	bne.n	80079b0 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800799c:	7c7b      	ldrb	r3, [r7, #17]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d14a      	bne.n	8007a38 <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 80079a2:	7cfb      	ldrb	r3, [r7, #19]
 80079a4:	2b12      	cmp	r3, #18
 80079a6:	d047      	beq.n	8007a38 <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 80079a8:	23ef      	movs	r3, #239	@ 0xef
 80079aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80079ae:	e043      	b.n	8007a38 <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	7a1b      	ldrb	r3, [r3, #8]
 80079b4:	7cba      	ldrb	r2, [r7, #18]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d002      	beq.n	80079c0 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 80079ba:	23ee      	movs	r3, #238	@ 0xee
 80079bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	7adb      	ldrb	r3, [r3, #11]
 80079c4:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d002      	beq.n	80079d2 <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 80079cc:	23ed      	movs	r3, #237	@ 0xed
 80079ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	7b5b      	ldrb	r3, [r3, #13]
 80079d6:	4619      	mov	r1, r3
		expected_stream_count =
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	460b      	mov	r3, r1
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	440b      	add	r3, r1
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	4413      	add	r3, r2
 80079e4:	3302      	adds	r3, #2
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	7b5b      	ldrb	r3, [r3, #13]
 80079ee:	4619      	mov	r1, r3
		expected_gph_id =
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	460b      	mov	r3, r1
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	440b      	add	r3, r1
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	4413      	add	r3, r2
 80079fc:	3303      	adds	r3, #3
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 8007a02:	7c3a      	ldrb	r2, [r7, #16]
 8007a04:	7cbb      	ldrb	r3, [r7, #18]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d00a      	beq.n	8007a20 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 8007a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0c:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d102      	bne.n	8007a1a <VL53LX_check_ll_driver_rd_state+0x136>
 8007a14:	7cbb      	ldrb	r3, [r7, #18]
 8007a16:	2bff      	cmp	r3, #255	@ 0xff
 8007a18:	d002      	beq.n	8007a20 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 8007a1a:	23ec      	movs	r3, #236	@ 0xec
 8007a1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		}



		if (expected_gph_id != device_gph_id)
 8007a20:	7bfa      	ldrb	r2, [r7, #15]
 8007a22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d005      	beq.n	8007a36 <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8007a2a:	23eb      	movs	r3, #235	@ 0xeb
 8007a2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007a30:	e002      	b.n	8007a38 <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 8007a32:	bf00      	nop
 8007a34:	e000      	b.n	8007a38 <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 8007a36:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8007a38:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3734      	adds	r7, #52	@ 0x34
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b088      	sub	sp, #32
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007a50:	2300      	movs	r3, #0
 8007a52:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3318      	adds	r3, #24
 8007a58:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8007a60:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	332c      	adds	r3, #44	@ 0x2c
 8007a66:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8007a6e:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8007a76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d11b      	bne.n	8007ab6 <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	2203      	movs	r2, #3
 8007a82:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	2200      	movs	r2, #0
 8007a88:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2200      	movs	r2, #0
 8007a94:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8007aac:	2300      	movs	r3, #0
 8007aae:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	773b      	strb	r3, [r7, #28]
 8007ab4:	e0b1      	b.n	8007c1a <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	791b      	ldrb	r3, [r3, #4]
 8007aba:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	799b      	ldrb	r3, [r3, #6]
 8007ac0:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	785b      	ldrb	r3, [r3, #1]
 8007ac6:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	785b      	ldrb	r3, [r3, #1]
 8007acc:	2bff      	cmp	r3, #255	@ 0xff
 8007ace:	d103      	bne.n	8007ad8 <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	2280      	movs	r2, #128	@ 0x80
 8007ad4:	705a      	strb	r2, [r3, #1]
 8007ad6:	e005      	b.n	8007ae4 <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	785b      	ldrb	r3, [r3, #1]
 8007adc:	3301      	adds	r3, #1
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	7859      	ldrb	r1, [r3, #1]
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	1c9a      	adds	r2, r3, #2
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	3303      	adds	r3, #3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f002 fc04 	bl	800a2fe <VL53LX_update_internal_stream_counters>
 8007af6:	4603      	mov	r3, r0
 8007af8:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	791b      	ldrb	r3, [r3, #4]
 8007afe:	f083 0302 	eor.w	r3, r3, #2
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b05      	cmp	r3, #5
 8007b0e:	d053      	beq.n	8007bb8 <VL53LX_update_ll_driver_cfg_state+0x170>
 8007b10:	2b05      	cmp	r3, #5
 8007b12:	dc69      	bgt.n	8007be8 <VL53LX_update_ll_driver_cfg_state+0x1a0>
 8007b14:	2b03      	cmp	r3, #3
 8007b16:	d002      	beq.n	8007b1e <VL53LX_update_ll_driver_cfg_state+0xd6>
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d02d      	beq.n	8007b78 <VL53LX_update_ll_driver_cfg_state+0x130>
 8007b1c:	e064      	b.n	8007be8 <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	2201      	movs	r2, #1
 8007b22:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d909      	bls.n	8007b46 <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	2200      	movs	r2, #0
 8007b36:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	795b      	ldrb	r3, [r3, #5]
 8007b3c:	f083 0301 	eor.w	r3, r3, #1
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d106      	bne.n	8007b64 <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	70da      	strb	r2, [r3, #3]
 8007b62:	e005      	b.n	8007b70 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	2200      	movs	r2, #0
 8007b68:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	2204      	movs	r2, #4
 8007b74:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 8007b76:	e050      	b.n	8007c1a <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	799b      	ldrb	r3, [r3, #6]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d940      	bls.n	8007c14 <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	2200      	movs	r2, #0
 8007b96:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	795b      	ldrb	r3, [r3, #5]
 8007b9c:	f083 0301 	eor.w	r3, r3, #1
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d031      	beq.n	8007c14 <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	2205      	movs	r2, #5
 8007bb4:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 8007bb6:	e02d      	b.n	8007c14 <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	799b      	ldrb	r3, [r3, #6]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d922      	bls.n	8007c18 <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	795b      	ldrb	r3, [r3, #5]
 8007bdc:	f083 0301 	eor.w	r3, r3, #1
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	715a      	strb	r2, [r3, #5]
			}
			break;
 8007be6:	e017      	b.n	8007c18 <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	2203      	movs	r2, #3
 8007bec:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	2202      	movs	r2, #2
 8007c04:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	719a      	strb	r2, [r3, #6]
			break;
 8007c12:	e002      	b.n	8007c1a <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007c14:	bf00      	nop
 8007c16:	e000      	b.n	8007c1a <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007c18:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d11d      	bne.n	8007c60 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007c24:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 8007c26:	7f3b      	ldrb	r3, [r7, #28]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	b2d8      	uxtb	r0, r3
 8007c2c:	68f9      	ldr	r1, [r7, #12]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	440b      	add	r3, r1
 8007c38:	3302      	adds	r3, #2
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	7b5b      	ldrb	r3, [r3, #13]
 8007c42:	4619      	mov	r1, r3
 8007c44:	7f7b      	ldrb	r3, [r7, #29]
 8007c46:	f083 0302 	eor.w	r3, r3, #2
 8007c4a:	b2d8      	uxtb	r0, r3
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	460b      	mov	r3, r1
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	440b      	add	r3, r1
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	4413      	add	r3, r2
 8007c58:	3303      	adds	r3, #3
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	e013      	b.n	8007c88 <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007c60:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8007c62:	68f9      	ldr	r1, [r7, #12]
 8007c64:	4613      	mov	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	440b      	add	r3, r1
 8007c6e:	3302      	adds	r3, #2
 8007c70:	7f3a      	ldrb	r2, [r7, #28]
 8007c72:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8007c74:	7fba      	ldrb	r2, [r7, #30]
 8007c76:	68f9      	ldr	r1, [r7, #12]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	440b      	add	r3, r1
 8007c82:	3303      	adds	r3, #3
 8007c84:	7f7a      	ldrb	r2, [r7, #29]
 8007c86:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8007c88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3720      	adds	r7, #32
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	7c1a      	ldrb	r2, [r3, #16]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	7c52      	ldrb	r2, [r2, #17]
 8007cae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	3302      	adds	r3, #2
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	7c92      	ldrb	r2, [r2, #18]
 8007cb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	3303      	adds	r3, #3
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	7cd2      	ldrb	r2, [r2, #19]
 8007cc2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	7d12      	ldrb	r2, [r2, #20]
 8007ccc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	3305      	adds	r3, #5
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	7d52      	ldrb	r2, [r2, #21]
 8007cd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	3306      	adds	r3, #6
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7d92      	ldrb	r2, [r2, #22]
 8007ce0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	3307      	adds	r3, #7
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	7dd2      	ldrb	r2, [r2, #23]
 8007cea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	7e12      	ldrb	r2, [r2, #24]
 8007cf4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	3309      	adds	r3, #9
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	7e52      	ldrb	r2, [r2, #25]
 8007cfe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	330a      	adds	r3, #10
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	7e92      	ldrb	r2, [r2, #26]
 8007d08:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	330b      	adds	r3, #11
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	7ed2      	ldrb	r2, [r2, #27]
 8007d12:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	330c      	adds	r3, #12
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	7f12      	ldrb	r2, [r2, #28]
 8007d1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	330d      	adds	r3, #13
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	7f52      	ldrb	r2, [r2, #29]
 8007d26:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	330e      	adds	r3, #14
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	7f92      	ldrb	r2, [r2, #30]
 8007d30:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	330f      	adds	r3, #15
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	7fd2      	ldrb	r2, [r2, #31]
 8007d3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	3310      	adds	r3, #16
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007d46:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	3311      	adds	r3, #17
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8007d52:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	3312      	adds	r3, #18
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8007d5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	3313      	adds	r3, #19
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8007d6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	3314      	adds	r3, #20
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8007d76:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	3315      	adds	r3, #21
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8007d82:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	3316      	adds	r3, #22
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8007d8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	3317      	adds	r3, #23
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8007d9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	3318      	adds	r3, #24
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8007da6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	3319      	adds	r3, #25
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8007db2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	331a      	adds	r3, #26
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8007dbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	331b      	adds	r3, #27
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8007dca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	331c      	adds	r3, #28
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8007dd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	331d      	adds	r3, #29
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 8007de2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	331e      	adds	r3, #30
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8007dee:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	331f      	adds	r3, #31
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8007dfa:	701a      	strb	r2, [r3, #0]
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	22ff      	movs	r2, #255	@ 0xff
 8007e14:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	22ff      	movs	r2, #255	@ 0xff
 8007e1a:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	22ff      	movs	r2, #255	@ 0xff
 8007e20:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	22ff      	movs	r2, #255	@ 0xff
 8007e26:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e2e:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e36:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e3e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e46:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e4e:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e56:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e5e:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e66:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e6e:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e76:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e7e:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e86:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e8e:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e96:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e9e:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ea6:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007eae:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007eb6:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	22ff      	movs	r2, #255	@ 0xff
 8007ec4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	4603      	mov	r3, r0
 8007edc:	6039      	str	r1, [r7, #0]
 8007ede:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2205      	movs	r2, #5
 8007ee8:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	79fa      	ldrb	r2, [r7, #7]
 8007eee:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
 8007ef4:	e017      	b.n	8007f26 <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 8007ef6:	7bfa      	ldrb	r2, [r7, #15]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	011b      	lsls	r3, r3, #4
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	4413      	add	r3, r2
 8007f04:	3304      	adds	r3, #4
 8007f06:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2203      	movs	r2, #3
 8007f0c:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2203      	movs	r2, #3
 8007f12:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2204      	movs	r2, #4
 8007f18:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
 8007f22:	3301      	adds	r3, #1
 8007f24:	73fb      	strb	r3, [r7, #15]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	7bfa      	ldrb	r2, [r7, #15]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d3e2      	bcc.n	8007ef6 <V53L1_init_zone_results_structure+0x22>
	}
}
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b087      	sub	sp, #28
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8007f4c:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 8007f52:	2305      	movs	r3, #5
 8007f54:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8007f5c:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 8007f5e:	2300      	movs	r3, #0
 8007f60:	75fb      	strb	r3, [r7, #23]
 8007f62:	e016      	b.n	8007f92 <V53L1_init_zone_dss_configs+0x54>
		pdata->VL53LX_p_003[z].dss_mode =
 8007f64:	7dfa      	ldrb	r2, [r7, #23]
 8007f66:	68b9      	ldr	r1, [r7, #8]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	005b      	lsls	r3, r3, #1
 8007f70:	440b      	add	r3, r1
 8007f72:	3304      	adds	r3, #4
 8007f74:	2201      	movs	r2, #1
 8007f76:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 8007f78:	7dfa      	ldrb	r2, [r7, #23]
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	005b      	lsls	r3, r3, #1
 8007f84:	440b      	add	r3, r1
 8007f86:	3306      	adds	r3, #6
 8007f88:	2200      	movs	r2, #0
 8007f8a:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	75fb      	strb	r3, [r7, #23]
 8007f92:	7dfa      	ldrb	r2, [r7, #23]
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d3e4      	bcc.n	8007f64 <V53L1_init_zone_dss_configs+0x26>
	}
}
 8007f9a:	bf00      	nop
 8007f9c:	bf00      	nop
 8007f9e:	371c      	adds	r7, #28
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8007fa8:	b490      	push	{r4, r7}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4604      	mov	r4, r0
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	4623      	mov	r3, r4
 8007fb8:	71fb      	strb	r3, [r7, #7]
 8007fba:	4603      	mov	r3, r0
 8007fbc:	71bb      	strb	r3, [r7, #6]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	717b      	strb	r3, [r7, #5]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8007fc6:	79bb      	ldrb	r3, [r7, #6]
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	79fb      	ldrb	r3, [r7, #7]
 8007fce:	4413      	add	r3, r2
 8007fd0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd4:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8007fd6:	793b      	ldrb	r3, [r7, #4]
 8007fd8:	011b      	lsls	r3, r3, #4
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	797b      	ldrb	r3, [r7, #5]
 8007fde:	4413      	add	r3, r2
 8007fe0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8007fe6:	7d3b      	ldrb	r3, [r7, #20]
 8007fe8:	011b      	lsls	r3, r3, #4
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	7c3b      	ldrb	r3, [r7, #16]
 8007fee:	4413      	add	r3, r2
 8007ff0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff4:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8007ff6:	7f3b      	ldrb	r3, [r7, #28]
 8007ff8:	011b      	lsls	r3, r3, #4
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	7e3b      	ldrb	r3, [r7, #24]
 8007ffe:	4413      	add	r3, r2
 8008000:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8008002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008004:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 8008006:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800800a:	011b      	lsls	r3, r3, #4
 800800c:	b2da      	uxtb	r2, r3
 800800e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008012:	4413      	add	r3, r2
 8008014:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8008016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008018:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800801a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800801e:	011b      	lsls	r3, r3, #4
 8008020:	b2da      	uxtb	r2, r3
 8008022:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008026:	4413      	add	r3, r2
 8008028:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800802a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802c:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800802e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008030:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8008032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008034:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8008036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008038:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800803a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803c:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800803e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008040:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8008042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008044:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008048:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800804a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804c:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800804e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008050:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008054:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8008056:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800805a:	011b      	lsls	r3, r3, #4
 800805c:	b2da      	uxtb	r2, r3
 800805e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008062:	4413      	add	r3, r2
 8008064:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8008066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008068:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8008070:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8008072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008074:	2200      	movs	r2, #0
 8008076:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807a:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800807c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807e:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8008080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008082:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8008084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008086:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8008088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808a:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800808c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808e:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008092:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008096:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 8008098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809a:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800809c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809e:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 80080a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a2:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 80080a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a6:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 80080a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080ae:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080b6:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	2200      	movs	r2, #0
 80080bc:	701a      	strb	r2, [r3, #0]

}
 80080be:	bf00      	nop
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bc90      	pop	{r4, r7}
 80080c6:	4770      	bx	lr

080080c8 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 80080c8:	b490      	push	{r4, r7}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4604      	mov	r4, r0
 80080d0:	4608      	mov	r0, r1
 80080d2:	4611      	mov	r1, r2
 80080d4:	461a      	mov	r2, r3
 80080d6:	4623      	mov	r3, r4
 80080d8:	71fb      	strb	r3, [r7, #7]
 80080da:	4603      	mov	r3, r0
 80080dc:	71bb      	strb	r3, [r7, #6]
 80080de:	460b      	mov	r3, r1
 80080e0:	717b      	strb	r3, [r7, #5]
 80080e2:	4613      	mov	r3, r2
 80080e4:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 80080e6:	79bb      	ldrb	r3, [r7, #6]
 80080e8:	011b      	lsls	r3, r3, #4
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	79fb      	ldrb	r3, [r7, #7]
 80080ee:	4413      	add	r3, r2
 80080f0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 80080f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f4:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 80080f6:	793b      	ldrb	r3, [r7, #4]
 80080f8:	011b      	lsls	r3, r3, #4
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	797b      	ldrb	r3, [r7, #5]
 80080fe:	4413      	add	r3, r2
 8008100:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8008102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008104:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8008106:	7d3b      	ldrb	r3, [r7, #20]
 8008108:	011b      	lsls	r3, r3, #4
 800810a:	b2da      	uxtb	r2, r3
 800810c:	7c3b      	ldrb	r3, [r7, #16]
 800810e:	4413      	add	r3, r2
 8008110:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8008112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008114:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800811e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008120:	789a      	ldrb	r2, [r3, #2]
 8008122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008124:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8008126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008128:	78da      	ldrb	r2, [r3, #3]
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800812e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008130:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8008136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008138:	789a      	ldrb	r2, [r3, #2]
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800813e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008140:	78da      	ldrb	r2, [r3, #3]
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 8008146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008148:	791a      	ldrb	r2, [r3, #4]
 800814a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814c:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800814e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008150:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008154:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8008156:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800815a:	011b      	lsls	r3, r3, #4
 800815c:	b2da      	uxtb	r2, r3
 800815e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008162:	4413      	add	r3, r2
 8008164:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8008166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008168:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8008170:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	2200      	movs	r2, #0
 8008176:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 8008178:	7f3b      	ldrb	r3, [r7, #28]
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	b2da      	uxtb	r2, r3
 800817e:	7e3b      	ldrb	r3, [r7, #24]
 8008180:	4413      	add	r3, r2
 8008182:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8008184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008186:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 8008188:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800818c:	011b      	lsls	r3, r3, #4
 800818e:	b2da      	uxtb	r2, r3
 8008190:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008194:	4413      	add	r3, r2
 8008196:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8008198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819a:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800819c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80081a0:	011b      	lsls	r3, r3, #4
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80081a8:	4413      	add	r3, r2
 80081aa:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 80081ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ae:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 80081b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b2:	7bda      	ldrb	r2, [r3, #15]
 80081b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b6:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 80081b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ba:	7c1a      	ldrb	r2, [r3, #16]
 80081bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081be:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 80081c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c2:	7c5a      	ldrb	r2, [r3, #17]
 80081c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c6:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 80081c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80081ce:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 80081d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80081d6:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 80081d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081da:	2200      	movs	r2, #0
 80081dc:	701a      	strb	r2, [r3, #0]
}
 80081de:	bf00      	nop
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc90      	pop	{r4, r7}
 80081e6:	4770      	bx	lr

080081e8 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	460b      	mov	r3, r1
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 80081f6:	2300      	movs	r3, #0
 80081f8:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	220c      	movs	r2, #12
 8008210:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 8008212:	897b      	ldrh	r3, [r7, #10]
 8008214:	b2da      	uxtb	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	pdata->cal_config__vcsel_start            = 0;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

	pdata->vcsel_width                        = 0;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_015                = 0;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	pdata->zero_distance_phase                = 0;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8008248:	2300      	movs	r3, #0
 800824a:	82fb      	strh	r3, [r7, #22]
 800824c:	e015      	b.n	800827a <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 800824e:	8afa      	ldrh	r2, [r7, #22]
 8008250:	897b      	ldrh	r3, [r7, #10]
 8008252:	429a      	cmp	r2, r3
 8008254:	d207      	bcs.n	8008266 <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 8008256:	8afb      	ldrh	r3, [r7, #22]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	3302      	adds	r3, #2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	605a      	str	r2, [r3, #4]
 8008264:	e006      	b.n	8008274 <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 8008266:	8afb      	ldrh	r3, [r7, #22]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	3302      	adds	r3, #2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	2200      	movs	r2, #0
 8008272:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8008274:	8afb      	ldrh	r3, [r7, #22]
 8008276:	3301      	adds	r3, #1
 8008278:	82fb      	strh	r3, [r7, #22]
 800827a:	8afb      	ldrh	r3, [r7, #22]
 800827c:	2b0b      	cmp	r3, #11
 800827e:	d9e6      	bls.n	800824e <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 8008280:	bf00      	nop
 8008282:	bf00      	nop
 8008284:	371c      	adds	r7, #28
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800828e:	b480      	push	{r7}
 8008290:	b085      	sub	sp, #20
 8008292:	af00      	add	r7, sp, #0
 8008294:	4603      	mov	r3, r0
 8008296:	603a      	str	r2, [r7, #0]
 8008298:	80fb      	strh	r3, [r7, #6]
 800829a:	460b      	mov	r3, r1
 800829c:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 80082a6:	88fb      	ldrh	r3, [r7, #6]
 80082a8:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 80082aa:	2300      	movs	r3, #0
 80082ac:	81fb      	strh	r3, [r7, #14]
 80082ae:	e00e      	b.n	80082ce <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80082b0:	88ba      	ldrh	r2, [r7, #4]
 80082b2:	89fb      	ldrh	r3, [r7, #14]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	4413      	add	r3, r2
 80082bc:	89ba      	ldrh	r2, [r7, #12]
 80082be:	b2d2      	uxtb	r2, r2
 80082c0:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80082c2:	89bb      	ldrh	r3, [r7, #12]
 80082c4:	0a1b      	lsrs	r3, r3, #8
 80082c6:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 80082c8:	89fb      	ldrh	r3, [r7, #14]
 80082ca:	3301      	adds	r3, #1
 80082cc:	81fb      	strh	r3, [r7, #14]
 80082ce:	89fa      	ldrh	r2, [r7, #14]
 80082d0:	88bb      	ldrh	r3, [r7, #4]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d3ec      	bcc.n	80082b0 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 80082d6:	bf00      	nop
 80082d8:	bf00      	nop
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	4603      	mov	r3, r0
 80082ec:	6039      	str	r1, [r7, #0]
 80082ee:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 80082f0:	2300      	movs	r3, #0
 80082f2:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 80082f4:	e00a      	b.n	800830c <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 80082f6:	89fb      	ldrh	r3, [r7, #14]
 80082f8:	021b      	lsls	r3, r3, #8
 80082fa:	b21a      	sxth	r2, r3
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	1c59      	adds	r1, r3, #1
 8008300:	6039      	str	r1, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	b21b      	sxth	r3, r3
 8008306:	4313      	orrs	r3, r2
 8008308:	b21b      	sxth	r3, r3
 800830a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800830c:	88fb      	ldrh	r3, [r7, #6]
 800830e:	1e5a      	subs	r2, r3, #1
 8008310:	80fa      	strh	r2, [r7, #6]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1ef      	bne.n	80082f6 <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 8008316:	89fb      	ldrh	r3, [r7, #14]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	4603      	mov	r3, r0
 800832c:	603a      	str	r2, [r7, #0]
 800832e:	80fb      	strh	r3, [r7, #6]
 8008330:	460b      	mov	r3, r1
 8008332:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 800833c:	88fb      	ldrh	r3, [r7, #6]
 800833e:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008340:	2300      	movs	r3, #0
 8008342:	81fb      	strh	r3, [r7, #14]
 8008344:	e00f      	b.n	8008366 <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008346:	88ba      	ldrh	r2, [r7, #4]
 8008348:	89fb      	ldrh	r3, [r7, #14]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	3b01      	subs	r3, #1
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	4413      	add	r3, r2
 8008352:	89ba      	ldrh	r2, [r7, #12]
 8008354:	b2d2      	uxtb	r2, r2
 8008356:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008358:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800835c:	121b      	asrs	r3, r3, #8
 800835e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8008360:	89fb      	ldrh	r3, [r7, #14]
 8008362:	3301      	adds	r3, #1
 8008364:	81fb      	strh	r3, [r7, #14]
 8008366:	89fa      	ldrh	r2, [r7, #14]
 8008368:	88bb      	ldrh	r3, [r7, #4]
 800836a:	429a      	cmp	r2, r3
 800836c:	d3eb      	bcc.n	8008346 <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 800836e:	bf00      	nop
 8008370:	bf00      	nop
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	6039      	str	r1, [r7, #0]
 8008386:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 8008388:	2300      	movs	r3, #0
 800838a:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	b25b      	sxtb	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	da0e      	bge.n	80083b4 <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 8008396:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800839a:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800839c:	e00a      	b.n	80083b4 <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800839e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80083a2:	021b      	lsls	r3, r3, #8
 80083a4:	b21a      	sxth	r2, r3
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	1c59      	adds	r1, r3, #1
 80083aa:	6039      	str	r1, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	b21b      	sxth	r3, r3
 80083b0:	4313      	orrs	r3, r2
 80083b2:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 80083b4:	88fb      	ldrh	r3, [r7, #6]
 80083b6:	1e5a      	subs	r2, r3, #1
 80083b8:	80fa      	strh	r2, [r7, #6]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1ef      	bne.n	800839e <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 80083be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b087      	sub	sp, #28
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	60f8      	str	r0, [r7, #12]
 80083d6:	460b      	mov	r3, r1
 80083d8:	607a      	str	r2, [r7, #4]
 80083da:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 80083e8:	2300      	movs	r3, #0
 80083ea:	82fb      	strh	r3, [r7, #22]
 80083ec:	e00e      	b.n	800840c <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80083ee:	897a      	ldrh	r2, [r7, #10]
 80083f0:	8afb      	ldrh	r3, [r7, #22]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	3b01      	subs	r3, #1
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	4413      	add	r3, r2
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	b2d2      	uxtb	r2, r2
 80083fe:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	0a1b      	lsrs	r3, r3, #8
 8008404:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 8008406:	8afb      	ldrh	r3, [r7, #22]
 8008408:	3301      	adds	r3, #1
 800840a:	82fb      	strh	r3, [r7, #22]
 800840c:	8afa      	ldrh	r2, [r7, #22]
 800840e:	897b      	ldrh	r3, [r7, #10]
 8008410:	429a      	cmp	r2, r3
 8008412:	d3ec      	bcc.n	80083ee <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	371c      	adds	r7, #28
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008422:	b480      	push	{r7}
 8008424:	b085      	sub	sp, #20
 8008426:	af00      	add	r7, sp, #0
 8008428:	4603      	mov	r3, r0
 800842a:	6039      	str	r1, [r7, #0]
 800842c:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800842e:	2300      	movs	r3, #0
 8008430:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8008432:	e007      	b.n	8008444 <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	021a      	lsls	r2, r3, #8
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	1c59      	adds	r1, r3, #1
 800843c:	6039      	str	r1, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	4313      	orrs	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8008444:	88fb      	ldrh	r3, [r7, #6]
 8008446:	1e5a      	subs	r2, r3, #1
 8008448:	80fa      	strh	r2, [r7, #6]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1f2      	bne.n	8008434 <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 800844e:	68fb      	ldr	r3, [r7, #12]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	6039      	str	r1, [r7, #0]
 8008466:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	b25b      	sxtb	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	da0b      	bge.n	800848e <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 8008476:	f04f 33ff 	mov.w	r3, #4294967295
 800847a:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800847c:	e007      	b.n	800848e <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	021a      	lsls	r2, r3, #8
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	1c59      	adds	r1, r3, #1
 8008486:	6039      	str	r1, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800848e:	88fb      	ldrh	r3, [r7, #6]
 8008490:	1e5a      	subs	r2, r3, #1
 8008492:	80fa      	strh	r2, [r7, #6]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1f2      	bne.n	800847e <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 8008498:	68fb      	ldr	r3, [r7, #12]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 80084b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d107      	bne.n	80084ce <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	461a      	mov	r2, r3
 80084c2:	2127      	movs	r1, #39	@ 0x27
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f009 f8d9 	bl	801167c <VL53LX_WrByte>
 80084ca:	4603      	mov	r3, r0
 80084cc:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 80084ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3318      	adds	r3, #24
 80084ee:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	78fa      	ldrb	r2, [r7, #3]
 80084f4:	f883 2362 	strb.w	r2, [r3, #866]	@ 0x362

	status = VL53LX_WrByte(
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f893 3362 	ldrb.w	r3, [r3, #866]	@ 0x362
 80084fe:	461a      	mov	r2, r3
 8008500:	2185      	movs	r1, #133	@ 0x85
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f009 f8ba 	bl	801167c <VL53LX_WrByte>
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800850c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 8008524:	2101      	movs	r1, #1
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff ffd7 	bl	80084da <VL53LX_set_firmware_enable_register>
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008530:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008544:	2300      	movs	r3, #0
 8008546:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 8008548:	2100      	movs	r1, #0
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7ff ffc5 	bl	80084da <VL53LX_set_firmware_enable_register>
 8008550:	4603      	mov	r3, r0
 8008552:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008554:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3318      	adds	r3, #24
 8008574:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	78fa      	ldrb	r2, [r7, #3]
 800857a:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360

	status = VL53LX_WrByte(
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8008584:	461a      	mov	r2, r3
 8008586:	2183      	movs	r1, #131	@ 0x83
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f009 f877 	bl	801167c <VL53LX_WrByte>
 800858e:	4603      	mov	r3, r0
 8008590:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 8008592:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80085a6:	2300      	movs	r3, #0
 80085a8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 80085aa:	2101      	movs	r1, #1
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f7ff ffd7 	bl	8008560 <VL53LX_set_powerforce_register>
 80085b2:	4603      	mov	r3, r0
 80085b4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80085b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80085ca:	2300      	movs	r3, #0
 80085cc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 80085ce:	2100      	movs	r1, #0
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7ff ffc5 	bl	8008560 <VL53LX_set_powerforce_register>
 80085d6:	4603      	mov	r3, r0
 80085d8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80085da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80085ee:	2300      	movs	r3, #0
 80085f0:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3318      	adds	r3, #24
 80085f6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2363 	strb.w	r2, [r3, #867]	@ 0x363

	status = VL53LX_WrByte(
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	f893 3363 	ldrb.w	r3, [r3, #867]	@ 0x363
 8008606:	461a      	mov	r2, r3
 8008608:	2186      	movs	r1, #134	@ 0x86
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f009 f836 	bl	801167c <VL53LX_WrByte>
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 8008614:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	460a      	mov	r2, r1
 800862a:	80fb      	strh	r3, [r7, #6]
 800862c:	4613      	mov	r3, r2
 800862e:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 8008630:	2300      	movs	r3, #0
 8008632:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800863c:	88fb      	ldrh	r3, [r7, #6]
 800863e:	4618      	mov	r0, r3
 8008640:	f002 ffcf 	bl	800b5e2 <VL53LX_calc_pll_period_us>
 8008644:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 8008646:	797b      	ldrb	r3, [r7, #5]
 8008648:	4618      	mov	r0, r3
 800864a:	f003 fbbb 	bl	800bdc4 <VL53LX_decode_vcsel_period>
 800864e:	4603      	mov	r3, r0
 8008650:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	4613      	mov	r3, r2
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	4413      	add	r3, r2
 800865a:	021b      	lsls	r3, r3, #8
 800865c:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	099b      	lsrs	r3, r3, #6
 8008662:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 8008664:	7cfa      	ldrb	r2, [r7, #19]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	fb02 f303 	mul.w	r3, r2, r3
 800866c:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	099b      	lsrs	r3, r3, #6
 8008672:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 8008674:	68fb      	ldr	r3, [r7, #12]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8008680:	b480      	push	{r7}
 8008682:	b089      	sub	sp, #36	@ 0x24
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	4608      	mov	r0, r1
 800868a:	4611      	mov	r1, r2
 800868c:	461a      	mov	r2, r3
 800868e:	4603      	mov	r3, r0
 8008690:	817b      	strh	r3, [r7, #10]
 8008692:	460b      	mov	r3, r1
 8008694:	813b      	strh	r3, [r7, #8]
 8008696:	4613      	mov	r3, r2
 8008698:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800869a:	2300      	movs	r3, #0
 800869c:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 80086a2:	2300      	movs	r3, #0
 80086a4:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	011b      	lsls	r3, r3, #4
 80086b2:	4a23      	ldr	r2, [pc, #140]	@ (8008740 <VL53LX_calc_range_ignore_threshold+0xc0>)
 80086b4:	fb82 1203 	smull	r1, r2, r2, r3
 80086b8:	1192      	asrs	r2, r2, #6
 80086ba:	17db      	asrs	r3, r3, #31
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 80086c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	da03      	bge.n	80086d0 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 80086c8:	897b      	ldrh	r3, [r7, #10]
 80086ca:	425b      	negs	r3, r3
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 80086d0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	da03      	bge.n	80086e0 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 80086d8:	893b      	ldrh	r3, [r7, #8]
 80086da:	425b      	negs	r3, r3
 80086dc:	b29b      	uxth	r3, r3
 80086de:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 80086e0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80086e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80086e8:	4413      	add	r3, r2
 80086ea:	015b      	lsls	r3, r3, #5
 80086ec:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	4a13      	ldr	r2, [pc, #76]	@ (8008740 <VL53LX_calc_range_ignore_threshold+0xc0>)
 80086f2:	fb82 1203 	smull	r1, r2, r2, r3
 80086f6:	1192      	asrs	r2, r2, #6
 80086f8:	17db      	asrs	r3, r3, #31
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	4413      	add	r3, r2
 8008704:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8008706:	79fa      	ldrb	r2, [r7, #7]
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	fb02 f303 	mul.w	r3, r2, r3
 800870e:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	3310      	adds	r3, #16
 8008714:	2b00      	cmp	r3, #0
 8008716:	da00      	bge.n	800871a <VL53LX_calc_range_ignore_threshold+0x9a>
 8008718:	331f      	adds	r3, #31
 800871a:	115b      	asrs	r3, r3, #5
 800871c:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008724:	db03      	blt.n	800872e <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8008726:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800872a:	83fb      	strh	r3, [r7, #30]
 800872c:	e001      	b.n	8008732 <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8008732:	8bfb      	ldrh	r3, [r7, #30]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3724      	adds	r7, #36	@ 0x24
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr
 8008740:	10624dd3 	.word	0x10624dd3

08008744 <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800874e:	2300      	movs	r3, #0
 8008750:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d102      	bne.n	800875e <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 8008758:	2300      	movs	r3, #0
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	e008      	b.n	8008770 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	031a      	lsls	r2, r3, #12
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	085b      	lsrs	r3, r3, #1
 8008766:	441a      	add	r2, r3
		timeout_mclks   =
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	fbb2 f3f3 	udiv	r3, r2, r3
 800876e:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8008770:	68fb      	ldr	r3, [r7, #12]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7ff ffd6 	bl	8008744 <VL53LX_calc_timeout_mclks>
 8008798:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 f887 	bl	80088ae <VL53LX_encode_timeout>
 80087a0:	4603      	mov	r3, r0
 80087a2:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 80087a4:	897b      	ldrh	r3, [r7, #10]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 80087ae:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80087b2:	b087      	sub	sp, #28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 80087ba:	2100      	movs	r1, #0
 80087bc:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 80087be:	f04f 0000 	mov.w	r0, #0
 80087c2:	f04f 0100 	mov.w	r1, #0
 80087c6:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	2000      	movs	r0, #0
 80087ce:	4688      	mov	r8, r1
 80087d0:	4681      	mov	r9, r0
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	2000      	movs	r0, #0
 80087d6:	460c      	mov	r4, r1
 80087d8:	4605      	mov	r5, r0
 80087da:	fb04 f009 	mul.w	r0, r4, r9
 80087de:	fb08 f105 	mul.w	r1, r8, r5
 80087e2:	4401      	add	r1, r0
 80087e4:	fba8 2304 	umull	r2, r3, r8, r4
 80087e8:	4419      	add	r1, r3
 80087ea:	460b      	mov	r3, r1
 80087ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80087f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 80087f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087f8:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 80087fc:	f143 0b00 	adc.w	fp, r3, #0
 8008800:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 8008804:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008808:	f04f 0200 	mov.w	r2, #0
 800880c:	f04f 0300 	mov.w	r3, #0
 8008810:	0b02      	lsrs	r2, r0, #12
 8008812:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8008816:	0b0b      	lsrs	r3, r1, #12
 8008818:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 8008820:	697b      	ldr	r3, [r7, #20]
}
 8008822:	4618      	mov	r0, r3
 8008824:	371c      	adds	r7, #28
 8008826:	46bd      	mov	sp, r7
 8008828:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800882c:	4770      	bx	lr
	...

08008830 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800883c:	2300      	movs	r3, #0
 800883e:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 8008844:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 8008848:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800884a:	4413      	add	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	da02      	bge.n	800885a <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 8008854:	2300      	movs	r3, #0
 8008856:	60fb      	str	r3, [r7, #12]
 8008858:	e005      	b.n	8008866 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008860:	db01      	blt.n	8008866 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 8008862:	4b05      	ldr	r3, [pc, #20]	@ (8008878 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 8008864:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800886a:	68bb      	ldr	r3, [r7, #8]

}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	0003ffff 	.word	0x0003ffff

0800887c <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	4603      	mov	r3, r0
 8008884:	6039      	str	r1, [r7, #0]
 8008886:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 8008888:	2300      	movs	r3, #0
 800888a:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 8008890:	88fb      	ldrh	r3, [r7, #6]
 8008892:	4618      	mov	r0, r3
 8008894:	f000 f835 	bl	8008902 <VL53LX_decode_timeout>
 8008898:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f7ff ff86 	bl	80087ae <VL53LX_calc_timeout_us>
 80088a2:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 80088a4:	68bb      	ldr	r3, [r7, #8]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b087      	sub	sp, #28
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d015      	beq.n	80088f4 <VL53LX_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80088ce:	e005      	b.n	80088dc <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	085b      	lsrs	r3, r3, #1
 80088d4:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80088d6:	89fb      	ldrh	r3, [r7, #14]
 80088d8:	3301      	adds	r3, #1
 80088da:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	2bff      	cmp	r3, #255	@ 0xff
 80088e0:	d8f6      	bhi.n	80088d0 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80088e2:	89fb      	ldrh	r3, [r7, #14]
 80088e4:	021b      	lsls	r3, r3, #8
 80088e6:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80088f0:	4413      	add	r3, r2
 80088f2:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80088f4:	8afb      	ldrh	r3, [r7, #22]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	371c      	adds	r7, #28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 8008902:	b480      	push	{r7}
 8008904:	b085      	sub	sp, #20
 8008906:	af00      	add	r7, sp, #0
 8008908:	4603      	mov	r3, r0
 800890a:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800890c:	2300      	movs	r3, #0
 800890e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008910:	88fb      	ldrh	r3, [r7, #6]
 8008912:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008914:	88fa      	ldrh	r2, [r7, #6]
 8008916:	0a12      	lsrs	r2, r2, #8
 8008918:	b292      	uxth	r2, r2
 800891a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800891c:	3301      	adds	r3, #1
 800891e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008920:	68fb      	ldr	r3, [r7, #12]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b088      	sub	sp, #32
 8008932:	af00      	add	r7, sp, #0
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	607a      	str	r2, [r7, #4]
 800893a:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800893c:	2300      	movs	r3, #0
 800893e:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8008940:	2300      	movs	r3, #0
 8008942:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8008944:	2300      	movs	r3, #0
 8008946:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800894c:	887b      	ldrh	r3, [r7, #2]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d102      	bne.n	8008958 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8008952:	23f1      	movs	r3, #241	@ 0xf1
 8008954:	77fb      	strb	r3, [r7, #31]
 8008956:	e05d      	b.n	8008a14 <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 8008958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895a:	799a      	ldrb	r2, [r3, #6]
 800895c:	887b      	ldrh	r3, [r7, #2]
 800895e:	4611      	mov	r1, r2
 8008960:	4618      	mov	r0, r3
 8008962:	f7ff fe5d 	bl	8008620 <VL53LX_calc_macro_period_us>
 8008966:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 8008968:	6979      	ldr	r1, [r7, #20]
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f7ff feea 	bl	8008744 <VL53LX_calc_timeout_mclks>
 8008970:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	2bff      	cmp	r3, #255	@ 0xff
 8008976:	d901      	bls.n	800897c <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8008978:	23ff      	movs	r3, #255	@ 0xff
 800897a:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8008980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008982:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008984:	6979      	ldr	r1, [r7, #20]
 8008986:	68b8      	ldr	r0, [r7, #8]
 8008988:	f7ff fef9 	bl	800877e <VL53LX_calc_encoded_timeout>
 800898c:	4603      	mov	r3, r0
 800898e:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008990:	8a7b      	ldrh	r3, [r7, #18]
 8008992:	0a1b      	lsrs	r3, r3, #8
 8008994:	b29b      	uxth	r3, r3
 8008996:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8008998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800899c:	8a7b      	ldrh	r3, [r7, #18]
 800899e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 80089a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a2:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 80089a4:	6979      	ldr	r1, [r7, #20]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7ff fee9 	bl	800877e <VL53LX_calc_encoded_timeout>
 80089ac:	4603      	mov	r3, r0
 80089ae:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80089b0:	8a7b      	ldrh	r3, [r7, #18]
 80089b2:	0a1b      	lsrs	r3, r3, #8
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 80089b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ba:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80089bc:	8a7b      	ldrh	r3, [r7, #18]
 80089be:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 80089c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c2:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 80089c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c6:	7a5a      	ldrb	r2, [r3, #9]
 80089c8:	887b      	ldrh	r3, [r7, #2]
 80089ca:	4611      	mov	r1, r2
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7ff fe27 	bl	8008620 <VL53LX_calc_macro_period_us>
 80089d2:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 80089d4:	6979      	ldr	r1, [r7, #20]
 80089d6:	68b8      	ldr	r0, [r7, #8]
 80089d8:	f7ff fed1 	bl	800877e <VL53LX_calc_encoded_timeout>
 80089dc:	4603      	mov	r3, r0
 80089de:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80089e0:	8a7b      	ldrh	r3, [r7, #18]
 80089e2:	0a1b      	lsrs	r3, r3, #8
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 80089e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ea:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80089ec:	8a7b      	ldrh	r3, [r7, #18]
 80089ee:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 80089f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f2:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 80089f4:	6979      	ldr	r1, [r7, #20]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7ff fec1 	bl	800877e <VL53LX_calc_encoded_timeout>
 80089fc:	4603      	mov	r3, r0
 80089fe:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008a00:	8a7b      	ldrh	r3, [r7, #18]
 8008a02:	0a1b      	lsrs	r3, r3, #8
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8008a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008a0c:	8a7b      	ldrh	r3, [r7, #18]
 8008a0e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8008a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a12:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8008a14:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3720      	adds	r7, #32
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8008a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a24:	b09e      	sub	sp, #120	@ 0x78
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6578      	str	r0, [r7, #84]	@ 0x54
 8008a2a:	6539      	str	r1, [r7, #80]	@ 0x50


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	int64_t  evts              = 0;
 8008a32:	f04f 0200 	mov.w	r2, #0
 8008a36:	f04f 0300 	mov.w	r3, #0
 8008a3a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	int64_t  tmpi              = 0;
 8008a3e:	f04f 0200 	mov.w	r2, #0
 8008a42:	f04f 0300 	mov.w	r3, #0
 8008a46:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	int64_t  tmpo              = 0;
 8008a4a:	f04f 0200 	mov.w	r2, #0
 8008a4e:	f04f 0300 	mov.w	r3, #0
 8008a52:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 8008a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a58:	885b      	ldrh	r3, [r3, #2]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d103      	bne.n	8008a66 <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8008a5e:	23f1      	movs	r3, #241	@ 0xf1
 8008a60:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8008a64:	e0d6      	b.n	8008c14 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 8008a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a68:	785b      	ldrb	r3, [r3, #1]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 80d2 	beq.w	8008c14 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 8008a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a72:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f040 80cd 	bne.w	8008c14 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8008a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a80:	2200      	movs	r2, #0
 8008a82:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a84:	647a      	str	r2, [r7, #68]	@ 0x44
 8008a86:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	623b      	str	r3, [r7, #32]
 8008a90:	4613      	mov	r3, r2
 8008a92:	f143 0300 	adc.w	r3, r3, #0
 8008a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a9c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 8008aa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008aa2:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008aac:	64fa      	str	r2, [r7, #76]	@ 0x4c
			tmpo   *=
 8008aae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ab0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	fb02 f203 	mul.w	r2, r2, r3
 8008aba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008abc:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 8008ac0:	fb01 f303 	mul.w	r3, r1, r3
 8008ac4:	441a      	add	r2, r3
 8008ac6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ac8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008aca:	fba3 4501 	umull	r4, r5, r3, r1
 8008ace:	1953      	adds	r3, r2, r5
 8008ad0:	461d      	mov	r5, r3
 8008ad2:	e9c7 4516 	strd	r4, r5, [r7, #88]	@ 0x58
 8008ad6:	e9c7 4516 	strd	r4, r5, [r7, #88]	@ 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8008ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ae2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008ae4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008ae8:	460b      	mov	r3, r1
 8008aea:	3301      	adds	r3, #1
 8008aec:	61bb      	str	r3, [r7, #24]
 8008aee:	4613      	mov	r3, r2
 8008af0:	f143 0300 	adc.w	r3, r3, #0
 8008af4:	61fb      	str	r3, [r7, #28]
 8008af6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008afa:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 8008afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b00:	885b      	ldrh	r3, [r3, #2]
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	2200      	movs	r2, #0
 8008b06:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b08:	637a      	str	r2, [r7, #52]	@ 0x34
			tmpi   *=
 8008b0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008b10:	4622      	mov	r2, r4
 8008b12:	fb02 f203 	mul.w	r2, r2, r3
 8008b16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b18:	4629      	mov	r1, r5
 8008b1a:	fb01 f303 	mul.w	r3, r1, r3
 8008b1e:	441a      	add	r2, r3
 8008b20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b22:	4621      	mov	r1, r4
 8008b24:	fba3 ab01 	umull	sl, fp, r3, r1
 8008b28:	eb02 030b 	add.w	r3, r2, fp
 8008b2c:	469b      	mov	fp, r3
 8008b2e:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 8008b32:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8008b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	17da      	asrs	r2, r3, #31
 8008b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
			evts  = tmpo *
 8008b40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b42:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8008b46:	4622      	mov	r2, r4
 8008b48:	fb02 f203 	mul.w	r2, r2, r3
 8008b4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b4e:	4629      	mov	r1, r5
 8008b50:	fb01 f303 	mul.w	r3, r1, r3
 8008b54:	4413      	add	r3, r2
 8008b56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b58:	4621      	mov	r1, r4
 8008b5a:	fba2 8901 	umull	r8, r9, r2, r1
 8008b5e:	444b      	add	r3, r9
 8008b60:	4699      	mov	r9, r3
 8008b62:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
 8008b66:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
			evts += (tmpi/2);
 8008b6a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008b6e:	0fd9      	lsrs	r1, r3, #31
 8008b70:	2000      	movs	r0, #0
 8008b72:	6139      	str	r1, [r7, #16]
 8008b74:	6178      	str	r0, [r7, #20]
 8008b76:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	1889      	adds	r1, r1, r2
 8008b7e:	60b9      	str	r1, [r7, #8]
 8008b80:	4629      	mov	r1, r5
 8008b82:	eb43 0101 	adc.w	r1, r3, r1
 8008b86:	60f9      	str	r1, [r7, #12]
 8008b88:	f04f 0200 	mov.w	r2, #0
 8008b8c:	f04f 0300 	mov.w	r3, #0
 8008b90:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008b94:	4621      	mov	r1, r4
 8008b96:	084a      	lsrs	r2, r1, #1
 8008b98:	4629      	mov	r1, r5
 8008b9a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	104b      	asrs	r3, r1, #1
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008baa:	1814      	adds	r4, r2, r0
 8008bac:	603c      	str	r4, [r7, #0]
 8008bae:	414b      	adcs	r3, r1
 8008bb0:	607b      	str	r3, [r7, #4]
 8008bb2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008bb6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68


			if (tmpi != 0)
 8008bba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	d009      	beq.n	8008bd6 <VL53LX_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 8008bc2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008bc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008bca:	f7f7 fb29 	bl	8000220 <__aeabi_ldivmod>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

			podata->ambient_events_sum = (int32_t)evts;
 8008bd6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bda:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 8008bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008be0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			podata->VL53LX_p_028 =
 8008be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008be6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 +=
 8008bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8008bf0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008bf2:	7852      	ldrb	r2, [r2, #1]
 8008bf4:	0852      	lsrs	r2, r2, #1
 8008bf6:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 8008bf8:	441a      	add	r2, r3
 8008bfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bfc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 /=
 8008c00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8008c06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c08:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8008c0a:	fb93 f2f2 	sdiv	r2, r3, r2
 8008c0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c10:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8008c14:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3778      	adds	r7, #120	@ 0x78
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008c22 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b087      	sub	sp, #28
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	3318      	adds	r3, #24
 8008c30:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8008c36:	2300      	movs	r3, #0
 8008c38:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	@ 0x2fa
	amb_thresh_low  = 1024 *
 8008c44:	029b      	lsls	r3, r3, #10
 8008c46:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	@ 0x2fc
	amb_thresh_high = 1024 *
 8008c4e:	029b      	lsls	r3, r3, #10
 8008c50:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f040 8095 	bne.w	8008d8c <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	f893 32ed 	ldrb.w	r3, [r3, #749]	@ 0x2ed
		pdata->bin_seq[5] =
 8008c68:	091b      	lsrs	r3, r3, #4
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f893 32ed 	ldrb.w	r3, [r3, #749]	@ 0x2ed
 8008c76:	f003 030f 	and.w	r3, r3, #15
 8008c7a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	f893 32ec 	ldrb.w	r3, [r3, #748]	@ 0x2ec
		pdata->bin_seq[3] =
 8008c86:	091b      	lsrs	r3, r3, #4
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	f893 32ec 	ldrb.w	r3, [r3, #748]	@ 0x2ec
 8008c94:	f003 030f 	and.w	r3, r3, #15
 8008c98:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f893 32eb 	ldrb.w	r3, [r3, #747]	@ 0x2eb
		pdata->bin_seq[1] =
 8008ca4:	091b      	lsrs	r3, r3, #4
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	f893 32eb 	ldrb.w	r3, [r3, #747]	@ 0x2eb
 8008cb2:	f003 030f 	and.w	r3, r3, #15
 8008cb6:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	da2c      	bge.n	8008d22 <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	f893 32f5 	ldrb.w	r3, [r3, #757]	@ 0x2f5
			pdata->bin_seq[5] =
 8008cce:	091b      	lsrs	r3, r3, #4
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f893 32f5 	ldrb.w	r3, [r3, #757]	@ 0x2f5
			& 0x0F;
 8008cdc:	f003 030f 	and.w	r3, r3, #15
 8008ce0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
			pdata->bin_seq[3] =
 8008cec:	091b      	lsrs	r3, r3, #4
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
			& 0x0F;
 8008cfa:	f003 030f 	and.w	r3, r3, #15
 8008cfe:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f893 32f3 	ldrb.w	r3, [r3, #755]	@ 0x2f3
			pdata->bin_seq[1] =
 8008d0a:	091b      	lsrs	r3, r3, #4
 8008d0c:	b2da      	uxtb	r2, r3
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	f893 32f3 	ldrb.w	r3, [r3, #755]	@ 0x2f3
			& 0x0F;
 8008d18:	f003 030f 	and.w	r3, r3, #15
 8008d1c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	f340 80c2 	ble.w	8008eb4 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	f893 32e7 	ldrb.w	r3, [r3, #743]	@ 0x2e7
			pdata->bin_seq[5] =
 8008d36:	091b      	lsrs	r3, r3, #4
 8008d38:	b2da      	uxtb	r2, r3
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f893 32e7 	ldrb.w	r3, [r3, #743]	@ 0x2e7
			& 0x0F;
 8008d44:	f003 030f 	and.w	r3, r3, #15
 8008d48:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
			pdata->bin_seq[3] =
 8008d54:	091b      	lsrs	r3, r3, #4
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
			& 0x0F;
 8008d62:	f003 030f 	and.w	r3, r3, #15
 8008d66:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
			pdata->bin_seq[1] =
 8008d72:	091b      	lsrs	r3, r3, #4
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
			& 0x0F;
 8008d80:	f003 030f 	and.w	r3, r3, #15
 8008d84:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	731a      	strb	r2, [r3, #12]
 8008d8a:	e093      	b.n	8008eb4 <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	f893 32f1 	ldrb.w	r3, [r3, #753]	@ 0x2f1
			& 0x0F;
 8008d92:	f003 030f 	and.w	r3, r3, #15
 8008d96:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
			& 0x0F;
 8008da2:	f003 030f 	and.w	r3, r3, #15
 8008da6:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
		pdata->bin_seq[3] =
 8008db2:	091b      	lsrs	r3, r3, #4
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	f893 32ef 	ldrb.w	r3, [r3, #751]	@ 0x2ef
 8008dc0:	f003 030f 	and.w	r3, r3, #15
 8008dc4:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f893 32ee 	ldrb.w	r3, [r3, #750]	@ 0x2ee
		pdata->bin_seq[1] =
 8008dd0:	091b      	lsrs	r3, r3, #4
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f893 32ee 	ldrb.w	r3, [r3, #750]	@ 0x2ee
			& 0x0F;
 8008dde:	f003 030f 	and.w	r3, r3, #15
 8008de2:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	da2c      	bge.n	8008e4e <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
			pdata->bin_seq[5] =
 8008dfa:	091b      	lsrs	r3, r3, #4
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
			& 0x0F;
 8008e08:	f003 030f 	and.w	r3, r3, #15
 8008e0c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f893 32f7 	ldrb.w	r3, [r3, #759]	@ 0x2f7
			pdata->bin_seq[3] =
 8008e18:	091b      	lsrs	r3, r3, #4
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f893 32f7 	ldrb.w	r3, [r3, #759]	@ 0x2f7
			& 0x0F;
 8008e26:	f003 030f 	and.w	r3, r3, #15
 8008e2a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f893 32f6 	ldrb.w	r3, [r3, #758]	@ 0x2f6
			pdata->bin_seq[1] =
 8008e36:	091b      	lsrs	r3, r3, #4
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f893 32f6 	ldrb.w	r3, [r3, #758]	@ 0x2f6
			& 0x0F;
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	dd2c      	ble.n	8008eb4 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f893 32ea 	ldrb.w	r3, [r3, #746]	@ 0x2ea
			pdata->bin_seq[5] =
 8008e60:	091b      	lsrs	r3, r3, #4
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	f893 32ea 	ldrb.w	r3, [r3, #746]	@ 0x2ea
			& 0x0F;
 8008e6e:	f003 030f 	and.w	r3, r3, #15
 8008e72:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
			pdata->bin_seq[3] =
 8008e7e:	091b      	lsrs	r3, r3, #4
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
			& 0x0F;
 8008e8c:	f003 030f 	and.w	r3, r3, #15
 8008e90:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
			pdata->bin_seq[1] =
 8008e9c:	091b      	lsrs	r3, r3, #4
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
			& 0x0F;
 8008eaa:	f003 030f 	and.w	r3, r3, #15
 8008eae:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	75fb      	strb	r3, [r7, #23]
 8008eb8:	e007      	b.n	8008eca <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	75fb      	strb	r3, [r7, #23]
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	2b05      	cmp	r3, #5
 8008ece:	d9f4      	bls.n	8008eba <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 8008ed0:	bf00      	nop
 8008ed2:	bf00      	nop
 8008ed4:	371c      	adds	r7, #28
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr

08008ede <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 8008ede:	b590      	push	{r4, r7, lr}
 8008ee0:	b093      	sub	sp, #76	@ 0x4c
 8008ee2:	af04      	add	r7, sp, #16
 8008ee4:	60f8      	str	r0, [r7, #12]
 8008ee6:	60b9      	str	r1, [r7, #8]
 8008ee8:	607a      	str	r2, [r7, #4]
 8008eea:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008eec:	2300      	movs	r3, #0
 8008eee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_LLDriverData_t *pdev =
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	3318      	adds	r3, #24
 8008ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t   p = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	uint16_t  phase_delta      = 0;
 8008f04:	2300      	movs	r3, #0
 8008f06:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t  phase_tolerance  = 0;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	857b      	strh	r3, [r7, #42]	@ 0x2a

	int32_t   events_delta     = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 8008f14:	2300      	movs	r3, #0
 8008f16:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 8008f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1a:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8008f1e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 8008f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f24:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 8008f28:	84fb      	strh	r3, [r7, #38]	@ 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 8008f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2c:	f8b3 323a 	ldrh.w	r3, [r3, #570]	@ 0x23a
 8008f30:	84bb      	strh	r3, [r7, #36]	@ 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8008f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f34:	f893 3236 	ldrb.w	r3, [r3, #566]	@ 0x236
 8008f38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	phase_tolerance = (uint16_t)pht;
 8008f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f40:	857b      	strh	r3, [r7, #42]	@ 0x2a
	phase_tolerance = phase_tolerance << 8;
 8008f42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008f44:	021b      	lsls	r3, r3, #8
 8008f46:	857b      	strh	r3, [r7, #42]	@ 0x2a



	if (prange_prev->rd_device_state !=
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	785b      	ldrb	r3, [r3, #1]
 8008f4c:	2b07      	cmp	r3, #7
 8008f4e:	d006      	beq.n	8008f5e <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d002      	beq.n	8008f5e <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 8008f58:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008f5c:	e0ec      	b.n	8009138 <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 8008f5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d102      	bne.n	8008f6a <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 8008f64:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008f68:	e0e6      	b.n	8009138 <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8008f70:	e0d9      	b.n	8009126 <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8008f72:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	214c      	movs	r1, #76	@ 0x4c
 8008f7a:	fb01 f303 	mul.w	r3, r1, r3
 8008f7e:	4413      	add	r3, r2
 8008f80:	335e      	adds	r3, #94	@ 0x5e
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b09      	cmp	r3, #9
 8008f86:	d00b      	beq.n	8008fa0 <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 8008f88:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	214c      	movs	r1, #76	@ 0x4c
 8008f90:	fb01 f303 	mul.w	r3, r1, r3
 8008f94:	4413      	add	r3, r2
 8008f96:	335e      	adds	r3, #94	@ 0x5e
 8008f98:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8008f9a:	2b13      	cmp	r3, #19
 8008f9c:	f040 80bd 	bne.w	800911a <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	795b      	ldrb	r3, [r3, #5]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10a      	bne.n	8008fbe <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 8008fa8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	214c      	movs	r1, #76	@ 0x4c
 8008fb0:	fb01 f303 	mul.w	r3, r1, r3
 8008fb4:	4413      	add	r3, r2
 8008fb6:	335e      	adds	r3, #94	@ 0x5e
 8008fb8:	2217      	movs	r2, #23
 8008fba:	701a      	strb	r2, [r3, #0]
 8008fbc:	e009      	b.n	8008fd2 <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 8008fbe:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	214c      	movs	r1, #76	@ 0x4c
 8008fc6:	fb01 f303 	mul.w	r3, r1, r3
 8008fca:	4413      	add	r3, r2
 8008fcc:	335e      	adds	r3, #94	@ 0x5e
 8008fce:	2207      	movs	r2, #7
 8008fd0:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8008fd8:	e097      	b.n	800910a <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8008fda:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	214c      	movs	r1, #76	@ 0x4c
 8008fe2:	fb01 f303 	mul.w	r3, r1, r3
 8008fe6:	4413      	add	r3, r2
 8008fe8:	3354      	adds	r3, #84	@ 0x54
 8008fea:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8008fec:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	005b      	lsls	r3, r3, #1
 8008ff6:	4413      	add	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4403      	add	r3, r0
 8008ffc:	3310      	adds	r3, #16
 8008ffe:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8009000:	4299      	cmp	r1, r3
 8009002:	d915      	bls.n	8009030 <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 8009004:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	214c      	movs	r1, #76	@ 0x4c
 800900c:	fb01 f303 	mul.w	r3, r1, r3
 8009010:	4413      	add	r3, r2
 8009012:	3354      	adds	r3, #84	@ 0x54
 8009014:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 8009016:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	4613      	mov	r3, r2
 800901e:	005b      	lsls	r3, r3, #1
 8009020:	4413      	add	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4403      	add	r3, r0
 8009026:	3310      	adds	r3, #16
 8009028:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800902a:	1acb      	subs	r3, r1, r3
 800902c:	867b      	strh	r3, [r7, #50]	@ 0x32
 800902e:	e014      	b.n	800905a <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 8009030:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8009034:	6879      	ldr	r1, [r7, #4]
 8009036:	4613      	mov	r3, r2
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	4413      	add	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	440b      	add	r3, r1
 8009040:	3310      	adds	r3, #16
 8009042:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 8009044:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	204c      	movs	r0, #76	@ 0x4c
 800904c:	fb00 f303 	mul.w	r3, r0, r3
 8009050:	440b      	add	r3, r1
 8009052:	3354      	adds	r3, #84	@ 0x54
 8009054:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	867b      	strh	r3, [r7, #50]	@ 0x32
			}

			if (phase_delta < phase_tolerance) {
 800905a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800905c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800905e:	429a      	cmp	r2, r3
 8009060:	d24e      	bcs.n	8009100 <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 8009062:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8009066:	2b00      	cmp	r3, #0
 8009068:	d125      	bne.n	80090b6 <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 800906a:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
					VL53LX_hist_events_consistency_check(
 800906e:	4613      	mov	r3, r2
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	4413      	add	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	3308      	adds	r3, #8
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 800907c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_events_consistency_check(
 8009080:	224c      	movs	r2, #76	@ 0x4c
 8009082:	fb02 f303 	mul.w	r3, r2, r3
 8009086:	3310      	adds	r3, #16
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	4413      	add	r3, r2
 800908c:	3304      	adds	r3, #4
 800908e:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8009090:	f897 0029 	ldrb.w	r0, [r7, #41]	@ 0x29
 8009094:	f107 0217 	add.w	r2, r7, #23
 8009098:	9203      	str	r2, [sp, #12]
 800909a:	f107 021c 	add.w	r2, r7, #28
 800909e:	9202      	str	r2, [sp, #8]
 80090a0:	f107 0218 	add.w	r2, r7, #24
 80090a4:	9201      	str	r2, [sp, #4]
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	4623      	mov	r3, r4
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	f000 f848 	bl	8009140 <VL53LX_hist_events_consistency_check>
 80090b0:	4603      	mov	r3, r0
 80090b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 80090b6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d115      	bne.n	80090ea <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 80090be:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 80090c0:	2b09      	cmp	r3, #9
 80090c2:	d112      	bne.n	80090ea <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 80090c4:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 80090c8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_merged_pulse_check(
 80090cc:	224c      	movs	r2, #76	@ 0x4c
 80090ce:	fb02 f303 	mul.w	r3, r2, r3
 80090d2:	3310      	adds	r3, #16
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	4413      	add	r3, r2
 80090d8:	3304      	adds	r3, #4
 80090da:	f107 0217 	add.w	r2, r7, #23
 80090de:	4619      	mov	r1, r3
 80090e0:	f000 fb44 	bl	800976c <VL53LX_hist_merged_pulse_check>
 80090e4:	4603      	mov	r3, r0
 80090e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 80090ea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80090ee:	7df8      	ldrb	r0, [r7, #23]
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	214c      	movs	r1, #76	@ 0x4c
 80090f4:	fb01 f303 	mul.w	r3, r1, r3
 80090f8:	4413      	add	r3, r2
 80090fa:	335e      	adds	r3, #94	@ 0x5e
 80090fc:	4602      	mov	r2, r0
 80090fe:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 8009100:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009104:	3301      	adds	r3, #1
 8009106:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	795b      	ldrb	r3, [r3, #5]
 800910e:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8009112:	429a      	cmp	r2, r3
 8009114:	f4ff af61 	bcc.w	8008fda <VL53LX_hist_phase_consistency_check+0xfc>
 8009118:	e000      	b.n	800911c <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 800911a:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800911c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009120:	3301      	adds	r3, #1
 8009122:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	7c9b      	ldrb	r3, [r3, #18]
 800912a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800912e:	429a      	cmp	r2, r3
 8009130:	f4ff af1f 	bcc.w	8008f72 <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 8009134:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009138:	4618      	mov	r0, r3
 800913a:	373c      	adds	r7, #60	@ 0x3c
 800913c:	46bd      	mov	sp, r7
 800913e:	bd90      	pop	{r4, r7, pc}

08009140 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 8009140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009144:	b0d4      	sub	sp, #336	@ 0x150
 8009146:	af00      	add	r7, sp, #0
 8009148:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 800914c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009150:	4603      	mov	r3, r0
 8009152:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 8009156:	460b      	mov	r3, r1
 8009158:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800915c:	2300      	movs	r3, #0
 800915e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	int64_t   tmpp                   = 0;
 8009162:	f04f 0200 	mov.w	r2, #0
 8009166:	f04f 0300 	mov.w	r3, #0
 800916a:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	int64_t   tmpc                   = 0;
 800916e:	f04f 0200 	mov.w	r2, #0
 8009172:	f04f 0300 	mov.w	r3, #0
 8009176:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	int64_t   events_scaler          = 0;
 800917a:	f04f 0200 	mov.w	r2, #0
 800917e:	f04f 0300 	mov.w	r3, #0
 8009182:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	int64_t   events_scaler_sq       = 0;
 8009186:	f04f 0200 	mov.w	r2, #0
 800918a:	f04f 0300 	mov.w	r3, #0
 800918e:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	int64_t   c_signal_events        = 0;
 8009192:	f04f 0200 	mov.w	r2, #0
 8009196:	f04f 0300 	mov.w	r3, #0
 800919a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	int64_t   c_sig_noise_sq         = 0;
 800919e:	f04f 0200 	mov.w	r2, #0
 80091a2:	f04f 0300 	mov.w	r3, #0
 80091a6:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	int64_t   c_amb_noise_sq         = 0;
 80091aa:	f04f 0200 	mov.w	r2, #0
 80091ae:	f04f 0300 	mov.w	r3, #0
 80091b2:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	int64_t   p_amb_noise_sq         = 0;
 80091b6:	f04f 0200 	mov.w	r2, #0
 80091ba:	f04f 0300 	mov.w	r3, #0
 80091be:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108

	int32_t   p_signal_events        = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	uint32_t  noise_sq_sum           = 0;
 80091c8:	2300      	movs	r3, #0
 80091ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100



	if (event_sigma == 0) {
 80091ce:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d106      	bne.n	80091e4 <VL53LX_hist_events_consistency_check+0xa4>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80091d6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80091da:	2209      	movs	r2, #9
 80091dc:	701a      	strb	r2, [r3, #0]
		return status;
 80091de:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80091e2:	e2bd      	b.n	8009760 <VL53LX_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 80091e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091f0:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80091f4:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80091f8:	460b      	mov	r3, r1
 80091fa:	3301      	adds	r3, #1
 80091fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009200:	4613      	mov	r3, r2
 8009202:	f143 0300 	adc.w	r3, r3, #0
 8009206:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800920a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800920e:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 8009212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009216:	885b      	ldrh	r3, [r3, #2]
 8009218:	b29b      	uxth	r3, r3
 800921a:	2200      	movs	r2, #0
 800921c:	469a      	mov	sl, r3
 800921e:	4693      	mov	fp, r2
 8009220:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8009224:	fb0a f203 	mul.w	r2, sl, r3
 8009228:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800922c:	fb0b f303 	mul.w	r3, fp, r3
 8009230:	441a      	add	r2, r3
 8009232:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009236:	fba3 450a 	umull	r4, r5, r3, sl
 800923a:	1953      	adds	r3, r2, r5
 800923c:	461d      	mov	r5, r3
 800923e:	e9c7 454e 	strd	r4, r5, [r7, #312]	@ 0x138
 8009242:	e9c7 454e 	strd	r4, r5, [r7, #312]	@ 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8009246:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	2200      	movs	r2, #0
 800924e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009252:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009256:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800925a:	460b      	mov	r3, r1
 800925c:	3301      	adds	r3, #1
 800925e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009262:	4613      	mov	r3, r2
 8009264:	f143 0300 	adc.w	r3, r3, #0
 8009268:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800926c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8009270:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 8009274:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8009278:	8adb      	ldrh	r3, [r3, #22]
 800927a:	b29b      	uxth	r3, r3
 800927c:	2200      	movs	r2, #0
 800927e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009282:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009286:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800928a:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 800928e:	4622      	mov	r2, r4
 8009290:	fb02 f203 	mul.w	r2, r2, r3
 8009294:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009298:	4629      	mov	r1, r5
 800929a:	fb01 f303 	mul.w	r3, r1, r3
 800929e:	441a      	add	r2, r3
 80092a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80092a4:	4621      	mov	r1, r4
 80092a6:	fba3 8901 	umull	r8, r9, r3, r1
 80092aa:	eb02 0309 	add.w	r3, r2, r9
 80092ae:	4699      	mov	r9, r3
 80092b0:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130
 80092b4:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130



	events_scaler  = tmpp * 4096;
 80092b8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80092bc:	f04f 0000 	mov.w	r0, #0
 80092c0:	f04f 0100 	mov.w	r1, #0
 80092c4:	0319      	lsls	r1, r3, #12
 80092c6:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 80092ca:	0310      	lsls	r0, r2, #12
 80092cc:	e9c7 0152 	strd	r0, r1, [r7, #328]	@ 0x148
	if (tmpc != 0) {
 80092d0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80092d4:	4313      	orrs	r3, r2
 80092d6:	d035      	beq.n	8009344 <VL53LX_hist_events_consistency_check+0x204>
		events_scaler += (tmpc/2);
 80092d8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80092dc:	0fd9      	lsrs	r1, r3, #31
 80092de:	2000      	movs	r0, #0
 80092e0:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80092e4:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80092e8:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80092ec:	4621      	mov	r1, r4
 80092ee:	1889      	adds	r1, r1, r2
 80092f0:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80092f4:	4629      	mov	r1, r5
 80092f6:	eb43 0101 	adc.w	r1, r3, r1
 80092fa:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 80092fe:	f04f 0200 	mov.w	r2, #0
 8009302:	f04f 0300 	mov.w	r3, #0
 8009306:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800930a:	4621      	mov	r1, r4
 800930c:	084a      	lsrs	r2, r1, #1
 800930e:	4629      	mov	r1, r5
 8009310:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8009314:	4629      	mov	r1, r5
 8009316:	104b      	asrs	r3, r1, #1
 8009318:	4610      	mov	r0, r2
 800931a:	4619      	mov	r1, r3
 800931c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8009320:	1814      	adds	r4, r2, r0
 8009322:	67bc      	str	r4, [r7, #120]	@ 0x78
 8009324:	414b      	adcs	r3, r1
 8009326:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009328:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 800932c:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
		events_scaler  = do_division_s(events_scaler, tmpc);
 8009330:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8009334:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8009338:	f7f6 ff72 	bl	8000220 <__aeabi_ldivmod>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	}

	events_scaler_sq  = events_scaler * events_scaler;
 8009344:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009348:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800934c:	fb03 f102 	mul.w	r1, r3, r2
 8009350:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009354:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8009358:	fb02 f303 	mul.w	r3, r2, r3
 800935c:	18ca      	adds	r2, r1, r3
 800935e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8009362:	fba3 1303 	umull	r1, r3, r3, r3
 8009366:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800936a:	460b      	mov	r3, r1
 800936c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009370:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009374:	18d3      	adds	r3, r2, r3
 8009376:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800937a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 800937e:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
 8009382:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	events_scaler_sq += 2048;
 8009386:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800938a:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800938e:	6739      	str	r1, [r7, #112]	@ 0x70
 8009390:	f143 0300 	adc.w	r3, r3, #0
 8009394:	677b      	str	r3, [r7, #116]	@ 0x74
 8009396:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 800939a:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	events_scaler_sq /= 4096;
 800939e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	da08      	bge.n	80093b8 <VL53LX_hist_events_consistency_check+0x278>
 80093a6:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80093aa:	1851      	adds	r1, r2, r1
 80093ac:	66b9      	str	r1, [r7, #104]	@ 0x68
 80093ae:	f143 0300 	adc.w	r3, r3, #0
 80093b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80093b4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80093b8:	f04f 0000 	mov.w	r0, #0
 80093bc:	f04f 0100 	mov.w	r1, #0
 80093c0:	0b10      	lsrs	r0, r2, #12
 80093c2:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80093c6:	1319      	asrs	r1, r3, #12
 80093c8:	e9c7 014a 	strd	r0, r1, [r7, #296]	@ 0x128



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 80093cc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80093d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d2:	2200      	movs	r2, #0
 80093d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80093d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80093d8:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 80093dc:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 80093e0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80093e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e6:	2200      	movs	r2, #0
 80093e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80093ec:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80093f0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80093f4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80093f8:	4621      	mov	r1, r4
 80093fa:	1a51      	subs	r1, r2, r1
 80093fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80093fe:	4629      	mov	r1, r5
 8009400:	eb63 0301 	sbc.w	r3, r3, r1
 8009404:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009406:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800940a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events *= (int64_t)events_scaler;
 800940e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8009412:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8009416:	fb03 f102 	mul.w	r1, r3, r2
 800941a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800941e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009422:	fb02 f303 	mul.w	r3, r2, r3
 8009426:	4419      	add	r1, r3
 8009428:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800942c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8009430:	fba2 2303 	umull	r2, r3, r2, r3
 8009434:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009438:	4613      	mov	r3, r2
 800943a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800943e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009442:	18cb      	adds	r3, r1, r3
 8009444:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009448:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800944c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8009450:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events += 2048;
 8009454:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009458:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800945c:	6539      	str	r1, [r7, #80]	@ 0x50
 800945e:	f143 0300 	adc.w	r3, r3, #0
 8009462:	657b      	str	r3, [r7, #84]	@ 0x54
 8009464:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8009468:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events /= 4096;
 800946c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009470:	2b00      	cmp	r3, #0
 8009472:	da08      	bge.n	8009486 <VL53LX_hist_events_consistency_check+0x346>
 8009474:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8009478:	1851      	adds	r1, r2, r1
 800947a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800947c:	f143 0300 	adc.w	r3, r3, #0
 8009480:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009482:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009486:	f04f 0000 	mov.w	r0, #0
 800948a:	f04f 0100 	mov.w	r1, #0
 800948e:	0b10      	lsrs	r0, r2, #12
 8009490:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009494:	1319      	asrs	r1, r3, #12
 8009496:	e9c7 0148 	strd	r0, r1, [r7, #288]	@ 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800949a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800949e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 80094a2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80094a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a8:	2200      	movs	r2, #0
 80094aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80094ae:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80094b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80094b6:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 80094ba:	4622      	mov	r2, r4
 80094bc:	fb02 f203 	mul.w	r2, r2, r3
 80094c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80094c4:	4629      	mov	r1, r5
 80094c6:	fb01 f303 	mul.w	r3, r1, r3
 80094ca:	441a      	add	r2, r3
 80094cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80094d0:	4621      	mov	r1, r4
 80094d2:	fba3 1301 	umull	r1, r3, r3, r1
 80094d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80094da:	460b      	mov	r3, r1
 80094dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80094e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094e4:	18d3      	adds	r3, r2, r3
 80094e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80094ea:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 80094ee:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80094f2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_sig_noise_sq += 2048;
 80094f6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80094fa:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 80094fe:	6439      	str	r1, [r7, #64]	@ 0x40
 8009500:	f143 0300 	adc.w	r3, r3, #0
 8009504:	647b      	str	r3, [r7, #68]	@ 0x44
 8009506:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800950a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_sig_noise_sq /= 4096;
 800950e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8009512:	2b00      	cmp	r3, #0
 8009514:	da08      	bge.n	8009528 <VL53LX_hist_events_consistency_check+0x3e8>
 8009516:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800951a:	1851      	adds	r1, r2, r1
 800951c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800951e:	f143 0300 	adc.w	r3, r3, #0
 8009522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009528:	f04f 0000 	mov.w	r0, #0
 800952c:	f04f 0100 	mov.w	r1, #0
 8009530:	0b10      	lsrs	r0, r2, #12
 8009532:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009536:	1319      	asrs	r1, r3, #12
 8009538:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800953c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8009540:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 8009544:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8009548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954a:	2200      	movs	r2, #0
 800954c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009550:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009558:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 800955c:	4622      	mov	r2, r4
 800955e:	fb02 f203 	mul.w	r2, r2, r3
 8009562:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009566:	4629      	mov	r1, r5
 8009568:	fb01 f303 	mul.w	r3, r1, r3
 800956c:	441a      	add	r2, r3
 800956e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009572:	4621      	mov	r1, r4
 8009574:	fba3 1301 	umull	r1, r3, r3, r1
 8009578:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800957c:	460b      	mov	r3, r1
 800957e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009586:	18d3      	adds	r3, r2, r3
 8009588:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800958c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8009590:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8009594:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq += 2048;
 8009598:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800959c:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 80095a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80095a2:	f143 0300 	adc.w	r3, r3, #0
 80095a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80095ac:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq /= 4096;
 80095b0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80095b4:	4610      	mov	r0, r2
 80095b6:	4619      	mov	r1, r3
 80095b8:	2900      	cmp	r1, #0
 80095ba:	da08      	bge.n	80095ce <VL53LX_hist_events_consistency_check+0x48e>
 80095bc:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80095c0:	18c3      	adds	r3, r0, r3
 80095c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095c4:	f141 0300 	adc.w	r3, r1, #0
 80095c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80095ce:	f04f 0200 	mov.w	r2, #0
 80095d2:	f04f 0300 	mov.w	r3, #0
 80095d6:	0b02      	lsrs	r2, r0, #12
 80095d8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80095dc:	130b      	asrs	r3, r1, #12
 80095de:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110


	c_amb_noise_sq += 2;
 80095e2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80095e6:	1c91      	adds	r1, r2, #2
 80095e8:	6239      	str	r1, [r7, #32]
 80095ea:	f143 0300 	adc.w	r3, r3, #0
 80095ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80095f0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80095f4:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq /= 4;
 80095f8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	da06      	bge.n	800960e <VL53LX_hist_events_consistency_check+0x4ce>
 8009600:	1cd1      	adds	r1, r2, #3
 8009602:	61b9      	str	r1, [r7, #24]
 8009604:	f143 0300 	adc.w	r3, r3, #0
 8009608:	61fb      	str	r3, [r7, #28]
 800960a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800960e:	f04f 0000 	mov.w	r0, #0
 8009612:	f04f 0100 	mov.w	r1, #0
 8009616:	0890      	lsrs	r0, r2, #2
 8009618:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800961c:	1099      	asrs	r1, r3, #2
 800961e:	e9c7 0144 	strd	r0, r1, [r7, #272]	@ 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 8009622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009626:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 8009628:	2200      	movs	r2, #0
 800962a:	613b      	str	r3, [r7, #16]
 800962c:	617a      	str	r2, [r7, #20]
 800962e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009632:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108


	p_amb_noise_sq += 2;
 8009636:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800963a:	1c91      	adds	r1, r2, #2
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	f143 0300 	adc.w	r3, r3, #0
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009648:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
	p_amb_noise_sq /= 4;
 800964c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8009650:	2b00      	cmp	r3, #0
 8009652:	da06      	bge.n	8009662 <VL53LX_hist_events_consistency_check+0x522>
 8009654:	1cd1      	adds	r1, r2, #3
 8009656:	6039      	str	r1, [r7, #0]
 8009658:	f143 0300 	adc.w	r3, r3, #0
 800965c:	607b      	str	r3, [r7, #4]
 800965e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009662:	f04f 0000 	mov.w	r0, #0
 8009666:	f04f 0100 	mov.w	r1, #0
 800966a:	0890      	lsrs	r0, r2, #2
 800966c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009670:	1099      	asrs	r1, r3, #2
 8009672:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800967a:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800967c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009680:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 8009682:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
		(uint32_t)c_sig_noise_sq +
 8009686:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 8009688:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
	noise_sq_sum =
 800968c:	4413      	add	r3, r2
 800968e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 8009692:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009696:	011b      	lsls	r3, r3, #4
 8009698:	4618      	mov	r0, r3
 800969a:	f002 f8ab 	bl	800b7f4 <VL53LX_isqrt>
 800969e:	4603      	mov	r3, r0
 80096a0:	461a      	mov	r2, r3
	*pevents_tolerance =
 80096a2:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80096a6:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 80096a8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 80096b2:	fb03 f202 	mul.w	r2, r3, r2
 80096b6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80096ba:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 80096bc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f103 0220 	add.w	r2, r3, #32
 80096c6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80096ca:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 80096cc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	da00      	bge.n	80096d8 <VL53LX_hist_events_consistency_check+0x598>
 80096d6:	333f      	adds	r3, #63	@ 0x3f
 80096d8:	119b      	asrs	r3, r3, #6
 80096da:	461a      	mov	r2, r3
 80096dc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80096e0:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 80096e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 80096ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f8:	1a9b      	subs	r3, r3, r2
 80096fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 80096fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009702:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8009706:	429a      	cmp	r2, r3
 8009708:	da08      	bge.n	800971c <VL53LX_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800970a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800970e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009712:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 8009714:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	e007      	b.n	800972c <VL53LX_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800971c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009720:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8009724:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 8009726:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800972a:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800972c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	429a      	cmp	r2, r3
 800973a:	dd0b      	ble.n	8009754 <VL53LX_hist_events_consistency_check+0x614>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 800973c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8009740:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 8009742:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	@ 0xfc
 8009746:	429a      	cmp	r2, r3
 8009748:	d204      	bcs.n	8009754 <VL53LX_hist_events_consistency_check+0x614>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 800974a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800974e:	2214      	movs	r2, #20
 8009750:	701a      	strb	r2, [r3, #0]
 8009752:	e003      	b.n	800975c <VL53LX_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009754:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8009758:	2209      	movs	r2, #9
 800975a:	701a      	strb	r2, [r3, #0]





	return status;
 800975c:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 8009760:	4618      	mov	r0, r3
 8009762:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8009766:	46bd      	mov	sp, r7
 8009768:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800976c <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 800976c:	b480      	push	{r7}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 800977a:	2300      	movs	r3, #0
 800977c:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800977e:	2300      	movs	r3, #0
 8009780:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800978e:	429a      	cmp	r2, r3
 8009790:	dd0b      	ble.n	80097aa <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8009798:	b29a      	uxth	r2, r3
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	b29b      	uxth	r3, r3
		delta_mm =
 80097a6:	82fb      	strh	r3, [r7, #22]
 80097a8:	e00a      	b.n	80097c0 <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	b29b      	uxth	r3, r3
		delta_mm =
 80097be:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 80097c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	dd09      	ble.n	80097dc <VL53LX_hist_merged_pulse_check+0x70>
 80097c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80097cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	dd03      	ble.n	80097dc <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2216      	movs	r2, #22
 80097d8:	701a      	strb	r2, [r3, #0]
 80097da:	e002      	b.n	80097e2 <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2209      	movs	r2, #9
 80097e0:	701a      	strb	r2, [r3, #0]

	return status;
 80097e2:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	371c      	adds	r7, #28
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b08e      	sub	sp, #56	@ 0x38
 80097f6:	af04      	add	r7, sp, #16
 80097f8:	60f8      	str	r0, [r7, #12]
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	607a      	str	r2, [r7, #4]
 80097fe:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009800:	2300      	movs	r3, #0
 8009802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_LLDriverData_t *pdev =
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	3318      	adds	r3, #24
 800980a:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800980c:	2300      	movs	r3, #0
 800980e:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 8009814:	6a3b      	ldr	r3, [r7, #32]
 8009816:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 800981a:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 8009822:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800982a:	2b09      	cmp	r3, #9
 800982c:	d009      	beq.n	8009842 <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009834:	2b13      	cmp	r3, #19
 8009836:	d004      	beq.n	8009842 <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800983e:	2b14      	cmp	r3, #20
 8009840:	d129      	bne.n	8009896 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009848:	2b09      	cmp	r3, #9
 800984a:	d009      	beq.n	8009860 <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009852:	2b13      	cmp	r3, #19
 8009854:	d004      	beq.n	8009860 <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800985c:	2b14      	cmp	r3, #20
 800985e:	d11a      	bne.n	8009896 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2209      	movs	r2, #9
 8009864:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	334a      	adds	r3, #74	@ 0x4a
				VL53LX_hist_events_consistency_check(
 8009872:	8bb9      	ldrh	r1, [r7, #28]
 8009874:	7ff8      	ldrb	r0, [r7, #31]
 8009876:	9303      	str	r3, [sp, #12]
 8009878:	f107 0318 	add.w	r3, r7, #24
 800987c:	9302      	str	r3, [sp, #8]
 800987e:	f107 0314 	add.w	r3, r7, #20
 8009882:	9301      	str	r3, [sp, #4]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	4613      	mov	r3, r2
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	f7ff fc58 	bl	8009140 <VL53LX_hist_events_consistency_check>
 8009890:	4603      	mov	r3, r0
 8009892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		}
	}

	return status;
 8009896:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800989a:	4618      	mov	r0, r3
 800989c:	3728      	adds	r7, #40	@ 0x28
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b088      	sub	sp, #32
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80098ae:	2300      	movs	r3, #0
 80098b0:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 80098b2:	2300      	movs	r3, #0
 80098b4:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 80098ba:	2300      	movs	r3, #0
 80098bc:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d019      	beq.n	8009902 <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80098d4:	4618      	mov	r0, r3
 80098d6:	f002 f8f4 	bl	800bac2 <VL53LX_calc_pll_period_mm>
 80098da:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
		wrap_dmax_phase =
 80098e2:	021b      	lsls	r3, r3, #8
 80098e4:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	69ba      	ldr	r2, [r7, #24]
 80098ea:	fb02 f303 	mul.w	r3, r2, r3
 80098ee:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80098f6:	0bdb      	lsrs	r3, r3, #15
 80098f8:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	b21a      	sxth	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 8009902:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3720      	adds	r7, #32
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800990e:	b590      	push	{r4, r7, lr}
 8009910:	b08d      	sub	sp, #52	@ 0x34
 8009912:	af04      	add	r7, sp, #16
 8009914:	4604      	mov	r4, r0
 8009916:	4608      	mov	r0, r1
 8009918:	4611      	mov	r1, r2
 800991a:	461a      	mov	r2, r3
 800991c:	4623      	mov	r3, r4
 800991e:	80fb      	strh	r3, [r7, #6]
 8009920:	4603      	mov	r3, r0
 8009922:	80bb      	strh	r3, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
 8009928:	4613      	mov	r3, r2
 800992a:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800992c:	2300      	movs	r3, #0
 800992e:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 8009934:	2300      	movs	r3, #0
 8009936:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800993c:	2300      	movs	r3, #0
 800993e:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 8009940:	2300      	movs	r3, #0
 8009942:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 800994c:	78b9      	ldrb	r1, [r7, #2]
 800994e:	78f8      	ldrb	r0, [r7, #3]
 8009950:	f107 030c 	add.w	r3, r7, #12
 8009954:	9303      	str	r3, [sp, #12]
 8009956:	f107 030e 	add.w	r3, r7, #14
 800995a:	9302      	str	r3, [sp, #8]
 800995c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	23ff      	movs	r3, #255	@ 0xff
 8009968:	22c7      	movs	r2, #199	@ 0xc7
 800996a:	f000 fa01 	bl	8009d70 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800996e:	89fb      	ldrh	r3, [r7, #14]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d050      	beq.n	8009a16 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 8009974:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 8009976:	2b00      	cmp	r3, #0
 8009978:	d04d      	beq.n	8009a16 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 800997a:	f897 4034 	ldrb.w	r4, [r7, #52]	@ 0x34
 800997e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8009982:	78b9      	ldrb	r1, [r7, #2]
 8009984:	78f8      	ldrb	r0, [r7, #3]
 8009986:	f107 0308 	add.w	r3, r7, #8
 800998a:	9303      	str	r3, [sp, #12]
 800998c:	f107 030a 	add.w	r3, r7, #10
 8009990:	9302      	str	r3, [sp, #8]
 8009992:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009996:	9301      	str	r3, [sp, #4]
 8009998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	4623      	mov	r3, r4
 800999e:	f000 f9e7 	bl	8009d70 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 80099a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a4:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 80099a6:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 80099a8:	897b      	ldrh	r3, [r7, #10]
 80099aa:	461a      	mov	r2, r3
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	fb02 f303 	mul.w	r3, r2, r3
 80099b2:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 80099b4:	89fb      	ldrh	r3, [r7, #14]
 80099b6:	461a      	mov	r2, r3
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80099be:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 80099c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c2:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 80099c4:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 80099c6:	893b      	ldrh	r3, [r7, #8]
 80099c8:	461a      	mov	r2, r3
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	fb02 f303 	mul.w	r3, r2, r3
 80099d0:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 80099d2:	89bb      	ldrh	r3, [r7, #12]
 80099d4:	461a      	mov	r2, r3
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80099dc:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 80099de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099e2:	69ba      	ldr	r2, [r7, #24]
 80099e4:	fb02 f303 	mul.w	r3, r2, r3
 80099e8:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 80099ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	fb02 f303 	mul.w	r3, r2, r3
 80099f4:	69fa      	ldr	r2, [r7, #28]
 80099f6:	4413      	add	r3, r2
 80099f8:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 80099fa:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 80099fc:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 80099fe:	4413      	add	r3, r2
 8009a00:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d008      	beq.n	8009a1a <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	009a      	lsls	r2, r3, #2
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8009a12:	61fb      	str	r3, [r7, #28]
 8009a14:	e002      	b.n	8009a1c <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 8009a16:	bf00      	nop
 8009a18:	e000      	b.n	8009a1c <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 8009a1a:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	b21a      	sxth	r2, r3
 8009a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a22:	801a      	strh	r2, [r3, #0]

}
 8009a24:	bf00      	nop
 8009a26:	3724      	adds	r7, #36	@ 0x24
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd90      	pop	{r4, r7, pc}

08009a2c <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60b9      	str	r1, [r7, #8]
 8009a34:	607a      	str	r2, [r7, #4]
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
 8009a3e:	08db      	lsrs	r3, r3, #3
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	f003 0307 	and.w	r3, r3, #7
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	461a      	mov	r2, r3
 8009a58:	2301      	movs	r3, #1
 8009a5a:	4093      	lsls	r3, r2
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	701a      	strb	r2, [r3, #0]

}
 8009a62:	bf00      	nop
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b083      	sub	sp, #12
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	4603      	mov	r3, r0
 8009a76:	603a      	str	r2, [r7, #0]
 8009a78:	71fb      	strb	r3, [r7, #7]
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
 8009a80:	2b07      	cmp	r3, #7
 8009a82:	d90a      	bls.n	8009a9a <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8009a84:	79bb      	ldrb	r3, [r7, #6]
 8009a86:	00db      	lsls	r3, r3, #3
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	79fb      	ldrb	r3, [r7, #7]
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	3b71      	subs	r3, #113	@ 0x71
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 8009a98:	e00a      	b.n	8009ab0 <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8009a9a:	79bb      	ldrb	r3, [r7, #6]
 8009a9c:	f1c3 030f 	rsb	r3, r3, #15
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	00db      	lsls	r3, r3, #3
 8009aa4:	b2da      	uxtb	r2, r3
 8009aa6:	79fb      	ldrb	r3, [r7, #7]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	701a      	strb	r2, [r3, #0]
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
 8009ac8:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
 8009acc:	091b      	lsrs	r3, r3, #4
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	f003 030f 	and.w	r3, r3, #15
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	701a      	strb	r2, [r3, #0]

}
 8009ae0:	bf00      	nop
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4603      	mov	r3, r0
 8009af4:	603a      	str	r2, [r7, #0]
 8009af6:	71fb      	strb	r3, [r7, #7]
 8009af8:	460b      	mov	r3, r1
 8009afa:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 8009afc:	79bb      	ldrb	r3, [r7, #6]
 8009afe:	011b      	lsls	r3, r3, #4
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	79fb      	ldrb	r3, [r7, #7]
 8009b04:	4413      	add	r3, r2
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	701a      	strb	r2, [r3, #0]

}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b086      	sub	sp, #24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60ba      	str	r2, [r7, #8]
 8009b20:	607b      	str	r3, [r7, #4]
 8009b22:	4603      	mov	r3, r0
 8009b24:	73fb      	strb	r3, [r7, #15]
 8009b26:	460b      	mov	r3, r1
 8009b28:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 8009b32:	2300      	movs	r3, #0
 8009b34:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 8009b3a:	f107 0217 	add.w	r2, r7, #23
 8009b3e:	f107 0116 	add.w	r1, r7, #22
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f002 fa37 	bl	800bfb8 <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 8009b4a:	f107 0214 	add.w	r2, r7, #20
 8009b4e:	f107 0115 	add.w	r1, r7, #21
 8009b52:	7bbb      	ldrb	r3, [r7, #14]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7ff ffb1 	bl	8009abc <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	7d7b      	ldrb	r3, [r7, #21]
 8009b60:	3301      	adds	r3, #1
 8009b62:	0fda      	lsrs	r2, r3, #31
 8009b64:	4413      	add	r3, r2
 8009b66:	105b      	asrs	r3, r3, #1
 8009b68:	425b      	negs	r3, r3
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	440b      	add	r3, r1
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	b21a      	sxth	r2, r3
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	da02      	bge.n	8009b86 <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2200      	movs	r2, #0
 8009b84:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	7d7a      	ldrb	r2, [r7, #21]
 8009b90:	4413      	add	r3, r2
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	b21a      	sxth	r2, r3
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ba0:	2b0f      	cmp	r3, #15
 8009ba2:	dd02      	ble.n	8009baa <VL53LX_decode_zone_limits+0x92>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	220f      	movs	r2, #15
 8009ba8:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8009baa:	7dbb      	ldrb	r3, [r7, #22]
 8009bac:	4619      	mov	r1, r3
 8009bae:	7d3b      	ldrb	r3, [r7, #20]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	0fda      	lsrs	r2, r3, #31
 8009bb4:	4413      	add	r3, r2
 8009bb6:	105b      	asrs	r3, r3, #1
 8009bb8:	425b      	negs	r3, r3
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	440b      	add	r3, r1
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	b21a      	sxth	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	da02      	bge.n	8009bd6 <VL53LX_decode_zone_limits+0xbe>
		*py_ll = 0;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	7d3a      	ldrb	r2, [r7, #20]
 8009be0:	4413      	add	r3, r2
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	b21a      	sxth	r2, r3
 8009be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be8:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 8009bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bf0:	2b0f      	cmp	r3, #15
 8009bf2:	dd02      	ble.n	8009bfa <VL53LX_decode_zone_limits+0xe2>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf6:	220f      	movs	r2, #15
 8009bf8:	801a      	strh	r2, [r3, #0]
}
 8009bfa:	bf00      	nop
 8009bfc:	3718      	adds	r7, #24
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b085      	sub	sp, #20
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	4603      	mov	r3, r0
 8009c0a:	460a      	mov	r2, r1
 8009c0c:	71fb      	strb	r3, [r7, #7]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 8009c16:	79fb      	ldrb	r3, [r7, #7]
 8009c18:	f003 0303 	and.w	r3, r3, #3
 8009c1c:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 8009c1e:	79bb      	ldrb	r3, [r7, #6]
 8009c20:	f003 0303 	and.w	r3, r3, #3
 8009c24:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 8009c26:	7bbb      	ldrb	r3, [r7, #14]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d104      	bne.n	8009c36 <VL53LX_is_aperture_location+0x34>
 8009c2c:	7b7b      	ldrb	r3, [r7, #13]
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d101      	bne.n	8009c36 <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 8009c32:	2301      	movs	r3, #1
 8009c34:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 8009c36:	7bbb      	ldrb	r3, [r7, #14]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d104      	bne.n	8009c46 <VL53LX_is_aperture_location+0x44>
 8009c3c:	7b7b      	ldrb	r3, [r7, #13]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 8009c42:	2301      	movs	r3, #1
 8009c44:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8009c54:	b590      	push	{r4, r7, lr}
 8009c56:	b08b      	sub	sp, #44	@ 0x2c
 8009c58:	af02      	add	r7, sp, #8
 8009c5a:	603a      	str	r2, [r7, #0]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	4603      	mov	r3, r0
 8009c60:	71fb      	strb	r3, [r7, #7]
 8009c62:	460b      	mov	r3, r1
 8009c64:	71bb      	strb	r3, [r7, #6]
 8009c66:	4613      	mov	r3, r2
 8009c68:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 8009c96:	f107 0416 	add.w	r4, r7, #22
 8009c9a:	f107 0218 	add.w	r2, r7, #24
 8009c9e:	79b9      	ldrb	r1, [r7, #6]
 8009ca0:	79f8      	ldrb	r0, [r7, #7]
 8009ca2:	f107 0312 	add.w	r3, r7, #18
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	f107 0314 	add.w	r3, r7, #20
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	4623      	mov	r3, r4
 8009cb0:	f7ff ff32 	bl	8009b18 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009cba:	8afb      	ldrh	r3, [r7, #22]
 8009cbc:	83bb      	strh	r3, [r7, #28]
 8009cbe:	e04c      	b.n	8009d5a <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009cc0:	8b3b      	ldrh	r3, [r7, #24]
 8009cc2:	83fb      	strh	r3, [r7, #30]
 8009cc4:	e03d      	b.n	8009d42 <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 8009cc6:	8bbb      	ldrh	r3, [r7, #28]
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	8bfa      	ldrh	r2, [r7, #30]
 8009ccc:	b2d1      	uxtb	r1, r2
 8009cce:	f107 0211 	add.w	r2, r7, #17
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7ff fecb 	bl	8009a6e <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009cd8:	7c78      	ldrb	r0, [r7, #17]
 8009cda:	f107 030e 	add.w	r3, r7, #14
 8009cde:	f107 020f 	add.w	r2, r7, #15
 8009ce2:	f107 0110 	add.w	r1, r7, #16
 8009ce6:	f7ff fea1 	bl	8009a2c <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009cea:	7c3b      	ldrb	r3, [r7, #16]
 8009cec:	461a      	mov	r2, r3
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	781a      	ldrb	r2, [r3, #0]
 8009cf4:	7bbb      	ldrb	r3, [r7, #14]
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d01b      	beq.n	8009d36 <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 8009cfe:	8bbb      	ldrh	r3, [r7, #28]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	8bfa      	ldrh	r2, [r7, #30]
 8009d04:	b2d2      	uxtb	r2, r2
 8009d06:	4611      	mov	r1, r2
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7ff ff7a 	bl	8009c02 <VL53LX_is_aperture_location>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009d12:	7efb      	ldrb	r3, [r7, #27]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d007      	beq.n	8009d28 <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 8009d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1a:	881a      	ldrh	r2, [r3, #0]
 8009d1c:	88bb      	ldrh	r3, [r7, #4]
 8009d1e:	4413      	add	r3, r2
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d24:	801a      	strh	r2, [r3, #0]
 8009d26:	e006      	b.n	8009d36 <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 8009d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d34:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009d36:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	83fb      	strh	r3, [r7, #30]
 8009d42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009d46:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	ddbb      	ble.n	8009cc6 <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009d4e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	3301      	adds	r3, #1
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	83bb      	strh	r3, [r7, #28]
 8009d5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d5e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	ddac      	ble.n	8009cc0 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 8009d66:	bf00      	nop
 8009d68:	bf00      	nop
 8009d6a:	3724      	adds	r7, #36	@ 0x24
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd90      	pop	{r4, r7, pc}

08009d70 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 8009d70:	b590      	push	{r4, r7, lr}
 8009d72:	b08d      	sub	sp, #52	@ 0x34
 8009d74:	af02      	add	r7, sp, #8
 8009d76:	4604      	mov	r4, r0
 8009d78:	4608      	mov	r0, r1
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	4623      	mov	r3, r4
 8009d80:	71fb      	strb	r3, [r7, #7]
 8009d82:	4603      	mov	r3, r0
 8009d84:	71bb      	strb	r3, [r7, #6]
 8009d86:	460b      	mov	r3, r1
 8009d88:	717b      	strb	r3, [r7, #5]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t   y         = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	84bb      	strh	r3, [r7, #36]	@ 0x24

	int16_t   mm_x_ll   = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 8009da2:	2300      	movs	r3, #0
 8009da4:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 8009db2:	2300      	movs	r3, #0
 8009db4:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint16_t  spad_attenuation = 0;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	847b      	strh	r3, [r7, #34]	@ 0x22



	VL53LX_decode_zone_limits(
 8009dd0:	f107 041c 	add.w	r4, r7, #28
 8009dd4:	f107 021e 	add.w	r2, r7, #30
 8009dd8:	79b9      	ldrb	r1, [r7, #6]
 8009dda:	79f8      	ldrb	r0, [r7, #7]
 8009ddc:	f107 0318 	add.w	r3, r7, #24
 8009de0:	9301      	str	r3, [sp, #4]
 8009de2:	f107 031a 	add.w	r3, r7, #26
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	4623      	mov	r3, r4
 8009dea:	f7ff fe95 	bl	8009b18 <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 8009dee:	f107 0414 	add.w	r4, r7, #20
 8009df2:	f107 0216 	add.w	r2, r7, #22
 8009df6:	7939      	ldrb	r1, [r7, #4]
 8009df8:	7978      	ldrb	r0, [r7, #5]
 8009dfa:	f107 0310 	add.w	r3, r7, #16
 8009dfe:	9301      	str	r3, [sp, #4]
 8009e00:	f107 0312 	add.w	r3, r7, #18
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	4623      	mov	r3, r4
 8009e08:	f7ff fe86 	bl	8009b18 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 8009e0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e0e:	2200      	movs	r2, #0
 8009e10:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 8009e12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e14:	2200      	movs	r2, #0
 8009e16:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009e18:	8abb      	ldrh	r3, [r7, #20]
 8009e1a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009e1c:	e06c      	b.n	8009ef8 <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009e1e:	8afb      	ldrh	r3, [r7, #22]
 8009e20:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009e22:	e05d      	b.n	8009ee0 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 8009e24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009e2a:	b2d1      	uxtb	r1, r2
 8009e2c:	f107 020f 	add.w	r2, r7, #15
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7ff fe1c 	bl	8009a6e <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009e36:	7bf8      	ldrb	r0, [r7, #15]
 8009e38:	f107 030c 	add.w	r3, r7, #12
 8009e3c:	f107 020d 	add.w	r2, r7, #13
 8009e40:	f107 010e 	add.w	r1, r7, #14
 8009e44:	f7ff fdf2 	bl	8009a2c <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009e48:	7bbb      	ldrb	r3, [r7, #14]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e4e:	4413      	add	r3, r2
 8009e50:	781a      	ldrb	r2, [r3, #0]
 8009e52:	7b3b      	ldrb	r3, [r7, #12]
 8009e54:	4013      	ands	r3, r2
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d03b      	beq.n	8009ed4 <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 8009e5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009e62:	b2d2      	uxtb	r2, r2
 8009e64:	4611      	mov	r1, r2
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7ff fecb 	bl	8009c02 <VL53LX_is_aperture_location>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009e72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 8009e7a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009e7c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009e7e:	e002      	b.n	8009e86 <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 8009e80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e84:	847b      	strh	r3, [r7, #34]	@ 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009e86:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009e8a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	db19      	blt.n	8009ec6 <VL53LX_calc_mm_effective_spads+0x156>
 8009e92:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009e96:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	dc13      	bgt.n	8009ec6 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009e9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009ea2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	db0d      	blt.n	8009ec6 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009eaa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009eae:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	dc07      	bgt.n	8009ec6 <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 8009eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009eb8:	881a      	ldrh	r2, [r3, #0]
 8009eba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009ebc:	4413      	add	r3, r2
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ec2:	801a      	strh	r2, [r3, #0]
 8009ec4:	e006      	b.n	8009ed4 <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 8009ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ec8:	881a      	ldrh	r2, [r3, #0]
 8009eca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009ecc:	4413      	add	r3, r2
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ed2:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009ed4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	3301      	adds	r3, #1
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009ee0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ee4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	dd9b      	ble.n	8009e24 <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009eec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009ef8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009efc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8009f00:	429a      	cmp	r2, r3
 8009f02:	dd8c      	ble.n	8009e1e <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop
 8009f08:	372c      	adds	r7, #44	@ 0x2c
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd90      	pop	{r4, r7, pc}

08009f0e <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b086      	sub	sp, #24
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	60f8      	str	r0, [r7, #12]
 8009f16:	60b9      	str	r1, [r7, #8]
 8009f18:	607a      	str	r2, [r7, #4]
 8009f1a:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7fd ff71 	bl	8007e08 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	7c9a      	ldrb	r2, [r3, #18]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f893 207a 	ldrb.w	r2, [r3, #122]	@ 0x7a
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	3314      	adds	r3, #20
 8009f50:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 8009f52:	2300      	movs	r3, #0
 8009f54:	75fb      	strb	r3, [r7, #23]
 8009f56:	e06b      	b.n	800a030 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 8009f58:	7dfb      	ldrb	r3, [r7, #23]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d002      	beq.n	8009f64 <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d034      	beq.n	8009fcc <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 8009f62:	e05f      	b.n	800a024 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8009f9c:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	8a9a      	ldrh	r2, [r3, #20]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd0 =
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd0 =
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd0 =
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	601a      	str	r2, [r3, #0]

			break;
 8009fca:	e02b      	b.n	800a024 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8009ffc:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	845a      	strh	r2, [r3, #34]	@ 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	611a      	str	r2, [r3, #16]
			break;
 800a022:	bf00      	nop
		}

		pdata++;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	334c      	adds	r3, #76	@ 0x4c
 800a028:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
 800a02c:	3301      	adds	r3, #1
 800a02e:	75fb      	strb	r3, [r7, #23]
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	7c9b      	ldrb	r3, [r3, #18]
 800a034:	7dfa      	ldrb	r2, [r7, #23]
 800a036:	429a      	cmp	r2, r3
 800a038:	d38e      	bcc.n	8009f58 <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800a03a:	bf00      	nop
 800a03c:	bf00      	nop
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 800a044:	b480      	push	{r7}
 800a046:	b089      	sub	sp, #36	@ 0x24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a04c:	2300      	movs	r3, #0
 800a04e:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3318      	adds	r3, #24
 800a054:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800a05c:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800a064:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a06c:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	005b      	lsls	r3, r3, #1
 800a076:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800a07a:	697a      	ldr	r2, [r7, #20]
 800a07c:	4413      	add	r3, r2
 800a07e:	3302      	adds	r3, #2
 800a080:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
	pzone_dyn_cfg->expected_gph_id =
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800a0a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3724      	adds	r7, #36	@ 0x24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	b08b      	sub	sp, #44	@ 0x2c
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	3318      	adds	r3, #24
 800a0c8:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800a0d0:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800a0d8:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a0e0:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 800a0e8:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800a0ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a0ee:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 800a0f0:	7bfa      	ldrb	r2, [r7, #15]
 800a0f2:	6939      	ldr	r1, [r7, #16]
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4413      	add	r3, r2
 800a0fa:	005b      	lsls	r3, r3, #1
 800a0fc:	440b      	add	r3, r1
 800a0fe:	3306      	adds	r3, #6
 800a100:	2200      	movs	r2, #0
 800a102:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800a10a:	84bb      	strh	r3, [r7, #36]	@ 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800a10c:	2301      	movs	r3, #1
 800a10e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a112:	e01a      	b.n	800a14a <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 800a114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a118:	683a      	ldr	r2, [r7, #0]
 800a11a:	214c      	movs	r1, #76	@ 0x4c
 800a11c:	fb01 f303 	mul.w	r3, r1, r3
 800a120:	4413      	add	r3, r2
 800a122:	334a      	adds	r3, #74	@ 0x4a
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a128:	429a      	cmp	r2, r3
 800a12a:	d209      	bcs.n	800a140 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 800a12c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			max_total_rate_per_spads =
 800a130:	683a      	ldr	r2, [r7, #0]
 800a132:	214c      	movs	r1, #76	@ 0x4c
 800a134:	fb01 f303 	mul.w	r3, r1, r3
 800a138:	4413      	add	r3, r2
 800a13a:	334a      	adds	r3, #74	@ 0x4a
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (i = 1; i < presults->active_results; i++) {
 800a140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a144:	3301      	adds	r3, #1
 800a146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	7c9b      	ldrb	r3, [r3, #18]
 800a14e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a152:	429a      	cmp	r2, r3
 800a154:	d3de      	bcc.n	800a114 <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 800a156:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d103      	bne.n	800a164 <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 800a15c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a160:	623b      	str	r3, [r7, #32]
 800a162:	e00e      	b.n	800a182 <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 800a164:	89bb      	ldrh	r3, [r7, #12]
 800a166:	039b      	lsls	r3, r3, #14
 800a168:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800a16a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a16c:	6a3a      	ldr	r2, [r7, #32]
 800a16e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a172:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800a174:	6a3b      	ldr	r3, [r7, #32]
 800a176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a17a:	d302      	bcc.n	800a182 <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800a17c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a180:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a182:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a188:	6939      	ldr	r1, [r7, #16]
 800a18a:	4613      	mov	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	005b      	lsls	r3, r3, #1
 800a192:	440b      	add	r3, r1
 800a194:	3306      	adds	r3, #6
 800a196:	4602      	mov	r2, r0
 800a198:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800a19a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	372c      	adds	r7, #44	@ 0x2c
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr

0800a1aa <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b08a      	sub	sp, #40	@ 0x28
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	3318      	adds	r3, #24
 800a1bc:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	332c      	adds	r3, #44	@ 0x2c
 800a1c2:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	33c2      	adds	r3, #194	@ 0xc2
 800a1c8:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800a1d0:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	3302      	adds	r3, #2
 800a1d6:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	785b      	ldrb	r3, [r3, #1]
 800a1dc:	f003 0301 	and.w	r3, r3, #1
 800a1e0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a1e2:	6a3b      	ldr	r3, [r7, #32]
 800a1e4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d11e      	bne.n	800a234 <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800a1f6:	7bfb      	ldrb	r3, [r7, #15]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10b      	bne.n	800a214 <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a214:	7bfb      	ldrb	r3, [r7, #15]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d05d      	beq.n	800a2d6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	719a      	strb	r2, [r3, #6]
 800a232:	e050      	b.n	800a2d6 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a23a:	461a      	mov	r2, r3
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	4413      	add	r3, r2
 800a240:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a244:	2b02      	cmp	r3, #2
 800a246:	d11e      	bne.n	800a286 <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800a248:	7bfb      	ldrb	r3, [r7, #15]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d10b      	bne.n	800a266 <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a266:	7bfb      	ldrb	r3, [r7, #15]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d034      	beq.n	800a2d6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	719a      	strb	r2, [r3, #6]
 800a284:	e027      	b.n	800a2d6 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a28c:	461a      	mov	r2, r3
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	4413      	add	r3, r2
 800a292:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a296:	2b03      	cmp	r3, #3
 800a298:	d11d      	bne.n	800a2d6 <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800a29a:	7bfb      	ldrb	r3, [r7, #15]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10b      	bne.n	800a2b8 <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00b      	beq.n	800a2d6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800a2d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d109      	bne.n	800a2f2 <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	f203 21fe 	addw	r1, r3, #766	@ 0x2fe
 800a2e4:	6a3b      	ldr	r3, [r7, #32]
 800a2e6:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	6978      	ldr	r0, [r7, #20]
 800a2ee:	f7fd f961 	bl	80075b4 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800a2f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3728      	adds	r7, #40	@ 0x28
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800a2fe:	b480      	push	{r7}
 800a300:	b089      	sub	sp, #36	@ 0x24
 800a302:	af00      	add	r7, sp, #0
 800a304:	60f8      	str	r0, [r7, #12]
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	603b      	str	r3, [r7, #0]
 800a30a:	460b      	mov	r3, r1
 800a30c:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a30e:	2300      	movs	r3, #0
 800a310:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3318      	adds	r3, #24
 800a316:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a31e:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800a320:	7dfb      	ldrb	r3, [r7, #23]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d103      	bne.n	800a32e <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	7afa      	ldrb	r2, [r7, #11]
 800a32a:	701a      	strb	r2, [r3, #0]
 800a32c:	e01e      	b.n	800a36c <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	3b01      	subs	r3, #1
 800a338:	429a      	cmp	r2, r3
 800a33a:	d111      	bne.n	800a360 <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	2bff      	cmp	r3, #255	@ 0xff
 800a342:	d103      	bne.n	800a34c <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2280      	movs	r2, #128	@ 0x80
 800a348:	701a      	strb	r2, [r3, #0]
 800a34a:	e005      	b.n	800a358 <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	3301      	adds	r3, #1
 800a352:	b2da      	uxtb	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	2200      	movs	r2, #0
 800a35c:	701a      	strb	r2, [r3, #0]
 800a35e:	e005      	b.n	800a36c <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	3301      	adds	r3, #1
 800a366:	b2da      	uxtb	r2, r3
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800a36c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3724      	adds	r7, #36	@ 0x24
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b08a      	sub	sp, #40	@ 0x28
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	607a      	str	r2, [r7, #4]
 800a386:	461a      	mov	r2, r3
 800a388:	460b      	mov	r3, r1
 800a38a:	72fb      	strb	r3, [r7, #11]
 800a38c:	4613      	mov	r3, r2
 800a38e:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a390:	2300      	movs	r3, #0
 800a392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	3318      	adds	r3, #24
 800a39a:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800a39c:	2300      	movs	r3, #0
 800a39e:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800a3a4:	7afa      	ldrb	r2, [r7, #11]
 800a3a6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe f938 	bl	8008620 <VL53LX_calc_macro_period_us>
 800a3b0:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800a3b2:	6a3b      	ldr	r3, [r7, #32]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d101      	bne.n	800a3bc <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	031b      	lsls	r3, r3, #12
 800a3c0:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800a3c2:	6a3b      	ldr	r3, [r7, #32]
 800a3c4:	085b      	lsrs	r3, r3, #1
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800a3cc:	69ba      	ldr	r2, [r7, #24]
 800a3ce:	6a3b      	ldr	r3, [r7, #32]
 800a3d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d4:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	2bff      	cmp	r3, #255	@ 0xff
 800a3da:	d904      	bls.n	800a3e6 <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	22ff      	movs	r2, #255	@ 0xff
 800a3e0:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325
 800a3e4:	e004      	b.n	800a3f0 <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	7afa      	ldrb	r2, [r7, #11]
 800a3f4:	f883 233a 	strb.w	r2, [r3, #826]	@ 0x33a



	if (status == VL53LX_ERROR_NONE)
 800a3f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10a      	bne.n	800a416 <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
 800a406:	461a      	mov	r2, r3
 800a408:	214b      	movs	r1, #75	@ 0x4b
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f007 f936 	bl	801167c <VL53LX_WrByte>
 800a410:	4603      	mov	r3, r0
 800a412:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800a416:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10a      	bne.n	800a434 <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800a424:	461a      	mov	r2, r3
 800a426:	2160      	movs	r1, #96	@ 0x60
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f007 f927 	bl	801167c <VL53LX_WrByte>
 800a42e:	4603      	mov	r3, r0
 800a430:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800a43a:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800a442:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800a444:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d109      	bne.n	800a460 <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800a44c:	f107 0214 	add.w	r2, r7, #20
 800a450:	2302      	movs	r3, #2
 800a452:	2178      	movs	r1, #120	@ 0x78
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f007 f8a5 	bl	80115a4 <VL53LX_WriteMulti>
 800a45a:	4603      	mov	r3, r0
 800a45c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	893a      	ldrh	r2, [r7, #8]
 800a464:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800a468:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d108      	bne.n	800a482 <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800a470:	893b      	ldrh	r3, [r7, #8]
 800a472:	461a      	mov	r2, r3
 800a474:	211c      	movs	r1, #28
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f007 f92a 	bl	80116d0 <VL53LX_WrWord>
 800a47c:	4603      	mov	r3, r0
 800a47e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a482:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a486:	2b00      	cmp	r3, #0
 800a488:	d108      	bne.n	800a49c <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800a48a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a48c:	461a      	mov	r2, r3
 800a48e:	2164      	movs	r1, #100	@ 0x64
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f007 f91d 	bl	80116d0 <VL53LX_WrWord>
 800a496:	4603      	mov	r3, r0
 800a498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a49c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d108      	bne.n	800a4b6 <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800a4a4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	2166      	movs	r1, #102	@ 0x66
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f007 f910 	bl	80116d0 <VL53LX_WrWord>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800a4b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3728      	adds	r7, #40	@ 0x28
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800a4c2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4c6:	b0a2      	sub	sp, #136	@ 0x88
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	64f8      	str	r0, [r7, #76]	@ 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a4d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4d4:	3318      	adds	r3, #24
 800a4d6:	673b      	str	r3, [r7, #112]	@ 0x70
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a4d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4da:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800a4de:	66fb      	str	r3, [r7, #108]	@ 0x6c
	VL53LX_smudge_corrector_config_t *pconfig =
 800a4e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4e2:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800a4e6:	3314      	adds	r3, #20
 800a4e8:	66bb      	str	r3, [r7, #104]	@ 0x68
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a4ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4ec:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 800a4f0:	3318      	adds	r3, #24
 800a4f2:	667b      	str	r3, [r7, #100]	@ 0x64
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800a4f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4f6:	663b      	str	r3, [r7, #96]	@ 0x60
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800a4f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4fa:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a4fe:	65fb      	str	r3, [r7, #92]	@ 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800a500:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a502:	69db      	ldr	r3, [r3, #28]
 800a504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800a508:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a50a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
		pxmonitor->VL53LX_p_016;
 800a50c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800a510:	4413      	add	r3, r2
 800a512:	2200      	movs	r2, #0
 800a514:	461c      	mov	r4, r3
 800a516:	4615      	mov	r5, r2
 800a518:	e9c7 4514 	strd	r4, r5, [r7, #80]	@ 0x50
	if (peak_duration_us == 0)
 800a51c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a520:	2b00      	cmp	r3, #0
 800a522:	d103      	bne.n	800a52c <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x6a>
		peak_duration_us = 1000;
 800a524:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a52c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800a530:	4622      	mov	r2, r4
 800a532:	462b      	mov	r3, r5
 800a534:	f04f 0000 	mov.w	r0, #0
 800a538:	f04f 0100 	mov.w	r1, #0
 800a53c:	0159      	lsls	r1, r3, #5
 800a53e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a542:	0150      	lsls	r0, r2, #5
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	ebb2 0804 	subs.w	r8, r2, r4
 800a54c:	eb63 0905 	sbc.w	r9, r3, r5
 800a550:	f04f 0200 	mov.w	r2, #0
 800a554:	f04f 0300 	mov.w	r3, #0
 800a558:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800a55c:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800a560:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800a564:	4690      	mov	r8, r2
 800a566:	4699      	mov	r9, r3
 800a568:	eb18 0304 	adds.w	r3, r8, r4
 800a56c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a56e:	eb49 0305 	adc.w	r3, r9, r5
 800a572:	637b      	str	r3, [r7, #52]	@ 0x34
 800a574:	f04f 0200 	mov.w	r2, #0
 800a578:	f04f 0300 	mov.w	r3, #0
 800a57c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a580:	4629      	mov	r1, r5
 800a582:	00cb      	lsls	r3, r1, #3
 800a584:	4621      	mov	r1, r4
 800a586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a58a:	4621      	mov	r1, r4
 800a58c:	00ca      	lsls	r2, r1, #3
 800a58e:	4610      	mov	r0, r2
 800a590:	4619      	mov	r1, r3
 800a592:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a596:	2200      	movs	r2, #0
 800a598:	643b      	str	r3, [r7, #64]	@ 0x40
 800a59a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a59c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a5a0:	f7f5 fe8e 	bl	80002c0 <__aeabi_uldivmod>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a5ac:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800a5b0:	4622      	mov	r2, r4
 800a5b2:	462b      	mov	r3, r5
 800a5b4:	f04f 0000 	mov.w	r0, #0
 800a5b8:	f04f 0100 	mov.w	r1, #0
 800a5bc:	0159      	lsls	r1, r3, #5
 800a5be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a5c2:	0150      	lsls	r0, r2, #5
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	ebb2 0a04 	subs.w	sl, r2, r4
 800a5cc:	eb63 0b05 	sbc.w	fp, r3, r5
 800a5d0:	f04f 0200 	mov.w	r2, #0
 800a5d4:	f04f 0300 	mov.w	r3, #0
 800a5d8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a5dc:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800a5e0:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800a5e4:	4692      	mov	sl, r2
 800a5e6:	469b      	mov	fp, r3
 800a5e8:	eb1a 0304 	adds.w	r3, sl, r4
 800a5ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5ee:	eb4b 0305 	adc.w	r3, fp, r5
 800a5f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5f4:	f04f 0200 	mov.w	r2, #0
 800a5f8:	f04f 0300 	mov.w	r3, #0
 800a5fc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800a600:	4629      	mov	r1, r5
 800a602:	00cb      	lsls	r3, r1, #3
 800a604:	4621      	mov	r1, r4
 800a606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a60a:	4621      	mov	r1, r4
 800a60c:	00ca      	lsls	r2, r1, #3
 800a60e:	4610      	mov	r0, r2
 800a610:	4619      	mov	r1, r3
 800a612:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a616:	2200      	movs	r2, #0
 800a618:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a61a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a61c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a620:	f7f5 fe4e 	bl	80002c0 <__aeabi_uldivmod>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800a62c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a632:	8ad2      	ldrh	r2, [r2, #22]
 800a634:	fb02 f303 	mul.w	r3, r2, r3
 800a638:	2200      	movs	r2, #0
 800a63a:	623b      	str	r3, [r7, #32]
 800a63c:	627a      	str	r2, [r7, #36]	@ 0x24
 800a63e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a642:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
	if (temp64z == 0)
 800a646:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a64a:	4313      	orrs	r3, r2
 800a64c:	d105      	bne.n	800a65a <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800a64e:	f04f 0201 	mov.w	r2, #1
 800a652:	f04f 0300 	mov.w	r3, #0
 800a656:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	temp64a = temp64a * 1000 * 256;
 800a65a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a65e:	4602      	mov	r2, r0
 800a660:	460b      	mov	r3, r1
 800a662:	f04f 0400 	mov.w	r4, #0
 800a666:	f04f 0500 	mov.w	r5, #0
 800a66a:	015d      	lsls	r5, r3, #5
 800a66c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a670:	0154      	lsls	r4, r2, #5
 800a672:	4622      	mov	r2, r4
 800a674:	462b      	mov	r3, r5
 800a676:	1a14      	subs	r4, r2, r0
 800a678:	61bc      	str	r4, [r7, #24]
 800a67a:	eb63 0301 	sbc.w	r3, r3, r1
 800a67e:	61fb      	str	r3, [r7, #28]
 800a680:	f04f 0200 	mov.w	r2, #0
 800a684:	f04f 0300 	mov.w	r3, #0
 800a688:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800a68c:	464c      	mov	r4, r9
 800a68e:	00a3      	lsls	r3, r4, #2
 800a690:	4644      	mov	r4, r8
 800a692:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800a696:	4644      	mov	r4, r8
 800a698:	00a2      	lsls	r2, r4, #2
 800a69a:	4614      	mov	r4, r2
 800a69c:	461d      	mov	r5, r3
 800a69e:	4623      	mov	r3, r4
 800a6a0:	181b      	adds	r3, r3, r0
 800a6a2:	613b      	str	r3, [r7, #16]
 800a6a4:	462b      	mov	r3, r5
 800a6a6:	eb41 0303 	adc.w	r3, r1, r3
 800a6aa:	617b      	str	r3, [r7, #20]
 800a6ac:	f04f 0200 	mov.w	r2, #0
 800a6b0:	f04f 0300 	mov.w	r3, #0
 800a6b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	02cb      	lsls	r3, r1, #11
 800a6bc:	4621      	mov	r1, r4
 800a6be:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	02ca      	lsls	r2, r1, #11
 800a6c6:	461c      	mov	r4, r3
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800a6ce:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a6d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a6d6:	f7f5 fdf3 	bl	80002c0 <__aeabi_uldivmod>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = temp64a * 1000 * 256;
 800a6e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	f04f 0400 	mov.w	r4, #0
 800a6ee:	f04f 0500 	mov.w	r5, #0
 800a6f2:	015d      	lsls	r5, r3, #5
 800a6f4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a6f8:	0154      	lsls	r4, r2, #5
 800a6fa:	4622      	mov	r2, r4
 800a6fc:	462b      	mov	r3, r5
 800a6fe:	1a14      	subs	r4, r2, r0
 800a700:	60bc      	str	r4, [r7, #8]
 800a702:	eb63 0301 	sbc.w	r3, r3, r1
 800a706:	60fb      	str	r3, [r7, #12]
 800a708:	f04f 0200 	mov.w	r2, #0
 800a70c:	f04f 0300 	mov.w	r3, #0
 800a710:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800a714:	464c      	mov	r4, r9
 800a716:	00a3      	lsls	r3, r4, #2
 800a718:	4644      	mov	r4, r8
 800a71a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800a71e:	4644      	mov	r4, r8
 800a720:	00a2      	lsls	r2, r4, #2
 800a722:	4614      	mov	r4, r2
 800a724:	461d      	mov	r5, r3
 800a726:	4623      	mov	r3, r4
 800a728:	181b      	adds	r3, r3, r0
 800a72a:	603b      	str	r3, [r7, #0]
 800a72c:	462b      	mov	r3, r5
 800a72e:	eb41 0303 	adc.w	r3, r1, r3
 800a732:	607b      	str	r3, [r7, #4]
 800a734:	f04f 0200 	mov.w	r2, #0
 800a738:	f04f 0300 	mov.w	r3, #0
 800a73c:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a740:	4629      	mov	r1, r5
 800a742:	02cb      	lsls	r3, r1, #11
 800a744:	4621      	mov	r1, r4
 800a746:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800a74a:	4621      	mov	r1, r4
 800a74c:	02ca      	lsls	r2, r1, #11
 800a74e:	461c      	mov	r4, r3
 800a750:	4613      	mov	r3, r2
 800a752:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800a756:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a75a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a75e:	f7f5 fdaf 	bl	80002c0 <__aeabi_uldivmod>
 800a762:	4602      	mov	r2, r0
 800a764:	460b      	mov	r3, r1
 800a766:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	pint->required_samples = (uint32_t)temp64a;
 800a76a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a76c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a76e:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800a770:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d802      	bhi.n	800a77e <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800a778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a77a:	2202      	movs	r2, #2
 800a77c:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800a77e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 800a782:	4618      	mov	r0, r3
 800a784:	3788      	adds	r7, #136	@ 0x88
 800a786:	46bd      	mov	sp, r7
 800a788:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a78c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b096      	sub	sp, #88	@ 0x58
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	607a      	str	r2, [r7, #4]
 800a798:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a79a:	2300      	movs	r3, #0
 800a79c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	3318      	adds	r3, #24
 800a7a4:	637b      	str	r3, [r7, #52]	@ 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	long int SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800a7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7a8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800a7ac:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800a7ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7b0:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800a7b4:	331c      	adds	r3, #28
 800a7b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800a7b8:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d107      	bne.n	800a7d0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	889b      	ldrh	r3, [r3, #4]
 800a7c4:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	609a      	str	r2, [r3, #8]
 800a7ce:	e002      	b.n	800a7d6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	653b      	str	r3, [r7, #80]	@ 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7de:	899b      	ldrh	r3, [r3, #12]
 800a7e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e6:	89db      	ldrh	r3, [r3, #14]
 800a7e8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d004      	beq.n	800a800 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d126      	bne.n	800a84e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800a800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a802:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800a804:	2b00      	cmp	r3, #0
 800a806:	d022      	beq.n	800a84e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a808:	f107 0317 	add.w	r3, r7, #23
 800a80c:	4619      	mov	r1, r3
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f000 fea7 	bl	800b562 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800a814:	7dfb      	ldrb	r3, [r7, #23]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d101      	bne.n	800a81e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800a81a:	2301      	movs	r3, #1
 800a81c:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800a81e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a820:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800a824:	2b01      	cmp	r3, #1
 800a826:	d003      	beq.n	800a830 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800a828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a82e:	e006      	b.n	800a83e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800a834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a836:	3202      	adds	r2, #2
 800a838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a83c:	653b      	str	r3, [r7, #80]	@ 0x50

		orig_x_gradient =
 800a83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a840:	889b      	ldrh	r3, [r3, #4]
 800a842:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800a846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a848:	88db      	ldrh	r3, [r3, #6]
 800a84a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10a      	bne.n	800a86e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800a858:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d106      	bne.n	800a86e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	795b      	ldrb	r3, [r3, #5]
 800a864:	f043 0301 	orr.w	r3, r3, #1
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10a      	bne.n	800a88e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800a878:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d106      	bne.n	800a88e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	795b      	ldrb	r3, [r3, #5]
 800a884:	f043 0302 	orr.w	r3, r3, #2
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800a88e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a890:	2b00      	cmp	r3, #0
 800a892:	d101      	bne.n	800a898 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800a894:	2301      	movs	r3, #1
 800a896:	653b      	str	r3, [r7, #80]	@ 0x50



	if (pconfig->user_scaler_set == 1) {
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d108      	bne.n	800a8b4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8a6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a8ae:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 800a8b2:	e017      	b.n	800a8e4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x158>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800a8b4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a8b8:	019a      	lsls	r2, r3, #6
 800a8ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800a8ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800a8cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a8d0:	019a      	lsls	r2, r3, #6
 800a8d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8d8:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800a8e2:	859a      	strh	r2, [r3, #44]	@ 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d12a      	bne.n	800a944 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b8>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 800a8f6:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a8fa:	647b      	str	r3, [r7, #68]	@ 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a8fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8fe:	119b      	asrs	r3, r3, #6
 800a900:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a902:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a908:	db02      	blt.n	800a910 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x184>
			itemp32 = 0xFFFF;
 800a90a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a90e:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a912:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 800a920:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a924:	647b      	str	r3, [r7, #68]	@ 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a928:	119b      	asrs	r3, r3, #6
 800a92a:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a92c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a92e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a932:	db02      	blt.n	800a93a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1ae>
			itemp32 = 0xFFFF;
 800a934:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a938:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a93a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a93c:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	81da      	strh	r2, [r3, #14]
 800a942:	e042      	b.n	800a9ca <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23e>
	} else if (pconfig->scaler_calc_method == 1) {
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d13d      	bne.n	800a9ca <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23e>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a952:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a954:	1ad3      	subs	r3, r2, r3
 800a956:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800a958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	da00      	bge.n	800a960 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d4>
 800a95e:	330f      	adds	r3, #15
 800a960:	111b      	asrs	r3, r3, #4
 800a962:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 800a964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800a96a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a96e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a970:	4413      	add	r3, r2
 800a972:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a97a:	db02      	blt.n	800a982 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
			itemp32 = 0xFFFF;
 800a97c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a980:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a984:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a98e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800a994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a996:	4a55      	ldr	r2, [pc, #340]	@ (800aaec <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x360>)
 800a998:	fb82 1203 	smull	r1, r2, r2, r3
 800a99c:	1152      	asrs	r2, r2, #5
 800a99e:	17db      	asrs	r3, r3, #31
 800a9a0:	1ad3      	subs	r3, r2, r3
 800a9a2:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 800a9a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800a9aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a9ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9b0:	4413      	add	r3, r2
 800a9b2:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a9b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9ba:	db02      	blt.n	800a9c2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x236>
			itemp32 = 0xFFFF;
 800a9bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a9c0:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a9c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9c4:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	785b      	ldrb	r3, [r3, #1]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d17f      	bne.n	800aad2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>
 800a9d2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d07b      	beq.n	800aad2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	62bb      	str	r3, [r7, #40]	@ 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a9e6:	f107 0317 	add.w	r3, r7, #23
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f000 fdb8 	bl	800b562 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800a9f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9f4:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 800a9f8:	627b      	str	r3, [r7, #36]	@ 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800a9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9fc:	3308      	adds	r3, #8
 800a9fe:	643b      	str	r3, [r7, #64]	@ 0x40
		if ((histo_merge_nb > 0) &&
 800aa00:	7dfb      	ldrb	r3, [r7, #23]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d049      	beq.n	800aa9a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800aa06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa08:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
		if ((histo_merge_nb > 0) &&
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d144      	bne.n	800aa9a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800aa10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d041      	beq.n	800aa9a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(nXtalk != 0)) {
			cXtalk =
 800aa16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = ((long int)(nXtalk) - (long int)(cXtalk))/512;
 800aa1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa1e:	6a3b      	ldr	r3, [r7, #32]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	da01      	bge.n	800aa2a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x29e>
 800aa26:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800aa2a:	125b      	asrs	r3, r3, #9
 800aa2c:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d005      	beq.n	800aa40 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b4>
				(SmudgeFactor >= (long int)(pconfig->max_smudge_factor)))
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa38:	461a      	mov	r2, r3
			if ((max ==  0)||
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	db03      	blt.n	800aa48 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2bc>
				pout->new_xtalk_applied_flag = 0;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	2200      	movs	r2, #0
 800aa44:	719a      	strb	r2, [r3, #6]
 800aa46:	e028      	b.n	800aa9a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			else {
				incXtalk = nXtalk / max;
 800aa48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa50:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	63fb      	str	r3, [r7, #60]	@ 0x3c
				for (i = 0; i < max-1; i++) {
 800aa56:	2300      	movs	r3, #0
 800aa58:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800aa5c:	e014      	b.n	800aa88 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2fc>
					cval += incXtalk;
 800aa5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	4413      	add	r3, r2
 800aa64:	63fb      	str	r3, [r7, #60]	@ 0x3c
					*pcpo = cval + cval/100;
 800aa66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa68:	4a21      	ldr	r2, [pc, #132]	@ (800aaf0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x364>)
 800aa6a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa6e:	095a      	lsrs	r2, r3, #5
 800aa70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa72:	441a      	add	r2, r3
 800aa74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa76:	601a      	str	r2, [r3, #0]
					pcpo++;
 800aa78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa7a:	3304      	adds	r3, #4
 800aa7c:	643b      	str	r3, [r7, #64]	@ 0x40
				for (i = 0; i < max-1; i++) {
 800aa7e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800aa82:	3301      	adds	r3, #1
 800aa84:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800aa88:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d3e4      	bcc.n	800aa5e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				}
				*pcpo = nXtalk;
 800aa94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa98:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	799b      	ldrb	r3, [r3, #6]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d017      	beq.n	800aad2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa8:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800aab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab2:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800aaba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aabc:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	789b      	ldrb	r3, [r3, #2]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d105      	bne.n	800aad2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>

			pconfig->smudge_corr_apply_enabled = 0;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800aad2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d002      	beq.n	800aae0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x354>
		pout->smudge_corr_valid = 1;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2201      	movs	r2, #1
 800aade:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800aae0:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3758      	adds	r7, #88	@ 0x58
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	66666667 	.word	0x66666667
 800aaf0:	51eb851f 	.word	0x51eb851f

0800aaf4 <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800aaf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aaf8:	b0a2      	sub	sp, #136	@ 0x88
 800aafa:	af02      	add	r7, sp, #8
 800aafc:	6278      	str	r0, [r7, #36]	@ 0x24



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800aafe:	2300      	movs	r3, #0
 800ab00:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ab04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab06:	3318      	adds	r3, #24
 800ab08:	66bb      	str	r3, [r7, #104]	@ 0x68
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0c:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800ab10:	667b      	str	r3, [r7, #100]	@ 0x64
	VL53LX_smudge_corrector_config_t *pconfig =
 800ab12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab14:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800ab18:	3314      	adds	r3, #20
 800ab1a:	663b      	str	r3, [r7, #96]	@ 0x60
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800ab1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab1e:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 800ab22:	3318      	adds	r3, #24
 800ab24:	65fb      	str	r3, [r7, #92]	@ 0x5c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800ab26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab28:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800ab2c:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800ab2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab30:	657b      	str	r3, [r7, #84]	@ 0x54
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800ab32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab34:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800ab38:	653b      	str	r3, [r7, #80]	@ 0x50

	uint8_t	run_smudge_detection = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t merging_complete = 0;
 800ab40:	2300      	movs	r3, #0
 800ab42:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint8_t	run_nodetect = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t ambient_check = 0;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	int32_t itemp32 = 0;
 800ab52:	2300      	movs	r3, #0
 800ab54:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint64_t utemp64 = 0;
 800ab56:	f04f 0200 	mov.w	r2, #0
 800ab5a:	f04f 0300 	mov.w	r3, #0
 800ab5e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800ab62:	2300      	movs	r3, #0
 800ab64:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint32_t xtalk_offset_out = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	673b      	str	r3, [r7, #112]	@ 0x70
	uint32_t xtalk_offset_in = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t current_xtalk = 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t smudge_margin_adjusted = 0;
 800ab74:	2300      	movs	r3, #0
 800ab76:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t i = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t nodetect_index = 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800ab84:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800ab88:	4619      	mov	r1, r3
 800ab8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab8c:	f000 fce9 	bl	800b562 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800ab90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d004      	beq.n	800aba2 <VL53LX_dynamic_xtalk_correction_corrector+0xae>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800ab98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab9a:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
	if ((histo_merge_nb == 0) ||
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d002      	beq.n	800aba8 <VL53LX_dynamic_xtalk_correction_corrector+0xb4>
		histo_merge_nb = 1;
 800aba2:	2301      	movs	r3, #1
 800aba4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800aba8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800abaa:	f000 fb10 	bl	800b1ce <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800abae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00a      	beq.n	800abcc <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800abb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800abbe:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800abc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abc4:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800abc8:	429a      	cmp	r2, r3
 800abca:	d901      	bls.n	800abd0 <VL53LX_dynamic_xtalk_correction_corrector+0xdc>
 800abcc:	2301      	movs	r3, #1
 800abce:	e000      	b.n	800abd2 <VL53LX_dynamic_xtalk_correction_corrector+0xde>
 800abd0:	2300      	movs	r3, #0
 800abd2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800abd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800abd8:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d106      	bne.n	800abee <VL53LX_dynamic_xtalk_correction_corrector+0xfa>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800abe0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800abe2:	f893 2184 	ldrb.w	r2, [r3, #388]	@ 0x184
 800abe6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800abea:	429a      	cmp	r2, r3
 800abec:	d101      	bne.n	800abf2 <VL53LX_dynamic_xtalk_correction_corrector+0xfe>
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <VL53LX_dynamic_xtalk_correction_corrector+0x100>
 800abf2:	2300      	movs	r3, #0
	merging_complete =
 800abf4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800abf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abfa:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d10e      	bne.n	800ac1e <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pconfig->smudge_corr_enabled == 1) &&
 800ac00:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00a      	beq.n	800ac1e <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pR->xmonitor.range_status
 800ac08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac0a:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
		ambient_check &&
 800ac0e:	2b09      	cmp	r3, #9
 800ac10:	d105      	bne.n	800ac1e <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800ac12:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e000      	b.n	800ac20 <VL53LX_dynamic_xtalk_correction_corrector+0x12c>
 800ac1e:	2300      	movs	r3, #0
	run_smudge_detection =
 800ac20:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800ac24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac26:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
 800ac2a:	2b09      	cmp	r3, #9
 800ac2c:	f000 80a6 	beq.w	800ad7c <VL53LX_dynamic_xtalk_correction_corrector+0x288>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800ac30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac32:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	f040 80a1 	bne.w	800ad7c <VL53LX_dynamic_xtalk_correction_corrector+0x288>

		run_nodetect = 2;
 800ac3a:	2302      	movs	r3, #2
 800ac3c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800ac40:	2300      	movs	r3, #0
 800ac42:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800ac46:	e02d      	b.n	800aca4 <VL53LX_dynamic_xtalk_correction_corrector+0x1b0>
			if (pR->VL53LX_p_003[i].range_status ==
 800ac48:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800ac4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ac4e:	234c      	movs	r3, #76	@ 0x4c
 800ac50:	fb01 f303 	mul.w	r3, r1, r3
 800ac54:	4413      	add	r3, r2
 800ac56:	335e      	adds	r3, #94	@ 0x5e
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	2b09      	cmp	r3, #9
 800ac5c:	d11d      	bne.n	800ac9a <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800ac5e:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800ac62:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ac64:	234c      	movs	r3, #76	@ 0x4c
 800ac66:	fb01 f303 	mul.w	r3, r1, r3
 800ac6a:	4413      	add	r3, r2
 800ac6c:	335a      	adds	r3, #90	@ 0x5a
 800ac6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac72:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800ac74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac76:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	dc03      	bgt.n	800ac84 <VL53LX_dynamic_xtalk_correction_corrector+0x190>
					run_nodetect = 0;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800ac82:	e00a      	b.n	800ac9a <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				} else {
					if (run_nodetect == 2) {
 800ac84:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ac88:	2b02      	cmp	r3, #2
 800ac8a:	d106      	bne.n	800ac9a <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
						run_nodetect = 1;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						nodetect_index = i;
 800ac92:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ac96:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800ac9a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ac9e:	3301      	adds	r3, #1
 800aca0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800aca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aca6:	7c9a      	ldrb	r2, [r3, #18]
 800aca8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800acac:	4293      	cmp	r3, r2
 800acae:	d3cb      	bcc.n	800ac48 <VL53LX_dynamic_xtalk_correction_corrector+0x154>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800acb0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	d102      	bne.n	800acbe <VL53LX_dynamic_xtalk_correction_corrector+0x1ca>

			run_nodetect = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800acbe:	f897 106e 	ldrb.w	r1, [r7, #110]	@ 0x6e
		amr =
 800acc2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800acc4:	234c      	movs	r3, #76	@ 0x4c
 800acc6:	fb01 f303 	mul.w	r3, r1, r3
 800acca:	4413      	add	r3, r2
 800accc:	3348      	adds	r3, #72	@ 0x48
 800acce:	881b      	ldrh	r3, [r3, #0]
 800acd0:	867b      	strh	r3, [r7, #50]	@ 0x32

		if (run_nodetect == 1) {
 800acd2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d150      	bne.n	800ad7c <VL53LX_dynamic_xtalk_correction_corrector+0x288>




			utemp64 = 1000 * ((uint64_t)amr);
 800acda:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800acdc:	2200      	movs	r2, #0
 800acde:	469a      	mov	sl, r3
 800ace0:	4693      	mov	fp, r2
 800ace2:	4652      	mov	r2, sl
 800ace4:	465b      	mov	r3, fp
 800ace6:	f04f 0000 	mov.w	r0, #0
 800acea:	f04f 0100 	mov.w	r1, #0
 800acee:	0159      	lsls	r1, r3, #5
 800acf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800acf4:	0150      	lsls	r0, r2, #5
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	ebb2 040a 	subs.w	r4, r2, sl
 800acfe:	eb63 050b 	sbc.w	r5, r3, fp
 800ad02:	f04f 0200 	mov.w	r2, #0
 800ad06:	f04f 0300 	mov.w	r3, #0
 800ad0a:	00ab      	lsls	r3, r5, #2
 800ad0c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800ad10:	00a2      	lsls	r2, r4, #2
 800ad12:	4614      	mov	r4, r2
 800ad14:	461d      	mov	r5, r3
 800ad16:	eb14 080a 	adds.w	r8, r4, sl
 800ad1a:	eb45 090b 	adc.w	r9, r5, fp
 800ad1e:	f04f 0200 	mov.w	r2, #0
 800ad22:	f04f 0300 	mov.w	r3, #0
 800ad26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad32:	4690      	mov	r8, r2
 800ad34:	4699      	mov	r9, r3
 800ad36:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40


			utemp64 = utemp64 << 9;
 800ad3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800ad3e:	f04f 0200 	mov.w	r2, #0
 800ad42:	f04f 0300 	mov.w	r3, #0
 800ad46:	024b      	lsls	r3, r1, #9
 800ad48:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800ad4c:	0242      	lsls	r2, r0, #9
 800ad4e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800ad52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad56:	2200      	movs	r2, #0
 800ad58:	61bb      	str	r3, [r7, #24]
 800ad5a:	61fa      	str	r2, [r7, #28]
 800ad5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ad60:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800ad64:	4621      	mov	r1, r4
 800ad66:	428a      	cmp	r2, r1
 800ad68:	4629      	mov	r1, r5
 800ad6a:	418b      	sbcs	r3, r1
 800ad6c:	d203      	bcs.n	800ad76 <VL53LX_dynamic_xtalk_correction_corrector+0x282>
				run_nodetect = 1;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800ad74:	e002      	b.n	800ad7c <VL53LX_dynamic_xtalk_correction_corrector+0x288>
			else
				run_nodetect = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		}
	}


	if (run_smudge_detection) {
 800ad7c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f000 810b 	beq.w	800af9c <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>

		pint->nodetect_counter = 0;
 800ad86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad88:	2200      	movs	r2, #0
 800ad8a:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800ad8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad8e:	f7ff fb98 	bl	800a4c2 <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800ad92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad94:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800ad98:	63fb      	str	r3, [r7, #60]	@ 0x3c
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800ad9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800ada0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	63bb      	str	r3, [r7, #56]	@ 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800ada6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ada8:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	637b      	str	r3, [r7, #52]	@ 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800adae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800adb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb2:	1ad2      	subs	r2, r2, r3
 800adb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adb6:	4413      	add	r3, r2
 800adb8:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800adba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	da02      	bge.n	800adc6 <VL53LX_dynamic_xtalk_correction_corrector+0x2d2>
			itemp32 = itemp32 * (-1);
 800adc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adc2:	425b      	negs	r3, r3
 800adc4:	67bb      	str	r3, [r7, #120]	@ 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800adc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	461a      	mov	r2, r3
 800adcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adce:	4293      	cmp	r3, r2
 800add0:	dd0c      	ble.n	800adec <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800add2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted)) {
 800add4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 800add6:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800add8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adda:	429a      	cmp	r2, r3
 800addc:	da03      	bge.n	800ade6 <VL53LX_dynamic_xtalk_correction_corrector+0x2f2>
				pout->single_xtalk_delta_flag = 1;
 800adde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ade0:	2201      	movs	r2, #1
 800ade2:	709a      	strb	r2, [r3, #2]
 800ade4:	e002      	b.n	800adec <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800ade6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ade8:	2202      	movs	r2, #2
 800adea:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800adec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	1c5a      	adds	r2, r3, #1
 800adf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adf4:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800adf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d906      	bls.n	800ae10 <VL53LX_dynamic_xtalk_correction_corrector+0x31c>
			pout->sample_limit_exceeded_flag = 1;
 800ae02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae04:	2201      	movs	r2, #1
 800ae06:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800ae08:	2302      	movs	r3, #2
 800ae0a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800ae0e:	e014      	b.n	800ae3a <VL53LX_dynamic_xtalk_correction_corrector+0x346>
		} else {
			pint->accumulator = pint->accumulator +
 800ae10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae12:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ae16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae18:	2000      	movs	r0, #0
 800ae1a:	6139      	str	r1, [r7, #16]
 800ae1c:	6178      	str	r0, [r7, #20]
 800ae1e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ae22:	4621      	mov	r1, r4
 800ae24:	1851      	adds	r1, r2, r1
 800ae26:	60b9      	str	r1, [r7, #8]
 800ae28:	4629      	mov	r1, r5
 800ae2a:	eb43 0101 	adc.w	r1, r3, r1
 800ae2e:	60f9      	str	r1, [r7, #12]
 800ae30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae32:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ae36:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800ae3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d202      	bcs.n	800ae4c <VL53LX_dynamic_xtalk_correction_corrector+0x358>
			continue_processing = CONT_NEXT_LOOP;
 800ae46:	2301      	movs	r3, #1
 800ae48:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800ae4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae4e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ae52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2200      	movs	r2, #0
 800ae58:	603b      	str	r3, [r7, #0]
 800ae5a:	607a      	str	r2, [r7, #4]
 800ae5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae60:	f7f5 fa2e 	bl	80002c0 <__aeabi_uldivmod>
 800ae64:	4602      	mov	r2, r0
 800ae66:	460b      	mov	r3, r1
		xtalk_offset_out =
 800ae68:	4613      	mov	r3, r2
 800ae6a:	673b      	str	r3, [r7, #112]	@ 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800ae6c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ae6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae70:	1ad2      	subs	r2, r2, r3
 800ae72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae74:	4413      	add	r3, r2
 800ae76:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ae78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	da02      	bge.n	800ae84 <VL53LX_dynamic_xtalk_correction_corrector+0x390>
			itemp32 = itemp32 * (-1);
 800ae7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae80:	425b      	negs	r3, r3
 800ae82:	67bb      	str	r3, [r7, #120]	@ 0x78

		if (continue_processing == CONT_CONTINUE &&
 800ae84:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d112      	bne.n	800aeb2 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800ae8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae8e:	69db      	ldr	r3, [r3, #28]
 800ae90:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800ae92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae94:	4293      	cmp	r3, r2
 800ae96:	db0c      	blt.n	800aeb2 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800ae98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted))
 800ae9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 800ae9c:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800ae9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aea0:	429a      	cmp	r2, r3
 800aea2:	da03      	bge.n	800aeac <VL53LX_dynamic_xtalk_correction_corrector+0x3b8>
				pout->averaged_xtalk_delta_flag = 1;
 800aea4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aea6:	2201      	movs	r2, #1
 800aea8:	70da      	strb	r2, [r3, #3]
 800aeaa:	e002      	b.n	800aeb2 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800aeac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aeae:	2202      	movs	r2, #2
 800aeb0:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800aeb2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d108      	bne.n	800aecc <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800aeba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aebc:	69db      	ldr	r3, [r3, #28]
 800aebe:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800aec0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aec2:	4293      	cmp	r3, r2
 800aec4:	da02      	bge.n	800aecc <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			)

			continue_processing = CONT_RESET;
 800aec6:	2302      	movs	r3, #2
 800aec8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77



		pout->smudge_corr_clipped = 0;
 800aecc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aece:	2200      	movs	r2, #0
 800aed0:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800aed2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d112      	bne.n	800af00 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800aeda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aedc:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00e      	beq.n	800af00 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800aee2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800aeea:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800aeee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d905      	bls.n	800af00 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
				pout->smudge_corr_clipped = 1;
 800aef4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aef6:	2201      	movs	r2, #1
 800aef8:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800aefa:	2302      	movs	r3, #2
 800aefc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800af00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af02:	7c1b      	ldrb	r3, [r3, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d007      	beq.n	800af18 <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800af08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af0a:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800af0c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800af0e:	429a      	cmp	r2, r3
 800af10:	d902      	bls.n	800af18 <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			xtalk_offset_out =
 800af12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800af18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af1a:	7c1b      	ldrb	r3, [r3, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d107      	bne.n	800af30 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800af20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af22:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800af24:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800af26:	429a      	cmp	r2, r3
 800af28:	d202      	bcs.n	800af30 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			xtalk_offset_out =
 800af2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800af30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af32:	089b      	lsrs	r3, r3, #2
 800af34:	673b      	str	r3, [r7, #112]	@ 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800af36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af3c:	d301      	bcc.n	800af42 <VL53LX_dynamic_xtalk_correction_corrector+0x44e>
			xtalk_offset_out = 0x3FFFF;
 800af3e:	4b3f      	ldr	r3, [pc, #252]	@ (800b03c <VL53LX_dynamic_xtalk_correction_corrector+0x548>)
 800af40:	673b      	str	r3, [r7, #112]	@ 0x70


		if (continue_processing == CONT_CONTINUE) {
 800af42:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10d      	bne.n	800af66 <VL53LX_dynamic_xtalk_correction_corrector+0x472>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800af4a:	2300      	movs	r3, #0
 800af4c:	9301      	str	r3, [sp, #4]
 800af4e:	2301      	movs	r3, #1
 800af50:	9300      	str	r3, [sp, #0]
 800af52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800af54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800af56:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800af58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800af5a:	f7ff fc17 	bl	800a78c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800af5e:	2302      	movs	r3, #2
 800af60:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800af64:	e009      	b.n	800af7a <VL53LX_dynamic_xtalk_correction_corrector+0x486>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800af66:	2301      	movs	r3, #1
 800af68:	9301      	str	r3, [sp, #4]
 800af6a:	2301      	movs	r3, #1
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800af70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800af72:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800af74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800af76:	f7ff fc09 	bl	800a78c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800af7a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800af7e:	2b02      	cmp	r3, #2
 800af80:	d10c      	bne.n	800af9c <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>
			pint->accumulator = 0;
 800af82:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800af84:	f04f 0200 	mov.w	r2, #0
 800af88:	f04f 0300 	mov.w	r3, #0
 800af8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800af90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af92:	2200      	movs	r2, #0
 800af94:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800af96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af98:	2200      	movs	r2, #0
 800af9a:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800af9c:	2300      	movs	r3, #0
 800af9e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (run_nodetect == 1) {
 800afa2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d140      	bne.n	800b02c <VL53LX_dynamic_xtalk_correction_corrector+0x538>

		pint->nodetect_counter += 1;
 800afaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	1c5a      	adds	r2, r3, #1
 800afb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afb2:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800afb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afb6:	691a      	ldr	r2, [r3, #16]
 800afb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800afba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d202      	bcs.n	800afc6 <VL53LX_dynamic_xtalk_correction_corrector+0x4d2>
			continue_processing = CONT_NEXT_LOOP;
 800afc0:	2301      	movs	r3, #1
 800afc2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800afc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800afc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afca:	673b      	str	r3, [r7, #112]	@ 0x70

		if (continue_processing == CONT_CONTINUE) {
 800afcc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d110      	bne.n	800aff6 <VL53LX_dynamic_xtalk_correction_corrector+0x502>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800afd4:	2300      	movs	r3, #0
 800afd6:	9301      	str	r3, [sp, #4]
 800afd8:	2300      	movs	r3, #0
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800afde:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800afe0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800afe2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800afe4:	f7ff fbd2 	bl	800a78c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800afe8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800afea:	2202      	movs	r2, #2
 800afec:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800afee:	2302      	movs	r3, #2
 800aff0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800aff4:	e009      	b.n	800b00a <VL53LX_dynamic_xtalk_correction_corrector+0x516>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800aff6:	2301      	movs	r3, #1
 800aff8:	9301      	str	r3, [sp, #4]
 800affa:	2300      	movs	r3, #0
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b000:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b002:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b004:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b006:	f7ff fbc1 	bl	800a78c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800b00a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d10c      	bne.n	800b02c <VL53LX_dynamic_xtalk_correction_corrector+0x538>
			pint->accumulator = 0;
 800b012:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800b014:	f04f 0200 	mov.w	r2, #0
 800b018:	f04f 0300 	mov.w	r3, #0
 800b01c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800b020:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800b026:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b028:	2200      	movs	r2, #0
 800b02a:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800b02c:	f997 306d 	ldrsb.w	r3, [r7, #109]	@ 0x6d
}
 800b030:	4618      	mov	r0, r3
 800b032:	3780      	adds	r7, #128	@ 0x80
 800b034:	46bd      	mov	sp, r7
 800b036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b03a:	bf00      	nop
 800b03c:	0003ffff 	.word	0x0003ffff

0800b040 <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b048:	2300      	movs	r3, #0
 800b04a:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	3318      	adds	r3, #24
 800b050:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800b058:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b060:	2201      	movs	r2, #1
 800b062:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b06c:	2201      	movs	r2, #1
 800b06e:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b078:	2200      	movs	r2, #0
 800b07a:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b084:	2200      	movs	r2, #0
 800b086:	f8a3 2398 	strh.w	r2, [r3, #920]	@ 0x398
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b090:	461a      	mov	r2, r3
 800b092:	2364      	movs	r3, #100	@ 0x64
 800b094:	f8c2 339c 	str.w	r3, [r2, #924]	@ 0x39c
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b09e:	461a      	mov	r2, r3
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f8c2 33a0 	str.w	r3, [r2, #928]	@ 0x3a0
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	23c8      	movs	r3, #200	@ 0xc8
 800b0bc:	f8c2 33a8 	str.w	r3, [r2, #936]	@ 0x3a8
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b0cc:	f8c2 33ac 	str.w	r3, [r2, #940]	@ 0x3ac
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	f44f 739a 	mov.w	r3, #308	@ 0x134
 800b0dc:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800b0ec:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	2380      	movs	r3, #128	@ 0x80
 800b0fa:	f8c2 33b8 	str.w	r3, [r2, #952]	@ 0x3b8
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b104:	2200      	movs	r2, #0
 800b106:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b110:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b114:	f8a3 23be 	strh.w	r2, [r3, #958]	@ 0x3be
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b11e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b122:	f8a3 23c0 	strh.w	r2, [r3, #960]	@ 0x3c0
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 23c2 	strb.w	r2, [r3, #962]	@ 0x3c2
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b138:	461a      	mov	r2, r3
 800b13a:	f04f 735c 	mov.w	r3, #57671680	@ 0x3700000
 800b13e:	f8c2 33c4 	str.w	r3, [r2, #964]	@ 0x3c4
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b148:	461a      	mov	r2, r3
 800b14a:	2328      	movs	r3, #40	@ 0x28
 800b14c:	f8c2 33c8 	str.w	r3, [r2, #968]	@ 0x3c8
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b156:	461a      	mov	r2, r3
 800b158:	f44f 73cd 	mov.w	r3, #410	@ 0x19a
 800b15c:	f8c2 33cc 	str.w	r3, [r2, #972]	@ 0x3cc
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b166:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800b16a:	f8a3 23d0 	strh.w	r2, [r3, #976]	@ 0x3d0
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b174:	461a      	mov	r2, r3
 800b176:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800b17a:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b184:	461a      	mov	r2, r3
 800b186:	2300      	movs	r3, #0
 800b188:	f8c2 33d8 	str.w	r3, [r2, #984]	@ 0x3d8
	pdev->smudge_corrector_internals.required_samples = 0;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b192:	461a      	mov	r2, r3
 800b194:	2300      	movs	r3, #0
 800b196:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
	pdev->smudge_corrector_internals.accumulator = 0;
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	f503 539f 	add.w	r3, r3, #5088	@ 0x13e0
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	f04f 0200 	mov.w	r2, #0
 800b1a6:	f04f 0300 	mov.w	r3, #0
 800b1aa:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	f8c2 33e8 	str.w	r3, [r2, #1000]	@ 0x3e8


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f000 f806 	bl	800b1ce <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800b1c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3718      	adds	r7, #24
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b085      	sub	sp, #20
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800b1e0:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	2200      	movs	r2, #0
 800b204:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	2200      	movs	r2, #0
 800b20a:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	2200      	movs	r2, #0
 800b210:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	2200      	movs	r2, #0
 800b216:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	2200      	movs	r2, #0
 800b21c:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800b21e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b084      	sub	sp, #16
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b236:	2300      	movs	r3, #0
 800b238:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	3318      	adds	r3, #24
 800b23e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b246:	461a      	mov	r2, r3
 800b248:	2300      	movs	r3, #0
 800b24a:	f8c2 323c 	str.w	r3, [r2, #572]	@ 0x23c
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b254:	2200      	movs	r2, #0
 800b256:	f8a3 2240 	strh.w	r2, [r3, #576]	@ 0x240
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b260:	2200      	movs	r2, #0
 800b262:	f8a3 2242 	strh.w	r2, [r3, #578]	@ 0x242
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 800b26c:	3304      	adds	r3, #4
 800b26e:	2218      	movs	r2, #24
 800b270:	2100      	movs	r1, #0
 800b272:	4618      	mov	r0, r3
 800b274:	f00e fc6a 	bl	8019b4c <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800b278:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b28c:	2300      	movs	r3, #0
 800b28e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3318      	adds	r3, #24
 800b294:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b29c:	2203      	movs	r2, #3
 800b29e:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f883 23f5 	strb.w	r2, [r3, #1013]	@ 0x3f5
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2fe:	2200      	movs	r2, #0
 800b300:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc

	LOG_FUNCTION_END(status);

	return status;
 800b304:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b31c:	2300      	movs	r3, #0
 800b31e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	3318      	adds	r3, #24
 800b324:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b32c:	22ff      	movs	r2, #255	@ 0xff
 800b32e:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b344:	461a      	mov	r2, r3
 800b346:	2300      	movs	r3, #0
 800b348:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b352:	2200      	movs	r2, #0
 800b354:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b35e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 800b362:	2b00      	cmp	r3, #0
 800b364:	d007      	beq.n	800b376 <VL53LX_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b36c:	f893 23f4 	ldrb.w	r2, [r3, #1012]	@ 0x3f4
		pdev->stat_nvm.vhv_config__init =
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b37c:	f893 33f5 	ldrb.w	r3, [r3, #1013]	@ 0x3f5
 800b380:	2b00      	cmp	r3, #0
 800b382:	d007      	beq.n	800b394 <VL53LX_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b38a:	f893 23f5 	ldrb.w	r2, [r3, #1013]	@ 0x3f5
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	2200      	movs	r2, #0
 800b398:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327

	LOG_FUNCTION_END(status);

	return status;
 800b39c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	3318      	adds	r3, #24
 800b3b8:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f893 22e3 	ldrb.w	r2, [r3, #739]	@ 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3ca:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f893 22e0 	ldrb.w	r2, [r3, #736]	@ 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3da:	f883 23f5 	strb.w	r2, [r3, #1013]	@ 0x3f5


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f893 32e3 	ldrb.w	r3, [r3, #739]	@ 0x2e3
 800b3e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3e8:	b2da      	uxtb	r2, r3
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 800b3f6:	f003 0303 	and.w	r3, r3, #3
 800b3fa:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b402:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b40a:	4413      	add	r3, r2
 800b40c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2201      	movs	r2, #1
 800b418:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b422:	f893 235e 	ldrb.w	r2, [r3, #862]	@ 0x35e
	pdev->low_power_auto_data.first_run_phasecal_result =
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b42c:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b436:	f893 23f6 	ldrb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->gen_cfg.cal_config__vcsel_start =
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

	LOG_FUNCTION_END(status);

	return status;
 800b440:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800b450:	b480      	push	{r7}
 800b452:	b087      	sub	sp, #28
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	3318      	adds	r3, #24
 800b45c:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f203 3366 	addw	r3, r3, #870	@ 0x366
 800b464:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b466:	2300      	movs	r3, #0
 800b468:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	8a1b      	ldrh	r3, [r3, #16]
 800b46e:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	891b      	ldrh	r3, [r3, #8]
 800b474:	4413      	add	r3, r2
	utemp32a =
 800b476:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b47e:	d302      	bcc.n	800b486 <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800b480:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b484:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	041b      	lsls	r3, r3, #16
 800b48a:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8b3 336a 	ldrh.w	r3, [r3, #874]	@ 0x36a
 800b492:	2b00      	cmp	r3, #0
 800b494:	d102      	bne.n	800b49c <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b496:	23f1      	movs	r3, #241	@ 0xf1
 800b498:	75fb      	strb	r3, [r7, #23]
 800b49a:	e040      	b.n	800b51e <VL53LX_low_power_auto_update_DSS+0xce>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f8b3 336a 	ldrh.w	r3, [r3, #874]	@ 0x36a
 800b4a2:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4aa:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 800b4c0:	041b      	lsls	r3, r3, #16
 800b4c2:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4ca:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d102      	bne.n	800b4d8 <VL53LX_low_power_auto_update_DSS+0x88>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b4d2:	23f1      	movs	r3, #241	@ 0xf1
 800b4d4:	75fb      	strb	r3, [r7, #23]
 800b4d6:	e022      	b.n	800b51e <VL53LX_low_power_auto_update_DSS+0xce>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4de:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
			utemp32a = utemp32a /
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4e8:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4f0:	d302      	bcc.n	800b4f8 <VL53LX_low_power_auto_update_DSS+0xa8>
				utemp32a = 0xFFFF;
 800b4f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b4f6:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b502:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b50c:	f8b3 23fc 	ldrh.w	r2, [r3, #1020]	@ 0x3fc
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2202      	movs	r2, #2
 800b51a:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800b51e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b522:	f113 0f0f 	cmn.w	r3, #15
 800b526:	d114      	bne.n	800b552 <VL53LX_low_power_auto_update_DSS+0x102>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b52e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800b532:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b53c:	f8b3 23fc 	ldrh.w	r2, [r3, #1020]	@ 0x3fc
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2202      	movs	r2, #2
 800b54a:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800b54e:	2300      	movs	r3, #0
 800b550:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b552:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b556:	4618      	mov	r0, r3
 800b558:	371c      	adds	r7, #28
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800b562:	b480      	push	{r7}
 800b564:	b087      	sub	sp, #28
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
 800b56a:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	3318      	adds	r3, #24
 800b570:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b572:	2300      	movs	r3, #0
 800b574:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	f893 33d0 	ldrb.w	r3, [r3, #976]	@ 0x3d0
 800b580:	2b07      	cmp	r3, #7
 800b582:	bf0c      	ite	eq
 800b584:	2301      	moveq	r3, #1
 800b586:	2300      	movne	r3, #0
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b58c:	2300      	movs	r3, #0
 800b58e:	75fb      	strb	r3, [r7, #23]
 800b590:	e019      	b.n	800b5c6 <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800b592:	7df9      	ldrb	r1, [r7, #23]
 800b594:	7bbb      	ldrb	r3, [r7, #14]
 800b596:	6938      	ldr	r0, [r7, #16]
 800b598:	461a      	mov	r2, r3
 800b59a:	0052      	lsls	r2, r2, #1
 800b59c:	441a      	add	r2, r3
 800b59e:	0153      	lsls	r3, r2, #5
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	005b      	lsls	r3, r3, #1
 800b5a6:	440b      	add	r3, r1
 800b5a8:	019b      	lsls	r3, r3, #6
 800b5aa:	4413      	add	r3, r2
 800b5ac:	4403      	add	r3, r0
 800b5ae:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 800b5b2:	330c      	adds	r3, #12
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	dd02      	ble.n	800b5c0 <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800b5ba:	7dbb      	ldrb	r3, [r7, #22]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b5c0:	7dfb      	ldrb	r3, [r7, #23]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	75fb      	strb	r3, [r7, #23]
 800b5c6:	7dfb      	ldrb	r3, [r7, #23]
 800b5c8:	2b05      	cmp	r3, #5
 800b5ca:	d9e2      	bls.n	800b592 <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	7dba      	ldrb	r2, [r7, #22]
 800b5d0:	701a      	strb	r2, [r3, #0]

	return status;
 800b5d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	371c      	adds	r7, #28
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr

0800b5e2 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	b085      	sub	sp, #20
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800b5f0:	88fb      	ldrh	r3, [r7, #6]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d005      	beq.n	800b602 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b5f6:	88fb      	ldrh	r3, [r7, #6]
 800b5f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b5fc:	fb92 f3f3 	sdiv	r3, r2, r3
 800b600:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800b602:	68fb      	ldr	r3, [r7, #12]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800b610:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b614:	b089      	sub	sp, #36	@ 0x24
 800b616:	af00      	add	r7, sp, #0
 800b618:	60f8      	str	r0, [r7, #12]
 800b61a:	60b9      	str	r1, [r7, #8]
 800b61c:	607a      	str	r2, [r7, #4]
 800b61e:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800b620:	f04f 0200 	mov.w	r2, #0
 800b624:	f04f 0300 	mov.w	r3, #0
 800b628:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800b62c:	2300      	movs	r3, #0
 800b62e:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	fb02 f303 	mul.w	r3, r2, r3
 800b638:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	0b1b      	lsrs	r3, r3, #12
 800b63e:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	2200      	movs	r2, #0
 800b644:	469a      	mov	sl, r3
 800b646:	4693      	mov	fp, r2
 800b648:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	fb02 f303 	mul.w	r3, r2, r3
 800b654:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	091b      	lsrs	r3, r3, #4
 800b65a:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	2200      	movs	r2, #0
 800b660:	4698      	mov	r8, r3
 800b662:	4691      	mov	r9, r2
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	fb08 f203 	mul.w	r2, r8, r3
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	fb09 f303 	mul.w	r3, r9, r3
 800b670:	4413      	add	r3, r2
 800b672:	69ba      	ldr	r2, [r7, #24]
 800b674:	fba2 4508 	umull	r4, r5, r2, r8
 800b678:	442b      	add	r3, r5
 800b67a:	461d      	mov	r5, r3
 800b67c:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800b680:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800b684:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b688:	f04f 0200 	mov.w	r2, #0
 800b68c:	f04f 0300 	mov.w	r3, #0
 800b690:	0b02      	lsrs	r2, r0, #12
 800b692:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b696:	0b0b      	lsrs	r3, r1, #12
 800b698:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800b69c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d305      	bcc.n	800b6b0 <VL53LX_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800b6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a8:	f04f 0300 	mov.w	r3, #0
 800b6ac:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	617b      	str	r3, [r7, #20]

	return duration_us;
 800b6b4:	697b      	ldr	r3, [r7, #20]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3724      	adds	r7, #36	@ 0x24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b6c0:	4770      	bx	lr

0800b6c2 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800b6c2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6c6:	b096      	sub	sp, #88	@ 0x58
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	627a      	str	r2, [r7, #36]	@ 0x24
 800b6d0:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint64_t total_hist_counts  = 0;
 800b6d2:	f04f 0200 	mov.w	r2, #0
 800b6d6:	f04f 0300 	mov.w	r3, #0
 800b6da:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_per_spad     = 0;
 800b6de:	f04f 0200 	mov.w	r2, #0
 800b6e2:	f04f 0300 	mov.w	r3, #0
 800b6e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	uint32_t rate_per_spad_kcps = 0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	647b      	str	r3, [r7, #68]	@ 0x44





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800b6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6f0:	17da      	asrs	r2, r3, #31
 800b6f2:	469a      	mov	sl, r3
 800b6f4:	4693      	mov	fp, r2
 800b6f6:	4652      	mov	r2, sl
 800b6f8:	465b      	mov	r3, fp
 800b6fa:	f04f 0000 	mov.w	r0, #0
 800b6fe:	f04f 0100 	mov.w	r1, #0
 800b702:	0159      	lsls	r1, r3, #5
 800b704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b708:	0150      	lsls	r0, r2, #5
 800b70a:	4602      	mov	r2, r0
 800b70c:	460b      	mov	r3, r1
 800b70e:	ebb2 040a 	subs.w	r4, r2, sl
 800b712:	eb63 050b 	sbc.w	r5, r3, fp
 800b716:	f04f 0200 	mov.w	r2, #0
 800b71a:	f04f 0300 	mov.w	r3, #0
 800b71e:	00ab      	lsls	r3, r5, #2
 800b720:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800b724:	00a2      	lsls	r2, r4, #2
 800b726:	4614      	mov	r4, r2
 800b728:	461d      	mov	r5, r3
 800b72a:	eb14 080a 	adds.w	r8, r4, sl
 800b72e:	eb45 090b 	adc.w	r9, r5, fp
 800b732:	f04f 0200 	mov.w	r2, #0
 800b736:	f04f 0300 	mov.w	r3, #0
 800b73a:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800b73e:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800b742:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800b746:	4690      	mov	r8, r2
 800b748:	4699      	mov	r9, r3
 800b74a:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800b74e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00d      	beq.n	800b770 <VL53LX_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800b754:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b756:	2200      	movs	r2, #0
 800b758:	61bb      	str	r3, [r7, #24]
 800b75a:	61fa      	str	r2, [r7, #28]
 800b75c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b760:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800b764:	f7f4 fdac 	bl	80002c0 <__aeabi_uldivmod>
 800b768:	4602      	mov	r2, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800b770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b772:	2b00      	cmp	r3, #0
 800b774:	d02a      	beq.n	800b7cc <VL53LX_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b776:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800b77a:	f04f 0200 	mov.w	r2, #0
 800b77e:	f04f 0300 	mov.w	r3, #0
 800b782:	02cb      	lsls	r3, r1, #11
 800b784:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b788:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800b78a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b78c:	0849      	lsrs	r1, r1, #1
 800b78e:	2000      	movs	r0, #0
 800b790:	6139      	str	r1, [r7, #16]
 800b792:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b794:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b798:	4621      	mov	r1, r4
 800b79a:	1851      	adds	r1, r2, r1
 800b79c:	6039      	str	r1, [r7, #0]
 800b79e:	4629      	mov	r1, r5
 800b7a0:	eb43 0101 	adc.w	r1, r3, r1
 800b7a4:	6079      	str	r1, [r7, #4]
 800b7a6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b7aa:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	60bb      	str	r3, [r7, #8]
 800b7b4:	60fa      	str	r2, [r7, #12]
 800b7b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b7ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800b7be:	f7f4 fd7f 	bl	80002c0 <__aeabi_uldivmod>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800b7ca:	e00b      	b.n	800b7e4 <VL53LX_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800b7cc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800b7d0:	f04f 0200 	mov.w	r2, #0
 800b7d4:	f04f 0300 	mov.w	r3, #0
 800b7d8:	02cb      	lsls	r3, r1, #11
 800b7da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b7de:	02c2      	lsls	r2, r0, #11
 800b7e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800b7e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7e6:	647b      	str	r3, [r7, #68]	@ 0x44

	return rate_per_spad_kcps;
 800b7e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3758      	adds	r7, #88	@ 0x58
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b7f4 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b800:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b804:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800b806:	e002      	b.n	800b80e <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	089b      	lsrs	r3, r3, #2
 800b80c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	429a      	cmp	r2, r3
 800b814:	d8f8      	bhi.n	800b808 <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800b816:	e017      	b.n	800b848 <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	4413      	add	r3, r2
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	429a      	cmp	r2, r3
 800b822:	d30b      	bcc.n	800b83c <VL53LX_isqrt+0x48>
			num -= res + bit;
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	4413      	add	r3, r2
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	1ad3      	subs	r3, r2, r3
 800b82e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	085b      	lsrs	r3, r3, #1
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	4413      	add	r3, r2
 800b838:	60fb      	str	r3, [r7, #12]
 800b83a:	e002      	b.n	800b842 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	085b      	lsrs	r3, r3, #1
 800b840:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	089b      	lsrs	r3, r3, #2
 800b846:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1e4      	bne.n	800b818 <VL53LX_isqrt+0x24>
	}

	return res;
 800b84e:	68fb      	ldr	r3, [r7, #12]
}
 800b850:	4618      	mov	r0, r3
 800b852:	3714      	adds	r7, #20
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800b864:	2300      	movs	r3, #0
 800b866:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800b868:	2300      	movs	r3, #0
 800b86a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b872:	4618      	mov	r0, r3
 800b874:	f000 faa6 	bl	800bdc4 <VL53LX_decode_vcsel_period>
 800b878:	4603      	mov	r3, r0
	period = 2048 *
 800b87a:	02db      	lsls	r3, r3, #11
 800b87c:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800b888:	461a      	mov	r2, r3
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	4413      	add	r3, r2
 800b88e:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b896:	02db      	lsls	r3, r3, #11
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	4413      	add	r3, r2
 800b89c:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b8a4:	02db      	lsls	r3, r3, #11
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	1ad3      	subs	r3, r2, r3
 800b8aa:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d009      	beq.n	800b8c6 <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b8ba:	68b9      	ldr	r1, [r7, #8]
 800b8bc:	fb01 f202 	mul.w	r2, r1, r2
 800b8c0:	1a9b      	subs	r3, r3, r2
 800b8c2:	60fb      	str	r3, [r7, #12]
 800b8c4:	e001      	b.n	800b8ca <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	LOG_FUNCTION_END(0);
}
 800b8d4:	bf00      	nop
 800b8d6:	3710      	adds	r7, #16
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800b8ee:	6838      	ldr	r0, [r7, #0]
 800b8f0:	f000 fb91 	bl	800c016 <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7ff ff7a 	bl	800b7f4 <VL53LX_isqrt>
 800b900:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800b902:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	fb02 f303 	mul.w	r3, r2, r3
 800b90c:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	3307      	adds	r3, #7
 800b912:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	111b      	asrs	r3, r3, #4
 800b918:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b920:	68ba      	ldr	r2, [r7, #8]
 800b922:	4413      	add	r3, r2
 800b924:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum        = 0;
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2200      	movs	r2, #0
 800b932:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b936:	2300      	movs	r3, #0
 800b938:	73fb      	strb	r3, [r7, #15]
 800b93a:	e01e      	b.n	800b97a <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800b93c:	7bfa      	ldrb	r2, [r7, #15]
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	3206      	adds	r2, #6
 800b942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	429a      	cmp	r2, r3
 800b94a:	dd13      	ble.n	800b974 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b952:	7bf9      	ldrb	r1, [r7, #15]
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	3106      	adds	r1, #6
 800b958:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b95c:	441a      	add	r2, r3
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			pdata->number_of_ambient_samples++;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800b96a:	3301      	adds	r3, #1
 800b96c:	b2da      	uxtb	r2, r3
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b974:	7bfb      	ldrb	r3, [r7, #15]
 800b976:	3301      	adds	r3, #1
 800b978:	73fb      	strb	r3, [r7, #15]
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	7a9b      	ldrb	r3, [r3, #10]
 800b97e:	7bfa      	ldrb	r2, [r7, #15]
 800b980:	429a      	cmp	r2, r3
 800b982:	d3db      	bcc.n	800b93c <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d01c      	beq.n	800b9c8 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
		pdata->VL53LX_p_028 =
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800b9a0:	683a      	ldr	r2, [r7, #0]
 800b9a2:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
 800b9a6:	0852      	lsrs	r2, r2, #1
 800b9a8:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800b9aa:	441a      	add	r2, r3
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800b9b8:	683a      	ldr	r2, [r7, #0]
 800b9ba:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
		pdata->VL53LX_p_028 /=
 800b9be:	fb93 f2f2 	sdiv	r2, r3, r2
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800b9c8:	bf00      	nop
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	7b1b      	ldrb	r3, [r3, #12]
 800b9e8:	f003 0307 	and.w	r3, r3, #7
 800b9ec:	2b07      	cmp	r3, #7
 800b9ee:	d13a      	bne.n	800ba66 <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	73bb      	strb	r3, [r7, #14]
 800b9f8:	e01f      	b.n	800ba3a <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800b9fa:	7bbb      	ldrb	r3, [r7, #14]
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	4413      	add	r3, r2
 800ba00:	7b1b      	ldrb	r3, [r3, #12]
 800ba02:	f003 0307 	and.w	r3, r3, #7
 800ba06:	2b07      	cmp	r3, #7
 800ba08:	d014      	beq.n	800ba34 <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800ba0a:	7bba      	ldrb	r2, [r7, #14]
 800ba0c:	7b7b      	ldrb	r3, [r7, #13]
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	440a      	add	r2, r1
 800ba12:	7b11      	ldrb	r1, [r2, #12]
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	4413      	add	r3, r2
 800ba18:	460a      	mov	r2, r1
 800ba1a:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800ba1c:	7bba      	ldrb	r2, [r7, #14]
 800ba1e:	7b7b      	ldrb	r3, [r7, #13]
 800ba20:	6879      	ldr	r1, [r7, #4]
 800ba22:	440a      	add	r2, r1
 800ba24:	7c91      	ldrb	r1, [r2, #18]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	4413      	add	r3, r2
 800ba2a:	460a      	mov	r2, r1
 800ba2c:	749a      	strb	r2, [r3, #18]
				i++;
 800ba2e:	7b7b      	ldrb	r3, [r7, #13]
 800ba30:	3301      	adds	r3, #1
 800ba32:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800ba34:	7bbb      	ldrb	r3, [r7, #14]
 800ba36:	3301      	adds	r3, #1
 800ba38:	73bb      	strb	r3, [r7, #14]
 800ba3a:	7bbb      	ldrb	r3, [r7, #14]
 800ba3c:	2b05      	cmp	r3, #5
 800ba3e:	d9dc      	bls.n	800b9fa <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800ba40:	7b7b      	ldrb	r3, [r7, #13]
 800ba42:	73bb      	strb	r3, [r7, #14]
 800ba44:	e00c      	b.n	800ba60 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800ba46:	7bbb      	ldrb	r3, [r7, #14]
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	2210      	movs	r2, #16
 800ba4e:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800ba50:	7bbb      	ldrb	r3, [r7, #14]
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	4413      	add	r3, r2
 800ba56:	2200      	movs	r2, #0
 800ba58:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800ba5a:	7bbb      	ldrb	r3, [r7, #14]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	73bb      	strb	r3, [r7, #14]
 800ba60:	7bbb      	ldrb	r3, [r7, #14]
 800ba62:	2b05      	cmp	r3, #5
 800ba64:	d9ef      	bls.n	800ba46 <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	7adb      	ldrb	r3, [r3, #11]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d023      	beq.n	800bab6 <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	7adb      	ldrb	r3, [r3, #11]
 800ba72:	73fb      	strb	r3, [r7, #15]
 800ba74:	e00f      	b.n	800ba96 <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800ba76:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800ba78:	7bfb      	ldrb	r3, [r7, #15]
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	7ad2      	ldrb	r2, [r2, #11]
 800ba7e:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	3106      	adds	r1, #6
 800ba84:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	3206      	adds	r2, #6
 800ba8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
 800ba92:	3301      	adds	r3, #1
 800ba94:	73fb      	strb	r3, [r7, #15]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	7a5b      	ldrb	r3, [r3, #9]
 800ba9a:	7bfa      	ldrb	r2, [r7, #15]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d3ea      	bcc.n	800ba76 <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	72da      	strb	r2, [r3, #11]
	}
}
 800bab6:	bf00      	nop
 800bab8:	3714      	adds	r7, #20
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b084      	sub	sp, #16
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	4603      	mov	r3, r0
 800baca:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800bacc:	2300      	movs	r3, #0
 800bace:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800bad0:	2300      	movs	r3, #0
 800bad2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800bad4:	88fb      	ldrh	r3, [r7, #6]
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7ff fd83 	bl	800b5e2 <VL53LX_calc_pll_period_us>
 800badc:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800bae2:	f249 2257 	movw	r2, #37463	@ 0x9257
 800bae6:	fb02 f303 	mul.w	r3, r2, r3
 800baea:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800baf2:	0c1b      	lsrs	r3, r3, #16
 800baf4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800baf6:	68bb      	ldr	r3, [r7, #8]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b087      	sub	sp, #28
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800bb0e:	2307      	movs	r3, #7
 800bb10:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb1c:	db03      	blt.n	800bb26 <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800bb1e:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800bb22:	617b      	str	r3, [r7, #20]
 800bb24:	e004      	b.n	800bb30 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	dd01      	ble.n	800bb30 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb36:	dd02      	ble.n	800bb3e <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800bb38:	2303      	movs	r3, #3
 800bb3a:	613b      	str	r3, [r7, #16]
 800bb3c:	e001      	b.n	800bb42 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800bb3e:	2307      	movs	r3, #7
 800bb40:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d009      	beq.n	800bb5c <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800bb48:	697a      	ldr	r2, [r7, #20]
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	409a      	lsls	r2, r3
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	085b      	lsrs	r3, r3, #1
 800bb52:	441a      	add	r2, r3
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb5a:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb62:	dd02      	ble.n	800bb6a <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	011b      	lsls	r3, r3, #4
 800bb68:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb70:	d302      	bcc.n	800bb78 <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800bb72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb76:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800bb7c:	89fb      	ldrh	r3, [r7, #14]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	371c      	adds	r7, #28
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr

0800bb8a <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b087      	sub	sp, #28
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	60f8      	str	r0, [r7, #12]
 800bb92:	60b9      	str	r1, [r7, #8]
 800bb94:	603b      	str	r3, [r7, #0]
 800bb96:	4613      	mov	r3, r2
 800bb98:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800bba2:	88fb      	ldrh	r3, [r7, #6]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d010      	beq.n	800bbca <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	021a      	lsls	r2, r3, #8
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb2:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800bbb4:	88fb      	ldrh	r3, [r7, #6]
 800bbb6:	085b      	lsrs	r3, r3, #1
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800bbc0:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800bbc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbc6:	617b      	str	r3, [r7, #20]
 800bbc8:	e004      	b.n	800bbd4 <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800bbca:	68ba      	ldr	r2, [r7, #8]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	fa02 f303 	lsl.w	r3, r2, r3
 800bbd2:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800bbd4:	697a      	ldr	r2, [r7, #20]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d901      	bls.n	800bbe0 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800bbe4:	8a7b      	ldrh	r3, [r7, #18]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	371c      	adds	r7, #28
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
	...

0800bbf4 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800bbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf8:	b093      	sub	sp, #76	@ 0x4c
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	461e      	mov	r6, r3
 800bbfe:	4603      	mov	r3, r0
 800bc00:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800bc02:	460b      	mov	r3, r1
 800bc04:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800bc06:	4613      	mov	r3, r2
 800bc08:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800bc0a:	4633      	mov	r3, r6
 800bc0c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29


	uint32_t    pll_period_us = 0;
 800bc10:	2300      	movs	r3, #0
 800bc12:	643b      	str	r3, [r7, #64]	@ 0x40
	int64_t     tmp_long_int  = 0;
 800bc14:	f04f 0200 	mov.w	r2, #0
 800bc18:	f04f 0300 	mov.w	r3, #0
 800bc1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	int32_t     range_mm      = 0;
 800bc20:	2300      	movs	r3, #0
 800bc22:	647b      	str	r3, [r7, #68]	@ 0x44
	int32_t     range_mm_10   = 0;
 800bc24:	2300      	movs	r3, #0
 800bc26:	637b      	str	r3, [r7, #52]	@ 0x34



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800bc28:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7ff fcd9 	bl	800b5e2 <VL53LX_calc_pll_period_us>
 800bc30:	6438      	str	r0, [r7, #64]	@ 0x40



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800bc32:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bc34:	2200      	movs	r2, #0
 800bc36:	623b      	str	r3, [r7, #32]
 800bc38:	627a      	str	r2, [r7, #36]	@ 0x24
 800bc3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	61bb      	str	r3, [r7, #24]
 800bc40:	61fa      	str	r2, [r7, #28]
 800bc42:	6a3b      	ldr	r3, [r7, #32]
 800bc44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bc48:	4602      	mov	r2, r0
 800bc4a:	1a9b      	subs	r3, r3, r2
 800bc4c:	613b      	str	r3, [r7, #16]
 800bc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc50:	460a      	mov	r2, r1
 800bc52:	eb63 0302 	sbc.w	r3, r3, r2
 800bc56:	617b      	str	r3, [r7, #20]
 800bc58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc5c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800bc60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc62:	2200      	movs	r2, #0
 800bc64:	469a      	mov	sl, r3
 800bc66:	4693      	mov	fp, r2
 800bc68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc6a:	fb0a f203 	mul.w	r2, sl, r3
 800bc6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc70:	fb0b f303 	mul.w	r3, fp, r3
 800bc74:	4413      	add	r3, r2
 800bc76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bc78:	fba2 890a 	umull	r8, r9, r2, sl
 800bc7c:	444b      	add	r3, r9
 800bc7e:	4699      	mov	r9, r3
 800bc80:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
 800bc84:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800bc88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	da08      	bge.n	800bca2 <VL53LX_range_maths+0xae>
 800bc90:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800bc94:	1851      	adds	r1, r2, r1
 800bc96:	60b9      	str	r1, [r7, #8]
 800bc98:	f143 0300 	adc.w	r3, r3, #0
 800bc9c:	60fb      	str	r3, [r7, #12]
 800bc9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bca2:	f04f 0000 	mov.w	r0, #0
 800bca6:	f04f 0100 	mov.w	r1, #0
 800bcaa:	0a50      	lsrs	r0, r2, #9
 800bcac:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bcb0:	1259      	asrs	r1, r3, #9
 800bcb2:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800bcb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcb8:	f249 2257 	movw	r2, #37463	@ 0x9257
 800bcbc:	fb03 f202 	mul.w	r2, r3, r2
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	fb01 f303 	mul.w	r3, r1, r3
 800bcc8:	4413      	add	r3, r2
 800bcca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bccc:	f249 2157 	movw	r1, #37463	@ 0x9257
 800bcd0:	fba2 4501 	umull	r4, r5, r2, r1
 800bcd4:	442b      	add	r3, r5
 800bcd6:	461d      	mov	r5, r3
 800bcd8:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 800bcdc:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800bce0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	da07      	bge.n	800bcf8 <VL53LX_range_maths+0x104>
 800bce8:	4934      	ldr	r1, [pc, #208]	@ (800bdbc <VL53LX_range_maths+0x1c8>)
 800bcea:	1851      	adds	r1, r2, r1
 800bcec:	6039      	str	r1, [r7, #0]
 800bcee:	f143 0300 	adc.w	r3, r3, #0
 800bcf2:	607b      	str	r3, [r7, #4]
 800bcf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcf8:	f04f 0000 	mov.w	r0, #0
 800bcfc:	f04f 0100 	mov.w	r1, #0
 800bd00:	0d90      	lsrs	r0, r2, #22
 800bd02:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800bd06:	1599      	asrs	r1, r3, #22
 800bd08:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800bd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800bd10:	4413      	add	r3, r2
 800bd12:	647b      	str	r3, [r7, #68]	@ 0x44


	range_mm *= gain_factor;
 800bd14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd16:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800bd18:	fb02 f303 	mul.w	r3, r2, r3
 800bd1c:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm += 0x0400;
 800bd1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bd24:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm /= 0x0800;
 800bd26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	da01      	bge.n	800bd30 <VL53LX_range_maths+0x13c>
 800bd2c:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800bd30:	12db      	asrs	r3, r3, #11
 800bd32:	647b      	str	r3, [r7, #68]	@ 0x44


	if (fractional_bits == 0) {
 800bd34:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d130      	bne.n	800bd9e <VL53LX_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800bd3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd3e:	4613      	mov	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4413      	add	r3, r2
 800bd44:	005b      	lsls	r3, r3, #1
 800bd46:	637b      	str	r3, [r7, #52]	@ 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800bd48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	da00      	bge.n	800bd50 <VL53LX_range_maths+0x15c>
 800bd4e:	3303      	adds	r3, #3
 800bd50:	109b      	asrs	r3, r3, #2
 800bd52:	637b      	str	r3, [r7, #52]	@ 0x34
		if ((range_mm_10 % 10) < 5)
 800bd54:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bd56:	4b1a      	ldr	r3, [pc, #104]	@ (800bdc0 <VL53LX_range_maths+0x1cc>)
 800bd58:	fb83 2301 	smull	r2, r3, r3, r1
 800bd5c:	109a      	asrs	r2, r3, #2
 800bd5e:	17cb      	asrs	r3, r1, #31
 800bd60:	1ad2      	subs	r2, r2, r3
 800bd62:	4613      	mov	r3, r2
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	4413      	add	r3, r2
 800bd68:	005b      	lsls	r3, r3, #1
 800bd6a:	1aca      	subs	r2, r1, r3
 800bd6c:	2a04      	cmp	r2, #4
 800bd6e:	dc09      	bgt.n	800bd84 <VL53LX_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800bd70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd72:	4a13      	ldr	r2, [pc, #76]	@ (800bdc0 <VL53LX_range_maths+0x1cc>)
 800bd74:	fb82 1203 	smull	r1, r2, r2, r3
 800bd78:	1092      	asrs	r2, r2, #2
 800bd7a:	17db      	asrs	r3, r3, #31
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	b21b      	sxth	r3, r3
 800bd80:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd82:	e015      	b.n	800bdb0 <VL53LX_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800bd84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd86:	4a0e      	ldr	r2, [pc, #56]	@ (800bdc0 <VL53LX_range_maths+0x1cc>)
 800bd88:	fb82 1203 	smull	r1, r2, r2, r3
 800bd8c:	1092      	asrs	r2, r2, #2
 800bd8e:	17db      	asrs	r3, r3, #31
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	3301      	adds	r3, #1
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	b21b      	sxth	r3, r3
 800bd9a:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd9c:	e008      	b.n	800bdb0 <VL53LX_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800bd9e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d104      	bne.n	800bdb0 <VL53LX_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800bda6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bda8:	0fda      	lsrs	r2, r3, #31
 800bdaa:	4413      	add	r3, r2
 800bdac:	105b      	asrs	r3, r3, #1
 800bdae:	647b      	str	r3, [r7, #68]	@ 0x44

	return range_mm;
 800bdb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	374c      	adds	r7, #76	@ 0x4c
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdbc:	003fffff 	.word	0x003fffff
 800bdc0:	66666667 	.word	0x66666667

0800bdc4 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	4603      	mov	r3, r0
 800bdcc:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800bdd2:	79fb      	ldrb	r3, [r7, #7]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	005b      	lsls	r3, r3, #1
 800bdda:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800bddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3714      	adds	r7, #20
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr

0800bdea <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800bdea:	b480      	push	{r7}
 800bdec:	b083      	sub	sp, #12
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
 800bdf2:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
	phist->cal_config__vcsel_start =
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
	phist->VL53LX_p_015 =
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
	phist->phasecal_result__reference_phase   =
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
	phist->phasecal_result__vcsel_start       =
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
	phist->vcsel_width =
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
	phist->zero_distance_phase =
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	781a      	ldrb	r2, [r3, #0]
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	7a5a      	ldrb	r2, [r3, #9]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	685a      	ldr	r2, [r3, #4]
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	605a      	str	r2, [r3, #4]
}
 800be5a:	bf00      	nop
 800be5c:	370c      	adds	r7, #12
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr

0800be66 <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800be66:	b480      	push	{r7}
 800be68:	b087      	sub	sp, #28
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	60f8      	str	r0, [r7, #12]
 800be6e:	460b      	mov	r3, r1
 800be70:	607a      	str	r2, [r7, #4]
 800be72:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800be74:	2300      	movs	r3, #0
 800be76:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2203      	movs	r2, #3
 800be7c:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2203      	movs	r2, #3
 800be82:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2218      	movs	r2, #24
 800be9a:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800be9c:	897b      	ldrh	r3, [r7, #10]
 800be9e:	b2da      	uxtb	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status               = 0;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status              = 0;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count               = 0;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	pdata->cal_config__vcsel_start            = 0;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

	pdata->vcsel_width                        = 0;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->VL53LX_p_005                       = 0;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	pdata->VL53LX_p_015                = 0;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	pdata->total_periods_elapsed              = 0;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	pdata->min_bin_value                      = 0;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	pdata->max_bin_value                      = 0;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	pdata->zero_distance_phase                = 0;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	pdata->number_of_ambient_samples          = 0;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum                 = 0;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	pdata->VL53LX_p_028             = 0;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	82fb      	strh	r3, [r7, #22]
 800bf3e:	e009      	b.n	800bf54 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800bf40:	8afb      	ldrh	r3, [r7, #22]
 800bf42:	8afa      	ldrh	r2, [r7, #22]
 800bf44:	b2d1      	uxtb	r1, r2
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	4413      	add	r3, r2
 800bf4a:	460a      	mov	r2, r1
 800bf4c:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bf4e:	8afb      	ldrh	r3, [r7, #22]
 800bf50:	3301      	adds	r3, #1
 800bf52:	82fb      	strh	r3, [r7, #22]
 800bf54:	8afb      	ldrh	r3, [r7, #22]
 800bf56:	2b05      	cmp	r3, #5
 800bf58:	d9f2      	bls.n	800bf40 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	82fb      	strh	r3, [r7, #22]
 800bf5e:	e007      	b.n	800bf70 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800bf60:	8afb      	ldrh	r3, [r7, #22]
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	4413      	add	r3, r2
 800bf66:	2201      	movs	r2, #1
 800bf68:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bf6a:	8afb      	ldrh	r3, [r7, #22]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	82fb      	strh	r3, [r7, #22]
 800bf70:	8afb      	ldrh	r3, [r7, #22]
 800bf72:	2b05      	cmp	r3, #5
 800bf74:	d9f4      	bls.n	800bf60 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800bf76:	2300      	movs	r3, #0
 800bf78:	82fb      	strh	r3, [r7, #22]
 800bf7a:	e013      	b.n	800bfa4 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800bf7c:	8afa      	ldrh	r2, [r7, #22]
 800bf7e:	897b      	ldrh	r3, [r7, #10]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d206      	bcs.n	800bf92 <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800bf84:	8afa      	ldrh	r2, [r7, #22]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	3206      	adds	r2, #6
 800bf8a:	68f9      	ldr	r1, [r7, #12]
 800bf8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bf90:	e005      	b.n	800bf9e <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800bf92:	8afa      	ldrh	r2, [r7, #22]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	3206      	adds	r2, #6
 800bf98:	2100      	movs	r1, #0
 800bf9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800bf9e:	8afb      	ldrh	r3, [r7, #22]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	82fb      	strh	r3, [r7, #22]
 800bfa4:	8afb      	ldrh	r3, [r7, #22]
 800bfa6:	2b17      	cmp	r3, #23
 800bfa8:	d9e8      	bls.n	800bf7c <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800bfaa:	bf00      	nop
 800bfac:	bf00      	nop
 800bfae:	371c      	adds	r7, #28
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	607a      	str	r2, [r7, #4]
 800bfc4:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800bfc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	da10      	bge.n	800bff0 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
 800bfd0:	43db      	mvns	r3, r3
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	f003 0307 	and.w	r3, r3, #7
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	3308      	adds	r3, #8
 800bfdc:	b2da      	uxtb	r2, r3
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800bfe2:	7bfb      	ldrb	r3, [r7, #15]
 800bfe4:	3b80      	subs	r3, #128	@ 0x80
 800bfe6:	10db      	asrs	r3, r3, #3
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800bfee:	e00c      	b.n	800c00a <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
 800bff2:	f003 0307 	and.w	r3, r3, #7
 800bff6:	b2da      	uxtb	r2, r3
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800bffc:	7bfb      	ldrb	r3, [r7, #15]
 800bffe:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800c002:	10db      	asrs	r3, r3, #3
 800c004:	b2da      	uxtb	r2, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	701a      	strb	r2, [r3, #0]
}
 800c00a:	bf00      	nop
 800c00c:	3714      	adds	r7, #20
 800c00e:	46bd      	mov	sp, r7
 800c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c014:	4770      	bx	lr

0800c016 <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c016:	b480      	push	{r7}
 800c018:	b085      	sub	sp, #20
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800c01e:	2300      	movs	r3, #0
 800c020:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800c022:	2300      	movs	r3, #0
 800c024:	73fb      	strb	r3, [r7, #15]
 800c026:	e02c      	b.n	800c082 <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800c028:	7bfb      	ldrb	r3, [r7, #15]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d009      	beq.n	800c042 <VL53LX_hist_find_min_max_bin_values+0x2c>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800c034:	7bf9      	ldrb	r1, [r7, #15]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	3106      	adds	r1, #6
 800c03a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c03e:	429a      	cmp	r2, r3
 800c040:	db07      	blt.n	800c052 <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800c042:	7bfa      	ldrb	r2, [r7, #15]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	3206      	adds	r2, #6
 800c048:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800c052:	7bfb      	ldrb	r3, [r7, #15]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d009      	beq.n	800c06c <VL53LX_hist_find_min_max_bin_values+0x56>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800c05e:	7bf9      	ldrb	r1, [r7, #15]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	3106      	adds	r1, #6
 800c064:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c068:	429a      	cmp	r2, r3
 800c06a:	dc07      	bgt.n	800c07c <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800c06c:	7bfa      	ldrb	r2, [r7, #15]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	3206      	adds	r2, #6
 800c072:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800c07c:	7bfb      	ldrb	r3, [r7, #15]
 800c07e:	3301      	adds	r3, #1
 800c080:	73fb      	strb	r3, [r7, #15]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	7a9b      	ldrb	r3, [r3, #10]
 800c086:	7bfa      	ldrb	r2, [r7, #15]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d3cd      	bcc.n	800c028 <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800c08c:	bf00      	nop
 800c08e:	bf00      	nop
 800c090:	3714      	adds	r7, #20
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c09a:	b480      	push	{r7}
 800c09c:	b085      	sub	sp, #20
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	7adb      	ldrb	r3, [r3, #11]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d03a      	beq.n	800c124 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e



		pdata->ambient_events_sum = 0;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	73fb      	strb	r3, [r7, #15]
 800c0c4:	e00e      	b.n	800c0e4 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800c0cc:	7bf9      	ldrb	r1, [r7, #15]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	3106      	adds	r1, #6
 800c0d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c0d6:	441a      	add	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	73fb      	strb	r3, [r7, #15]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	7adb      	ldrb	r3, [r3, #11]
 800c0e8:	7bfa      	ldrb	r2, [r7, #15]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d3eb      	bcc.n	800c0c6 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	7ad2      	ldrb	r2, [r2, #11]
 800c104:	0852      	lsrs	r2, r2, #1
 800c106:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800c108:	441a      	add	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800c11a:	fb93 f2f2 	sdiv	r2, r3, r2
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800c124:	bf00      	nop
 800c126:	3714      	adds	r7, #20
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800c130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c134:	b0ca      	sub	sp, #296	@ 0x128
 800c136:	af00      	add	r7, sp, #0
 800c138:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 800c13c:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800c140:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c144:	4603      	mov	r3, r0
 800c146:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800c14a:	2300      	movs	r3, #0
 800c14c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

	uint32_t    pll_period_us       = 0;
 800c150:	2300      	movs	r3, #0
 800c152:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t    periods_elapsed     = 0;
 800c156:	2300      	movs	r3, #0
 800c158:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint32_t    tmp32               = 0;
 800c15c:	2300      	movs	r3, #0
 800c15e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint64_t    tmp64               = 0;
 800c162:	f04f 0200 	mov.w	r2, #0
 800c166:	f04f 0300 	mov.w	r3, #0
 800c16a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	uint32_t    amb_thres_delta     = 0;
 800c16e:	2300      	movs	r3, #0
 800c170:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800c174:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c178:	2300      	movs	r3, #0
 800c17a:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800c17c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c180:	2300      	movs	r3, #0
 800c182:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800c184:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c188:	2300      	movs	r3, #0
 800c18a:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800c18c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c190:	2300      	movs	r3, #0
 800c192:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800c194:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c198:	2300      	movs	r3, #0
 800c19a:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800c19c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800c1a4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	8493      	strh	r3, [r2, #36]	@ 0x24
	pdata->VL53LX_p_022            = 0;
 800c1ac:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	84d3      	strh	r3, [r2, #38]	@ 0x26

	*pambient_dmax_mm  = 0;
 800c1b4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800c1bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c1c0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f000 80e1 	beq.w	800c38c <VL53LX_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800c1ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f000 80da 	beq.w	800c38c <VL53LX_f_001+0x25c>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800c1d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c1dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7ff f9fe 	bl	800b5e2 <VL53LX_calc_pll_period_us>
 800c1e6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800c1ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800c1f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c200:	2110      	movs	r1, #16
 800c202:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800c206:	f7ff fa03 	bl	800b610 <VL53LX_duration_maths>
 800c20a:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800c20c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c210:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800c212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c216:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800c21a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4619      	mov	r1, r3
 800c222:	4610      	mov	r0, r2
 800c224:	f7ff fc6c 	bl	800bb00 <VL53LX_rate_maths>
 800c228:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800c22a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c22e:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800c230:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c234:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800c238:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c23c:	f8b3 107c 	ldrh.w	r1, [r3, #124]	@ 0x7c
 800c240:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	461a      	mov	r2, r3
 800c248:	f7ff fa3b 	bl	800b6c2 <VL53LX_events_per_spad_maths>
 800c24c:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800c24e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c252:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800c254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c258:	8adb      	ldrh	r3, [r3, #22]
 800c25a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c25e:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800c260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c264:	8adb      	ldrh	r3, [r3, #22]
 800c266:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c26a:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800c26c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c270:	695b      	ldr	r3, [r3, #20]
 800c272:	2b00      	cmp	r3, #0
 800c274:	f000 808a 	beq.w	800c38c <VL53LX_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800c278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c27c:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800c27e:	b29b      	uxth	r3, r3
 800c280:	2200      	movs	r2, #0
 800c282:	461c      	mov	r4, r3
 800c284:	4615      	mov	r5, r2
 800c286:	e9c7 4546 	strd	r4, r5, [r7, #280]	@ 0x118
			tmp64  *= 1000;
 800c28a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800c28e:	4622      	mov	r2, r4
 800c290:	462b      	mov	r3, r5
 800c292:	f04f 0000 	mov.w	r0, #0
 800c296:	f04f 0100 	mov.w	r1, #0
 800c29a:	0159      	lsls	r1, r3, #5
 800c29c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c2a0:	0150      	lsls	r0, r2, #5
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	ebb2 0804 	subs.w	r8, r2, r4
 800c2aa:	eb63 0905 	sbc.w	r9, r3, r5
 800c2ae:	f04f 0200 	mov.w	r2, #0
 800c2b2:	f04f 0300 	mov.w	r3, #0
 800c2b6:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800c2ba:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800c2be:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800c2c2:	4690      	mov	r8, r2
 800c2c4:	4699      	mov	r9, r3
 800c2c6:	eb18 0a04 	adds.w	sl, r8, r4
 800c2ca:	eb49 0b05 	adc.w	fp, r9, r5
 800c2ce:	f04f 0200 	mov.w	r2, #0
 800c2d2:	f04f 0300 	mov.w	r3, #0
 800c2d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c2da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c2de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c2e2:	4692      	mov	sl, r2
 800c2e4:	469b      	mov	fp, r3
 800c2e6:	e9c7 ab46 	strd	sl, fp, [r7, #280]	@ 0x118
			tmp64 <<= (11+1);
 800c2ea:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c2ee:	f04f 0000 	mov.w	r0, #0
 800c2f2:	f04f 0100 	mov.w	r1, #0
 800c2f6:	0319      	lsls	r1, r3, #12
 800c2f8:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c2fc:	0310      	lsls	r0, r2, #12
 800c2fe:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
			tmp32 = pdata->VL53LX_p_033/2;
 800c302:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c306:	695b      	ldr	r3, [r3, #20]
 800c308:	085b      	lsrs	r3, r3, #1
 800c30a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			tmp64 += (uint64_t)tmp32;
 800c30e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c312:	2200      	movs	r2, #0
 800c314:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c318:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c31c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c320:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 800c324:	4621      	mov	r1, r4
 800c326:	1851      	adds	r1, r2, r1
 800c328:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c32a:	4629      	mov	r1, r5
 800c32c:	eb43 0101 	adc.w	r1, r3, r1
 800c330:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800c332:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800c336:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
			tmp64 = do_division_u(tmp64,
 800c33a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c33e:	695b      	ldr	r3, [r3, #20]
 800c340:	2200      	movs	r2, #0
 800c342:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c346:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c34a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800c34e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c352:	f7f3 ffb5 	bl	80002c0 <__aeabi_uldivmod>
 800c356:	4602      	mov	r2, r0
 800c358:	460b      	mov	r3, r1
 800c35a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800c35e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c362:	8adb      	ldrh	r3, [r3, #22]
 800c364:	b29b      	uxth	r3, r3
 800c366:	2200      	movs	r2, #0
 800c368:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c36c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800c370:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c374:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800c378:	4621      	mov	r1, r4
 800c37a:	428a      	cmp	r2, r1
 800c37c:	4629      	mov	r1, r5
 800c37e:	418b      	sbcs	r3, r1
 800c380:	d204      	bcs.n	800c38c <VL53LX_f_001+0x25c>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800c382:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800c386:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c38a:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800c38c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c390:	881b      	ldrh	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	f000 82e9 	beq.w	800c96a <VL53LX_f_001+0x83a>
		(pbins->VL53LX_p_015        != 0) &&
 800c398:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c39c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	f000 82e2 	beq.w	800c96a <VL53LX_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800c3a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c3aa:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f000 82dc 	beq.w	800c96a <VL53LX_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800c3b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f000 82d5 	beq.w	800c96a <VL53LX_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800c3c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c3c4:	885b      	ldrh	r3, [r3, #2]
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3cc:	657a      	str	r2, [r7, #84]	@ 0x54
 800c3ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800c3d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 *= (1000 * 256);
 800c3d6:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800c3da:	4622      	mov	r2, r4
 800c3dc:	462b      	mov	r3, r5
 800c3de:	f04f 0000 	mov.w	r0, #0
 800c3e2:	f04f 0100 	mov.w	r1, #0
 800c3e6:	0159      	lsls	r1, r3, #5
 800c3e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c3ec:	0150      	lsls	r0, r2, #5
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	1b11      	subs	r1, r2, r4
 800c3f4:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c3f6:	eb63 0305 	sbc.w	r3, r3, r5
 800c3fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3fc:	f04f 0200 	mov.w	r2, #0
 800c400:	f04f 0300 	mov.w	r3, #0
 800c404:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800c408:	4649      	mov	r1, r9
 800c40a:	008b      	lsls	r3, r1, #2
 800c40c:	4641      	mov	r1, r8
 800c40e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c412:	4641      	mov	r1, r8
 800c414:	008a      	lsls	r2, r1, #2
 800c416:	4611      	mov	r1, r2
 800c418:	461a      	mov	r2, r3
 800c41a:	460b      	mov	r3, r1
 800c41c:	191b      	adds	r3, r3, r4
 800c41e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c420:	4613      	mov	r3, r2
 800c422:	eb45 0303 	adc.w	r3, r5, r3
 800c426:	647b      	str	r3, [r7, #68]	@ 0x44
 800c428:	f04f 0200 	mov.w	r2, #0
 800c42c:	f04f 0300 	mov.w	r3, #0
 800c430:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800c434:	4629      	mov	r1, r5
 800c436:	02cb      	lsls	r3, r1, #11
 800c438:	4621      	mov	r1, r4
 800c43a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800c43e:	4621      	mov	r1, r4
 800c440:	02ca      	lsls	r2, r1, #11
 800c442:	461c      	mov	r4, r3
 800c444:	4613      	mov	r3, r2
 800c446:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800c44a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c44e:	881b      	ldrh	r3, [r3, #0]
 800c450:	085b      	lsrs	r3, r3, #1
 800c452:	b29b      	uxth	r3, r3
 800c454:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp64 += (uint64_t)tmp32;
 800c458:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c45c:	2200      	movs	r2, #0
 800c45e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c462:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c466:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c46a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800c46e:	4621      	mov	r1, r4
 800c470:	1851      	adds	r1, r2, r1
 800c472:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c474:	4629      	mov	r1, r5
 800c476:	eb43 0101 	adc.w	r1, r3, r1
 800c47a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800c47c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800c480:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800c484:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c488:	881b      	ldrh	r3, [r3, #0]
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	2200      	movs	r2, #0
 800c48e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c492:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c496:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800c49a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c49e:	f7f3 ff0f 	bl	80002c0 <__aeabi_uldivmod>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800c4aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c4ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c4b2:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800c4b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c4b8:	691b      	ldr	r3, [r3, #16]
 800c4ba:	011a      	lsls	r2, r3, #4
 800c4bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c4c0:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c4c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4cc:	637a      	str	r2, [r7, #52]	@ 0x34
 800c4ce:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800c4d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800c4d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c4da:	695b      	ldr	r3, [r3, #20]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c4e2:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800c4e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c4ea:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800c4ee:	4622      	mov	r2, r4
 800c4f0:	fb02 f203 	mul.w	r2, r2, r3
 800c4f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	fb01 f303 	mul.w	r3, r1, r3
 800c4fe:	441a      	add	r2, r3
 800c500:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c504:	4621      	mov	r1, r4
 800c506:	fba3 1301 	umull	r1, r3, r3, r1
 800c50a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c50e:	460b      	mov	r3, r1
 800c510:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c514:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c518:	18d3      	adds	r3, r2, r3
 800c51a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c51e:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 800c522:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c526:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c52a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c52e:	8b5b      	ldrh	r3, [r3, #26]
 800c530:	b29b      	uxth	r3, r3
 800c532:	2200      	movs	r2, #0
 800c534:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c538:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c53c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c540:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c544:	4622      	mov	r2, r4
 800c546:	fb02 f203 	mul.w	r2, r2, r3
 800c54a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c54e:	4629      	mov	r1, r5
 800c550:	fb01 f303 	mul.w	r3, r1, r3
 800c554:	441a      	add	r2, r3
 800c556:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c55a:	4621      	mov	r1, r4
 800c55c:	fba3 1301 	umull	r1, r3, r3, r1
 800c560:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c564:	460b      	mov	r3, r1
 800c566:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c56e:	18d3      	adds	r3, r2, r3
 800c570:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c574:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800c578:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c57c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800c580:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c584:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800c588:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c58a:	f143 0300 	adc.w	r3, r3, #0
 800c58e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c590:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800c594:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800c598:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c59c:	f04f 0000 	mov.w	r0, #0
 800c5a0:	f04f 0100 	mov.w	r1, #0
 800c5a4:	0cd0      	lsrs	r0, r2, #19
 800c5a6:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800c5aa:	0cd9      	lsrs	r1, r3, #19
 800c5ac:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
		tmp64  +=  500;
 800c5b0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c5b4:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800c5b8:	6239      	str	r1, [r7, #32]
 800c5ba:	f143 0300 	adc.w	r3, r3, #0
 800c5be:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5c0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c5c4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800c5c8:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c5cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c5d0:	f04f 0300 	mov.w	r3, #0
 800c5d4:	f7f3 fe74 	bl	80002c0 <__aeabi_uldivmod>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800c5e0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c5e4:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800c5e8:	f173 0300 	sbcs.w	r3, r3, #0
 800c5ec:	d305      	bcc.n	800c5fa <VL53LX_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800c5ee:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800c5f2:	f04f 0300 	mov.w	r3, #0
 800c5f6:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800c5fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c5fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c602:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c604:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2200      	movs	r2, #0
 800c60c:	61bb      	str	r3, [r7, #24]
 800c60e:	61fa      	str	r2, [r7, #28]
 800c610:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c614:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800c618:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	2200      	movs	r2, #0
 800c620:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c624:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c628:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c62c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800c630:	4622      	mov	r2, r4
 800c632:	fb02 f203 	mul.w	r2, r2, r3
 800c636:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c63a:	4629      	mov	r1, r5
 800c63c:	fb01 f303 	mul.w	r3, r1, r3
 800c640:	441a      	add	r2, r3
 800c642:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c646:	4621      	mov	r1, r4
 800c648:	fba3 1301 	umull	r1, r3, r3, r1
 800c64c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c650:	460b      	mov	r3, r1
 800c652:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c65a:	18d3      	adds	r3, r2, r3
 800c65c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c660:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 800c664:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c668:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c66c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c670:	8b5b      	ldrh	r3, [r3, #26]
 800c672:	b29b      	uxth	r3, r3
 800c674:	2200      	movs	r2, #0
 800c676:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c67a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c67e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c682:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800c686:	4622      	mov	r2, r4
 800c688:	fb02 f203 	mul.w	r2, r2, r3
 800c68c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c690:	4629      	mov	r1, r5
 800c692:	fb01 f303 	mul.w	r3, r1, r3
 800c696:	441a      	add	r2, r3
 800c698:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c69c:	4621      	mov	r1, r4
 800c69e:	fba3 1301 	umull	r1, r3, r3, r1
 800c6a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c6ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c6b0:	18d3      	adds	r3, r2, r3
 800c6b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c6b6:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800c6ba:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c6be:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800c6c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c6c6:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800c6ca:	6139      	str	r1, [r7, #16]
 800c6cc:	f143 0300 	adc.w	r3, r3, #0
 800c6d0:	617b      	str	r3, [r7, #20]
 800c6d2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c6d6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800c6da:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c6de:	f04f 0000 	mov.w	r0, #0
 800c6e2:	f04f 0100 	mov.w	r1, #0
 800c6e6:	0cd0      	lsrs	r0, r2, #19
 800c6e8:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800c6ec:	0cd9      	lsrs	r1, r3, #19
 800c6ee:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800c6f2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c6fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800c6fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c700:	891b      	ldrh	r3, [r3, #8]
 800c702:	b29b      	uxth	r3, r3
 800c704:	2200      	movs	r2, #0
 800c706:	673b      	str	r3, [r7, #112]	@ 0x70
 800c708:	677a      	str	r2, [r7, #116]	@ 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800c70a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800c70e:	462b      	mov	r3, r5
 800c710:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c714:	4642      	mov	r2, r8
 800c716:	fb02 f203 	mul.w	r2, r2, r3
 800c71a:	464b      	mov	r3, r9
 800c71c:	4621      	mov	r1, r4
 800c71e:	fb01 f303 	mul.w	r3, r1, r3
 800c722:	4413      	add	r3, r2
 800c724:	4622      	mov	r2, r4
 800c726:	4641      	mov	r1, r8
 800c728:	fba2 1201 	umull	r1, r2, r2, r1
 800c72c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800c730:	460a      	mov	r2, r1
 800c732:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800c736:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800c73a:	4413      	add	r3, r2
 800c73c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c740:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c744:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800c748:	4622      	mov	r2, r4
 800c74a:	fb02 f203 	mul.w	r2, r2, r3
 800c74e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c752:	4629      	mov	r1, r5
 800c754:	fb01 f303 	mul.w	r3, r1, r3
 800c758:	4413      	add	r3, r2
 800c75a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c75e:	4621      	mov	r1, r4
 800c760:	fba2 1201 	umull	r1, r2, r2, r1
 800c764:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800c768:	460a      	mov	r2, r1
 800c76a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800c76e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800c772:	4413      	add	r3, r2
 800c774:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c778:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800c77c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c780:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800c784:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c788:	88db      	ldrh	r3, [r3, #6]
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	2200      	movs	r2, #0
 800c78e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c790:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c792:	f04f 0200 	mov.w	r2, #0
 800c796:	f04f 0300 	mov.w	r3, #0
 800c79a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800c79e:	4629      	mov	r1, r5
 800c7a0:	01cb      	lsls	r3, r1, #7
 800c7a2:	4621      	mov	r1, r4
 800c7a4:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	01ca      	lsls	r2, r1, #7
 800c7ac:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c7b0:	1884      	adds	r4, r0, r2
 800c7b2:	60bc      	str	r4, [r7, #8]
 800c7b4:	eb41 0303 	adc.w	r3, r1, r3
 800c7b8:	60fb      	str	r3, [r7, #12]
 800c7ba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c7be:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800c7c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c7c6:	88db      	ldrh	r3, [r3, #6]
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800c7ce:	667a      	str	r2, [r7, #100]	@ 0x64
 800c7d0:	f04f 0200 	mov.w	r2, #0
 800c7d4:	f04f 0300 	mov.w	r3, #0
 800c7d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800c7dc:	4629      	mov	r1, r5
 800c7de:	020b      	lsls	r3, r1, #8
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800c7e6:	4621      	mov	r1, r4
 800c7e8:	020a      	lsls	r2, r1, #8
 800c7ea:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c7ee:	f7f3 fd67 	bl	80002c0 <__aeabi_uldivmod>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800c7fa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c7fe:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800c802:	6039      	str	r1, [r7, #0]
 800c804:	f143 0300 	adc.w	r3, r3, #0
 800c808:	607b      	str	r3, [r7, #4]
 800c80a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c80e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64, 1000);
 800c812:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c816:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c81a:	f04f 0300 	mov.w	r3, #0
 800c81e:	f7f3 fd4f 	bl	80002c0 <__aeabi_uldivmod>
 800c822:	4602      	mov	r2, r0
 800c824:	460b      	mov	r3, r1
 800c826:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800c82a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c82e:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800c832:	f173 0300 	sbcs.w	r3, r3, #0
 800c836:	d305      	bcc.n	800c844 <VL53LX_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800c838:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800c83c:	f04f 0300 	mov.w	r3, #0
 800c840:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800c844:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c848:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c84c:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800c84e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c852:	69db      	ldr	r3, [r3, #28]
 800c854:	021b      	lsls	r3, r3, #8
 800c856:	4618      	mov	r0, r3
 800c858:	f7fe ffcc 	bl	800b7f4 <VL53LX_isqrt>
 800c85c:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800c860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c864:	785b      	ldrb	r3, [r3, #1]
 800c866:	461a      	mov	r2, r3
 800c868:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c86c:	fb02 f303 	mul.w	r3, r2, r3
 800c870:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124



		if (pdata->VL53LX_p_028 <
 800c874:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c878:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800c87a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800c87e:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800c880:	4293      	cmp	r3, r2
 800c882:	d218      	bcs.n	800c8b6 <VL53LX_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800c884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800c88c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c890:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800c892:	1ad3      	subs	r3, r2, r3
 800c894:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108


			amb_thres_delta <<= 8;
 800c898:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c89c:	021b      	lsls	r3, r3, #8
 800c89e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

			if (tmp32 < amb_thres_delta)
 800c8a2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800c8a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d203      	bcs.n	800c8b6 <VL53LX_f_001+0x786>
				tmp32 = amb_thres_delta;
 800c8ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c8b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800c8b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c8ba:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800c8bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c8c0:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c8c2:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c8c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c8c8:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c8ca:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800c8ce:	f000 f854 	bl	800c97a <VL53LX_f_002>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800c8d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c8da:	84da      	strh	r2, [r3, #38]	@ 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800c8dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c8e0:	6a1b      	ldr	r3, [r3, #32]
 800c8e2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800c8e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c8ea:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c8f4:	fb02 f303 	mul.w	r3, r2, r3
 800c8f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 += (1 << 3);
 800c8fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c900:	3308      	adds	r3, #8
 800c902:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 /= (1 << 4);
 800c906:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c90a:	091b      	lsrs	r3, r3, #4
 800c90c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800c910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c914:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800c916:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800c918:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c91c:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c91e:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c924:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c926:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800c92a:	f000 f826 	bl	800c97a <VL53LX_f_002>
 800c92e:	4603      	mov	r3, r0
 800c930:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800c932:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c936:	849a      	strh	r2, [r3, #36]	@ 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800c938:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c93c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c940:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c944:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c948:	429a      	cmp	r2, r3
 800c94a:	da07      	bge.n	800c95c <VL53LX_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800c94c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c950:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c954:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c958:	801a      	strh	r2, [r3, #0]
 800c95a:	e006      	b.n	800c96a <VL53LX_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800c95c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c960:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
 800c964:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c968:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c96a:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117

}
 800c96e:	4618      	mov	r0, r3
 800c970:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800c974:	46bd      	mov	sp, r7
 800c976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c97a <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b086      	sub	sp, #24
 800c97e:	af00      	add	r7, sp, #0
 800c980:	60f8      	str	r0, [r7, #12]
 800c982:	60b9      	str	r1, [r7, #8]
 800c984:	607a      	str	r2, [r7, #4]
 800c986:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800c988:	2300      	movs	r3, #0
 800c98a:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	fb03 f303 	mul.w	r3, r3, r3
 800c99c:	693a      	ldr	r2, [r7, #16]
 800c99e:	4413      	add	r3, r2
 800c9a0:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800c9a2:	6938      	ldr	r0, [r7, #16]
 800c9a4:	f7fe ff26 	bl	800b7f4 <VL53LX_isqrt>
 800c9a8:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800c9aa:	693a      	ldr	r2, [r7, #16]
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	011b      	lsls	r3, r3, #4
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fe ff1c 	bl	800b7f4 <VL53LX_isqrt>
 800c9bc:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	fb02 f303 	mul.w	r3, r2, r3
 800c9c6:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d009      	beq.n	800c9e2 <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800c9ce:	697a      	ldr	r2, [r7, #20]
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	005b      	lsls	r3, r3, #1
 800c9da:	697a      	ldr	r2, [r7, #20]
 800c9dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9e0:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800c9e2:	697b      	ldr	r3, [r7, #20]

}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3718      	adds	r7, #24
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2218      	movs	r2, #24
 800c9fc:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	73fb      	strb	r3, [r7, #15]
 800ca22:	e01f      	b.n	800ca64 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	4413      	add	r3, r2
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800ca2e:	7bfb      	ldrb	r3, [r7, #15]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	4413      	add	r3, r2
 800ca34:	2200      	movs	r2, #0
 800ca36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800ca3a:	7bfb      	ldrb	r3, [r7, #15]
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	4413      	add	r3, r2
 800ca40:	2200      	movs	r2, #0
 800ca42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800ca46:	7bfa      	ldrb	r2, [r7, #15]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	322e      	adds	r2, #46	@ 0x2e
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800ca52:	7bfa      	ldrb	r2, [r7, #15]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	3246      	adds	r2, #70	@ 0x46
 800ca58:	2100      	movs	r1, #0
 800ca5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800ca5e:	7bfb      	ldrb	r3, [r7, #15]
 800ca60:	3301      	adds	r3, #1
 800ca62:	73fb      	strb	r3, [r7, #15]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	785b      	ldrb	r3, [r3, #1]
 800ca68:	7bfa      	ldrb	r2, [r7, #15]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d3da      	bcc.n	800ca24 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2208      	movs	r2, #8
 800ca7a:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
	palgo->VL53LX_p_046             = 0;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	2118      	movs	r1, #24
 800ca90:	2000      	movs	r0, #0
 800ca92:	f7ff f9e8 	bl	800be66 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	2118      	movs	r1, #24
 800caa0:	2000      	movs	r0, #0
 800caa2:	f7ff f9e0 	bl	800be66 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800caac:	461a      	mov	r2, r3
 800caae:	2118      	movs	r1, #24
 800cab0:	2000      	movs	r0, #0
 800cab2:	f7ff f9d8 	bl	800be66 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800cabc:	461a      	mov	r2, r3
 800cabe:	2118      	movs	r1, #24
 800cac0:	2000      	movs	r0, #0
 800cac2:	f7ff f9d0 	bl	800be66 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800cacc:	461a      	mov	r2, r3
 800cace:	2118      	movs	r1, #24
 800cad0:	2000      	movs	r0, #0
 800cad2:	f7ff f9c8 	bl	800be66 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800cad6:	bf00      	nop
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cade:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cae2:	b090      	sub	sp, #64	@ 0x40
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	61b9      	str	r1, [r7, #24]
 800cae8:	617a      	str	r2, [r7, #20]
 800caea:	461a      	mov	r2, r3
 800caec:	4603      	mov	r3, r0
 800caee:	83fb      	strh	r3, [r7, #30]
 800caf0:	4613      	mov	r3, r2
 800caf2:	777b      	strb	r3, [r7, #29]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800caf4:	2300      	movs	r3, #0
 800caf6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t  lb            = 0;
 800cafa:	2300      	movs	r3, #0
 800cafc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t  VL53LX_p_001            = 0;
 800cb00:	2300      	movs	r3, #0
 800cb02:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	int64_t  tmp          = 0;
 800cb06:	f04f 0200 	mov.w	r2, #0
 800cb0a:	f04f 0300 	mov.w	r3, #0
 800cb0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	int32_t  amb_events   = 0;
 800cb12:	2300      	movs	r3, #0
 800cb14:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  VL53LX_p_018       = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	63bb      	str	r3, [r7, #56]	@ 0x38
	int32_t  samples      = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800cb1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb20:	7a5a      	ldrb	r2, [r3, #9]
 800cb22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb24:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800cb26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb28:	7a1a      	ldrb	r2, [r3, #8]
 800cb2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb2c:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800cb2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb30:	7a9a      	ldrb	r2, [r3, #10]
 800cb32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb34:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800cb36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb38:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800cb3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb3e:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800cb40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7ff f93c 	bl	800bdc4 <VL53LX_decode_vcsel_period>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800cb50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb52:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800cb54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cb5a:	17da      	asrs	r2, r3, #31
 800cb5c:	60bb      	str	r3, [r7, #8]
 800cb5e:	60fa      	str	r2, [r7, #12]
 800cb60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cb64:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800cb68:	8bfb      	ldrh	r3, [r7, #30]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	4698      	mov	r8, r3
 800cb6e:	4691      	mov	r9, r2
 800cb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb72:	fb08 f203 	mul.w	r2, r8, r3
 800cb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb78:	fb09 f303 	mul.w	r3, r9, r3
 800cb7c:	4413      	add	r3, r2
 800cb7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb80:	fba2 4508 	umull	r4, r5, r2, r8
 800cb84:	442b      	add	r3, r5
 800cb86:	461d      	mov	r5, r3
 800cb88:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
 800cb8c:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
	tmp += 2048;
 800cb90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cb94:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 800cb98:	f143 0b00 	adc.w	fp, r3, #0
 800cb9c:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
	tmp = do_division_s(tmp, 4096);
 800cba0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	da08      	bge.n	800cbba <VL53LX_f_006+0xdc>
 800cba8:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800cbac:	1851      	adds	r1, r2, r1
 800cbae:	6039      	str	r1, [r7, #0]
 800cbb0:	f143 0300 	adc.w	r3, r3, #0
 800cbb4:	607b      	str	r3, [r7, #4]
 800cbb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbba:	f04f 0000 	mov.w	r0, #0
 800cbbe:	f04f 0100 	mov.w	r1, #0
 800cbc2:	0b10      	lsrs	r0, r2, #12
 800cbc4:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800cbc8:	1319      	asrs	r1, r3, #12
 800cbca:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	amb_events = (int32_t)tmp;
 800cbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd0:	627b      	str	r3, [r7, #36]	@ 0x24



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cbd8:	e062      	b.n	800cca0 <VL53LX_f_006+0x1c2>

		VL53LX_p_001 = lb >> 2;
 800cbda:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cbde:	089b      	lsrs	r3, r3, #2
 800cbe0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800cbe4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800cbe8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cbea:	4413      	add	r3, r2
 800cbec:	7c9b      	ldrb	r3, [r3, #18]
 800cbee:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800cbf0:	6a3b      	ldr	r3, [r7, #32]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	dd4f      	ble.n	800cc96 <VL53LX_f_006+0x1b8>

			if (lb < pxtalk->VL53LX_p_021 &&
 800cbf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cbf8:	7a9b      	ldrb	r3, [r3, #10]
 800cbfa:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d20f      	bcs.n	800cc22 <VL53LX_f_006+0x144>
 800cc02:	7f7b      	ldrb	r3, [r7, #29]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d00c      	beq.n	800cc22 <VL53LX_f_006+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800cc08:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cc0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc0e:	3206      	adds	r2, #6
 800cc10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800cc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc16:	441a      	add	r2, r3
 800cc18:	6a3b      	ldr	r3, [r7, #32]
 800cc1a:	fb02 f303 	mul.w	r3, r2, r3
 800cc1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc20:	e004      	b.n	800cc2c <VL53LX_f_006+0x14e>
			else
				VL53LX_p_018 = samples *  amb_events;
 800cc22:	6a3b      	ldr	r3, [r7, #32]
 800cc24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc26:	fb02 f303 	mul.w	r3, r2, r3
 800cc2a:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7fe fde0 	bl	800b7f4 <VL53LX_isqrt>
 800cc34:	4603      	mov	r3, r0
 800cc36:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018 += (samples/2);
 800cc38:	6a3b      	ldr	r3, [r7, #32]
 800cc3a:	0fda      	lsrs	r2, r3, #31
 800cc3c:	4413      	add	r3, r2
 800cc3e:	105b      	asrs	r3, r3, #1
 800cc40:	461a      	mov	r2, r3
 800cc42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc44:	4413      	add	r3, r2
 800cc46:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= samples;
 800cc48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc4a:	6a3b      	ldr	r3, [r7, #32]
 800cc4c:	fb92 f3f3 	sdiv	r3, r2, r3
 800cc50:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 *= ambient_threshold_sigma;
 800cc52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc54:	69ba      	ldr	r2, [r7, #24]
 800cc56:	fb02 f303 	mul.w	r3, r2, r3
 800cc5a:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += 8;
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc5e:	3308      	adds	r3, #8
 800cc60:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= 16;
 800cc62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	da00      	bge.n	800cc6a <VL53LX_f_006+0x18c>
 800cc68:	330f      	adds	r3, #15
 800cc6a:	111b      	asrs	r3, r3, #4
 800cc6c:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += amb_events;
 800cc6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc72:	4413      	add	r3, r2
 800cc74:	63bb      	str	r3, [r7, #56]	@ 0x38

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800cc76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	da01      	bge.n	800cc82 <VL53LX_f_006+0x1a4>
				VL53LX_p_018 = min_ambient_threshold_events;
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	63bb      	str	r3, [r7, #56]	@ 0x38

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800cc82:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cc86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc88:	3216      	adds	r2, #22
 800cc8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cc8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800cc90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc94:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800cc96:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cca0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cca2:	7a9b      	ldrb	r3, [r3, #10]
 800cca4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d396      	bcc.n	800cbda <VL53LX_f_006+0xfc>

	}



	palgo->VL53LX_p_039 = 0;
 800ccac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ccae:	2200      	movs	r2, #0
 800ccb0:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800ccb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ccb4:	7a1b      	ldrb	r3, [r3, #8]
 800ccb6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ccba:	e033      	b.n	800cd24 <VL53LX_f_006+0x246>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800ccbc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ccc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ccc2:	3206      	adds	r2, #6
 800ccc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ccc8:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800cccc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ccce:	3116      	adds	r1, #22
 800ccd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	dd13      	ble.n	800cd00 <VL53LX_f_006+0x222>
			palgo->VL53LX_p_040[lb]      = 1;
 800ccd8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ccdc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ccde:	4413      	add	r3, r2
 800cce0:	2201      	movs	r2, #1
 800cce2:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800cce4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cce8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ccea:	4413      	add	r3, r2
 800ccec:	2201      	movs	r2, #1
 800ccee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			palgo->VL53LX_p_039++;
 800ccf2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ccf4:	791b      	ldrb	r3, [r3, #4]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ccfc:	711a      	strb	r2, [r3, #4]
 800ccfe:	e00c      	b.n	800cd1a <VL53LX_f_006+0x23c>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800cd00:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cd04:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cd06:	4413      	add	r3, r2
 800cd08:	2200      	movs	r2, #0
 800cd0a:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800cd0c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cd10:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cd12:	4413      	add	r3, r2
 800cd14:	2200      	movs	r2, #0
 800cd16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800cd1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cd1e:	3301      	adds	r3, #1
 800cd20:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cd24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd26:	7a9b      	ldrb	r3, [r3, #10]
 800cd28:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d3c5      	bcc.n	800ccbc <VL53LX_f_006+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cd30:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37

}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3740      	adds	r7, #64	@ 0x40
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cd3e <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cd3e:	b480      	push	{r7}
 800cd40:	b085      	sub	sp, #20
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cd46:	2300      	movs	r3, #0
 800cd48:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800cd52:	2300      	movs	r3, #0
 800cd54:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800cd5e:	2300      	movs	r3, #0
 800cd60:	73fb      	strb	r3, [r7, #15]
 800cd62:	e02d      	b.n	800cdc0 <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800cd64:	7bfb      	ldrb	r3, [r7, #15]
 800cd66:	3301      	adds	r3, #1
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	78d2      	ldrb	r2, [r2, #3]
 800cd6c:	fb93 f1f2 	sdiv	r1, r3, r2
 800cd70:	fb01 f202 	mul.w	r2, r1, r2
 800cd74:	1a9b      	subs	r3, r3, r2
 800cd76:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	789b      	ldrb	r3, [r3, #2]
 800cd7c:	7bfa      	ldrb	r2, [r7, #15]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d21b      	bcs.n	800cdba <VL53LX_f_007+0x7c>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	789b      	ldrb	r3, [r3, #2]
 800cd86:	7b3a      	ldrb	r2, [r7, #12]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d216      	bcs.n	800cdba <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cd8c:	7bfb      	ldrb	r3, [r7, #15]
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	4413      	add	r3, r2
 800cd92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d10f      	bne.n	800cdba <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800cd9a:	7b3b      	ldrb	r3, [r7, #12]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	4413      	add	r3, r2
 800cda0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d108      	bne.n	800cdba <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800cda8:	7bbb      	ldrb	r3, [r7, #14]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d105      	bne.n	800cdba <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	7bfa      	ldrb	r2, [r7, #15]
 800cdb2:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
				found = 1;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800cdba:	7bfb      	ldrb	r3, [r7, #15]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	73fb      	strb	r3, [r7, #15]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	78db      	ldrb	r3, [r3, #3]
 800cdc4:	7bfa      	ldrb	r2, [r7, #15]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d3cc      	bcc.n	800cd64 <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cdca:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3714      	adds	r7, #20
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cdda:	b480      	push	{r7}
 800cddc:	b085      	sub	sp, #20
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cde2:	2300      	movs	r3, #0
 800cde4:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800cde6:	2300      	movs	r3, #0
 800cde8:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800cdea:	2300      	movs	r3, #0
 800cdec:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800cdf8:	73fb      	strb	r3, [r7, #15]
 800cdfa:	e05a      	b.n	800ceb2 <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	78da      	ldrb	r2, [r3, #3]
 800ce00:	7bfb      	ldrb	r3, [r7, #15]
 800ce02:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce06:	fb01 f202 	mul.w	r2, r1, r2
 800ce0a:	1a9b      	subs	r3, r3, r2
 800ce0c:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800ce0e:	7bfb      	ldrb	r3, [r7, #15]
 800ce10:	3301      	adds	r3, #1
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	78d2      	ldrb	r2, [r2, #3]
 800ce16:	fb93 f1f2 	sdiv	r1, r3, r2
 800ce1a:	fb01 f202 	mul.w	r2, r1, r2
 800ce1e:	1a9b      	subs	r3, r3, r2
 800ce20:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	789b      	ldrb	r3, [r3, #2]
 800ce26:	7b7a      	ldrb	r2, [r7, #13]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d23f      	bcs.n	800ceac <VL53LX_f_008+0xd2>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	789b      	ldrb	r3, [r3, #2]
 800ce30:	7b3a      	ldrb	r2, [r7, #12]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d23a      	bcs.n	800ceac <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800ce36:	7b7b      	ldrb	r3, [r7, #13]
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d10e      	bne.n	800ce62 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800ce44:	7b3b      	ldrb	r3, [r7, #12]
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	4413      	add	r3, r2
 800ce4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d107      	bne.n	800ce62 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800ce58:	3301      	adds	r3, #1
 800ce5a:	b2da      	uxtb	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f893 217a 	ldrb.w	r2, [r3, #378]	@ 0x17a
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d905      	bls.n	800ce7e <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f893 2179 	ldrb.w	r2, [r3, #377]	@ 0x179
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800ce7e:	7b7b      	ldrb	r3, [r7, #13]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	4413      	add	r3, r2
 800ce84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d009      	beq.n	800cea0 <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800ce8c:	7b7b      	ldrb	r3, [r7, #13]
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	f892 117a 	ldrb.w	r1, [r2, #378]	@ 0x17a
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	4413      	add	r3, r2
 800ce98:	460a      	mov	r2, r1
 800ce9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ce9e:	e005      	b.n	800ceac <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800cea0:	7b7b      	ldrb	r3, [r7, #13]
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	4413      	add	r3, r2
 800cea6:	2200      	movs	r2, #0
 800cea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		lb++) {
 800ceac:	7bfb      	ldrb	r3, [r7, #15]
 800ceae:	3301      	adds	r3, #1
 800ceb0:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800ceb2:	7bfa      	ldrb	r2, [r7, #15]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800ceba:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800cec0:	440b      	add	r3, r1
 800cec2:	429a      	cmp	r2, r3
 800cec4:	db9a      	blt.n	800cdfc <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800cec6:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3714      	adds	r7, #20
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr

0800ced6 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800ced6:	b480      	push	{r7}
 800ced8:	b087      	sub	sp, #28
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cede:	2300      	movs	r3, #0
 800cee0:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800cee2:	2300      	movs	r3, #0
 800cee4:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800cee6:	2300      	movs	r3, #0
 800cee8:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800ceea:	2300      	movs	r3, #0
 800ceec:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800ceee:	2300      	movs	r3, #0
 800cef0:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800cef2:	2300      	movs	r3, #0
 800cef4:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	78db      	ldrb	r3, [r3, #3]
 800cefa:	3b01      	subs	r3, #1
 800cefc:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800cefe:	7cbb      	ldrb	r3, [r7, #18]
 800cf00:	085b      	lsrs	r3, r3, #1
 800cf02:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800cf0a:	75fb      	strb	r3, [r7, #23]
 800cf0c:	e0a2      	b.n	800d054 <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	78da      	ldrb	r2, [r3, #3]
 800cf12:	7dfb      	ldrb	r3, [r7, #23]
 800cf14:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf18:	fb01 f202 	mul.w	r2, r1, r2
 800cf1c:	1a9b      	subs	r3, r3, r2
 800cf1e:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800cf20:	7dfb      	ldrb	r3, [r7, #23]
 800cf22:	3301      	adds	r3, #1
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	78d2      	ldrb	r2, [r2, #3]
 800cf28:	fb93 f1f2 	sdiv	r1, r3, r2
 800cf2c:	fb01 f202 	mul.w	r2, r1, r2
 800cf30:	1a9b      	subs	r3, r3, r2
 800cf32:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	789b      	ldrb	r3, [r3, #2]
 800cf38:	7d7a      	ldrb	r2, [r7, #21]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	f080 8087 	bcs.w	800d04e <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800cf44:	7d3a      	ldrb	r2, [r7, #20]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	f080 8081 	bcs.w	800d04e <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800cf4c:	7d7b      	ldrb	r3, [r7, #21]
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	4413      	add	r3, r2
 800cf52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d12f      	bne.n	800cfba <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800cf5a:	7d3b      	ldrb	r3, [r7, #20]
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	4413      	add	r3, r2
 800cf60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d028      	beq.n	800cfba <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800cf68:	7d3b      	ldrb	r3, [r7, #20]
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cf72:	3b01      	subs	r3, #1
 800cf74:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800cf7c:	7cfa      	ldrb	r2, [r7, #19]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d21b      	bcs.n	800cfba <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cf82:	7cfa      	ldrb	r2, [r7, #19]
 800cf84:	4613      	mov	r3, r2
 800cf86:	00db      	lsls	r3, r3, #3
 800cf88:	4413      	add	r3, r2
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	4413      	add	r3, r2
 800cf94:	3304      	adds	r3, #4
 800cf96:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	7dfa      	ldrb	r2, [r7, #23]
 800cf9c:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800cf9e:	7dfb      	ldrb	r3, [r7, #23]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	22ff      	movs	r2, #255	@ 0xff
 800cfac:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800cfba:	7d7b      	ldrb	r3, [r7, #21]
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d042      	beq.n	800d04e <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800cfc8:	7d3b      	ldrb	r3, [r7, #20]
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	4413      	add	r3, r2
 800cfce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d13b      	bne.n	800d04e <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800cfd6:	7d7b      	ldrb	r3, [r7, #21]
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	4413      	add	r3, r2
 800cfdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cfe0:	3b01      	subs	r3, #1
 800cfe2:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800cfea:	7cfa      	ldrb	r2, [r7, #19]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d22e      	bcs.n	800d04e <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cff0:	7cfa      	ldrb	r2, [r7, #19]
 800cff2:	4613      	mov	r3, r2
 800cff4:	00db      	lsls	r3, r3, #3
 800cff6:	4413      	add	r3, r2
 800cff8:	009b      	lsls	r3, r3, #2
 800cffa:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	4413      	add	r3, r2
 800d002:	3304      	adds	r3, #4
 800d004:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	7dfa      	ldrb	r2, [r7, #23]
 800d00a:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800d00c:	7dfb      	ldrb	r3, [r7, #23]
 800d00e:	3301      	adds	r3, #1
 800d010:	b2da      	uxtb	r2, r3
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800d01e:	1ad3      	subs	r3, r2, r3
 800d020:	b2db      	uxtb	r3, r3
 800d022:	3301      	adds	r3, #1
 800d024:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800d032:	1ad3      	subs	r3, r2, r3
 800d034:	b2db      	uxtb	r3, r3
 800d036:	3301      	adds	r3, #1
 800d038:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	799b      	ldrb	r3, [r3, #6]
 800d042:	7cba      	ldrb	r2, [r7, #18]
 800d044:	429a      	cmp	r2, r3
 800d046:	d202      	bcs.n	800d04e <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	7cba      	ldrb	r2, [r7, #18]
 800d04c:	719a      	strb	r2, [r3, #6]
		blb++) {
 800d04e:	7dfb      	ldrb	r3, [r7, #23]
 800d050:	3301      	adds	r3, #1
 800d052:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800d054:	7dfa      	ldrb	r2, [r7, #23]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800d05c:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800d062:	440b      	add	r3, r1
 800d064:	429a      	cmp	r2, r3
 800d066:	f6ff af52 	blt.w	800cf0e <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d06a:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800d06e:	4618      	mov	r0, r3
 800d070:	371c      	adds	r7, #28
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr

0800d07a <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b090      	sub	sp, #64	@ 0x40
 800d07e:	af00      	add	r7, sp, #0
 800d080:	4603      	mov	r3, r0
 800d082:	6039      	str	r1, [r7, #0]
 800d084:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d086:	2300      	movs	r3, #0
 800d088:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800d08c:	f107 030c 	add.w	r3, r7, #12
 800d090:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800d092:	2300      	movs	r3, #0
 800d094:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t swapped = 1;
 800d098:	2301      	movs	r3, #1
 800d09a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d965      	bls.n	800d174 <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800d0a8:	e05f      	b.n	800d16a <VL53LX_f_016+0xf0>

		swapped = 0;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d0b6:	e051      	b.n	800d15c <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800d0b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d0bc:	1e5a      	subs	r2, r3, #1
 800d0be:	4613      	mov	r3, r2
 800d0c0:	00db      	lsls	r3, r3, #3
 800d0c2:	4413      	add	r3, r2
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d0ca:	683a      	ldr	r2, [r7, #0]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	3304      	adds	r3, #4
 800d0d0:	637b      	str	r3, [r7, #52]	@ 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800d0d2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	00db      	lsls	r3, r3, #3
 800d0da:	4413      	add	r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d0e2:	683a      	ldr	r2, [r7, #0]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	3304      	adds	r3, #4
 800d0e8:	633b      	str	r3, [r7, #48]	@ 0x30



			if (target_order
 800d0ea:	79fb      	ldrb	r3, [r7, #7]
 800d0ec:	2b02      	cmp	r3, #2
 800d0ee:	d118      	bne.n	800d122 <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800d0f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0f2:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800d0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f6:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	da2a      	bge.n	800d152 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800d0fc:	2224      	movs	r2, #36	@ 0x24
 800d0fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d100:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d102:	f00c fe08 	bl	8019d16 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800d106:	2224      	movs	r2, #36	@ 0x24
 800d108:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d10a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d10c:	f00c fe03 	bl	8019d16 <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800d110:	2224      	movs	r2, #36	@ 0x24
 800d112:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d114:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d116:	f00c fdfe 	bl	8019d16 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800d11a:	2301      	movs	r3, #1
 800d11c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800d120:	e017      	b.n	800d152 <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800d122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d124:	699a      	ldr	r2, [r3, #24]
 800d126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d128:	699b      	ldr	r3, [r3, #24]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d911      	bls.n	800d152 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800d12e:	2224      	movs	r2, #36	@ 0x24
 800d130:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d132:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d134:	f00c fdef 	bl	8019d16 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800d138:	2224      	movs	r2, #36	@ 0x24
 800d13a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d13c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d13e:	f00c fdea 	bl	8019d16 <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800d142:	2224      	movs	r2, #36	@ 0x24
 800d144:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d146:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d148:	f00c fde5 	bl	8019d16 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800d14c:	2301      	movs	r3, #1
 800d14e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800d152:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d156:	3301      	adds	r3, #1
 800d158:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800d162:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d166:	429a      	cmp	r2, r3
 800d168:	d3a6      	bcc.n	800d0b8 <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800d16a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d19b      	bne.n	800d0aa <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800d172:	e000      	b.n	800d176 <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800d174:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800d176:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d

}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3740      	adds	r7, #64	@ 0x40
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d182:	b480      	push	{r7}
 800d184:	b087      	sub	sp, #28
 800d186:	af00      	add	r7, sp, #0
 800d188:	4603      	mov	r3, r0
 800d18a:	60b9      	str	r1, [r7, #8]
 800d18c:	607a      	str	r2, [r7, #4]
 800d18e:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d190:	2300      	movs	r3, #0
 800d192:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d194:	2300      	movs	r3, #0
 800d196:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d198:	2300      	movs	r3, #0
 800d19a:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d19c:	7bfa      	ldrb	r2, [r7, #15]
 800d19e:	4613      	mov	r3, r2
 800d1a0:	00db      	lsls	r3, r3, #3
 800d1a2:	4413      	add	r3, r2
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	3304      	adds	r3, #4
 800d1b0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	75fb      	strb	r3, [r7, #23]
 800d1c4:	e01c      	b.n	800d200 <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	78da      	ldrb	r2, [r3, #3]
 800d1ca:	7dfb      	ldrb	r3, [r7, #23]
 800d1cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1d0:	fb01 f202 	mul.w	r2, r1, r2
 800d1d4:	1a9b      	subs	r3, r3, r2
 800d1d6:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	68da      	ldr	r2, [r3, #12]
 800d1dc:	7d79      	ldrb	r1, [r7, #21]
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	3106      	adds	r1, #6
 800d1e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d1e6:	441a      	add	r2, r3
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	689a      	ldr	r2, [r3, #8]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	441a      	add	r2, r3
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d1fa:	7dfb      	ldrb	r3, [r7, #23]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	75fb      	strb	r3, [r7, #23]
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	791b      	ldrb	r3, [r3, #4]
 800d204:	7dfa      	ldrb	r2, [r7, #23]
 800d206:	429a      	cmp	r2, r3
 800d208:	d9dd      	bls.n	800d1c6 <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	68da      	ldr	r2, [r3, #12]
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800d218:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	371c      	adds	r7, #28
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr

0800d228 <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d228:	b590      	push	{r4, r7, lr}
 800d22a:	b08d      	sub	sp, #52	@ 0x34
 800d22c:	af02      	add	r7, sp, #8
 800d22e:	60ba      	str	r2, [r7, #8]
 800d230:	607b      	str	r3, [r7, #4]
 800d232:	4603      	mov	r3, r0
 800d234:	73fb      	strb	r3, [r7, #15]
 800d236:	460b      	mov	r3, r1
 800d238:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d23a:	2300      	movs	r3, #0
 800d23c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	uint8_t   i            = 0;
 800d240:	2300      	movs	r3, #0
 800d242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	int16_t   VL53LX_p_012 = 0;
 800d246:	2300      	movs	r3, #0
 800d248:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800d24e:	2300      	movs	r3, #0
 800d250:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint32_t  tmp_phase    = 0;
 800d252:	2300      	movs	r3, #0
 800d254:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d256:	7bfa      	ldrb	r2, [r7, #15]
 800d258:	4613      	mov	r3, r2
 800d25a:	00db      	lsls	r3, r3, #3
 800d25c:	4413      	add	r3, r2
 800d25e:	009b      	lsls	r3, r3, #2
 800d260:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	4413      	add	r3, r2
 800d268:	3304      	adds	r3, #4
 800d26a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	789b      	ldrb	r3, [r3, #2]
 800d270:	2bff      	cmp	r3, #255	@ 0xff
 800d272:	d102      	bne.n	800d27a <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	2201      	movs	r2, #1
 800d278:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	789b      	ldrb	r3, [r3, #2]
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	78d2      	ldrb	r2, [r2, #3]
 800d282:	fbb3 f1f2 	udiv	r1, r3, r2
 800d286:	fb01 f202 	mul.w	r2, r1, r2
 800d28a:	1a9b      	subs	r3, r3, r2
 800d28c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	VL53LX_p_012  = (int16_t)i;
 800d290:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d294:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	461a      	mov	r2, r3
 800d29c:	8c3b      	ldrh	r3, [r7, #32]
 800d29e:	4413      	add	r3, r2
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800d2a4:	8c3b      	ldrh	r3, [r7, #32]
 800d2a6:	697a      	ldr	r2, [r7, #20]
 800d2a8:	7892      	ldrb	r2, [r2, #2]
 800d2aa:	1a9b      	subs	r3, r3, r2
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800d2b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d2b4:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	791b      	ldrb	r3, [r3, #4]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	8bfb      	ldrh	r3, [r7, #30]
 800d2be:	4413      	add	r3, r2
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800d2c4:	8bfb      	ldrh	r3, [r7, #30]
 800d2c6:	697a      	ldr	r2, [r7, #20]
 800d2c8:	7892      	ldrb	r2, [r2, #2]
 800d2ca:	1a9b      	subs	r3, r3, r2
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800d2d0:	8bfa      	ldrh	r2, [r7, #30]
 800d2d2:	8c3b      	ldrh	r3, [r7, #32]
 800d2d4:	1ad3      	subs	r3, r2, r3
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	if (window_width > 3)
 800d2da:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d2de:	2b03      	cmp	r3, #3
 800d2e0:	dd01      	ble.n	800d2e6 <VL53LX_f_015+0xbe>
		window_width = 3;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	84bb      	strh	r3, [r7, #36]	@ 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800d2e6:	8c3a      	ldrh	r2, [r7, #32]
 800d2e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2ea:	4413      	add	r3, r2
 800d2ec:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800d2ee:	b219      	sxth	r1, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	78da      	ldrb	r2, [r3, #3]
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	3314      	adds	r3, #20
 800d2f8:	7bbc      	ldrb	r4, [r7, #14]
 800d2fa:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800d2fe:	9301      	str	r3, [sp, #4]
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	4623      	mov	r3, r4
 800d306:	f000 f846 	bl	800d396 <VL53LX_f_020>
 800d30a:	4603      	mov	r3, r0
 800d30c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800d310:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d314:	2b00      	cmp	r3, #0
 800d316:	d114      	bne.n	800d342 <VL53LX_f_015+0x11a>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800d318:	8bfa      	ldrh	r2, [r7, #30]
 800d31a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d31c:	1ad3      	subs	r3, r2, r3
 800d31e:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800d320:	b218      	sxth	r0, r3
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	78da      	ldrb	r2, [r3, #3]
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	331c      	adds	r3, #28
 800d32a:	7bbc      	ldrb	r4, [r7, #14]
 800d32c:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d330:	9301      	str	r3, [sp, #4]
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	4623      	mov	r3, r4
 800d338:	f000 f82d 	bl	800d396 <VL53LX_f_020>
 800d33c:	4603      	mov	r3, r0
 800d33e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	695a      	ldr	r2, [r3, #20]
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	69db      	ldr	r3, [r3, #28]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d909      	bls.n	800d362 <VL53LX_f_015+0x13a>
		tmp_phase        = pdata->VL53LX_p_026;
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	695b      	ldr	r3, [r3, #20]
 800d352:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	69da      	ldr	r2, [r3, #28]
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	69ba      	ldr	r2, [r7, #24]
 800d360:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	699a      	ldr	r2, [r3, #24]
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	695b      	ldr	r3, [r3, #20]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d203      	bcs.n	800d376 <VL53LX_f_015+0x14e>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	699a      	ldr	r2, [r3, #24]
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	699a      	ldr	r2, [r3, #24]
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	69db      	ldr	r3, [r3, #28]
 800d37e:	429a      	cmp	r2, r3
 800d380:	d903      	bls.n	800d38a <VL53LX_f_015+0x162>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	699a      	ldr	r2, [r3, #24]
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800d38a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d38e:	4618      	mov	r0, r3
 800d390:	372c      	adds	r7, #44	@ 0x2c
 800d392:	46bd      	mov	sp, r7
 800d394:	bd90      	pop	{r4, r7, pc}

0800d396 <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800d396:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39a:	b09d      	sub	sp, #116	@ 0x74
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	461c      	mov	r4, r3
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d3a6:	460b      	mov	r3, r1
 800d3a8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3b2:	4623      	mov	r3, r4
 800d3b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	int16_t  i            = 0;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	int16_t  lb            = 0;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

	int64_t VL53LX_p_018        = 0;
 800d3ca:	f04f 0200 	mov.w	r2, #0
 800d3ce:	f04f 0300 	mov.w	r3, #0
 800d3d2:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	int64_t event_sum     = 0;
 800d3d6:	f04f 0200 	mov.w	r2, #0
 800d3da:	f04f 0300 	mov.w	r3, #0
 800d3de:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	int64_t weighted_sum  = 0;
 800d3e2:	f04f 0200 	mov.w	r2, #0
 800d3e6:	f04f 0300 	mov.w	r3, #0
 800d3ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800d3ee:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800d3f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d3f6:	6013      	str	r3, [r2, #0]

	if (VL53LX_p_030 != 0)
 800d3f8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f000 809c 	beq.w	800d53a <VL53LX_f_020+0x1a4>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d402:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d406:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d40a:	e08f      	b.n	800d52c <VL53LX_f_020+0x196>

		if (lb < 0)
 800d40c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800d410:	2b00      	cmp	r3, #0
 800d412:	da09      	bge.n	800d428 <VL53LX_f_020+0x92>
			i = lb + (int16_t)VL53LX_p_030;
 800d414:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d418:	b29a      	uxth	r2, r3
 800d41a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d41e:	4413      	add	r3, r2
 800d420:	b29b      	uxth	r3, r3
 800d422:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800d426:	e00a      	b.n	800d43e <VL53LX_f_020+0xa8>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800d428:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	@ 0x6c
 800d42c:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800d430:	fb91 f3f2 	sdiv	r3, r1, r2
 800d434:	fb02 f303 	mul.w	r3, r2, r3
 800d438:	1acb      	subs	r3, r1, r3
 800d43a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800d43e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800d442:	2b00      	cmp	r3, #0
 800d444:	db6b      	blt.n	800d51e <VL53LX_f_020+0x188>
 800d446:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800d44a:	2b17      	cmp	r3, #23
 800d44c:	dc67      	bgt.n	800d51e <VL53LX_f_020+0x188>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800d44e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800d452:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d456:	3306      	adds	r3, #6
 800d458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d45c:	17da      	asrs	r2, r3, #31
 800d45e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d460:	637a      	str	r2, [r7, #52]	@ 0x34
				(int64_t)pbins->VL53LX_p_028;
 800d462:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d466:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d46a:	17da      	asrs	r2, r3, #31
 800d46c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d46e:	62fa      	str	r2, [r7, #44]	@ 0x2c
			VL53LX_p_018 =
 800d470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d472:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800d476:	4602      	mov	r2, r0
 800d478:	1a9b      	subs	r3, r3, r2
 800d47a:	623b      	str	r3, [r7, #32]
 800d47c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d47e:	460a      	mov	r2, r1
 800d480:	eb63 0302 	sbc.w	r3, r3, r2
 800d484:	627b      	str	r3, [r7, #36]	@ 0x24
 800d486:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d48a:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800d48e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800d492:	2b00      	cmp	r3, #0
 800d494:	d009      	beq.n	800d4aa <VL53LX_f_020+0x114>
 800d496:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	da05      	bge.n	800d4aa <VL53LX_f_020+0x114>
				VL53LX_p_018 = 0;
 800d49e:	f04f 0200 	mov.w	r2, #0
 800d4a2:	f04f 0300 	mov.w	r3, #0
 800d4a6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
			event_sum += VL53LX_p_018;
 800d4aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800d4ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800d4b2:	1884      	adds	r4, r0, r2
 800d4b4:	61bc      	str	r4, [r7, #24]
 800d4b6:	eb41 0303 	adc.w	r3, r1, r3
 800d4ba:	61fb      	str	r3, [r7, #28]
 800d4bc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d4c0:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800d4c4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800d4c8:	17da      	asrs	r2, r3, #31
 800d4ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d4cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d4ce:	f04f 0200 	mov.w	r2, #0
 800d4d2:	f04f 0300 	mov.w	r3, #0
 800d4d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d4d8:	02cb      	lsls	r3, r1, #11
 800d4da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d4dc:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d4e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d4e2:	02ca      	lsls	r2, r1, #11
 800d4e4:	f512 6580 	adds.w	r5, r2, #1024	@ 0x400
 800d4e8:	f143 0600 	adc.w	r6, r3, #0
 800d4ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d4ee:	fb06 f203 	mul.w	r2, r6, r3
 800d4f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d4f4:	fb05 f303 	mul.w	r3, r5, r3
 800d4f8:	441a      	add	r2, r3
 800d4fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d4fc:	fba3 ab05 	umull	sl, fp, r3, r5
 800d500:	eb02 030b 	add.w	r3, r2, fp
 800d504:	469b      	mov	fp, r3
			weighted_sum +=
 800d506:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d50a:	eb12 010a 	adds.w	r1, r2, sl
 800d50e:	6139      	str	r1, [r7, #16]
 800d510:	eb43 030b 	adc.w	r3, r3, fp
 800d514:	617b      	str	r3, [r7, #20]
 800d516:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d51a:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d51e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800d522:	b29b      	uxth	r3, r3
 800d524:	3301      	adds	r3, #1
 800d526:	b29b      	uxth	r3, r3
 800d528:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d52c:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	@ 0x6c
 800d530:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800d534:	429a      	cmp	r2, r3
 800d536:	f77f af69 	ble.w	800d40c <VL53LX_f_020+0x76>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800d53a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d53e:	2a01      	cmp	r2, #1
 800d540:	f173 0300 	sbcs.w	r3, r3, #0
 800d544:	db3b      	blt.n	800d5be <VL53LX_f_020+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 800d546:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d54a:	0fd9      	lsrs	r1, r3, #31
 800d54c:	2000      	movs	r0, #0
 800d54e:	60b9      	str	r1, [r7, #8]
 800d550:	60f8      	str	r0, [r7, #12]
 800d552:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d556:	4621      	mov	r1, r4
 800d558:	eb11 0802 	adds.w	r8, r1, r2
 800d55c:	4629      	mov	r1, r5
 800d55e:	eb41 0903 	adc.w	r9, r1, r3
 800d562:	f04f 0200 	mov.w	r2, #0
 800d566:	f04f 0300 	mov.w	r3, #0
 800d56a:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800d56e:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 800d572:	ea4f 0369 	mov.w	r3, r9, asr #1
 800d576:	4610      	mov	r0, r2
 800d578:	4619      	mov	r1, r3
 800d57a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d57e:	1814      	adds	r4, r2, r0
 800d580:	603c      	str	r4, [r7, #0]
 800d582:	414b      	adcs	r3, r1
 800d584:	607b      	str	r3, [r7, #4]
 800d586:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d58a:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800d58e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d592:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800d596:	f7f2 fe43 	bl	8000220 <__aeabi_ldivmod>
 800d59a:	4602      	mov	r2, r0
 800d59c:	460b      	mov	r3, r1
 800d59e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		if (weighted_sum < 0)
 800d5a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	da05      	bge.n	800d5b6 <VL53LX_f_020+0x220>
			weighted_sum = 0;
 800d5aa:	f04f 0200 	mov.w	r2, #0
 800d5ae:	f04f 0300 	mov.w	r3, #0
 800d5b2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		*pphase = (uint32_t)weighted_sum;
 800d5b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d5b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d5bc:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d5be:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3774      	adds	r7, #116	@ 0x74
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d5cc <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60b9      	str	r1, [r7, #8]
 800d5d4:	607a      	str	r2, [r7, #4]
 800d5d6:	603b      	str	r3, [r7, #0]
 800d5d8:	4603      	mov	r3, r0
 800d5da:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d5e8:	7bfa      	ldrb	r2, [r7, #15]
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	00db      	lsls	r3, r3, #3
 800d5ee:	4413      	add	r3, r2
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	4413      	add	r3, r2
 800d5fa:	3304      	adds	r3, #4
 800d5fc:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800d5fe:	22ac      	movs	r2, #172	@ 0xac
 800d600:	68b9      	ldr	r1, [r7, #8]
 800d602:	6a38      	ldr	r0, [r7, #32]
 800d604:	f00c fb87 	bl	8019d16 <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800d60e:	75fb      	strb	r3, [r7, #23]
 800d610:	e020      	b.n	800d654 <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	7dfa      	ldrb	r2, [r7, #23]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d304      	bcc.n	800d626 <VL53LX_f_011+0x5a>
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	791b      	ldrb	r3, [r3, #4]
 800d620:	7dfa      	ldrb	r2, [r7, #23]
 800d622:	429a      	cmp	r2, r3
 800d624:	d913      	bls.n	800d64e <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	78da      	ldrb	r2, [r3, #3]
 800d62a:	7dfb      	ldrb	r3, [r7, #23]
 800d62c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d630:	fb01 f202 	mul.w	r2, r1, r2
 800d634:	1a9b      	subs	r3, r3, r2
 800d636:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800d638:	6a3b      	ldr	r3, [r7, #32]
 800d63a:	7a9b      	ldrb	r3, [r3, #10]
 800d63c:	7d7a      	ldrb	r2, [r7, #21]
 800d63e:	429a      	cmp	r2, r3
 800d640:	d205      	bcs.n	800d64e <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800d642:	7d7a      	ldrb	r2, [r7, #21]
 800d644:	6a3b      	ldr	r3, [r7, #32]
 800d646:	3206      	adds	r2, #6
 800d648:	6839      	ldr	r1, [r7, #0]
 800d64a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800d64e:	7dfb      	ldrb	r3, [r7, #23]
 800d650:	3301      	adds	r3, #1
 800d652:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800d654:	7dfa      	ldrb	r2, [r7, #23]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800d65c:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800d662:	440b      	add	r3, r1
 800d664:	429a      	cmp	r2, r3
 800d666:	dbd4      	blt.n	800d612 <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d668:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3718      	adds	r7, #24
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800d674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d678:	b096      	sub	sp, #88	@ 0x58
 800d67a:	af08      	add	r7, sp, #32
 800d67c:	4604      	mov	r4, r0
 800d67e:	4608      	mov	r0, r1
 800d680:	4611      	mov	r1, r2
 800d682:	461a      	mov	r2, r3
 800d684:	4623      	mov	r3, r4
 800d686:	73fb      	strb	r3, [r7, #15]
 800d688:	4603      	mov	r3, r0
 800d68a:	73bb      	strb	r3, [r7, #14]
 800d68c:	460b      	mov	r3, r1
 800d68e:	737b      	strb	r3, [r7, #13]
 800d690:	4613      	mov	r3, r2
 800d692:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800d694:	2300      	movs	r3, #0
 800d696:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800d69a:	2300      	movs	r3, #0
 800d69c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	uint8_t  i    = 0;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	int32_t  VL53LX_p_007    = 0;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t  VL53LX_p_032    = 0;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t  VL53LX_p_001    = 0;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t  a_zp = 0;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  c_zp = 0;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800d6c6:	7b7b      	ldrb	r3, [r7, #13]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d106      	bne.n	800d6da <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800d6cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d6ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d6d2:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800d6d4:	f06f 030e 	mvn.w	r3, #14
 800d6d8:	e06f      	b.n	800d7ba <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800d6da:	7bfb      	ldrb	r3, [r7, #15]
 800d6dc:	7b7a      	ldrb	r2, [r7, #13]
 800d6de:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6e2:	fb01 f202 	mul.w	r2, r1, r2
 800d6e6:	1a9b      	subs	r3, r3, r2
 800d6e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35



	VL53LX_f_022(
 800d6ec:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d6f0:	7b39      	ldrb	r1, [r7, #12]
 800d6f2:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800d6f6:	f107 0320 	add.w	r3, r7, #32
 800d6fa:	9301      	str	r3, [sp, #4]
 800d6fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d700:	9300      	str	r3, [sp, #0]
 800d702:	4613      	mov	r3, r2
 800d704:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d706:	f000 fddb 	bl	800e2c0 <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800d70a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d70e:	7b39      	ldrb	r1, [r7, #12]
 800d710:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800d714:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d718:	9301      	str	r3, [sp, #4]
 800d71a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	4613      	mov	r3, r2
 800d722:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d724:	f000 fdcc 	bl	800e2c0 <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800d728:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00e      	beq.n	800d74e <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800d730:	f107 021c 	add.w	r2, r7, #28
 800d734:	7b39      	ldrb	r1, [r7, #12]
 800d736:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800d73a:	f107 0314 	add.w	r3, r7, #20
 800d73e:	9301      	str	r3, [sp, #4]
 800d740:	f107 0318 	add.w	r3, r7, #24
 800d744:	9300      	str	r3, [sp, #0]
 800d746:	4613      	mov	r3, r2
 800d748:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d74a:	f000 fdb9 	bl	800e2c0 <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800d74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d750:	469c      	mov	ip, r3
 800d752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d754:	469e      	mov	lr, r3
 800d756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d758:	4698      	mov	r8, r3
 800d75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75c:	4619      	mov	r1, r3
 800d75e:	6a3b      	ldr	r3, [r7, #32]
 800d760:	461c      	mov	r4, r3
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	461d      	mov	r5, r3
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	461e      	mov	r6, r3
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800d76e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d770:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
		VL53LX_f_023(
 800d774:	607b      	str	r3, [r7, #4]
 800d776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d778:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800d77c:	7bb8      	ldrb	r0, [r7, #14]
 800d77e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d780:	9207      	str	r2, [sp, #28]
 800d782:	9306      	str	r3, [sp, #24]
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	9205      	str	r2, [sp, #20]
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	9304      	str	r3, [sp, #16]
 800d78c:	9603      	str	r6, [sp, #12]
 800d78e:	9502      	str	r5, [sp, #8]
 800d790:	9401      	str	r4, [sp, #4]
 800d792:	9100      	str	r1, [sp, #0]
 800d794:	4643      	mov	r3, r8
 800d796:	4672      	mov	r2, lr
 800d798:	4661      	mov	r1, ip
 800d79a:	f002 ff53 	bl	8010644 <VL53LX_f_023>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800d7a4:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 800d7a8:	f113 0f0f 	cmn.w	r3, #15
 800d7ac:	d103      	bne.n	800d7b6 <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800d7ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d7b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d7b4:	801a      	strh	r2, [r3, #0]


	return status;
 800d7b6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3738      	adds	r7, #56	@ 0x38
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d7c4 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800d7c4:	b490      	push	{r4, r7}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	4608      	mov	r0, r1
 800d7ce:	4611      	mov	r1, r2
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	4623      	mov	r3, r4
 800d7d4:	71fb      	strb	r3, [r7, #7]
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	71bb      	strb	r3, [r7, #6]
 800d7da:	460b      	mov	r3, r1
 800d7dc:	717b      	strb	r3, [r7, #5]
 800d7de:	4613      	mov	r3, r2
 800d7e0:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800d7ea:	6a3b      	ldr	r3, [r7, #32]
 800d7ec:	79fa      	ldrb	r2, [r7, #7]
 800d7ee:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800d7f0:	6a3b      	ldr	r3, [r7, #32]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	781a      	ldrb	r2, [r3, #0]
 800d7fa:	6a3b      	ldr	r3, [r7, #32]
 800d7fc:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	785a      	ldrb	r2, [r3, #1]
 800d802:	6a3b      	ldr	r3, [r7, #32]
 800d804:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	789a      	ldrb	r2, [r3, #2]
 800d80a:	6a3b      	ldr	r3, [r7, #32]
 800d80c:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	78da      	ldrb	r2, [r3, #3]
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	791a      	ldrb	r2, [r3, #4]
 800d81a:	6a3b      	ldr	r3, [r7, #32]
 800d81c:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	795a      	ldrb	r2, [r3, #5]
 800d822:	6a3b      	ldr	r3, [r7, #32]
 800d824:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	791a      	ldrb	r2, [r3, #4]
 800d82a:	69fb      	ldr	r3, [r7, #28]
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	1ad3      	subs	r3, r2, r3
 800d830:	b2db      	uxtb	r3, r3
 800d832:	3301      	adds	r3, #1
 800d834:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800d836:	6a3b      	ldr	r3, [r7, #32]
 800d838:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800d840:	6a3b      	ldr	r3, [r7, #32]
 800d842:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	8c1a      	ldrh	r2, [r3, #32]
 800d848:	6a3b      	ldr	r3, [r7, #32]
 800d84a:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	695b      	ldr	r3, [r3, #20]
 800d850:	b29a      	uxth	r2, r3
 800d852:	6a3b      	ldr	r3, [r7, #32]
 800d854:	87da      	strh	r2, [r3, #62]	@ 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	699b      	ldr	r3, [r3, #24]
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	6a3b      	ldr	r3, [r7, #32]
 800d85e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	69db      	ldr	r3, [r3, #28]
 800d866:	b29a      	uxth	r2, r3
 800d868:	6a3b      	ldr	r3, [r7, #32]
 800d86a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	461a      	mov	r2, r3
 800d874:	6a3b      	ldr	r3, [r7, #32]
 800d876:	629a      	str	r2, [r3, #40]	@ 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800d878:	69fb      	ldr	r3, [r7, #28]
 800d87a:	691a      	ldr	r2, [r3, #16]
 800d87c:	6a3b      	ldr	r3, [r7, #32]
 800d87e:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	689b      	ldr	r3, [r3, #8]
 800d884:	461a      	mov	r2, r3
 800d886:	6a3b      	ldr	r3, [r7, #32]
 800d888:	625a      	str	r2, [r3, #36]	@ 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d890:	6a3b      	ldr	r3, [r7, #32]
 800d892:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800d894:	6a3b      	ldr	r3, [r7, #32]
 800d896:	2213      	movs	r2, #19
 800d898:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a


	if (sigma_thres > 0 &&
 800d89c:	887b      	ldrh	r3, [r7, #2]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00a      	beq.n	800d8b8 <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	8c1b      	ldrh	r3, [r3, #32]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	887b      	ldrh	r3, [r7, #2]
 800d8aa:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d903      	bls.n	800d8b8 <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800d8b0:	6a3b      	ldr	r3, [r7, #32]
 800d8b2:	2206      	movs	r2, #6
 800d8b4:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800d8b8:	79bb      	ldrb	r3, [r7, #6]
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	021b      	lsls	r3, r3, #8
 800d8be:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800d8c0:	6a3b      	ldr	r3, [r7, #32]
 800d8c2:	8a9b      	ldrh	r3, [r3, #20]
 800d8c4:	89fa      	ldrh	r2, [r7, #14]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d205      	bcs.n	800d8d6 <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800d8ca:	6a3b      	ldr	r3, [r7, #32]
 800d8cc:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800d8ce:	89fb      	ldrh	r3, [r7, #14]
 800d8d0:	1ad3      	subs	r3, r2, r3
 800d8d2:	81fb      	strh	r3, [r7, #14]
 800d8d4:	e001      	b.n	800d8da <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800d8da:	797b      	ldrb	r3, [r7, #5]
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	021b      	lsls	r3, r3, #8
 800d8e0:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800d8e2:	69bb      	ldr	r3, [r7, #24]
 800d8e4:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800d8e8:	89bb      	ldrh	r3, [r7, #12]
 800d8ea:	4413      	add	r3, r2
 800d8ec:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d8ee:	6a3b      	ldr	r3, [r7, #32]
 800d8f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d8f4:	89fa      	ldrh	r2, [r7, #14]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d805      	bhi.n	800d906 <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800d8fa:	6a3b      	ldr	r3, [r7, #32]
 800d8fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d900:	89ba      	ldrh	r2, [r7, #12]
 800d902:	429a      	cmp	r2, r3
 800d904:	d203      	bcs.n	800d90e <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800d906:	6a3b      	ldr	r3, [r7, #32]
 800d908:	2205      	movs	r2, #5
 800d90a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

}
 800d90e:	bf00      	nop
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bc90      	pop	{r4, r7}
 800d916:	4770      	bx	lr

0800d918 <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800d918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d91a:	b08f      	sub	sp, #60	@ 0x3c
 800d91c:	af06      	add	r7, sp, #24
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
 800d924:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d926:	2300      	movs	r3, #0
 800d928:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800d92a:	2300      	movs	r3, #0
 800d92c:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800d92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d930:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d934:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800d936:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d938:	f7ff f858 	bl	800c9ec <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800d93c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d93e:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
	memcpy(
 800d942:	22ac      	movs	r2, #172	@ 0xac
 800d944:	6839      	ldr	r1, [r7, #0]
 800d946:	4618      	mov	r0, r3
 800d948:	f00c f9e5 	bl	8019d16 <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	781a      	ldrb	r2, [r3, #0]
 800d950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d952:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	785a      	ldrb	r2, [r3, #1]
 800d958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d95a:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	789a      	ldrb	r2, [r3, #2]
 800d960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d962:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 800d96a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d96c:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800d96e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d970:	2200      	movs	r2, #0
 800d972:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800d974:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d976:	2204      	movs	r2, #4
 800d978:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800d97a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d97c:	2200      	movs	r2, #0
 800d97e:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d980:	2300      	movs	r3, #0
 800d982:	77bb      	strb	r3, [r7, #30]
 800d984:	e008      	b.n	800d998 <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800d986:	7fbb      	ldrb	r3, [r7, #30]
 800d988:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d98a:	005b      	lsls	r3, r3, #1
 800d98c:	4413      	add	r3, r2
 800d98e:	2200      	movs	r2, #0
 800d990:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d992:	7fbb      	ldrb	r3, [r7, #30]
 800d994:	3301      	adds	r3, #1
 800d996:	77bb      	strb	r3, [r7, #30]
 800d998:	7fbb      	ldrb	r3, [r7, #30]
 800d99a:	2b04      	cmp	r3, #4
 800d99c:	d9f3      	bls.n	800d986 <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800d99e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9a0:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7fd ff59 	bl	800b85c <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9b2:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	4610      	mov	r0, r2
 800d9ba:	f7fd ff8f 	bl	800b8dc <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800d9be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9c0:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7fe fb68 	bl	800c09a <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800d9ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9cc:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7fd fffd 	bl	800b9d0 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d009      	beq.n	800d9f4 <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800d9e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9e2:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800d9e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9e8:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d9f0:	f000 fdae 	bl	800e550 <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	77bb      	strb	r3, [r7, #30]
 800da00:	e01e      	b.n	800da40 <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800da02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d117      	bne.n	800da3a <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800da0a:	7fbb      	ldrb	r3, [r7, #30]
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	3304      	adds	r3, #4
 800da10:	005b      	lsls	r3, r3, #1
 800da12:	4413      	add	r3, r2
 800da14:	8898      	ldrh	r0, [r3, #4]
 800da16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da18:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800da1c:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800da1e:	005b      	lsls	r3, r3, #1
 800da20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da22:	4413      	add	r3, r2
 800da24:	3304      	adds	r3, #4
 800da26:	9301      	str	r3, [sp, #4]
 800da28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da2a:	9300      	str	r3, [sp, #0]
 800da2c:	460b      	mov	r3, r1
 800da2e:	68ba      	ldr	r2, [r7, #8]
 800da30:	68f9      	ldr	r1, [r7, #12]
 800da32:	f7fe fb7d 	bl	800c130 <VL53LX_f_001>
 800da36:	4603      	mov	r3, r0
 800da38:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800da3a:	7fbb      	ldrb	r3, [r7, #30]
 800da3c:	3301      	adds	r3, #1
 800da3e:	77bb      	strb	r3, [r7, #30]
 800da40:	7fbb      	ldrb	r3, [r7, #30]
 800da42:	2b04      	cmp	r3, #4
 800da44:	d9dd      	bls.n	800da02 <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800da46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d11a      	bne.n	800da84 <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800da56:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 5028 	ldrb.w	r5, [r3, #40]	@ 0x28
 800da62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da64:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800da68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da6a:	f502 7252 	add.w	r2, r2, #840	@ 0x348
 800da6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800da70:	9102      	str	r1, [sp, #8]
 800da72:	9201      	str	r2, [sp, #4]
 800da74:	9300      	str	r3, [sp, #0]
 800da76:	462b      	mov	r3, r5
 800da78:	4622      	mov	r2, r4
 800da7a:	4631      	mov	r1, r6
 800da7c:	f7ff f82f 	bl	800cade <VL53LX_f_006>
 800da80:	4603      	mov	r3, r0
 800da82:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800da84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d104      	bne.n	800da96 <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800da8c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800da8e:	f7ff f956 	bl	800cd3e <VL53LX_f_007>
 800da92:	4603      	mov	r3, r0
 800da94:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800da96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d104      	bne.n	800daa8 <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800da9e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800daa0:	f7ff f99b 	bl	800cdda <VL53LX_f_008>
 800daa4:	4603      	mov	r3, r0
 800daa6:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800daa8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d104      	bne.n	800daba <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800dab0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800dab2:	f7ff fa10 	bl	800ced6 <VL53LX_f_009>
 800dab6:	4603      	mov	r3, r0
 800dab8:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800daba:	2300      	movs	r3, #0
 800dabc:	77bb      	strb	r3, [r7, #30]
 800dabe:	e0a6      	b.n	800dc0e <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800dac0:	7fba      	ldrb	r2, [r7, #30]
 800dac2:	4613      	mov	r3, r2
 800dac4:	00db      	lsls	r3, r3, #3
 800dac6:	4413      	add	r3, r2
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800dace:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dad0:	4413      	add	r3, r2
 800dad2:	3304      	adds	r3, #4
 800dad4:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800dad6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d109      	bne.n	800daf2 <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800dade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dae0:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800dae4:	7fbb      	ldrb	r3, [r7, #30]
 800dae6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dae8:	4618      	mov	r0, r3
 800daea:	f7ff fb4a 	bl	800d182 <VL53LX_f_010>
 800daee:	4603      	mov	r3, r0
 800daf0:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800daf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d110      	bne.n	800db1c <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800dafa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dafc:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800db06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db08:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800db0c:	7fb8      	ldrb	r0, [r7, #30]
 800db0e:	9300      	str	r3, [sp, #0]
 800db10:	4613      	mov	r3, r2
 800db12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800db14:	f7ff fd5a 	bl	800d5cc <VL53LX_f_011>
 800db18:	4603      	mov	r3, r0
 800db1a:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800db1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d10d      	bne.n	800db40 <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800db24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db26:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800db2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db2c:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800db30:	7fb8      	ldrb	r0, [r7, #30]
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	2300      	movs	r3, #0
 800db36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800db38:	f7ff fd48 	bl	800d5cc <VL53LX_f_011>
 800db3c:	4603      	mov	r3, r0
 800db3e:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800db40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d10d      	bne.n	800db64 <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800db48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db4a:	f503 7152 	add.w	r1, r3, #840	@ 0x348
 800db4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db50:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800db54:	7fb8      	ldrb	r0, [r7, #30]
 800db56:	9300      	str	r3, [sp, #0]
 800db58:	2300      	movs	r3, #0
 800db5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800db5c:	f7ff fd36 	bl	800d5cc <VL53LX_f_011>
 800db60:	4603      	mov	r3, r0
 800db62:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800db64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d109      	bne.n	800db80 <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800db6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db6e:	f503 717d 	add.w	r1, r3, #1012	@ 0x3f4
 800db72:	7fb8      	ldrb	r0, [r7, #30]
 800db74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800db78:	f000 f8dd 	bl	800dd36 <VL53LX_f_026>
 800db7c:	4603      	mov	r3, r0
 800db7e:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800db80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d108      	bne.n	800db9a <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	8a19      	ldrh	r1, [r3, #16]
 800db8c:	7fb8      	ldrb	r0, [r7, #30]
 800db8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800db92:	f000 f95c 	bl	800de4e <VL53LX_f_027>
 800db96:	4603      	mov	r3, r0
 800db98:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800db9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d124      	bne.n	800dbec <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	789d      	ldrb	r5, [r3, #2]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	7e1e      	ldrb	r6, [r3, #24]
 800dbaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbac:	f893 c003 	ldrb.w	ip, [r3, #3]
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	f893 e006 	ldrb.w	lr, [r3, #6]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dbbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dbbe:	f502 727d 	add.w	r2, r2, #1012	@ 0x3f4
 800dbc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dbc4:	f501 6194 	add.w	r1, r1, #1184	@ 0x4a0
 800dbc8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800dbca:	f200 504c 	addw	r0, r0, #1356	@ 0x54c
 800dbce:	697c      	ldr	r4, [r7, #20]
 800dbd0:	3420      	adds	r4, #32
 800dbd2:	9404      	str	r4, [sp, #16]
 800dbd4:	9003      	str	r0, [sp, #12]
 800dbd6:	9102      	str	r1, [sp, #8]
 800dbd8:	9201      	str	r2, [sp, #4]
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	4673      	mov	r3, lr
 800dbde:	4662      	mov	r2, ip
 800dbe0:	4631      	mov	r1, r6
 800dbe2:	4628      	mov	r0, r5
 800dbe4:	f7ff fd46 	bl	800d674 <VL53LX_f_014>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800dbec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d109      	bne.n	800dc08 <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800dbf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbf6:	f503 7227 	add.w	r2, r3, #668	@ 0x29c
 800dbfa:	7fb8      	ldrb	r0, [r7, #30]
 800dbfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbfe:	2101      	movs	r1, #1
 800dc00:	f7ff fb12 	bl	800d228 <VL53LX_f_015>
 800dc04:	4603      	mov	r3, r0
 800dc06:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dc08:	7fbb      	ldrb	r3, [r7, #30]
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	77bb      	strb	r3, [r7, #30]
 800dc0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc10:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800dc14:	7fba      	ldrb	r2, [r7, #30]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	f4ff af52 	bcc.w	800dac0 <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800dc1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d107      	bne.n	800dc34 <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	785b      	ldrb	r3, [r3, #1]
 800dc28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7ff fa25 	bl	800d07a <VL53LX_f_016>
 800dc30:	4603      	mov	r3, r0
 800dc32:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dc34:	2300      	movs	r3, #0
 800dc36:	77bb      	strb	r3, [r7, #30]
 800dc38:	e071      	b.n	800dd1e <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800dc3a:	7fba      	ldrb	r2, [r7, #30]
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	00db      	lsls	r3, r3, #3
 800dc40:	4413      	add	r3, r2
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800dc48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dc4a:	4413      	add	r3, r2
 800dc4c:	3304      	adds	r3, #4
 800dc4e:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800dc50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc52:	7c9a      	ldrb	r2, [r3, #18]
 800dc54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc56:	7c5b      	ldrb	r3, [r3, #17]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d25c      	bcs.n	800dd16 <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800dc64:	429a      	cmp	r2, r3
 800dc66:	dd57      	ble.n	800dd18 <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800dc6c:	2bff      	cmp	r3, #255	@ 0xff
 800dc6e:	d053      	beq.n	800dd18 <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800dc70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc72:	7c9b      	ldrb	r3, [r3, #18]
 800dc74:	461a      	mov	r2, r3
			prange_data =
 800dc76:	234c      	movs	r3, #76	@ 0x4c
 800dc78:	fb02 f303 	mul.w	r3, r2, r3
 800dc7c:	3310      	adds	r3, #16
 800dc7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc80:	4413      	add	r3, r2
 800dc82:	3304      	adds	r3, #4
 800dc84:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800dc86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d115      	bne.n	800dcba <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800dc8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc90:	7c98      	ldrb	r0, [r3, #18]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f893 1020 	ldrb.w	r1, [r3, #32]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f893 4021 	ldrb.w	r4, [r3, #33]	@ 0x21
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	8b5d      	ldrh	r5, [r3, #26]
 800dca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dca4:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800dca8:	693a      	ldr	r2, [r7, #16]
 800dcaa:	9202      	str	r2, [sp, #8]
 800dcac:	697a      	ldr	r2, [r7, #20]
 800dcae:	9201      	str	r2, [sp, #4]
 800dcb0:	9300      	str	r3, [sp, #0]
 800dcb2:	462b      	mov	r3, r5
 800dcb4:	4622      	mov	r2, r4
 800dcb6:	f7ff fd85 	bl	800d7c4 <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800dcba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d115      	bne.n	800dcee <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	f8b3 1086 	ldrh.w	r1, [r3, #134]	@ 0x86
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800dcd4:	69bb      	ldr	r3, [r7, #24]
 800dcd6:	f8b3 407c 	ldrh.w	r4, [r3, #124]	@ 0x7c
 800dcda:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800dcde:	9301      	str	r3, [sp, #4]
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	4623      	mov	r3, r4
 800dce6:	f000 fb44 	bl	800e372 <VL53LX_f_018>
 800dcea:	4603      	mov	r3, r0
 800dcec:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800dcee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d108      	bne.n	800dd08 <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	8bd8      	ldrh	r0, [r3, #30]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800dd00:	693a      	ldr	r2, [r7, #16]
 800dd02:	4619      	mov	r1, r3
 800dd04:	f000 fbda 	bl	800e4bc <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800dd08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd0a:	7c9b      	ldrb	r3, [r3, #18]
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	b2da      	uxtb	r2, r3
 800dd10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd12:	749a      	strb	r2, [r3, #18]
 800dd14:	e000      	b.n	800dd18 <VL53LX_f_025+0x400>
			continue;
 800dd16:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dd18:	7fbb      	ldrb	r3, [r7, #30]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	77bb      	strb	r3, [r7, #30]
 800dd1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd20:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800dd24:	7fba      	ldrb	r2, [r7, #30]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d387      	bcc.n	800dc3a <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800dd2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3724      	adds	r7, #36	@ 0x24
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd36 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b08c      	sub	sp, #48	@ 0x30
 800dd3a:	af02      	add	r7, sp, #8
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
 800dd40:	603b      	str	r3, [r7, #0]
 800dd42:	4603      	mov	r3, r0
 800dd44:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800dd46:	2300      	movs	r3, #0
 800dd48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800dd4c:	7bfa      	ldrb	r2, [r7, #15]
 800dd4e:	4613      	mov	r3, r2
 800dd50:	00db      	lsls	r3, r3, #3
 800dd52:	4413      	add	r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	3304      	adds	r3, #4
 800dd60:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800dd62:	2300      	movs	r3, #0
 800dd64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t  i     = 0;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800dd70:	2300      	movs	r3, #0
 800dd72:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800dd74:	2300      	movs	r3, #0
 800dd76:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	785a      	ldrb	r2, [r3, #1]
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	781a      	ldrb	r2, [r3, #0]
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	789a      	ldrb	r2, [r3, #2]
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800dd90:	6a3b      	ldr	r3, [r7, #32]
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dd98:	e04d      	b.n	800de36 <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	78da      	ldrb	r2, [r3, #3]
 800dd9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dda2:	fbb3 f1f2 	udiv	r1, r3, r2
 800dda6:	fb01 f202 	mul.w	r2, r1, r2
 800ddaa:	1a9b      	subs	r3, r3, r2
 800ddac:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800ddae:	6a3b      	ldr	r3, [r7, #32]
 800ddb0:	7999      	ldrb	r1, [r3, #6]
 800ddb2:	f107 0218 	add.w	r2, r7, #24
 800ddb6:	7ff8      	ldrb	r0, [r7, #31]
 800ddb8:	f107 0310 	add.w	r3, r7, #16
 800ddbc:	9301      	str	r3, [sp, #4]
 800ddbe:	f107 0314 	add.w	r3, r7, #20
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	f000 fa7a 	bl	800e2c0 <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800ddcc:	7ffb      	ldrb	r3, [r7, #31]
 800ddce:	69ba      	ldr	r2, [r7, #24]
 800ddd0:	6839      	ldr	r1, [r7, #0]
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	440b      	add	r3, r1
 800ddd6:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800ddd8:	7ffb      	ldrb	r3, [r7, #31]
 800ddda:	697a      	ldr	r2, [r7, #20]
 800dddc:	6839      	ldr	r1, [r7, #0]
 800ddde:	3318      	adds	r3, #24
 800dde0:	009b      	lsls	r3, r3, #2
 800dde2:	440b      	add	r3, r1
 800dde4:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800dde6:	7ffb      	ldrb	r3, [r7, #31]
 800dde8:	693a      	ldr	r2, [r7, #16]
 800ddea:	6839      	ldr	r1, [r7, #0]
 800ddec:	3330      	adds	r3, #48	@ 0x30
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	440b      	add	r3, r1
 800ddf2:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800ddf4:	69ba      	ldr	r2, [r7, #24]
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	689a      	ldr	r2, [r3, #8]
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800de02:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800de04:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800de06:	6839      	ldr	r1, [r7, #0]
 800de08:	3348      	adds	r3, #72	@ 0x48
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	440b      	add	r3, r1
 800de0e:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800de10:	697a      	ldr	r2, [r7, #20]
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	689a      	ldr	r2, [r3, #8]
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800de1e:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800de20:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800de22:	6839      	ldr	r1, [r7, #0]
 800de24:	3360      	adds	r3, #96	@ 0x60
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	440b      	add	r3, r1
 800de2a:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800de2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de30:	3301      	adds	r3, #1
 800de32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800de36:	6a3b      	ldr	r3, [r7, #32]
 800de38:	791b      	ldrb	r3, [r3, #4]
 800de3a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800de3e:	429a      	cmp	r2, r3
 800de40:	d9ab      	bls.n	800dd9a <VL53LX_f_026+0x64>
	}

	return status;
 800de42:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800de46:	4618      	mov	r0, r3
 800de48:	3728      	adds	r7, #40	@ 0x28
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}

0800de4e <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800de4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de50:	b08f      	sub	sp, #60	@ 0x3c
 800de52:	af06      	add	r7, sp, #24
 800de54:	60ba      	str	r2, [r7, #8]
 800de56:	607b      	str	r3, [r7, #4]
 800de58:	4603      	mov	r3, r0
 800de5a:	73fb      	strb	r3, [r7, #15]
 800de5c:	460b      	mov	r3, r1
 800de5e:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800de60:	2300      	movs	r3, #0
 800de62:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800de64:	2300      	movs	r3, #0
 800de66:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800de68:	7bfa      	ldrb	r2, [r7, #15]
 800de6a:	4613      	mov	r3, r2
 800de6c:	00db      	lsls	r3, r3, #3
 800de6e:	4413      	add	r3, r2
 800de70:	009b      	lsls	r3, r3, #2
 800de72:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	4413      	add	r3, r2
 800de7a:	3304      	adds	r3, #4
 800de7c:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800de7e:	2300      	movs	r3, #0
 800de80:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800de82:	2300      	movs	r3, #0
 800de84:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800de86:	2300      	movs	r3, #0
 800de88:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800de8a:	69bb      	ldr	r3, [r7, #24]
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	77fb      	strb	r3, [r7, #31]
 800de90:	e0b9      	b.n	800e006 <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	78da      	ldrb	r2, [r3, #3]
 800de96:	7ffb      	ldrb	r3, [r7, #31]
 800de98:	fbb3 f1f2 	udiv	r1, r3, r2
 800de9c:	fb01 f202 	mul.w	r2, r1, r2
 800dea0:	1a9b      	subs	r3, r3, r2
 800dea2:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800dea4:	7ffb      	ldrb	r3, [r7, #31]
 800dea6:	3301      	adds	r3, #1
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	78d2      	ldrb	r2, [r2, #3]
 800deac:	fb93 f1f2 	sdiv	r1, r3, r2
 800deb0:	fb01 f202 	mul.w	r2, r1, r2
 800deb4:	1a9b      	subs	r3, r3, r2
 800deb6:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	789b      	ldrb	r3, [r3, #2]
 800debc:	7dfa      	ldrb	r2, [r7, #23]
 800debe:	429a      	cmp	r2, r3
 800dec0:	f080 809e 	bcs.w	800e000 <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800dec8:	7dba      	ldrb	r2, [r7, #22]
 800deca:	429a      	cmp	r2, r3
 800decc:	f080 8098 	bcs.w	800e000 <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800ded0:	7dfb      	ldrb	r3, [r7, #23]
 800ded2:	68ba      	ldr	r2, [r7, #8]
 800ded4:	3348      	adds	r3, #72	@ 0x48
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	4413      	add	r3, r2
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d10e      	bne.n	800defe <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800dee0:	7dfb      	ldrb	r3, [r7, #23]
 800dee2:	68ba      	ldr	r2, [r7, #8]
 800dee4:	3360      	adds	r3, #96	@ 0x60
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	4413      	add	r3, r2
 800deea:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800deec:	2b00      	cmp	r3, #0
 800deee:	d106      	bne.n	800defe <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800def0:	7dfb      	ldrb	r3, [r7, #23]
 800def2:	68ba      	ldr	r2, [r7, #8]
 800def4:	4413      	add	r3, r2
 800def6:	2200      	movs	r2, #0
 800def8:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800defc:	e043      	b.n	800df86 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800defe:	7dfb      	ldrb	r3, [r7, #23]
 800df00:	68ba      	ldr	r2, [r7, #8]
 800df02:	3348      	adds	r3, #72	@ 0x48
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	4413      	add	r3, r2
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	db0e      	blt.n	800df2c <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800df0e:	7dfb      	ldrb	r3, [r7, #23]
 800df10:	68ba      	ldr	r2, [r7, #8]
 800df12:	3360      	adds	r3, #96	@ 0x60
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	4413      	add	r3, r2
 800df18:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	db06      	blt.n	800df2c <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800df1e:	7dfb      	ldrb	r3, [r7, #23]
 800df20:	68ba      	ldr	r2, [r7, #8]
 800df22:	4413      	add	r3, r2
 800df24:	2201      	movs	r2, #1
 800df26:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800df2a:	e02c      	b.n	800df86 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800df2c:	7dfb      	ldrb	r3, [r7, #23]
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	3348      	adds	r3, #72	@ 0x48
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4413      	add	r3, r2
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	da1e      	bge.n	800df7a <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800df3c:	7dfb      	ldrb	r3, [r7, #23]
 800df3e:	68ba      	ldr	r2, [r7, #8]
 800df40:	3360      	adds	r3, #96	@ 0x60
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	4413      	add	r3, r2
 800df46:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800df48:	2b00      	cmp	r3, #0
 800df4a:	db16      	blt.n	800df7a <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800df4c:	7dbb      	ldrb	r3, [r7, #22]
 800df4e:	68ba      	ldr	r2, [r7, #8]
 800df50:	3348      	adds	r3, #72	@ 0x48
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	4413      	add	r3, r2
 800df56:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800df58:	2b00      	cmp	r3, #0
 800df5a:	db0e      	blt.n	800df7a <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800df5c:	7dbb      	ldrb	r3, [r7, #22]
 800df5e:	68ba      	ldr	r2, [r7, #8]
 800df60:	3360      	adds	r3, #96	@ 0x60
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	4413      	add	r3, r2
 800df66:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800df68:	2b00      	cmp	r3, #0
 800df6a:	da06      	bge.n	800df7a <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800df6c:	7dfb      	ldrb	r3, [r7, #23]
 800df6e:	68ba      	ldr	r2, [r7, #8]
 800df70:	4413      	add	r3, r2
 800df72:	2201      	movs	r2, #1
 800df74:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800df78:	e005      	b.n	800df86 <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800df7a:	7dfb      	ldrb	r3, [r7, #23]
 800df7c:	68ba      	ldr	r2, [r7, #8]
 800df7e:	4413      	add	r3, r2
 800df80:	2200      	movs	r2, #0
 800df82:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800df86:	7dfb      	ldrb	r3, [r7, #23]
 800df88:	68ba      	ldr	r2, [r7, #8]
 800df8a:	4413      	add	r3, r2
 800df8c:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800df90:	2b00      	cmp	r3, #0
 800df92:	d035      	beq.n	800e000 <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	7ffa      	ldrb	r2, [r7, #31]
 800df98:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800df9a:	7dfb      	ldrb	r3, [r7, #23]
 800df9c:	68ba      	ldr	r2, [r7, #8]
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	4413      	add	r3, r2
 800dfa2:	685c      	ldr	r4, [r3, #4]
 800dfa4:	7dfb      	ldrb	r3, [r7, #23]
 800dfa6:	68ba      	ldr	r2, [r7, #8]
 800dfa8:	3318      	adds	r3, #24
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	4413      	add	r3, r2
 800dfae:	685d      	ldr	r5, [r3, #4]
 800dfb0:	7dfb      	ldrb	r3, [r7, #23]
 800dfb2:	68ba      	ldr	r2, [r7, #8]
 800dfb4:	3330      	adds	r3, #48	@ 0x30
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	4413      	add	r3, r2
 800dfba:	685e      	ldr	r6, [r3, #4]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	689b      	ldr	r3, [r3, #8]
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	78d2      	ldrb	r2, [r2, #3]
 800dfc4:	69b9      	ldr	r1, [r7, #24]
 800dfc6:	3118      	adds	r1, #24
 800dfc8:	7ff8      	ldrb	r0, [r7, #31]
 800dfca:	9105      	str	r1, [sp, #20]
 800dfcc:	9204      	str	r2, [sp, #16]
 800dfce:	9303      	str	r3, [sp, #12]
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	9302      	str	r3, [sp, #8]
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	9301      	str	r3, [sp, #4]
 800dfd8:	2300      	movs	r3, #0
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	4633      	mov	r3, r6
 800dfde:	462a      	mov	r2, r5
 800dfe0:	4621      	mov	r1, r4
 800dfe2:	f000 f81c 	bl	800e01e <VL53LX_f_028>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800dfea:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dfee:	f113 0f0f 	cmn.w	r3, #15
 800dff2:	d105      	bne.n	800e000 <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800dff4:	7dfb      	ldrb	r3, [r7, #23]
 800dff6:	68ba      	ldr	r2, [r7, #8]
 800dff8:	4413      	add	r3, r2
 800dffa:	2200      	movs	r2, #0
 800dffc:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800e000:	7ffb      	ldrb	r3, [r7, #31]
 800e002:	3301      	adds	r3, #1
 800e004:	77fb      	strb	r3, [r7, #31]
 800e006:	69bb      	ldr	r3, [r7, #24]
 800e008:	791b      	ldrb	r3, [r3, #4]
 800e00a:	7ffa      	ldrb	r2, [r7, #31]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	f4ff af40 	bcc.w	800de92 <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800e012:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800e016:	4618      	mov	r0, r3
 800e018:	3724      	adds	r7, #36	@ 0x24
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e01e <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800e01e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e022:	b0b2      	sub	sp, #200	@ 0xc8
 800e024:	af00      	add	r7, sp, #0
 800e026:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800e02a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e02e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e032:	4603      	mov	r3, r0
 800e034:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e038:	23f1      	movs	r3, #241	@ 0xf1
 800e03a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800e03e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e042:	f04f 0300 	mov.w	r3, #0
 800e046:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800e04a:	f04f 0200 	mov.w	r2, #0
 800e04e:	f04f 0300 	mov.w	r3, #0
 800e052:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	int64_t  half_b_minus_amb = 0;
 800e056:	f04f 0200 	mov.w	r2, #0
 800e05a:	f04f 0300 	mov.w	r3, #0
 800e05e:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e062:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e066:	17da      	asrs	r2, r3, #31
 800e068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e06c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800e070:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e074:	17da      	asrs	r2, r3, #31
 800e076:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e07a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e07e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e082:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e086:	4602      	mov	r2, r0
 800e088:	ebb3 0802 	subs.w	r8, r3, r2
 800e08c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e090:	460a      	mov	r2, r1
 800e092:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800e096:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e09a:	17da      	asrs	r2, r3, #31
 800e09c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e09e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e0a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	ebb8 0a03 	subs.w	sl, r8, r3
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	eb69 0b03 	sbc.w	fp, r9, r3
 800e0b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e0b4:	17da      	asrs	r2, r3, #31
 800e0b6:	673b      	str	r3, [r7, #112]	@ 0x70
 800e0b8:	677a      	str	r2, [r7, #116]	@ 0x74
 800e0ba:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e0be:	460b      	mov	r3, r1
 800e0c0:	ebba 0403 	subs.w	r4, sl, r3
 800e0c4:	4613      	mov	r3, r2
 800e0c6:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e0ca:	f04f 0200 	mov.w	r2, #0
 800e0ce:	f04f 0300 	mov.w	r3, #0
 800e0d2:	032b      	lsls	r3, r5, #12
 800e0d4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800e0d8:	0322      	lsls	r2, r4, #12
 800e0da:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e0de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e0e2:	17da      	asrs	r2, r3, #31
 800e0e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e0e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800e0e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e0ec:	17da      	asrs	r2, r3, #31
 800e0ee:	663b      	str	r3, [r7, #96]	@ 0x60
 800e0f0:	667a      	str	r2, [r7, #100]	@ 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e0f2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800e0f6:	4623      	mov	r3, r4
 800e0f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	1a9b      	subs	r3, r3, r2
 800e100:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e102:	462b      	mov	r3, r5
 800e104:	460a      	mov	r2, r1
 800e106:	eb63 0302 	sbc.w	r3, r3, r2
 800e10a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800e10c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e110:	17da      	asrs	r2, r3, #31
 800e112:	653b      	str	r3, [r7, #80]	@ 0x50
 800e114:	657a      	str	r2, [r7, #84]	@ 0x54
 800e116:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800e11a:	4623      	mov	r3, r4
 800e11c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e120:	4602      	mov	r2, r0
 800e122:	1a9b      	subs	r3, r3, r2
 800e124:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e126:	462b      	mov	r3, r5
 800e128:	460a      	mov	r2, r1
 800e12a:	eb63 0302 	sbc.w	r3, r3, r2
 800e12e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e130:	f04f 0200 	mov.w	r2, #0
 800e134:	f04f 0300 	mov.w	r3, #0
 800e138:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800e13c:	4629      	mov	r1, r5
 800e13e:	030b      	lsls	r3, r1, #12
 800e140:	4621      	mov	r1, r4
 800e142:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800e146:	4621      	mov	r1, r4
 800e148:	030a      	lsls	r2, r1, #12
 800e14a:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

	if (half_b_minus_amb != 0) {
 800e14e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e152:	4313      	orrs	r3, r2
 800e154:	f000 80a8 	beq.w	800e2a8 <VL53LX_f_028+0x28a>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800e158:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800e15c:	f04f 0000 	mov.w	r0, #0
 800e160:	f04f 0100 	mov.w	r1, #0
 800e164:	0319      	lsls	r1, r3, #12
 800e166:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800e16a:	0310      	lsls	r0, r2, #12
 800e16c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e170:	1814      	adds	r4, r2, r0
 800e172:	633c      	str	r4, [r7, #48]	@ 0x30
 800e174:	414b      	adcs	r3, r1
 800e176:	637b      	str	r3, [r7, #52]	@ 0x34
 800e178:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800e17c:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800e180:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e184:	1891      	adds	r1, r2, r2
 800e186:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e188:	415b      	adcs	r3, r3
 800e18a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e18c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e190:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800e194:	f7f2 f844 	bl	8000220 <__aeabi_ldivmod>
 800e198:	4602      	mov	r2, r0
 800e19a:	460b      	mov	r3, r1
 800e19c:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

		mean_phase  +=  2048;
 800e1a0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e1a4:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800e1a8:	6239      	str	r1, [r7, #32]
 800e1aa:	f143 0300 	adc.w	r3, r3, #0
 800e1ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1b0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e1b4:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
		mean_phase  += (4096 * (int64_t)bin);
 800e1b8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e1bc:	2200      	movs	r2, #0
 800e1be:	643b      	str	r3, [r7, #64]	@ 0x40
 800e1c0:	647a      	str	r2, [r7, #68]	@ 0x44
 800e1c2:	f04f 0200 	mov.w	r2, #0
 800e1c6:	f04f 0300 	mov.w	r3, #0
 800e1ca:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800e1ce:	4629      	mov	r1, r5
 800e1d0:	030b      	lsls	r3, r1, #12
 800e1d2:	4621      	mov	r1, r4
 800e1d4:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800e1d8:	4621      	mov	r1, r4
 800e1da:	030a      	lsls	r2, r1, #12
 800e1dc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800e1e0:	1884      	adds	r4, r0, r2
 800e1e2:	61bc      	str	r4, [r7, #24]
 800e1e4:	eb41 0303 	adc.w	r3, r1, r3
 800e1e8:	61fb      	str	r3, [r7, #28]
 800e1ea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e1ee:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800e1f2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e1f6:	1c51      	adds	r1, r2, #1
 800e1f8:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e1fa:	f143 0300 	adc.w	r3, r3, #0
 800e1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e200:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800e204:	460b      	mov	r3, r1
 800e206:	0fdb      	lsrs	r3, r3, #31
 800e208:	2200      	movs	r2, #0
 800e20a:	613b      	str	r3, [r7, #16]
 800e20c:	617a      	str	r2, [r7, #20]
 800e20e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e212:	4623      	mov	r3, r4
 800e214:	4602      	mov	r2, r0
 800e216:	189b      	adds	r3, r3, r2
 800e218:	60bb      	str	r3, [r7, #8]
 800e21a:	460b      	mov	r3, r1
 800e21c:	462a      	mov	r2, r5
 800e21e:	eb42 0303 	adc.w	r3, r2, r3
 800e222:	60fb      	str	r3, [r7, #12]
 800e224:	f04f 0200 	mov.w	r2, #0
 800e228:	f04f 0300 	mov.w	r3, #0
 800e22c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e230:	4621      	mov	r1, r4
 800e232:	084a      	lsrs	r2, r1, #1
 800e234:	4629      	mov	r1, r5
 800e236:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e23a:	4629      	mov	r1, r5
 800e23c:	104b      	asrs	r3, r1, #1
 800e23e:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8


		if (mean_phase  < 0)
 800e242:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e246:	2b00      	cmp	r3, #0
 800e248:	da05      	bge.n	800e256 <VL53LX_f_028+0x238>
			mean_phase = 0;
 800e24a:	f04f 0200 	mov.w	r2, #0
 800e24e:	f04f 0300 	mov.w	r3, #0
 800e252:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800e256:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e25a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e25e:	f173 0300 	sbcs.w	r3, r3, #0
 800e262:	db05      	blt.n	800e270 <VL53LX_f_028+0x252>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800e264:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e268:	f04f 0300 	mov.w	r3, #0
 800e26c:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8


		mean_phase32 = (int32_t)mean_phase;
 800e270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e274:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800e278:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 800e27c:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800e27e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e282:	fb93 f1f2 	sdiv	r1, r3, r2
 800e286:	fb01 f202 	mul.w	r2, r1, r2
 800e28a:	1a9b      	subs	r3, r3, r2
 800e28c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		mean_phase = mean_phase32;
 800e290:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e294:	17da      	asrs	r2, r3, #31
 800e296:	603b      	str	r3, [r7, #0]
 800e298:	607a      	str	r2, [r7, #4]
 800e29a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e29e:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8

		status = VL53LX_ERROR_NONE;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	}

	*pmean_phase = (uint32_t)mean_phase;
 800e2a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e2ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e2b0:	601a      	str	r2, [r3, #0]

	return status;
 800e2b2:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	37c8      	adds	r7, #200	@ 0xc8
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e2c0 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b087      	sub	sp, #28
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60ba      	str	r2, [r7, #8]
 800e2c8:	607b      	str	r3, [r7, #4]
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	73fb      	strb	r3, [r7, #15]
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800e2e0:	7bfa      	ldrb	r2, [r7, #15]
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	3206      	adds	r2, #6
 800e2e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e2ea:	6a3b      	ldr	r3, [r7, #32]
 800e2ec:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	75fb      	strb	r3, [r7, #23]
 800e2f8:	e02f      	b.n	800e35a <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e2fa:	7bfa      	ldrb	r2, [r7, #15]
 800e2fc:	7dfb      	ldrb	r3, [r7, #23]
 800e2fe:	4413      	add	r3, r2
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	7a92      	ldrb	r2, [r2, #10]
 800e304:	441a      	add	r2, r3
 800e306:	7bbb      	ldrb	r3, [r7, #14]
 800e308:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800e30a:	68ba      	ldr	r2, [r7, #8]
 800e30c:	7a92      	ldrb	r2, [r2, #10]
 800e30e:	fb93 f1f2 	sdiv	r1, r3, r2
 800e312:	fb01 f202 	mul.w	r2, r1, r2
 800e316:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e318:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800e31a:	7dfa      	ldrb	r2, [r7, #23]
 800e31c:	7bbb      	ldrb	r3, [r7, #14]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d20a      	bcs.n	800e338 <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681a      	ldr	r2, [r3, #0]
 800e326:	7db9      	ldrb	r1, [r7, #22]
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	3106      	adds	r1, #6
 800e32c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e330:	441a      	add	r2, r3
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	601a      	str	r2, [r3, #0]
 800e336:	e00d      	b.n	800e354 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800e338:	7dfa      	ldrb	r2, [r7, #23]
 800e33a:	7bbb      	ldrb	r3, [r7, #14]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d909      	bls.n	800e354 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800e340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	7db9      	ldrb	r1, [r7, #22]
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	3106      	adds	r1, #6
 800e34a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e34e:	441a      	add	r2, r3
 800e350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e352:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e354:	7dfb      	ldrb	r3, [r7, #23]
 800e356:	3301      	adds	r3, #1
 800e358:	75fb      	strb	r3, [r7, #23]
 800e35a:	7bbb      	ldrb	r3, [r7, #14]
 800e35c:	005a      	lsls	r2, r3, #1
 800e35e:	7dfb      	ldrb	r3, [r7, #23]
 800e360:	429a      	cmp	r2, r3
 800e362:	daca      	bge.n	800e2fa <VL53LX_f_022+0x3a>
	}
}
 800e364:	bf00      	nop
 800e366:	bf00      	nop
 800e368:	371c      	adds	r7, #28
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr

0800e372 <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800e372:	b580      	push	{r7, lr}
 800e374:	b088      	sub	sp, #32
 800e376:	af00      	add	r7, sp, #0
 800e378:	60ba      	str	r2, [r7, #8]
 800e37a:	461a      	mov	r2, r3
 800e37c:	4603      	mov	r3, r0
 800e37e:	81fb      	strh	r3, [r7, #14]
 800e380:	460b      	mov	r3, r1
 800e382:	81bb      	strh	r3, [r7, #12]
 800e384:	4613      	mov	r3, r2
 800e386:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800e388:	2300      	movs	r3, #0
 800e38a:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800e38c:	2300      	movs	r3, #0
 800e38e:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800e390:	2300      	movs	r3, #0
 800e392:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800e394:	2300      	movs	r3, #0
 800e396:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800e398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e39a:	89fa      	ldrh	r2, [r7, #14]
 800e39c:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800e39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a0:	89ba      	ldrh	r2, [r7, #12]
 800e3a2:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800e3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a6:	68ba      	ldr	r2, [r7, #8]
 800e3a8:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800e3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ac:	88fa      	ldrh	r2, [r7, #6]
 800e3ae:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800e3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3b2:	8a5b      	ldrh	r3, [r3, #18]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d101      	bne.n	800e3bc <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e3b8:	23f1      	movs	r3, #241	@ 0xf1
 800e3ba:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800e3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3be:	699b      	ldr	r3, [r3, #24]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d101      	bne.n	800e3c8 <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e3c4:	23f1      	movs	r3, #241	@ 0xf1
 800e3c6:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800e3c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d16f      	bne.n	800e4b0 <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800e3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3d2:	8a5b      	ldrh	r3, [r3, #18]
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7fd f904 	bl	800b5e2 <VL53LX_calc_pll_period_us>
 800e3da:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800e3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3de:	699b      	ldr	r3, [r3, #24]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800e3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e6:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e3f0:	6978      	ldr	r0, [r7, #20]
 800e3f2:	f7fd f90d 	bl	800b610 <VL53LX_duration_maths>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3fa:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800e3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3fe:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800e400:	0119      	lsls	r1, r3, #4
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e408:	6978      	ldr	r0, [r7, #20]
 800e40a:	f7fd f901 	bl	800b610 <VL53LX_duration_maths>
 800e40e:	4602      	mov	r2, r0
 800e410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e412:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800e418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e41a:	69db      	ldr	r3, [r3, #28]
 800e41c:	4619      	mov	r1, r3
 800e41e:	4610      	mov	r0, r2
 800e420:	f7fd fb6e 	bl	800bb00 <VL53LX_rate_maths>
 800e424:	4603      	mov	r3, r0
 800e426:	461a      	mov	r2, r3
 800e428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e42a:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e42e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800e430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e432:	6a1b      	ldr	r3, [r3, #32]
 800e434:	4619      	mov	r1, r3
 800e436:	4610      	mov	r0, r2
 800e438:	f7fd fb62 	bl	800bb00 <VL53LX_rate_maths>
 800e43c:	4603      	mov	r3, r0
 800e43e:	461a      	mov	r2, r3
 800e440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e442:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800e444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800e448:	461a      	mov	r2, r3
 800e44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e44c:	6a1b      	ldr	r3, [r3, #32]
 800e44e:	4619      	mov	r1, r3
 800e450:	4610      	mov	r0, r2
 800e452:	f7fd fb55 	bl	800bb00 <VL53LX_rate_maths>
 800e456:	4603      	mov	r3, r0
 800e458:	461a      	mov	r2, r3
 800e45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e45c:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800e45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e460:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800e462:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800e464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e466:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
		count_rate_total =
 800e468:	4413      	add	r3, r2
 800e46a:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800e46c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e470:	2b01      	cmp	r3, #1
 800e472:	d905      	bls.n	800e480 <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800e474:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e478:	69ba      	ldr	r2, [r7, #24]
 800e47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e47e:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800e480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e482:	8ada      	ldrh	r2, [r3, #22]
 800e484:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e488:	69b9      	ldr	r1, [r7, #24]
 800e48a:	2006      	movs	r0, #6
 800e48c:	f7fd fb7d 	bl	800bb8a <VL53LX_rate_per_spad_maths>
 800e490:	4603      	mov	r3, r0
 800e492:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800e494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e496:	86da      	strh	r2, [r3, #54]	@ 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800e498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e49a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800e49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e49e:	8ad9      	ldrh	r1, [r3, #22]
 800e4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4a2:	69db      	ldr	r3, [r3, #28]
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	f7fd f90c 	bl	800b6c2 <VL53LX_events_per_spad_maths>
 800e4aa:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800e4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ae:	639a      	str	r2, [r3, #56]	@ 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800e4b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3720      	adds	r7, #32
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800e4bc:	b590      	push	{r4, r7, lr}
 800e4be:	b085      	sub	sp, #20
 800e4c0:	af02      	add	r7, sp, #8
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	603a      	str	r2, [r7, #0]
 800e4c6:	80fb      	strh	r3, [r7, #6]
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	8a58      	ldrh	r0, [r3, #18]
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	8a9c      	ldrh	r4, [r3, #20]
 800e4d8:	88fb      	ldrh	r3, [r7, #6]
 800e4da:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e4de:	9201      	str	r2, [sp, #4]
 800e4e0:	9300      	str	r3, [sp, #0]
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	4622      	mov	r2, r4
 800e4e6:	f7fd fb85 	bl	800bbf4 <VL53LX_range_maths>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	8a58      	ldrh	r0, [r3, #18]
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	8a9c      	ldrh	r4, [r3, #20]
 800e502:	88fb      	ldrh	r3, [r7, #6]
 800e504:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e508:	9201      	str	r2, [sp, #4]
 800e50a:	9300      	str	r3, [sp, #0]
 800e50c:	2300      	movs	r3, #0
 800e50e:	4622      	mov	r2, r4
 800e510:	f7fd fb70 	bl	800bbf4 <VL53LX_range_maths>
 800e514:	4603      	mov	r3, r0
 800e516:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	8a58      	ldrh	r0, [r3, #18]
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	f8b3 1042 	ldrh.w	r1, [r3, #66]	@ 0x42
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	8a9c      	ldrh	r4, [r3, #20]
 800e52c:	88fb      	ldrh	r3, [r7, #6]
 800e52e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e532:	9201      	str	r2, [sp, #4]
 800e534:	9300      	str	r3, [sp, #0]
 800e536:	2300      	movs	r3, #0
 800e538:	4622      	mov	r2, r4
 800e53a:	f7fd fb5b 	bl	800bbf4 <VL53LX_range_maths>
 800e53e:	4603      	mov	r3, r0
 800e540:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48




	LOG_FUNCTION_END(0);
}
 800e548:	bf00      	nop
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd90      	pop	{r4, r7, pc}

0800e550 <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b086      	sub	sp, #24
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800e55c:	2300      	movs	r3, #0
 800e55e:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800e560:	2300      	movs	r3, #0
 800e562:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800e564:	2300      	movs	r3, #0
 800e566:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800e568:	2300      	movs	r3, #0
 800e56a:	757b      	strb	r3, [r7, #21]





	memcpy(
 800e56c:	22ac      	movs	r2, #172	@ 0xac
 800e56e:	68b9      	ldr	r1, [r7, #8]
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f00b fbd0 	bl	8019d16 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e576:	2300      	movs	r3, #0
 800e578:	75fb      	strb	r3, [r7, #23]
 800e57a:	e008      	b.n	800e58e <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800e57c:	7dfa      	ldrb	r2, [r7, #23]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	3206      	adds	r2, #6
 800e582:	2100      	movs	r1, #0
 800e584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e588:	7dfb      	ldrb	r3, [r7, #23]
 800e58a:	3301      	adds	r3, #1
 800e58c:	75fb      	strb	r3, [r7, #23]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	7a5b      	ldrb	r3, [r3, #9]
 800e592:	7dfa      	ldrb	r2, [r7, #23]
 800e594:	429a      	cmp	r2, r3
 800e596:	d3f1      	bcc.n	800e57c <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800e598:	68f9      	ldr	r1, [r7, #12]
 800e59a:	68b8      	ldr	r0, [r7, #8]
 800e59c:	f000 f878 	bl	800e690 <VL53LX_f_030>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	7a9a      	ldrb	r2, [r3, #10]
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	7a9b      	ldrb	r3, [r3, #10]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d203      	bcs.n	800e5b8 <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	7a9b      	ldrb	r3, [r3, #10]
 800e5b4:	75bb      	strb	r3, [r7, #22]
 800e5b6:	e002      	b.n	800e5be <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	7a9b      	ldrb	r3, [r3, #10]
 800e5bc:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800e5be:	2300      	movs	r3, #0
 800e5c0:	75fb      	strb	r3, [r7, #23]
 800e5c2:	e05c      	b.n	800e67e <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800e5c4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	db0f      	blt.n	800e5ec <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e5cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e5d6:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	7a92      	ldrb	r2, [r2, #10]
 800e5dc:	b252      	sxtb	r2, r2
 800e5de:	fb93 f1f2 	sdiv	r1, r3, r2
 800e5e2:	fb01 f202 	mul.w	r2, r1, r2
 800e5e6:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e5e8:	757b      	strb	r3, [r7, #21]
 800e5ea:	e013      	b.n	800e614 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	7a9b      	ldrb	r3, [r3, #10]
 800e5f0:	b25b      	sxtb	r3, r3
 800e5f2:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800e5f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e5fe:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e600:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800e602:	68ba      	ldr	r2, [r7, #8]
 800e604:	7a92      	ldrb	r2, [r2, #10]
 800e606:	b252      	sxtb	r2, r2
 800e608:	fb93 f1f2 	sdiv	r1, r3, r2
 800e60c:	fb01 f202 	mul.w	r2, r1, r2
 800e610:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e612:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800e614:	7d7b      	ldrb	r3, [r7, #21]
 800e616:	461a      	mov	r2, r3
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	3206      	adds	r2, #6
 800e61c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800e620:	7df9      	ldrb	r1, [r7, #23]
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	3106      	adds	r1, #6
 800e626:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800e62a:	429a      	cmp	r2, r3
 800e62c:	dd12      	ble.n	800e654 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800e62e:	7d7b      	ldrb	r3, [r7, #21]
 800e630:	461a      	mov	r2, r3
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	3206      	adds	r2, #6
 800e636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800e63a:	7df9      	ldrb	r1, [r7, #23]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	3106      	adds	r1, #6
 800e640:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800e644:	7d79      	ldrb	r1, [r7, #21]
 800e646:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800e648:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	1d82      	adds	r2, r0, #6
 800e64e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e652:	e006      	b.n	800e662 <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800e654:	7d7b      	ldrb	r3, [r7, #21]
 800e656:	461a      	mov	r2, r3
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	3206      	adds	r2, #6
 800e65c:	2100      	movs	r1, #0
 800e65e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800e662:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e664:	7d7b      	ldrb	r3, [r7, #21]
 800e666:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	3206      	adds	r2, #6
 800e66c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	1d82      	adds	r2, r0, #6
 800e674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800e678:	7dfb      	ldrb	r3, [r7, #23]
 800e67a:	3301      	adds	r3, #1
 800e67c:	75fb      	strb	r3, [r7, #23]
 800e67e:	7dfa      	ldrb	r2, [r7, #23]
 800e680:	7dbb      	ldrb	r3, [r7, #22]
 800e682:	429a      	cmp	r2, r3
 800e684:	d39e      	bcc.n	800e5c4 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800e686:	bf00      	nop
 800e688:	bf00      	nop
 800e68a:	3718      	adds	r7, #24
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b086      	sub	sp, #24
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800e69a:	2300      	movs	r3, #0
 800e69c:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7fd fb87 	bl	800bdc4 <VL53LX_decode_vcsel_period>
 800e6b6:	4603      	mov	r3, r0
	period = 2048 *
 800e6b8:	02db      	lsls	r3, r3, #11
 800e6ba:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d00a      	beq.n	800e6d8 <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		remapped_phase =
 800e6c8:	68ba      	ldr	r2, [r7, #8]
 800e6ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800e6ce:	68b9      	ldr	r1, [r7, #8]
 800e6d0:	fb01 f202 	mul.w	r2, r1, r2
 800e6d4:	1a9b      	subs	r3, r3, r2
 800e6d6:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800e6de:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800e6e0:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	dd09      	ble.n	800e700 <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	da01      	bge.n	800e6fa <VL53LX_f_030+0x6a>
 800e6f6:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800e6fa:	12db      	asrs	r3, r3, #11
 800e6fc:	75fb      	strb	r3, [r7, #23]
 800e6fe:	e008      	b.n	800e712 <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800e706:	2b00      	cmp	r3, #0
 800e708:	da01      	bge.n	800e70e <VL53LX_f_030+0x7e>
 800e70a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800e70e:	12db      	asrs	r3, r3, #11
 800e710:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800e712:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e716:	4618      	mov	r0, r3
 800e718:	3718      	adds	r7, #24
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800e71e:	b580      	push	{r7, lr}
 800e720:	b08e      	sub	sp, #56	@ 0x38
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
 800e726:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e728:	2300      	movs	r3, #0
 800e72a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800e72e:	2300      	movs	r3, #0
 800e730:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t  bin_seq_length = 0;
 800e734:	2300      	movs	r3, #0
 800e736:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t  repeat_count   = 0;
 800e73a:	2300      	movs	r3, #0
 800e73c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800e73e:	2300      	movs	r3, #0
 800e740:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t  lc       = 0;
 800e744:	2300      	movs	r3, #0
 800e746:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t  i       = 0;
 800e74a:	2300      	movs	r3, #0
 800e74c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800e750:	22ac      	movs	r2, #172	@ 0xac
 800e752:	6879      	ldr	r1, [r7, #4]
 800e754:	6838      	ldr	r0, [r7, #0]
 800e756:	f00b fade 	bl	8019d16 <memcpy>


	podata->VL53LX_p_021 = 0;
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	2200      	movs	r2, #0
 800e75e:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e760:	2300      	movs	r3, #0
 800e762:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e766:	e00a      	b.n	800e77e <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800e768:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e76c:	683a      	ldr	r2, [r7, #0]
 800e76e:	4413      	add	r3, r2
 800e770:	2210      	movs	r2, #16
 800e772:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e774:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e778:	3301      	adds	r3, #1
 800e77a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e77e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e782:	2b05      	cmp	r3, #5
 800e784:	d9f0      	bls.n	800e768 <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e786:	2300      	movs	r3, #0
 800e788:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e78c:	e00b      	b.n	800e7a6 <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800e78e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	3206      	adds	r2, #6
 800e796:	2100      	movs	r1, #0
 800e798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e79c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	7a5b      	ldrb	r3, [r3, #9]
 800e7aa:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d3ed      	bcc.n	800e78e <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e7b8:	e012      	b.n	800e7e0 <VL53LX_f_031+0xc2>
		bin_initial_index[lc] = 0x00;
 800e7ba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7be:	3338      	adds	r3, #56	@ 0x38
 800e7c0:	443b      	add	r3, r7
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800e7c8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7cc:	3338      	adds	r3, #56	@ 0x38
 800e7ce:	443b      	add	r3, r7
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e7d6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7da:	3301      	adds	r3, #1
 800e7dc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e7e0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7e4:	2b0f      	cmp	r3, #15
 800e7e6:	d9e8      	bls.n	800e7ba <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e7f4:	e068      	b.n	800e8c8 <VL53LX_f_031+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 800e7f6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	7b1b      	ldrb	r3, [r3, #12]
 800e800:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800e804:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e808:	3338      	adds	r3, #56	@ 0x38
 800e80a:	443b      	add	r3, r7
 800e80c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d115      	bne.n	800e840 <VL53LX_f_031+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800e814:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e818:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800e81c:	0092      	lsls	r2, r2, #2
 800e81e:	b2d2      	uxtb	r2, r2
 800e820:	3338      	adds	r3, #56	@ 0x38
 800e822:	443b      	add	r3, r7
 800e824:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800e828:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e82c:	683a      	ldr	r2, [r7, #0]
 800e82e:	4413      	add	r3, r2
 800e830:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800e834:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800e836:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e83a:	3301      	adds	r3, #1
 800e83c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800e840:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e844:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800e848:	443a      	add	r2, r7
 800e84a:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800e84e:	3201      	adds	r2, #1
 800e850:	b2d2      	uxtb	r2, r2
 800e852:	3338      	adds	r3, #56	@ 0x38
 800e854:	443b      	add	r3, r7
 800e856:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800e85a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e85e:	3338      	adds	r3, #56	@ 0x38
 800e860:	443b      	add	r3, r7
 800e862:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		for (i = 0 ; i < 4 ; i++)
 800e86a:	2300      	movs	r3, #0
 800e86c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e870:	e021      	b.n	800e8b6 <VL53LX_f_031+0x198>
			podata->bin_data[VL53LX_p_032+i] +=
 800e872:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e876:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e87a:	441a      	add	r2, r3
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	3206      	adds	r2, #6
 800e880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800e884:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e888:	009a      	lsls	r2, r3, #2
 800e88a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e88e:	441a      	add	r2, r3
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	3206      	adds	r2, #6
 800e894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800e898:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 800e89c:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800e8a0:	4402      	add	r2, r0
 800e8a2:	4419      	add	r1, r3
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	3206      	adds	r2, #6
 800e8a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800e8ac:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e8b6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e8ba:	2b03      	cmp	r3, #3
 800e8bc:	d9d9      	bls.n	800e872 <VL53LX_f_031+0x154>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e8be:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e8c8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e8cc:	2b05      	cmp	r3, #5
 800e8ce:	d992      	bls.n	800e7f6 <VL53LX_f_031+0xd8>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e8d6:	e022      	b.n	800e91e <VL53LX_f_031+0x200>

		bin_cfg = podata->bin_seq[lc];
 800e8d8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e8dc:	683a      	ldr	r2, [r7, #0]
 800e8de:	4413      	add	r3, r2
 800e8e0:	7b1b      	ldrb	r3, [r3, #12]
 800e8e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800e8e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e8ea:	2b0f      	cmp	r3, #15
 800e8ec:	d80c      	bhi.n	800e908 <VL53LX_f_031+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800e8ee:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
			podata->bin_rep[lc] =
 800e8f2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
				bin_repeat_count[bin_cfg];
 800e8f6:	3238      	adds	r2, #56	@ 0x38
 800e8f8:	443a      	add	r2, r7
 800e8fa:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800e8fe:	683a      	ldr	r2, [r7, #0]
 800e900:	4413      	add	r3, r2
 800e902:	460a      	mov	r2, r1
 800e904:	749a      	strb	r2, [r3, #18]
 800e906:	e005      	b.n	800e914 <VL53LX_f_031+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 800e908:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e90c:	683a      	ldr	r2, [r7, #0]
 800e90e:	4413      	add	r3, r2
 800e910:	2200      	movs	r2, #0
 800e912:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e914:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e918:	3301      	adds	r3, #1
 800e91a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e91e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e922:	2b05      	cmp	r3, #5
 800e924:	d9d8      	bls.n	800e8d8 <VL53LX_f_031+0x1ba>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800e926:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e92a:	009b      	lsls	r3, r3, #2
 800e92c:	b2da      	uxtb	r2, r3
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e932:	2300      	movs	r3, #0
 800e934:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e938:	e050      	b.n	800e9dc <VL53LX_f_031+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800e93a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e93e:	3338      	adds	r3, #56	@ 0x38
 800e940:	443b      	add	r3, r7
 800e942:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e946:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if (repeat_count > 0) {
 800e948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	dd41      	ble.n	800e9d2 <VL53LX_f_031+0x2b4>

			VL53LX_p_032 = bin_initial_index[lc];
 800e94e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e952:	3338      	adds	r3, #56	@ 0x38
 800e954:	443b      	add	r3, r7
 800e956:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e95a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800e95e:	2300      	movs	r3, #0
 800e960:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e964:	e031      	b.n	800e9ca <VL53LX_f_031+0x2ac>
				podata->bin_data[VL53LX_p_032+i] +=
 800e966:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e96a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e96e:	441a      	add	r2, r3
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	3206      	adds	r2, #6
 800e974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800e978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e97a:	0fda      	lsrs	r2, r3, #31
 800e97c:	4413      	add	r3, r2
 800e97e:	105b      	asrs	r3, r3, #1
 800e980:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800e982:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e986:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e98a:	441a      	add	r2, r3
 800e98c:	4401      	add	r1, r0
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	3206      	adds	r2, #6
 800e992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800e996:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e99a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e99e:	441a      	add	r2, r3
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	3206      	adds	r2, #6
 800e9a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e9a8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e9ac:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e9b0:	441a      	add	r2, r3
 800e9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9b4:	fb91 f1f3 	sdiv	r1, r1, r3
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	3206      	adds	r2, #6
 800e9bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800e9c0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e9ca:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e9ce:	2b03      	cmp	r3, #3
 800e9d0:	d9c9      	bls.n	800e966 <VL53LX_f_031+0x248>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e9d2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e9dc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e9e0:	2b0f      	cmp	r3, #15
 800e9e2:	d9aa      	bls.n	800e93a <VL53LX_f_031+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800e9ea:	7bfb      	ldrb	r3, [r7, #15]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d102      	bne.n	800e9f6 <VL53LX_f_031+0x2d8>
		(bin_repeat_count[15] > 0))
 800e9f0:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d002      	beq.n	800e9fc <VL53LX_f_031+0x2de>
		podata->number_of_ambient_bins = 4;
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	2204      	movs	r2, #4
 800e9fa:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800e9fc:	f997 3034 	ldrsb.w	r3, [r7, #52]	@ 0x34
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3738      	adds	r7, #56	@ 0x38
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800ea08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea0a:	b0cb      	sub	sp, #300	@ 0x12c
 800ea0c:	af06      	add	r7, sp, #24
 800ea0e:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800ea12:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800ea16:	6020      	str	r0, [r4, #0]
 800ea18:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800ea1c:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 800ea20:	6001      	str	r1, [r0, #0]
 800ea22:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800ea26:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800ea2a:	600a      	str	r2, [r1, #0]
 800ea2c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800ea30:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800ea34:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ea36:	2300      	movs	r3, #0
 800ea38:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800ea3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ea40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800ea44:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ea48:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800ea4c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800ea50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800ea54:	f107 0318 	add.w	r3, r7, #24
 800ea58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800ea60:	2300      	movs	r3, #0
 800ea62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	uint8_t  xtalk_enable                  = 0;
 800ea66:	2300      	movs	r3, #0
 800ea68:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	uint8_t  r                             = 0;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
	uint8_t  t                             = 0;
 800ea72:	2300      	movs	r3, #0
 800ea74:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0


	int16_t  delta_mm                      = 0;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800ea84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ea88:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ea8c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800ea90:	6818      	ldr	r0, [r3, #0]
 800ea92:	f7ff fe44 	bl	800e71e <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800ea96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ea9a:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eaa2:	3348      	adds	r3, #72	@ 0x48
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	2000      	movs	r0, #0
 800eaa8:	f7fd f9dd 	bl	800be66 <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800eaac:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800eab0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eab4:	3348      	adds	r3, #72	@ 0x48
 800eab6:	4619      	mov	r1, r3
 800eab8:	4610      	mov	r0, r2
 800eaba:	f7fd f996 	bl	800bdea <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800eabe:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d142      	bne.n	800eb4c <VL53LX_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800eac6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eaca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d039      	beq.n	800eb4c <VL53LX_hist_process_data+0x144>
		status =
		VL53LX_f_032(
 800ead8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eadc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800eae4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eae8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	@ 0x30
 800eaf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eaf6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	@ 0x32
 800eb00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eb04:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800eb0e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800eb12:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800eb16:	6812      	ldr	r2, [r2, #0]
 800eb18:	f892 20a8 	ldrb.w	r2, [r2, #168]	@ 0xa8
 800eb1c:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800eb20:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800eb24:	6809      	ldr	r1, [r1, #0]
 800eb26:	f891 10a9 	ldrb.w	r1, [r1, #169]	@ 0xa9
 800eb2a:	f107 0014 	add.w	r0, r7, #20
 800eb2e:	9004      	str	r0, [sp, #16]
 800eb30:	9103      	str	r1, [sp, #12]
 800eb32:	9202      	str	r2, [sp, #8]
 800eb34:	9301      	str	r3, [sp, #4]
 800eb36:	2300      	movs	r3, #0
 800eb38:	9300      	str	r3, [sp, #0]
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	4632      	mov	r2, r6
 800eb3e:	4629      	mov	r1, r5
 800eb40:	4620      	mov	r0, r4
 800eb42:	f002 f9af 	bl	8010ea4 <VL53LX_f_032>
 800eb46:	4603      	mov	r3, r0
 800eb48:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800eb4c:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d115      	bne.n	800eb80 <VL53LX_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800eb54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eb58:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d00c      	beq.n	800eb80 <VL53LX_hist_process_data+0x178>
		status =
			VL53LX_f_033(
 800eb66:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800eb6a:	697a      	ldr	r2, [r7, #20]
 800eb6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb70:	3348      	adds	r3, #72	@ 0x48
 800eb72:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800eb76:	f002 fc04 	bl	8011382 <VL53LX_f_033>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800eb80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800eb84:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
	presults->xmonitor.total_periods_elapsed =
 800eb88:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eb8c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800eb90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800eb94:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800eb98:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eb9c:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800eba0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eba4:	2200      	movs	r2, #0
 800eba6:	f8a3 2174 	strh.w	r2, [r3, #372]	@ 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800ebaa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ebae:	2200      	movs	r2, #0
 800ebb0:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c

	presults->xmonitor.range_id     = 0;
 800ebb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ebb8:	2200      	movs	r2, #0
 800ebba:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800ebbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e



	xtalk_enable = 0;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800ebce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ebd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d002      	beq.n	800ebe6 <VL53LX_hist_process_data+0x1de>
		xtalk_enable = 1;
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800ebec:	e108      	b.n	800ee00 <VL53LX_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800ebee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ebf2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 800ebfc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28



		status =
		VL53LX_f_025(
 800ec00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ec04:	3348      	adds	r3, #72	@ 0x48
 800ec06:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 800ec0a:	7814      	ldrb	r4, [r2, #0]
 800ec0c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800ec10:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800ec14:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800ec18:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 800ec1c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800ec20:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ec24:	9405      	str	r4, [sp, #20]
 800ec26:	f8d7 4134 	ldr.w	r4, [r7, #308]	@ 0x134
 800ec2a:	9404      	str	r4, [sp, #16]
 800ec2c:	f8d7 40fc 	ldr.w	r4, [r7, #252]	@ 0xfc
 800ec30:	9403      	str	r4, [sp, #12]
 800ec32:	f8d7 4100 	ldr.w	r4, [r7, #256]	@ 0x100
 800ec36:	9402      	str	r4, [sp, #8]
 800ec38:	f8d7 4104 	ldr.w	r4, [r7, #260]	@ 0x104
 800ec3c:	9401      	str	r4, [sp, #4]
 800ec3e:	9300      	str	r3, [sp, #0]
 800ec40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ec44:	6812      	ldr	r2, [r2, #0]
 800ec46:	6809      	ldr	r1, [r1, #0]
 800ec48:	6800      	ldr	r0, [r0, #0]
 800ec4a:	f7fe fe65 	bl	800d918 <VL53LX_f_025>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800ec54:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	f040 80cb 	bne.w	800edf4 <VL53LX_hist_process_data+0x3ec>
 800ec5e:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	f040 80c6 	bne.w	800edf4 <VL53LX_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 800ec68:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ec6c:	7c9b      	ldrb	r3, [r3, #18]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d110      	bne.n	800ec94 <VL53LX_hist_process_data+0x28c>
			pdata = &(presults->VL53LX_p_003[0]);
 800ec72:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ec76:	3314      	adds	r3, #20
 800ec78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800ec7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ec80:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800ec82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec86:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800ec88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ec8c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800ec8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec92:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800ec94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ec98:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800eca0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800eca4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	461a      	mov	r2, r3
 800ecac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ecb0:	fb02 f303 	mul.w	r3, r2, r3
 800ecb4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800ecb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ecbc:	011b      	lsls	r3, r3, #4
 800ecbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800ecc8:	e08b      	b.n	800ede2 <VL53LX_hist_process_data+0x3da>

			pdata = &(presults->VL53LX_p_003[t]);
 800ecca:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800ecce:	224c      	movs	r2, #76	@ 0x4c
 800ecd0:	fb02 f303 	mul.w	r3, r2, r3
 800ecd4:	3310      	adds	r3, #16
 800ecd6:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800ecda:	4413      	add	r3, r2
 800ecdc:	3304      	adds	r3, #4
 800ecde:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800ece2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ece6:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 800ecea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ecee:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	dd0e      	ble.n	800ed14 <VL53LX_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 800ecf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ecfa:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800ecfe:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800ed00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ed04:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800ed08:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800ed0a:	1ad3      	subs	r3, r2, r3
 800ed0c:	b29b      	uxth	r3, r3
				delta_mm =
 800ed0e:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 800ed12:	e00d      	b.n	800ed30 <VL53LX_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 800ed14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ed18:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800ed1c:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800ed1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ed22:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800ed26:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800ed28:	1ad3      	subs	r3, r2, r3
 800ed2a:	b29b      	uxth	r3, r3
				delta_mm =
 800ed2c:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800ed30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ed34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
			XtalkDetectMaxSigma =
 800ed3c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800ed40:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ed44:	781b      	ldrb	r3, [r3, #0]
 800ed46:	461a      	mov	r2, r3
 800ed48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ed4c:	fb02 f303 	mul.w	r3, r2, r3
 800ed50:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma <<= 5;
 800ed54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ed58:	015b      	lsls	r3, r3, #5
 800ed5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			if (pdata->median_range_mm  >
 800ed5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ed62:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800ed66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ed6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
			if (pdata->median_range_mm  >
 800ed74:	429a      	cmp	r2, r3
 800ed76:	dd2f      	ble.n	800edd8 <VL53LX_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 800ed78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ed7c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800ed80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ed84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	da22      	bge.n	800edd8 <VL53LX_hist_process_data+0x3d0>
			pdata->VL53LX_p_009 <
 800ed92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ed96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800ed98:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d91b      	bls.n	800edd8 <VL53LX_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800eda0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eda4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800eda6:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800eda8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800edac:	4293      	cmp	r3, r2
 800edae:	d913      	bls.n	800edd8 <VL53LX_hist_process_data+0x3d0>
			delta_mm <
 800edb0:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	@ 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800edb4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800edb8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800edbc:	6812      	ldr	r2, [r2, #0]
 800edbe:	8fd2      	ldrh	r2, [r2, #62]	@ 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800edc0:	4293      	cmp	r3, r2
 800edc2:	da09      	bge.n	800edd8 <VL53LX_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 800edc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800edc8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
				memcpy(
 800edcc:	224c      	movs	r2, #76	@ 0x4c
 800edce:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 800edd2:	4618      	mov	r0, r3
 800edd4:	f00a ff9f 	bl	8019d16 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800edd8:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800eddc:	3301      	adds	r3, #1
 800edde:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800ede2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ede6:	7c9b      	ldrb	r3, [r3, #18]
 800ede8:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 800edec:	429a      	cmp	r2, r3
 800edee:	f4ff af6c 	bcc.w	800ecca <VL53LX_hist_process_data+0x2c2>
 800edf2:	e000      	b.n	800edf6 <VL53LX_hist_process_data+0x3ee>
			continue;
 800edf4:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800edf6:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800edfa:	3301      	adds	r3, #1
 800edfc:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800ee00:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 800ee04:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	f67f aef0 	bls.w	800ebee <VL53LX_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800ee0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ee12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 800ee1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	LOG_FUNCTION_END(status);

	return status;
 800ee20:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ee2e <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b086      	sub	sp, #24
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	60f8      	str	r0, [r7, #12]
 800ee36:	460b      	mov	r3, r1
 800ee38:	607a      	str	r2, [r7, #4]
 800ee3a:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800ee40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d104      	bne.n	800ee52 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800ee48:	68f8      	ldr	r0, [r7, #12]
 800ee4a:	f7f9 fb77 	bl	800853c <VL53LX_disable_firmware>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800ee52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d104      	bne.n	800ee64 <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	f7f9 fb9f 	bl	800859e <VL53LX_enable_powerforce>
 800ee60:	4603      	mov	r3, r0
 800ee62:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800ee64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d105      	bne.n	800ee78 <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800ee6c:	21fa      	movs	r1, #250	@ 0xfa
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f002 fcf6 	bl	8011860 <VL53LX_WaitUs>
 800ee74:	4603      	mov	r3, r0
 800ee76:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800ee78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d107      	bne.n	800ee90 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800ee80:	2201      	movs	r2, #1
 800ee82:	f240 7181 	movw	r1, #1921	@ 0x781
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f002 fbf8 	bl	801167c <VL53LX_WrByte>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800ee90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d107      	bne.n	800eea8 <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800ee98:	2205      	movs	r2, #5
 800ee9a:	f240 6183 	movw	r1, #1667	@ 0x683
 800ee9e:	68f8      	ldr	r0, [r7, #12]
 800eea0:	f002 fbec 	bl	801167c <VL53LX_WrByte>
 800eea4:	4603      	mov	r3, r0
 800eea6:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800eea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d105      	bne.n	800eebc <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800eeb0:	6879      	ldr	r1, [r7, #4]
 800eeb2:	68f8      	ldr	r0, [r7, #12]
 800eeb4:	f002 fcd4 	bl	8011860 <VL53LX_WaitUs>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800eebc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d107      	bne.n	800eed4 <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800eec4:	2201      	movs	r2, #1
 800eec6:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 800eeca:	68f8      	ldr	r0, [r7, #12]
 800eecc:	f002 fbd6 	bl	801167c <VL53LX_WrByte>
 800eed0:	4603      	mov	r3, r0
 800eed2:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800eed4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d108      	bne.n	800eeee <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800eedc:	897b      	ldrh	r3, [r7, #10]
 800eede:	461a      	mov	r2, r3
 800eee0:	f240 7184 	movw	r1, #1924	@ 0x784
 800eee4:	68f8      	ldr	r0, [r7, #12]
 800eee6:	f002 fbf3 	bl	80116d0 <VL53LX_WrWord>
 800eeea:	4603      	mov	r3, r0
 800eeec:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800eeee:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3718      	adds	r7, #24
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}

0800eefa <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800eefa:	b580      	push	{r7, lr}
 800eefc:	b086      	sub	sp, #24
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	60f8      	str	r0, [r7, #12]
 800ef02:	607b      	str	r3, [r7, #4]
 800ef04:	460b      	mov	r3, r1
 800ef06:	72fb      	strb	r3, [r7, #11]
 800ef08:	4613      	mov	r3, r2
 800ef0a:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800ef10:	2300      	movs	r3, #0
 800ef12:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800ef14:	7afb      	ldrb	r3, [r7, #11]
 800ef16:	75bb      	strb	r3, [r7, #22]
 800ef18:	e041      	b.n	800ef9e <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800ef1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d108      	bne.n	800ef34 <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800ef22:	7dbb      	ldrb	r3, [r7, #22]
 800ef24:	461a      	mov	r2, r3
 800ef26:	f240 7194 	movw	r1, #1940	@ 0x794
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f002 fba6 	bl	801167c <VL53LX_WrByte>
 800ef30:	4603      	mov	r3, r0
 800ef32:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800ef34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d107      	bne.n	800ef4c <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f240 7183 	movw	r1, #1923	@ 0x783
 800ef42:	68f8      	ldr	r0, [r7, #12]
 800ef44:	f002 fb9a 	bl	801167c <VL53LX_WrByte>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800ef4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d105      	bne.n	800ef60 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800ef54:	2105      	movs	r1, #5
 800ef56:	68f8      	ldr	r0, [r7, #12]
 800ef58:	f002 fc82 	bl	8011860 <VL53LX_WaitUs>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800ef60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d107      	bne.n	800ef78 <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800ef68:	2201      	movs	r2, #1
 800ef6a:	f240 7183 	movw	r1, #1923	@ 0x783
 800ef6e:	68f8      	ldr	r0, [r7, #12]
 800ef70:	f002 fb84 	bl	801167c <VL53LX_WrByte>
 800ef74:	4603      	mov	r3, r0
 800ef76:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800ef78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d108      	bne.n	800ef92 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800ef80:	2304      	movs	r3, #4
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	f44f 61f2 	mov.w	r1, #1936	@ 0x790
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f002 fb41 	bl	8011610 <VL53LX_ReadMulti>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	3304      	adds	r3, #4
 800ef96:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800ef98:	7dbb      	ldrb	r3, [r7, #22]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	75bb      	strb	r3, [r7, #22]
 800ef9e:	7dba      	ldrb	r2, [r7, #22]
 800efa0:	7af9      	ldrb	r1, [r7, #11]
 800efa2:	7abb      	ldrb	r3, [r7, #10]
 800efa4:	440b      	add	r3, r1
 800efa6:	429a      	cmp	r2, r3
 800efa8:	dbb7      	blt.n	800ef1a <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800efaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3718      	adds	r7, #24
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b084      	sub	sp, #16
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800efbe:	2300      	movs	r3, #0
 800efc0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800efc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d107      	bne.n	800efda <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800efca:	2201      	movs	r2, #1
 800efcc:	f240 7183 	movw	r1, #1923	@ 0x783
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f002 fb53 	bl	801167c <VL53LX_WrByte>
 800efd6:	4603      	mov	r3, r0
 800efd8:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800efda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d107      	bne.n	800eff2 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800efe2:	2200      	movs	r2, #0
 800efe4:	f240 7181 	movw	r1, #1921	@ 0x781
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f002 fb47 	bl	801167c <VL53LX_WrByte>
 800efee:	4603      	mov	r3, r0
 800eff0:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800eff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d104      	bne.n	800f004 <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f7f9 fae1 	bl	80085c2 <VL53LX_disable_powerforce>
 800f000:	4603      	mov	r3, r0
 800f002:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800f004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d104      	bne.n	800f016 <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7f9 fa83 	bl	8008518 <VL53LX_enable_firmware>
 800f012:	4603      	mov	r3, r0
 800f014:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800f016:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3710      	adds	r7, #16
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}

0800f022 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800f022:	b480      	push	{r7}
 800f024:	b087      	sub	sp, #28
 800f026:	af00      	add	r7, sp, #0
 800f028:	4603      	mov	r3, r0
 800f02a:	60b9      	str	r1, [r7, #8]
 800f02c:	607a      	str	r2, [r7, #4]
 800f02e:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f030:	2300      	movs	r3, #0
 800f032:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800f034:	2300      	movs	r3, #0
 800f036:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800f038:	89fb      	ldrh	r3, [r7, #14]
 800f03a:	2b03      	cmp	r3, #3
 800f03c:	d802      	bhi.n	800f044 <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f03e:	f06f 0308 	mvn.w	r3, #8
 800f042:	e017      	b.n	800f074 <VL53LX_nvm_decode_optical_centre+0x52>


	tmp  = 0x00F0;
 800f044:	23f0      	movs	r3, #240	@ 0xf0
 800f046:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	3302      	adds	r3, #2
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	461a      	mov	r2, r3
 800f050:	8afb      	ldrh	r3, [r7, #22]
 800f052:	1a9b      	subs	r3, r3, r2
 800f054:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800f056:	8afb      	ldrh	r3, [r7, #22]
 800f058:	2bff      	cmp	r3, #255	@ 0xff
 800f05a:	d901      	bls.n	800f060 <VL53LX_nvm_decode_optical_centre+0x3e>
		tmp = 0;
 800f05c:	2300      	movs	r3, #0
 800f05e:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800f060:	8afb      	ldrh	r3, [r7, #22]
 800f062:	b2da      	uxtb	r2, r3
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	78da      	ldrb	r2, [r3, #3]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	705a      	strb	r2, [r3, #1]

	return status;
 800f070:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800f074:	4618      	mov	r0, r3
 800f076:	371c      	adds	r7, #28
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr

0800f080 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800f080:	b590      	push	{r4, r7, lr}
 800f082:	b087      	sub	sp, #28
 800f084:	af00      	add	r7, sp, #0
 800f086:	4603      	mov	r3, r0
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	607a      	str	r2, [r7, #4]
 800f08c:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f08e:	2300      	movs	r3, #0
 800f090:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800f092:	2300      	movs	r3, #0
 800f094:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800f096:	2300      	movs	r3, #0
 800f098:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800f09a:	89fb      	ldrh	r3, [r7, #14]
 800f09c:	2b37      	cmp	r3, #55	@ 0x37
 800f09e:	d802      	bhi.n	800f0a6 <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f0a0:	f06f 0308 	mvn.w	r3, #8
 800f0a4:	e03e      	b.n	800f124 <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f0a6:	68b9      	ldr	r1, [r7, #8]
 800f0a8:	2002      	movs	r0, #2
 800f0aa:	f7f9 f91b 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	3302      	adds	r3, #2
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	2002      	movs	r0, #2
 800f0be:	f7f9 f911 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800f0ce:	099b      	lsrs	r3, r3, #6
 800f0d0:	b29a      	uxth	r2, r3
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2219      	movs	r2, #25
 800f0da:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2205      	movs	r2, #5
 800f0e0:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2205      	movs	r2, #5
 800f0e6:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	3304      	adds	r3, #4
 800f0ec:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	74fb      	strb	r3, [r7, #19]
 800f0f2:	e012      	b.n	800f11a <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800f0f4:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800f0f6:	6979      	ldr	r1, [r7, #20]
 800f0f8:	2002      	movs	r0, #2
 800f0fa:	f7f9 f8f3 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f0fe:	4603      	mov	r3, r0
 800f100:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	1d23      	adds	r3, r4, #4
 800f106:	005b      	lsls	r3, r3, #1
 800f108:	4413      	add	r3, r2
 800f10a:	460a      	mov	r2, r1
 800f10c:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	3302      	adds	r3, #2
 800f112:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800f114:	7cfb      	ldrb	r3, [r7, #19]
 800f116:	3301      	adds	r3, #1
 800f118:	74fb      	strb	r3, [r7, #19]
 800f11a:	7cfb      	ldrb	r3, [r7, #19]
 800f11c:	2b18      	cmp	r3, #24
 800f11e:	d9e9      	bls.n	800f0f4 <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800f120:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800f124:	4618      	mov	r0, r3
 800f126:	371c      	adds	r7, #28
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd90      	pop	{r4, r7, pc}

0800f12c <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b086      	sub	sp, #24
 800f130:	af00      	add	r7, sp, #0
 800f132:	4603      	mov	r3, r0
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	607a      	str	r2, [r7, #4]
 800f138:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f13a:	2300      	movs	r3, #0
 800f13c:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800f13e:	89fb      	ldrh	r3, [r7, #14]
 800f140:	2b07      	cmp	r3, #7
 800f142:	d802      	bhi.n	800f14a <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f144:	f06f 0308 	mvn.w	r3, #8
 800f148:	e027      	b.n	800f19a <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f14a:	68b9      	ldr	r1, [r7, #8]
 800f14c:	2002      	movs	r0, #2
 800f14e:	f7f9 f8c9 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f152:	4603      	mov	r3, r0
 800f154:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	3302      	adds	r3, #2
 800f15e:	4619      	mov	r1, r3
 800f160:	2002      	movs	r0, #2
 800f162:	f7f9 f8bf 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f166:	4603      	mov	r3, r0
 800f168:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	3304      	adds	r3, #4
 800f172:	4619      	mov	r1, r3
 800f174:	2002      	movs	r0, #2
 800f176:	f7f9 f8b5 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f17a:	4603      	mov	r3, r0
 800f17c:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	3306      	adds	r3, #6
 800f186:	4619      	mov	r1, r3
 800f188:	2002      	movs	r0, #2
 800f18a:	f7f9 f8ab 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f18e:	4603      	mov	r3, r0
 800f190:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	80da      	strh	r2, [r3, #6]

	return status;
 800f196:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3718      	adds	r7, #24
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}

0800f1a2 <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800f1a2:	b580      	push	{r7, lr}
 800f1a4:	b086      	sub	sp, #24
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	60b9      	str	r1, [r7, #8]
 800f1ac:	607a      	str	r2, [r7, #4]
 800f1ae:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800f1b4:	89fb      	ldrh	r3, [r7, #14]
 800f1b6:	2b0f      	cmp	r3, #15
 800f1b8:	d802      	bhi.n	800f1c0 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f1ba:	f06f 0308 	mvn.w	r3, #8
 800f1be:	e04d      	b.n	800f25c <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f1c0:	68b9      	ldr	r1, [r7, #8]
 800f1c2:	2002      	movs	r0, #2
 800f1c4:	f7f9 f88e 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	789a      	ldrb	r2, [r3, #2]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	78da      	ldrb	r2, [r3, #3]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	3304      	adds	r3, #4
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	2002      	movs	r0, #2
 800f1e8:	f7f9 f87c 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	3306      	adds	r3, #6
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	2002      	movs	r0, #2
 800f1fc:	f7f9 f872 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f200:	4603      	mov	r3, r0
 800f202:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	3308      	adds	r3, #8
 800f20c:	4619      	mov	r1, r3
 800f20e:	2002      	movs	r0, #2
 800f210:	f7f9 f868 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f214:	4603      	mov	r3, r0
 800f216:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	330a      	adds	r3, #10
 800f220:	4619      	mov	r1, r3
 800f222:	2002      	movs	r0, #2
 800f224:	f7f9 f85e 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f228:	4603      	mov	r3, r0
 800f22a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	330c      	adds	r3, #12
 800f234:	4619      	mov	r1, r3
 800f236:	2002      	movs	r0, #2
 800f238:	f7f9 f854 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f23c:	4603      	mov	r3, r0
 800f23e:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	330e      	adds	r3, #14
 800f248:	4619      	mov	r1, r3
 800f24a:	2002      	movs	r0, #2
 800f24c:	f7f9 f84a 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f250:	4603      	mov	r3, r0
 800f252:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	81da      	strh	r2, [r3, #14]

	return status;
 800f258:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3718      	adds	r7, #24
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b086      	sub	sp, #24
 800f268:	af00      	add	r7, sp, #0
 800f26a:	60f8      	str	r0, [r7, #12]
 800f26c:	607b      	str	r3, [r7, #4]
 800f26e:	460b      	mov	r3, r1
 800f270:	72fb      	strb	r3, [r7, #11]
 800f272:	4613      	mov	r3, r2
 800f274:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f276:	2300      	movs	r3, #0
 800f278:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800f27a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d106      	bne.n	800f290 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800f282:	2232      	movs	r2, #50	@ 0x32
 800f284:	2104      	movs	r1, #4
 800f286:	68f8      	ldr	r0, [r7, #12]
 800f288:	f7ff fdd1 	bl	800ee2e <VL53LX_nvm_enable>
 800f28c:	4603      	mov	r3, r0
 800f28e:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800f290:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d107      	bne.n	800f2a8 <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800f298:	7aba      	ldrb	r2, [r7, #10]
 800f29a:	7af9      	ldrb	r1, [r7, #11]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	68f8      	ldr	r0, [r7, #12]
 800f2a0:	f7ff fe2b 	bl	800eefa <VL53LX_nvm_read>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800f2a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d104      	bne.n	800f2ba <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800f2b0:	68f8      	ldr	r0, [r7, #12]
 800f2b2:	f7ff fe80 	bl	800efb6 <VL53LX_nvm_disable>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800f2ba:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3718      	adds	r7, #24
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}

0800f2c6 <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800f2c6:	b580      	push	{r7, lr}
 800f2c8:	b084      	sub	sp, #16
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
 800f2ce:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f2d4:	f107 0308 	add.w	r3, r7, #8
 800f2d8:	2201      	movs	r2, #1
 800f2da:	212e      	movs	r1, #46	@ 0x2e
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f7ff ffc1 	bl	800f264 <VL53LX_read_nvm_raw_data>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f2e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d108      	bne.n	800f300 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800f2ee:	f107 0308 	add.w	r3, r7, #8
 800f2f2:	683a      	ldr	r2, [r7, #0]
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	2004      	movs	r0, #4
 800f2f8:	f7ff fe93 	bl	800f022 <VL53LX_nvm_decode_optical_centre>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800f300:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f304:	4618      	mov	r0, r3
 800f306:	3710      	adds	r7, #16
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b092      	sub	sp, #72	@ 0x48
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f316:	2300      	movs	r3, #0
 800f318:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f31c:	f107 030c 	add.w	r3, r7, #12
 800f320:	220e      	movs	r2, #14
 800f322:	2157      	movs	r1, #87	@ 0x57
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f7ff ff9d 	bl	800f264 <VL53LX_read_nvm_raw_data>
 800f32a:	4603      	mov	r3, r0
 800f32c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f330:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800f334:	2b00      	cmp	r3, #0
 800f336:	d109      	bne.n	800f34c <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800f338:	f107 030c 	add.w	r3, r7, #12
 800f33c:	683a      	ldr	r2, [r7, #0]
 800f33e:	4619      	mov	r1, r3
 800f340:	2038      	movs	r0, #56	@ 0x38
 800f342:	f7ff fe9d 	bl	800f080 <VL53LX_nvm_decode_cal_peak_rate_map>
 800f346:	4603      	mov	r3, r0
 800f348:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f34c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800f350:	4618      	mov	r0, r3
 800f352:	3748      	adds	r7, #72	@ 0x48
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b086      	sub	sp, #24
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f362:	2300      	movs	r3, #0
 800f364:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f366:	f107 030c 	add.w	r3, r7, #12
 800f36a:	2202      	movs	r2, #2
 800f36c:	2165      	movs	r1, #101	@ 0x65
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7ff ff78 	bl	800f264 <VL53LX_read_nvm_raw_data>
 800f374:	4603      	mov	r3, r0
 800f376:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f378:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d108      	bne.n	800f392 <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800f380:	f107 030c 	add.w	r3, r7, #12
 800f384:	683a      	ldr	r2, [r7, #0]
 800f386:	4619      	mov	r1, r3
 800f388:	2008      	movs	r0, #8
 800f38a:	f7ff fecf 	bl	800f12c <VL53LX_nvm_decode_additional_offset_cal_data>
 800f38e:	4603      	mov	r3, r0
 800f390:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f392:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f396:	4618      	mov	r0, r3
 800f398:	3718      	adds	r7, #24
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}

0800f39e <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800f39e:	b580      	push	{r7, lr}
 800f3a0:	b08a      	sub	sp, #40	@ 0x28
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	60f8      	str	r0, [r7, #12]
 800f3a6:	460b      	mov	r3, r1
 800f3a8:	607a      	str	r2, [r7, #4]
 800f3aa:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800f3b2:	897b      	ldrh	r3, [r7, #10]
 800f3b4:	089b      	lsrs	r3, r3, #2
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	b2d9      	uxtb	r1, r3
 800f3ba:	f107 0314 	add.w	r3, r7, #20
 800f3be:	2204      	movs	r2, #4
 800f3c0:	68f8      	ldr	r0, [r7, #12]
 800f3c2:	f7ff ff4f 	bl	800f264 <VL53LX_read_nvm_raw_data>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f3cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d109      	bne.n	800f3e8 <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800f3d4:	f107 0314 	add.w	r3, r7, #20
 800f3d8:	687a      	ldr	r2, [r7, #4]
 800f3da:	4619      	mov	r1, r3
 800f3dc:	2010      	movs	r0, #16
 800f3de:	f7ff fee0 	bl	800f1a2 <VL53LX_nvm_decode_fmt_range_results_data>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800f3e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27

}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3728      	adds	r7, #40	@ 0x28
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b086      	sub	sp, #24
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	60f8      	str	r0, [r7, #12]
 800f3fc:	460b      	mov	r3, r1
 800f3fe:	607a      	str	r2, [r7, #4]
 800f400:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f402:	2300      	movs	r3, #0
 800f404:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f406:	897b      	ldrh	r3, [r7, #10]
 800f408:	2b0a      	cmp	r3, #10
 800f40a:	d802      	bhi.n	800f412 <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f40c:	f06f 0309 	mvn.w	r3, #9
 800f410:	e047      	b.n	800f4a2 <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f41a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f428:	f002 020f 	and.w	r2, r2, #15
 800f42c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f42e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f438:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f43c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f43e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f448:	f002 0203 	and.w	r2, r2, #3
 800f44c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f44e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f458:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f45c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f45e:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	88d8      	ldrh	r0, [r3, #6]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	3305      	adds	r3, #5
 800f468:	461a      	mov	r2, r3
 800f46a:	2102      	movs	r1, #2
 800f46c:	f7f8 ff0f 	bl	800828e <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800f474:	68fa      	ldr	r2, [r7, #12]
 800f476:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f478:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800f47e:	68fa      	ldr	r2, [r7, #12]
 800f480:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f482:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800f48c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f490:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f492:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800f498:	68fa      	ldr	r2, [r7, #12]
 800f49a:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800f49c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f49e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3718      	adds	r7, #24
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}

0800f4aa <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f4aa:	b580      	push	{r7, lr}
 800f4ac:	b086      	sub	sp, #24
 800f4ae:	af00      	add	r7, sp, #0
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	60b9      	str	r1, [r7, #8]
 800f4b4:	607a      	str	r2, [r7, #4]
 800f4b6:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f4bc:	89fb      	ldrh	r3, [r7, #14]
 800f4be:	2b0a      	cmp	r3, #10
 800f4c0:	d802      	bhi.n	800f4c8 <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f4c2:	f06f 0309 	mvn.w	r3, #9
 800f4c6:	e046      	b.n	800f556 <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f4d0:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	3301      	adds	r3, #1
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	f003 030f 	and.w	r3, r3, #15
 800f4e0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	3302      	adds	r3, #2
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f4f0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	3303      	adds	r3, #3
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	f003 0303 	and.w	r3, r3, #3
 800f500:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	3304      	adds	r3, #4
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f510:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	3305      	adds	r3, #5
 800f51a:	4619      	mov	r1, r3
 800f51c:	2002      	movs	r0, #2
 800f51e:	f7f8 fee1 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f522:	4603      	mov	r3, r0
 800f524:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	79da      	ldrb	r2, [r3, #7]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	7a1a      	ldrb	r2, [r3, #8]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	3309      	adds	r3, #9
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f544:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	7a9a      	ldrb	r2, [r3, #10]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800f552:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f556:	4618      	mov	r0, r3
 800f558:	3718      	adds	r7, #24
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}

0800f55e <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f55e:	b580      	push	{r7, lr}
 800f560:	b086      	sub	sp, #24
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
 800f566:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f568:	2300      	movs	r3, #0
 800f56a:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f56c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d108      	bne.n	800f586 <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800f574:	f107 020c 	add.w	r2, r7, #12
 800f578:	230b      	movs	r3, #11
 800f57a:	2101      	movs	r1, #1
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f002 f847 	bl	8011610 <VL53LX_ReadMulti>
 800f582:	4603      	mov	r3, r0
 800f584:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f586:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d108      	bne.n	800f5a0 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800f58e:	f107 030c 	add.w	r3, r7, #12
 800f592:	683a      	ldr	r2, [r7, #0]
 800f594:	4619      	mov	r1, r3
 800f596:	200b      	movs	r0, #11
 800f598:	f7ff ff87 	bl	800f4aa <VL53LX_i2c_decode_static_nvm_managed>
 800f59c:	4603      	mov	r3, r0
 800f59e:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f5a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3718      	adds	r7, #24
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}

0800f5ac <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b086      	sub	sp, #24
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	607a      	str	r2, [r7, #4]
 800f5b8:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f5be:	897b      	ldrh	r3, [r7, #10]
 800f5c0:	2b16      	cmp	r3, #22
 800f5c2:	d802      	bhi.n	800f5ca <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f5c4:	f06f 0309 	mvn.w	r3, #9
 800f5c8:	e076      	b.n	800f6b8 <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f5da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f5e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800f5ea:	68fa      	ldr	r2, [r7, #12]
 800f5ec:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f5ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f5f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f602:	f002 020f 	and.w	r2, r2, #15
 800f606:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f608:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800f60e:	68fa      	ldr	r2, [r7, #12]
 800f610:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800f612:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f61c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f620:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f622:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800f62c:	f002 0203 	and.w	r2, r2, #3
 800f630:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f632:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	8958      	ldrh	r0, [r3, #10]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	3309      	adds	r3, #9
 800f63c:	461a      	mov	r2, r3
 800f63e:	2102      	movs	r1, #2
 800f640:	f7f8 fe25 	bl	800828e <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	330b      	adds	r3, #11
 800f64e:	461a      	mov	r2, r3
 800f650:	2102      	movs	r1, #2
 800f652:	f7f8 fe67 	bl	8008324 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	330d      	adds	r3, #13
 800f660:	461a      	mov	r2, r3
 800f662:	2102      	movs	r1, #2
 800f664:	f7f8 fe5e 	bl	8008324 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	8a18      	ldrh	r0, [r3, #16]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	330f      	adds	r3, #15
 800f670:	461a      	mov	r2, r3
 800f672:	2102      	movs	r1, #2
 800f674:	f7f8 fe0b 	bl	800828e <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800f67e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f682:	b218      	sxth	r0, r3
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	3311      	adds	r3, #17
 800f688:	461a      	mov	r2, r3
 800f68a:	2102      	movs	r1, #2
 800f68c:	f7f8 fe4a 	bl	8008324 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	3313      	adds	r3, #19
 800f69a:	461a      	mov	r2, r3
 800f69c:	2102      	movs	r1, #2
 800f69e:	f7f8 fe41 	bl	8008324 <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	3315      	adds	r3, #21
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	2102      	movs	r1, #2
 800f6b0:	f7f8 fe38 	bl	8008324 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800f6b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3718      	adds	r7, #24
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}

0800f6c0 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b086      	sub	sp, #24
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	60b9      	str	r1, [r7, #8]
 800f6ca:	607a      	str	r2, [r7, #4]
 800f6cc:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f6d2:	89fb      	ldrh	r3, [r7, #14]
 800f6d4:	2b16      	cmp	r3, #22
 800f6d6:	d802      	bhi.n	800f6de <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f6d8:	f06f 0309 	mvn.w	r3, #9
 800f6dc:	e079      	b.n	800f7d2 <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	785a      	ldrb	r2, [r3, #1]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	789a      	ldrb	r2, [r3, #2]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	78da      	ldrb	r2, [r3, #3]
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	791a      	ldrb	r2, [r3, #4]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	3305      	adds	r3, #5
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	f003 030f 	and.w	r3, r3, #15
 800f710:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	799a      	ldrb	r2, [r3, #6]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	3307      	adds	r3, #7
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f728:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	3308      	adds	r3, #8
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	f003 0303 	and.w	r3, r3, #3
 800f738:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	3309      	adds	r3, #9
 800f742:	4619      	mov	r1, r3
 800f744:	2002      	movs	r0, #2
 800f746:	f7f8 fdcd 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f74a:	4603      	mov	r3, r0
 800f74c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	330b      	adds	r3, #11
 800f756:	4619      	mov	r1, r3
 800f758:	2002      	movs	r0, #2
 800f75a:	f7f8 fe0f 	bl	800837c <VL53LX_i2c_decode_int16_t>
 800f75e:	4603      	mov	r3, r0
 800f760:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	330d      	adds	r3, #13
 800f76a:	4619      	mov	r1, r3
 800f76c:	2002      	movs	r0, #2
 800f76e:	f7f8 fe05 	bl	800837c <VL53LX_i2c_decode_int16_t>
 800f772:	4603      	mov	r3, r0
 800f774:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	330f      	adds	r3, #15
 800f77e:	4619      	mov	r1, r3
 800f780:	2002      	movs	r0, #2
 800f782:	f7f8 fdaf 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800f786:	4603      	mov	r3, r0
 800f788:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	3311      	adds	r3, #17
 800f792:	4619      	mov	r1, r3
 800f794:	2002      	movs	r0, #2
 800f796:	f7f8 fdf1 	bl	800837c <VL53LX_i2c_decode_int16_t>
 800f79a:	4603      	mov	r3, r0
 800f79c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f7a0:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	3313      	adds	r3, #19
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	2002      	movs	r0, #2
 800f7ae:	f7f8 fde5 	bl	800837c <VL53LX_i2c_decode_int16_t>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	3315      	adds	r3, #21
 800f7be:	4619      	mov	r1, r3
 800f7c0:	2002      	movs	r0, #2
 800f7c2:	f7f8 fddb 	bl	800837c <VL53LX_i2c_decode_int16_t>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800f7ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3718      	adds	r7, #24
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b08a      	sub	sp, #40	@ 0x28
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]
 800f7e2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f7ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d109      	bne.n	800f806 <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800f7f2:	f107 020c 	add.w	r2, r7, #12
 800f7f6:	2317      	movs	r3, #23
 800f7f8:	210d      	movs	r1, #13
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f001 ff08 	bl	8011610 <VL53LX_ReadMulti>
 800f800:	4603      	mov	r3, r0
 800f802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f806:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d109      	bne.n	800f822 <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800f80e:	f107 030c 	add.w	r3, r7, #12
 800f812:	683a      	ldr	r2, [r7, #0]
 800f814:	4619      	mov	r1, r3
 800f816:	2017      	movs	r0, #23
 800f818:	f7ff ff52 	bl	800f6c0 <VL53LX_i2c_decode_customer_nvm_managed>
 800f81c:	4603      	mov	r3, r0
 800f81e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800f822:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f826:	2b00      	cmp	r3, #0
 800f828:	d11c      	bne.n	800f864 <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	8a5b      	ldrh	r3, [r3, #18]
 800f82e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		offset = offset / 4;
 800f830:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f834:	2b00      	cmp	r3, #0
 800f836:	da00      	bge.n	800f83a <VL53LX_get_customer_nvm_managed+0x60>
 800f838:	3303      	adds	r3, #3
 800f83a:	109b      	asrs	r3, r3, #2
 800f83c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (offset >= 1024)
 800f83e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f846:	db04      	blt.n	800f852 <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800f848:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f84a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800f84e:	b29b      	uxth	r3, r3
 800f850:	84bb      	strh	r3, [r7, #36]	@ 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	2200      	movs	r2, #0
 800f856:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f85c:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f862:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f864:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3728      	adds	r7, #40	@ 0x28
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b086      	sub	sp, #24
 800f874:	af00      	add	r7, sp, #0
 800f876:	60f8      	str	r0, [r7, #12]
 800f878:	460b      	mov	r3, r1
 800f87a:	607a      	str	r2, [r7, #4]
 800f87c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f87e:	2300      	movs	r3, #0
 800f880:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800f882:	897b      	ldrh	r3, [r7, #10]
 800f884:	2b1f      	cmp	r3, #31
 800f886:	d802      	bhi.n	800f88e <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f888:	f06f 0309 	mvn.w	r3, #9
 800f88c:	e0cf      	b.n	800fa2e <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	881b      	ldrh	r3, [r3, #0]
 800f892:	687a      	ldr	r2, [r7, #4]
 800f894:	2102      	movs	r1, #2
 800f896:	4618      	mov	r0, r3
 800f898:	f7f8 fcf9 	bl	800828e <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800f8a4:	f002 0201 	and.w	r2, r2, #1
 800f8a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f8aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800f8b4:	f002 020f 	and.w	r2, r2, #15
 800f8b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f8ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800f8c4:	f002 020f 	and.w	r2, r2, #15
 800f8c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f8ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800f8d4:	f002 021f 	and.w	r2, r2, #31
 800f8d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f8da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f8e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f8e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f8ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800f8f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f8f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f8fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800f904:	f002 0201 	and.w	r2, r2, #1
 800f908:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f90a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800f914:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f91e:	f002 0201 	and.w	r2, r2, #1
 800f922:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f924:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f92e:	f002 0203 	and.w	r2, r2, #3
 800f932:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f934:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f93e:	f002 021f 	and.w	r2, r2, #31
 800f942:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f944:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800f94e:	f002 0203 	and.w	r2, r2, #3
 800f952:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f954:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800f95e:	f002 0203 	and.w	r2, r2, #3
 800f962:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800f964:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f96e:	f002 0207 	and.w	r2, r2, #7
 800f972:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800f974:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f97e:	f002 021f 	and.w	r2, r2, #31
 800f982:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800f984:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f98e:	f002 0201 	and.w	r2, r2, #1
 800f992:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f994:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800f99a:	68fa      	ldr	r2, [r7, #12]
 800f99c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f99e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800f9a4:	68fa      	ldr	r2, [r7, #12]
 800f9a6:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f9a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800f9ae:	68fa      	ldr	r2, [r7, #12]
 800f9b0:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f9b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800f9b8:	68fa      	ldr	r2, [r7, #12]
 800f9ba:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f9bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800f9c2:	68fa      	ldr	r2, [r7, #12]
 800f9c4:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800f9c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800f9cc:	68fa      	ldr	r2, [r7, #12]
 800f9ce:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800f9d0:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	8b18      	ldrh	r0, [r3, #24]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	3318      	adds	r3, #24
 800f9da:	461a      	mov	r2, r3
 800f9dc:	2102      	movs	r1, #2
 800f9de:	f7f8 fc56 	bl	800828e <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800f9e6:	68fa      	ldr	r2, [r7, #12]
 800f9e8:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800f9ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800f9f0:	68fa      	ldr	r2, [r7, #12]
 800f9f2:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800f9f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800f9fe:	f002 020f 	and.w	r2, r2, #15
 800fa02:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800fa04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800fa0a:	68fa      	ldr	r2, [r7, #12]
 800fa0c:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800fa0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800fa18:	f002 020f 	and.w	r2, r2, #15
 800fa1c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800fa1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800fa24:	68fa      	ldr	r2, [r7, #12]
 800fa26:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800fa28:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fa2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3718      	adds	r7, #24
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}

0800fa36 <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fa36:	b580      	push	{r7, lr}
 800fa38:	b086      	sub	sp, #24
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	60f8      	str	r0, [r7, #12]
 800fa3e:	460b      	mov	r3, r1
 800fa40:	607a      	str	r2, [r7, #4]
 800fa42:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fa44:	2300      	movs	r3, #0
 800fa46:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800fa48:	897b      	ldrh	r3, [r7, #10]
 800fa4a:	2b15      	cmp	r3, #21
 800fa4c:	d802      	bhi.n	800fa54 <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fa4e:	f06f 0309 	mvn.w	r3, #9
 800fa52:	e070      	b.n	800fb36 <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800fa60:	68fa      	ldr	r2, [r7, #12]
 800fa62:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800fa64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800fa6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800fa78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fa7c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fa7e:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800fa84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fa88:	b298      	uxth	r0, r3
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	3304      	adds	r3, #4
 800fa8e:	461a      	mov	r2, r3
 800fa90:	2102      	movs	r1, #2
 800fa92:	f7f8 fbfc 	bl	800828e <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800fa9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800faa2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800faa4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800faaa:	68fa      	ldr	r2, [r7, #12]
 800faac:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800faae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800fab4:	68fa      	ldr	r2, [r7, #12]
 800fab6:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800fab8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800fac2:	f002 0201 	and.w	r2, r2, #1
 800fac6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fac8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800fad2:	f002 0207 	and.w	r2, r2, #7
 800fad6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800fad8:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	8998      	ldrh	r0, [r3, #12]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	330c      	adds	r3, #12
 800fae2:	461a      	mov	r2, r3
 800fae4:	2102      	movs	r1, #2
 800fae6:	f7f8 fbd2 	bl	800828e <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	89d8      	ldrh	r0, [r3, #14]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	330e      	adds	r3, #14
 800faf2:	461a      	mov	r2, r3
 800faf4:	2102      	movs	r1, #2
 800faf6:	f7f8 fbca 	bl	800828e <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	8a18      	ldrh	r0, [r3, #16]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	3310      	adds	r3, #16
 800fb02:	461a      	mov	r2, r3
 800fb04:	2102      	movs	r1, #2
 800fb06:	f7f8 fbc2 	bl	800828e <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800fb0e:	68fa      	ldr	r2, [r7, #12]
 800fb10:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800fb12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800fb18:	68fa      	ldr	r2, [r7, #12]
 800fb1a:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800fb1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800fb22:	68fa      	ldr	r2, [r7, #12]
 800fb24:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800fb26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800fb2c:	68fa      	ldr	r2, [r7, #12]
 800fb2e:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800fb30:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fb32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3718      	adds	r7, #24
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}

0800fb3e <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fb3e:	b580      	push	{r7, lr}
 800fb40:	b086      	sub	sp, #24
 800fb42:	af00      	add	r7, sp, #0
 800fb44:	60f8      	str	r0, [r7, #12]
 800fb46:	460b      	mov	r3, r1
 800fb48:	607a      	str	r2, [r7, #4]
 800fb4a:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800fb50:	897b      	ldrh	r3, [r7, #10]
 800fb52:	2b16      	cmp	r3, #22
 800fb54:	d802      	bhi.n	800fb5c <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fb56:	f06f 0309 	mvn.w	r3, #9
 800fb5a:	e06e      	b.n	800fc3a <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	f003 030f 	and.w	r3, r3, #15
 800fb64:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800fb6e:	68fa      	ldr	r2, [r7, #12]
 800fb70:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800fb72:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800fb7c:	f002 020f 	and.w	r2, r2, #15
 800fb80:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fb82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800fb88:	68fa      	ldr	r2, [r7, #12]
 800fb8a:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800fb8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800fb96:	f002 020f 	and.w	r2, r2, #15
 800fb9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800fb9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800fba2:	68fa      	ldr	r2, [r7, #12]
 800fba4:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800fba6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800fbb0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fbb4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fbb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800fbc0:	f002 020f 	and.w	r2, r2, #15
 800fbc4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800fbc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800fbd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800fbda:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fbde:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fbe0:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	8958      	ldrh	r0, [r3, #10]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	330a      	adds	r3, #10
 800fbea:	461a      	mov	r2, r3
 800fbec:	2102      	movs	r1, #2
 800fbee:	f7f8 fb4e 	bl	800828e <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	8998      	ldrh	r0, [r3, #12]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	330c      	adds	r3, #12
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	2102      	movs	r1, #2
 800fbfe:	f7f8 fb46 	bl	800828e <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800fc06:	68fa      	ldr	r2, [r7, #12]
 800fc08:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800fc0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800fc10:	68fa      	ldr	r2, [r7, #12]
 800fc12:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800fc14:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	6918      	ldr	r0, [r3, #16]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	3312      	adds	r3, #18
 800fc1e:	461a      	mov	r2, r3
 800fc20:	2104      	movs	r1, #4
 800fc22:	f7f8 fbd4 	bl	80083ce <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800fc2e:	f002 0201 	and.w	r2, r2, #1
 800fc32:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800fc34:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fc36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3718      	adds	r7, #24
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}

0800fc42 <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fc42:	b580      	push	{r7, lr}
 800fc44:	b086      	sub	sp, #24
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	60f8      	str	r0, [r7, #12]
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	607a      	str	r2, [r7, #4]
 800fc4e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fc50:	2300      	movs	r3, #0
 800fc52:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800fc54:	897b      	ldrh	r3, [r7, #10]
 800fc56:	2b11      	cmp	r3, #17
 800fc58:	d802      	bhi.n	800fc60 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fc5a:	f06f 0309 	mvn.w	r3, #9
 800fc5e:	e071      	b.n	800fd44 <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	f003 0303 	and.w	r3, r3, #3
 800fc68:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	8858      	ldrh	r0, [r3, #2]
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	3301      	adds	r3, #1
 800fc76:	461a      	mov	r2, r3
 800fc78:	2102      	movs	r1, #2
 800fc7a:	f7f8 fb08 	bl	800828e <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	8898      	ldrh	r0, [r3, #4]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	3303      	adds	r3, #3
 800fc86:	461a      	mov	r2, r3
 800fc88:	2102      	movs	r1, #2
 800fc8a:	f7f8 fb00 	bl	800828e <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800fc96:	f002 0201 	and.w	r2, r2, #1
 800fc9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800fc9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800fca6:	f002 0207 	and.w	r2, r2, #7
 800fcaa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fcac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800fcb2:	68fa      	ldr	r2, [r7, #12]
 800fcb4:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800fcb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800fcbc:	68fa      	ldr	r2, [r7, #12]
 800fcbe:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800fcc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800fcca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fcce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fcd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800fcda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fcde:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800fce0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800fcea:	f002 0203 	and.w	r2, r2, #3
 800fcee:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800fcf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800fcfa:	f002 0203 	and.w	r2, r2, #3
 800fcfe:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800fd00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800fd0a:	f002 020f 	and.w	r2, r2, #15
 800fd0e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800fd10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800fd16:	68fa      	ldr	r2, [r7, #12]
 800fd18:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800fd1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800fd20:	68fa      	ldr	r2, [r7, #12]
 800fd22:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800fd24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800fd2a:	68fa      	ldr	r2, [r7, #12]
 800fd2c:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800fd2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800fd38:	f002 0203 	and.w	r2, r2, #3
 800fd3c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800fd3e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fd40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3718      	adds	r7, #24
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b087      	sub	sp, #28
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	60f8      	str	r0, [r7, #12]
 800fd54:	460b      	mov	r3, r1
 800fd56:	607a      	str	r2, [r7, #4]
 800fd58:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 800fd5e:	897b      	ldrh	r3, [r7, #10]
 800fd60:	2b04      	cmp	r3, #4
 800fd62:	d802      	bhi.n	800fd6a <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fd64:	f06f 0309 	mvn.w	r3, #9
 800fd68:	e025      	b.n	800fdb6 <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	f003 0301 	and.w	r3, r3, #1
 800fd72:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800fd80:	f002 0201 	and.w	r2, r2, #1
 800fd84:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800fd86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800fd90:	f002 0201 	and.w	r2, r2, #1
 800fd94:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fd96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800fda0:	f002 0203 	and.w	r2, r2, #3
 800fda4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fda6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800fdac:	68fa      	ldr	r2, [r7, #12]
 800fdae:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800fdb0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fdb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	371c      	adds	r7, #28
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc0:	4770      	bx	lr

0800fdc2 <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 800fdc2:	b580      	push	{r7, lr}
 800fdc4:	b084      	sub	sp, #16
 800fdc6:	af00      	add	r7, sp, #0
 800fdc8:	6078      	str	r0, [r7, #4]
 800fdca:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800fdd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d108      	bne.n	800fdea <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 800fdd8:	f107 0308 	add.w	r3, r7, #8
 800fddc:	461a      	mov	r2, r3
 800fdde:	2105      	movs	r1, #5
 800fde0:	6838      	ldr	r0, [r7, #0]
 800fde2:	f7ff ffb3 	bl	800fd4c <VL53LX_i2c_encode_system_control>
 800fde6:	4603      	mov	r3, r0
 800fde8:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 800fdea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d108      	bne.n	800fe04 <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 800fdf2:	f107 0208 	add.w	r2, r7, #8
 800fdf6:	2305      	movs	r3, #5
 800fdf8:	2183      	movs	r1, #131	@ 0x83
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f001 fbd2 	bl	80115a4 <VL53LX_WriteMulti>
 800fe00:	4603      	mov	r3, r0
 800fe02:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800fe04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3710      	adds	r7, #16
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b086      	sub	sp, #24
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	4603      	mov	r3, r0
 800fe18:	60b9      	str	r1, [r7, #8]
 800fe1a:	607a      	str	r2, [r7, #4]
 800fe1c:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 800fe22:	89fb      	ldrh	r3, [r7, #14]
 800fe24:	2b2b      	cmp	r3, #43	@ 0x2b
 800fe26:	d802      	bhi.n	800fe2e <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fe28:	f06f 0309 	mvn.w	r3, #9
 800fe2c:	e0e2      	b.n	800fff4 <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fe36:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	785a      	ldrb	r2, [r3, #1]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	3302      	adds	r3, #2
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	f003 030f 	and.w	r3, r3, #15
 800fe4e:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	78da      	ldrb	r2, [r3, #3]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	3304      	adds	r3, #4
 800fe60:	4619      	mov	r1, r3
 800fe62:	2002      	movs	r0, #2
 800fe64:	f7f8 fa3e 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	3306      	adds	r3, #6
 800fe74:	4619      	mov	r1, r3
 800fe76:	2002      	movs	r0, #2
 800fe78:	f7f8 fa34 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	3308      	adds	r3, #8
 800fe88:	4619      	mov	r1, r3
 800fe8a:	2002      	movs	r0, #2
 800fe8c:	f7f8 fa2a 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800fe90:	4603      	mov	r3, r0
 800fe92:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	330a      	adds	r3, #10
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	2002      	movs	r0, #2
 800fea0:	f7f8 fa20 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800fea4:	4603      	mov	r3, r0
 800fea6:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	330c      	adds	r3, #12
 800feb0:	4619      	mov	r1, r3
 800feb2:	2002      	movs	r0, #2
 800feb4:	f7f8 fa16 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800feb8:	4603      	mov	r3, r0
 800feba:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	330e      	adds	r3, #14
 800fec4:	4619      	mov	r1, r3
 800fec6:	2002      	movs	r0, #2
 800fec8:	f7f8 fa0c 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800fecc:	4603      	mov	r3, r0
 800fece:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	3310      	adds	r3, #16
 800fed8:	4619      	mov	r1, r3
 800feda:	2002      	movs	r0, #2
 800fedc:	f7f8 fa02 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800fee0:	4603      	mov	r3, r0
 800fee2:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	3312      	adds	r3, #18
 800feec:	4619      	mov	r1, r3
 800feee:	2002      	movs	r0, #2
 800fef0:	f7f8 f9f8 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800fef4:	4603      	mov	r3, r0
 800fef6:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	3314      	adds	r3, #20
 800ff00:	4619      	mov	r1, r3
 800ff02:	2002      	movs	r0, #2
 800ff04:	f7f8 f9ee 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	3316      	adds	r3, #22
 800ff14:	4619      	mov	r1, r3
 800ff16:	2002      	movs	r0, #2
 800ff18:	f7f8 f9e4 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	3318      	adds	r3, #24
 800ff28:	4619      	mov	r1, r3
 800ff2a:	2002      	movs	r0, #2
 800ff2c:	f7f8 f9da 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800ff30:	4603      	mov	r3, r0
 800ff32:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	331a      	adds	r3, #26
 800ff3c:	4619      	mov	r1, r3
 800ff3e:	2002      	movs	r0, #2
 800ff40:	f7f8 f9d0 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800ff44:	4603      	mov	r3, r0
 800ff46:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	331c      	adds	r3, #28
 800ff50:	4619      	mov	r1, r3
 800ff52:	2002      	movs	r0, #2
 800ff54:	f7f8 f9c6 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	331e      	adds	r3, #30
 800ff64:	4619      	mov	r1, r3
 800ff66:	2002      	movs	r0, #2
 800ff68:	f7f8 f9bc 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	3320      	adds	r3, #32
 800ff78:	4619      	mov	r1, r3
 800ff7a:	2002      	movs	r0, #2
 800ff7c:	f7f8 f9b2 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800ff80:	4603      	mov	r3, r0
 800ff82:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	3322      	adds	r3, #34	@ 0x22
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	2002      	movs	r0, #2
 800ff90:	f7f8 f9a8 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800ff94:	4603      	mov	r3, r0
 800ff96:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	3324      	adds	r3, #36	@ 0x24
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	2002      	movs	r0, #2
 800ffa4:	f7f8 f99e 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	3326      	adds	r3, #38	@ 0x26
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	2002      	movs	r0, #2
 800ffb8:	f7f8 f994 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	3328      	adds	r3, #40	@ 0x28
 800ffc8:	4619      	mov	r1, r3
 800ffca:	2002      	movs	r0, #2
 800ffcc:	f7f8 f98a 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800fff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3718      	adds	r7, #24
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}

0800fffc <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b086      	sub	sp, #24
 8010000:	af00      	add	r7, sp, #0
 8010002:	4603      	mov	r3, r0
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	607a      	str	r2, [r7, #4]
 8010008:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801000a:	2300      	movs	r3, #0
 801000c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 801000e:	89fb      	ldrh	r3, [r7, #14]
 8010010:	2b20      	cmp	r3, #32
 8010012:	d802      	bhi.n	801001a <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010014:	f06f 0309 	mvn.w	r3, #9
 8010018:	e04d      	b.n	80100b6 <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 801001a:	68b9      	ldr	r1, [r7, #8]
 801001c:	2004      	movs	r0, #4
 801001e:	f7f8 fa00 	bl	8008422 <VL53LX_i2c_decode_uint32_t>
 8010022:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	3304      	adds	r3, #4
 801002c:	4619      	mov	r1, r3
 801002e:	2004      	movs	r0, #4
 8010030:	f7f8 f9f7 	bl	8008422 <VL53LX_i2c_decode_uint32_t>
 8010034:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	3308      	adds	r3, #8
 801003e:	4619      	mov	r1, r3
 8010040:	2004      	movs	r0, #4
 8010042:	f7f8 fa0b 	bl	800845c <VL53LX_i2c_decode_int32_t>
 8010046:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	330c      	adds	r3, #12
 8010050:	4619      	mov	r1, r3
 8010052:	2004      	movs	r0, #4
 8010054:	f7f8 f9e5 	bl	8008422 <VL53LX_i2c_decode_uint32_t>
 8010058:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	3310      	adds	r3, #16
 8010062:	4619      	mov	r1, r3
 8010064:	2004      	movs	r0, #4
 8010066:	f7f8 f9dc 	bl	8008422 <VL53LX_i2c_decode_uint32_t>
 801006a:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	3314      	adds	r3, #20
 8010074:	4619      	mov	r1, r3
 8010076:	2004      	movs	r0, #4
 8010078:	f7f8 f9d3 	bl	8008422 <VL53LX_i2c_decode_uint32_t>
 801007c:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	3318      	adds	r3, #24
 8010086:	4619      	mov	r1, r3
 8010088:	2004      	movs	r0, #4
 801008a:	f7f8 f9e7 	bl	800845c <VL53LX_i2c_decode_int32_t>
 801008e:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	331c      	adds	r3, #28
 8010098:	4619      	mov	r1, r3
 801009a:	2004      	movs	r0, #4
 801009c:	f7f8 f9c1 	bl	8008422 <VL53LX_i2c_decode_uint32_t>
 80100a0:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	f893 2020 	ldrb.w	r2, [r3, #32]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 80100b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3718      	adds	r7, #24
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}

080100be <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 80100be:	b580      	push	{r7, lr}
 80100c0:	b086      	sub	sp, #24
 80100c2:	af00      	add	r7, sp, #0
 80100c4:	4603      	mov	r3, r0
 80100c6:	60b9      	str	r1, [r7, #8]
 80100c8:	607a      	str	r2, [r7, #4]
 80100ca:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80100cc:	2300      	movs	r3, #0
 80100ce:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 80100d0:	89fb      	ldrh	r3, [r7, #14]
 80100d2:	2b37      	cmp	r3, #55	@ 0x37
 80100d4:	d802      	bhi.n	80100dc <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80100d6:	f06f 0309 	mvn.w	r3, #9
 80100da:	e15e      	b.n	801039a <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 80100dc:	68b9      	ldr	r1, [r7, #8]
 80100de:	2002      	movs	r0, #2
 80100e0:	f7f8 f900 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 80100e4:	4603      	mov	r3, r0
 80100e6:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	3302      	adds	r3, #2
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80100f6:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	3303      	adds	r3, #3
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010106:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	3304      	adds	r3, #4
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	f003 0303 	and.w	r3, r3, #3
 8010116:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	3305      	adds	r3, #5
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	f003 0301 	and.w	r3, r3, #1
 8010126:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	3306      	adds	r3, #6
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010136:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	3307      	adds	r3, #7
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010146:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	3308      	adds	r3, #8
 8010150:	4619      	mov	r1, r3
 8010152:	2002      	movs	r0, #2
 8010154:	f7f8 f8c6 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 8010158:	4603      	mov	r3, r0
 801015a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801015e:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	330a      	adds	r3, #10
 8010168:	781b      	ldrb	r3, [r3, #0]
 801016a:	f003 0303 	and.w	r3, r3, #3
 801016e:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	330b      	adds	r3, #11
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	f003 0303 	and.w	r3, r3, #3
 801017e:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	330c      	adds	r3, #12
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	f003 030f 	and.w	r3, r3, #15
 801018e:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	330d      	adds	r3, #13
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	f003 0307 	and.w	r3, r3, #7
 801019e:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	330e      	adds	r3, #14
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	f003 0301 	and.w	r3, r3, #1
 80101ae:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	330f      	adds	r3, #15
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	f003 0303 	and.w	r3, r3, #3
 80101be:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	7c1a      	ldrb	r2, [r3, #16]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	7c5a      	ldrb	r2, [r3, #17]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	3312      	adds	r3, #18
 80101d8:	4619      	mov	r1, r3
 80101da:	2002      	movs	r0, #2
 80101dc:	f7f8 f882 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 80101e0:	4603      	mov	r3, r0
 80101e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80101e6:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	3316      	adds	r3, #22
 80101f0:	4619      	mov	r1, r3
 80101f2:	2002      	movs	r0, #2
 80101f4:	f7f8 f876 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 80101f8:	4603      	mov	r3, r0
 80101fa:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	3318      	adds	r3, #24
 8010204:	4619      	mov	r1, r3
 8010206:	2002      	movs	r0, #2
 8010208:	f7f8 f86c 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 801020c:	4603      	mov	r3, r0
 801020e:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	331a      	adds	r3, #26
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	f003 0301 	and.w	r3, r3, #1
 801021e:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	331b      	adds	r3, #27
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	f003 0307 	and.w	r3, r3, #7
 801022e:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	7f1a      	ldrb	r2, [r3, #28]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	7f5a      	ldrb	r2, [r3, #29]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	331e      	adds	r3, #30
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801024e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	331f      	adds	r3, #31
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801025e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	3320      	adds	r3, #32
 8010268:	781b      	ldrb	r3, [r3, #0]
 801026a:	f003 0303 	and.w	r3, r3, #3
 801026e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	3321      	adds	r3, #33	@ 0x21
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	f003 030f 	and.w	r3, r3, #15
 801027e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	3325      	adds	r3, #37	@ 0x25
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	f003 0301 	and.w	r3, r3, #1
 80102b2:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	3326      	adds	r3, #38	@ 0x26
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	f003 0303 	and.w	r3, r3, #3
 80102c4:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	3327      	adds	r3, #39	@ 0x27
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	f003 031f 	and.w	r3, r3, #31
 80102d6:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	3328      	adds	r3, #40	@ 0x28
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	f003 031f 	and.w	r3, r3, #31
 80102e8:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	3329      	adds	r3, #41	@ 0x29
 80102f4:	781b      	ldrb	r3, [r3, #0]
 80102f6:	f003 031f 	and.w	r3, r3, #31
 80102fa:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	332a      	adds	r3, #42	@ 0x2a
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	f003 0301 	and.w	r3, r3, #1
 801030c:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	332b      	adds	r3, #43	@ 0x2b
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	f003 0301 	and.w	r3, r3, #1
 801031e:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	332c      	adds	r3, #44	@ 0x2c
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	f003 0303 	and.w	r3, r3, #3
 8010330:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	332d      	adds	r3, #45	@ 0x2d
 801033c:	781b      	ldrb	r3, [r3, #0]
 801033e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010342:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	332e      	adds	r3, #46	@ 0x2e
 801034e:	4619      	mov	r1, r3
 8010350:	2004      	movs	r0, #4
 8010352:	f7f8 f866 	bl	8008422 <VL53LX_i2c_decode_uint32_t>
 8010356:	4603      	mov	r3, r0
 8010358:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	3332      	adds	r3, #50	@ 0x32
 8010364:	4619      	mov	r1, r3
 8010366:	2004      	movs	r0, #4
 8010368:	f7f8 f85b 	bl	8008422 <VL53LX_i2c_decode_uint32_t>
 801036c:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	3336      	adds	r3, #54	@ 0x36
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	f003 0301 	and.w	r3, r3, #1
 801037c:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	3337      	adds	r3, #55	@ 0x37
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	f003 0301 	and.w	r3, r3, #1
 801038e:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 8010396:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801039a:	4618      	mov	r0, r3
 801039c:	3718      	adds	r7, #24
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}

080103a2 <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80103a2:	b580      	push	{r7, lr}
 80103a4:	b086      	sub	sp, #24
 80103a6:	af00      	add	r7, sp, #0
 80103a8:	4603      	mov	r3, r0
 80103aa:	60b9      	str	r1, [r7, #8]
 80103ac:	607a      	str	r2, [r7, #4]
 80103ae:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80103b0:	2300      	movs	r3, #0
 80103b2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 80103b4:	89fb      	ldrh	r3, [r7, #14]
 80103b6:	2b30      	cmp	r3, #48	@ 0x30
 80103b8:	d802      	bhi.n	80103c0 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80103ba:	f06f 0309 	mvn.w	r3, #9
 80103be:	e112      	b.n	80105e6 <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	785a      	ldrb	r2, [r3, #1]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	789a      	ldrb	r2, [r3, #2]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	3303      	adds	r3, #3
 80103dc:	4619      	mov	r1, r3
 80103de:	2002      	movs	r0, #2
 80103e0:	f7f7 ff80 	bl	80082e4 <VL53LX_i2c_decode_uint16_t>
 80103e4:	4603      	mov	r3, r0
 80103e6:	461a      	mov	r2, r3
	pdata->identification__module_id =
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	3305      	adds	r3, #5
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80103f6:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	3306      	adds	r3, #6
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	f003 0307 	and.w	r3, r3, #7
 8010406:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	3307      	adds	r3, #7
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	f003 0307 	and.w	r3, r3, #7
 8010416:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	3308      	adds	r3, #8
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010426:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	3309      	adds	r3, #9
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010436:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	330a      	adds	r3, #10
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	f003 0301 	and.w	r3, r3, #1
 8010446:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	330b      	adds	r3, #11
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010456:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	330c      	adds	r3, #12
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	f003 0301 	and.w	r3, r3, #1
 8010466:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	330d      	adds	r3, #13
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010476:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	330e      	adds	r3, #14
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010486:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	7bda      	ldrb	r2, [r3, #15]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	7c1a      	ldrb	r2, [r3, #16]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	7c5a      	ldrb	r2, [r3, #17]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	7c9a      	ldrb	r2, [r3, #18]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	7cda      	ldrb	r2, [r3, #19]
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	7d1a      	ldrb	r2, [r3, #20]
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	7d5a      	ldrb	r2, [r3, #21]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	7d9a      	ldrb	r2, [r3, #22]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	7dda      	ldrb	r2, [r3, #23]
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	7e1a      	ldrb	r2, [r3, #24]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	7e5a      	ldrb	r2, [r3, #25]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80104e4:	68bb      	ldr	r3, [r7, #8]
 80104e6:	7e9a      	ldrb	r2, [r3, #26]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	7eda      	ldrb	r2, [r3, #27]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	7f1a      	ldrb	r2, [r3, #28]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	7f5a      	ldrb	r2, [r3, #29]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	7f9a      	ldrb	r2, [r3, #30]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	7fda      	ldrb	r2, [r3, #31]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	f893 2020 	ldrb.w	r2, [r3, #32]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80105e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3718      	adds	r7, #24
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}

080105ee <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80105ee:	b580      	push	{r7, lr}
 80105f0:	b090      	sub	sp, #64	@ 0x40
 80105f2:	af00      	add	r7, sp, #0
 80105f4:	6078      	str	r0, [r7, #4]
 80105f6:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80105f8:	2300      	movs	r3, #0
 80105fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80105fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8010602:	2b00      	cmp	r3, #0
 8010604:	d10a      	bne.n	801061c <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 8010606:	f107 020c 	add.w	r2, r7, #12
 801060a:	2331      	movs	r3, #49	@ 0x31
 801060c:	f240 110f 	movw	r1, #271	@ 0x10f
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f000 fffd 	bl	8011610 <VL53LX_ReadMulti>
 8010616:	4603      	mov	r3, r0
 8010618:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 801061c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8010620:	2b00      	cmp	r3, #0
 8010622:	d109      	bne.n	8010638 <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 8010624:	f107 030c 	add.w	r3, r7, #12
 8010628:	683a      	ldr	r2, [r7, #0]
 801062a:	4619      	mov	r1, r3
 801062c:	2031      	movs	r0, #49	@ 0x31
 801062e:	f7ff feb8 	bl	80103a2 <VL53LX_i2c_decode_nvm_copy_data>
 8010632:	4603      	mov	r3, r0
 8010634:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8010638:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 801063c:	4618      	mov	r0, r3
 801063e:	3740      	adds	r7, #64	@ 0x40
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8010644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010648:	b0d6      	sub	sp, #344	@ 0x158
 801064a:	af00      	add	r7, sp, #0
 801064c:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8010650:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8010654:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8010658:	4603      	mov	r3, r0
 801065a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 801065e:	23f1      	movs	r3, #241	@ 0xf1
 8010660:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	uint32_t sigma_int  = VL53LX_D_002;
 8010664:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010668:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	uint32_t pll_period_mm  = 0;
 801066c:	2300      	movs	r3, #0
 801066e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	uint64_t tmp0        = 0;
 8010672:	f04f 0200 	mov.w	r2, #0
 8010676:	f04f 0300 	mov.w	r3, #0
 801067a:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	uint64_t tmp1        = 0;
 801067e:	f04f 0200 	mov.w	r2, #0
 8010682:	f04f 0300 	mov.w	r3, #0
 8010686:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
	uint64_t b_minus_amb = 0;
 801068a:	f04f 0200 	mov.w	r2, #0
 801068e:	f04f 0300 	mov.w	r3, #0
 8010692:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	uint64_t VL53LX_p_055   = 0;
 8010696:	f04f 0200 	mov.w	r2, #0
 801069a:	f04f 0300 	mov.w	r3, #0
 801069e:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

	*psigma_est  = VL53LX_D_002;
 80106a2:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80106a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80106aa:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 80106ac:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	f000 8322 	beq.w	8010cfa <VL53LX_f_023+0x6b6>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 80106b6:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7fb fa01 	bl	800bac2 <VL53LX_calc_pll_period_mm>
 80106c0:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128



		if (VL53LX_p_028 > VL53LX_p_032)
 80106c4:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80106c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d91a      	bls.n	8010706 <VL53LX_f_023+0xc2>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 80106d0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80106d4:	2200      	movs	r2, #0
 80106d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80106da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
			(uint64_t)VL53LX_p_032;
 80106de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80106e2:	2200      	movs	r2, #0
 80106e4:	4698      	mov	r8, r3
 80106e6:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 80106e8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80106ec:	460b      	mov	r3, r1
 80106ee:	ebb3 0308 	subs.w	r3, r3, r8
 80106f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80106f4:	4613      	mov	r3, r2
 80106f6:	eb63 0309 	sbc.w	r3, r3, r9
 80106fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80106fc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8010700:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
 8010704:	e013      	b.n	801072e <VL53LX_f_023+0xea>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8010706:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801070a:	2200      	movs	r2, #0
 801070c:	469a      	mov	sl, r3
 801070e:	4693      	mov	fp, r2
			(uint64_t)VL53LX_p_028;
 8010710:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8010714:	2200      	movs	r2, #0
 8010716:	461c      	mov	r4, r3
 8010718:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 801071a:	ebba 0304 	subs.w	r3, sl, r4
 801071e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010720:	eb6b 0305 	sbc.w	r3, fp, r5
 8010724:	637b      	str	r3, [r7, #52]	@ 0x34
 8010726:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 801072a:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138



		if (VL53LX_p_007 > VL53LX_p_001)
 801072e:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8010732:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010736:	429a      	cmp	r2, r3
 8010738:	d91f      	bls.n	801077a <VL53LX_f_023+0x136>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 801073a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801073e:	2200      	movs	r2, #0
 8010740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010744:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
			(uint64_t)VL53LX_p_001;
 8010748:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801074c:	2200      	movs	r2, #0
 801074e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010752:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010756:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 801075a:	4623      	mov	r3, r4
 801075c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8010760:	4602      	mov	r2, r0
 8010762:	1a9b      	subs	r3, r3, r2
 8010764:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010766:	462b      	mov	r3, r5
 8010768:	460a      	mov	r2, r1
 801076a:	eb63 0302 	sbc.w	r3, r3, r2
 801076e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010770:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8010774:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
 8010778:	e01e      	b.n	80107b8 <VL53LX_f_023+0x174>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 801077a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801077e:	2200      	movs	r2, #0
 8010780:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010784:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
			(uint64_t)VL53LX_p_007;
 8010788:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801078c:	2200      	movs	r2, #0
 801078e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010792:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8010796:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 801079a:	4623      	mov	r3, r4
 801079c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80107a0:	4602      	mov	r2, r0
 80107a2:	1a9b      	subs	r3, r3, r2
 80107a4:	623b      	str	r3, [r7, #32]
 80107a6:	462b      	mov	r3, r5
 80107a8:	460a      	mov	r2, r1
 80107aa:	eb63 0302 	sbc.w	r3, r3, r2
 80107ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80107b0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80107b4:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130



		if (b_minus_amb != 0) {
 80107b8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80107bc:	4313      	orrs	r3, r2
 80107be:	f000 829c 	beq.w	8010cfa <VL53LX_f_023+0x6b6>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 80107c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80107c6:	2200      	movs	r2, #0
 80107c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80107cc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80107d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80107d4:	2200      	movs	r2, #0
 80107d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80107da:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80107de:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80107e2:	4623      	mov	r3, r4
 80107e4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80107e8:	4602      	mov	r2, r0
 80107ea:	189b      	adds	r3, r3, r2
 80107ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80107f0:	460b      	mov	r3, r1
 80107f2:	462a      	mov	r2, r5
 80107f4:	eb42 0303 	adc.w	r3, r2, r3
 80107f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
					(uint64_t)VL53LX_p_028;
 80107fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8010800:	2200      	movs	r2, #0
 8010802:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010806:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 801080a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 801080e:	4623      	mov	r3, r4
 8010810:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010814:	4602      	mov	r2, r0
 8010816:	189b      	adds	r3, r3, r2
 8010818:	61bb      	str	r3, [r7, #24]
 801081a:	460b      	mov	r3, r1
 801081c:	462a      	mov	r2, r5
 801081e:	eb42 0303 	adc.w	r3, r2, r3
 8010822:	61fb      	str	r3, [r7, #28]
 8010824:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010828:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > VL53LX_D_003)
 801082c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010830:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8010834:	f173 0300 	sbcs.w	r3, r3, #0
 8010838:	d305      	bcc.n	8010846 <VL53LX_f_023+0x202>
				tmp0 = VL53LX_D_003;
 801083a:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 801083e:	f04f 0300 	mov.w	r3, #0
 8010842:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 8010846:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801084a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801084e:	fb03 f102 	mul.w	r1, r3, r2
 8010852:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8010856:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801085a:	fb02 f303 	mul.w	r3, r2, r3
 801085e:	18ca      	adds	r2, r1, r3
 8010860:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010864:	fba3 1303 	umull	r1, r3, r3, r3
 8010868:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 801086c:	460b      	mov	r3, r1
 801086e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8010872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010876:	18d3      	adds	r3, r2, r3
 8010878:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 801087c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8010880:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 8010884:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp1 = tmp1 << 8;
 8010888:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 801088c:	f04f 0000 	mov.w	r0, #0
 8010890:	f04f 0100 	mov.w	r1, #0
 8010894:	0219      	lsls	r1, r3, #8
 8010896:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801089a:	0210      	lsls	r0, r2, #8
 801089c:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			if (tmp1 > VL53LX_D_004)
 80108a0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80108a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80108a8:	d305      	bcc.n	80108b6 <VL53LX_f_023+0x272>
				tmp1 = VL53LX_D_004;
 80108aa:	f04f 32ff 	mov.w	r2, #4294967295
 80108ae:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80108b2:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 80108b6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80108ba:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80108be:	f7ef fcff 	bl	80002c0 <__aeabi_uldivmod>
 80108c2:	4602      	mov	r2, r0
 80108c4:	460b      	mov	r3, r1
 80108c6:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 80108ca:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80108ce:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80108d2:	f7ef fcf5 	bl	80002c0 <__aeabi_uldivmod>
 80108d6:	4602      	mov	r2, r0
 80108d8:	460b      	mov	r3, r1
 80108da:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_005)
 80108de:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80108e2:	2b80      	cmp	r3, #128	@ 0x80
 80108e4:	d305      	bcc.n	80108f2 <VL53LX_f_023+0x2ae>
				tmp1 = (uint64_t)VL53LX_D_005;
 80108e6:	f04f 32ff 	mov.w	r2, #4294967295
 80108ea:	f04f 037f 	mov.w	r3, #127	@ 0x7f
 80108ee:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp0 = tmp1 * tmp0;
 80108f2:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80108f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80108fa:	fb03 f102 	mul.w	r1, r3, r2
 80108fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8010902:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010906:	fb02 f303 	mul.w	r3, r2, r3
 801090a:	4419      	add	r1, r3
 801090c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8010910:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8010914:	fba2 2303 	umull	r2, r3, r2, r3
 8010918:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801091c:	4613      	mov	r3, r2
 801091e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8010922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8010926:	18cb      	adds	r3, r1, r3
 8010928:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801092c:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8010930:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010934:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010938:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801093c:	2200      	movs	r2, #0
 801093e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010942:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010946:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 801094a:	2200      	movs	r2, #0
 801094c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010950:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010954:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8010958:	4623      	mov	r3, r4
 801095a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 801095e:	4602      	mov	r2, r0
 8010960:	189b      	adds	r3, r3, r2
 8010962:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010966:	460b      	mov	r3, r1
 8010968:	462a      	mov	r2, r5
 801096a:	eb42 0303 	adc.w	r3, r2, r3
 801096e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010972:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8010976:	2200      	movs	r2, #0
 8010978:	67bb      	str	r3, [r7, #120]	@ 0x78
 801097a:	67fa      	str	r2, [r7, #124]	@ 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801097c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8010980:	4623      	mov	r3, r4
 8010982:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8010986:	4602      	mov	r2, r0
 8010988:	189b      	adds	r3, r3, r2
 801098a:	673b      	str	r3, [r7, #112]	@ 0x70
 801098c:	460b      	mov	r3, r1
 801098e:	462a      	mov	r2, r5
 8010990:	eb42 0303 	adc.w	r3, r2, r3
 8010994:	677b      	str	r3, [r7, #116]	@ 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010996:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 801099a:	2200      	movs	r2, #0
 801099c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801099e:	66fa      	str	r2, [r7, #108]	@ 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80109a0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80109a4:	4623      	mov	r3, r4
 80109a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80109aa:	4602      	mov	r2, r0
 80109ac:	189b      	adds	r3, r3, r2
 80109ae:	613b      	str	r3, [r7, #16]
 80109b0:	460b      	mov	r3, r1
 80109b2:	462a      	mov	r2, r5
 80109b4:	eb42 0303 	adc.w	r3, r2, r3
 80109b8:	617b      	str	r3, [r7, #20]
 80109ba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80109be:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_003)
 80109c2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80109c6:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80109ca:	f173 0300 	sbcs.w	r3, r3, #0
 80109ce:	d305      	bcc.n	80109dc <VL53LX_f_023+0x398>
				tmp1 = (uint64_t)VL53LX_D_003;
 80109d0:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80109d4:	f04f 0300 	mov.w	r3, #0
 80109d8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

			tmp1 = tmp1 << 8;
 80109dc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80109e0:	f04f 0000 	mov.w	r0, #0
 80109e4:	f04f 0100 	mov.w	r1, #0
 80109e8:	0219      	lsls	r1, r3, #8
 80109ea:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80109ee:	0210      	lsls	r0, r2, #8
 80109f0:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			tmp0 = tmp1 + tmp0;
 80109f4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80109f8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80109fc:	1884      	adds	r4, r0, r2
 80109fe:	60bc      	str	r4, [r7, #8]
 8010a00:	eb41 0303 	adc.w	r3, r1, r3
 8010a04:	60fb      	str	r3, [r7, #12]
 8010a06:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010a0a:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010a0e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	da05      	bge.n	8010a22 <VL53LX_f_023+0x3de>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010a16:	f04f 32ff 	mov.w	r2, #4294967295
 8010a1a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010a1e:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8010a22:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010a26:	2b01      	cmp	r3, #1
 8010a28:	d331      	bcc.n	8010a8e <VL53LX_f_023+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010a2a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010a2e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010a32:	f7ef fc45 	bl	80002c0 <__aeabi_uldivmod>
 8010a36:	4602      	mov	r2, r0
 8010a38:	460b      	mov	r3, r1
 8010a3a:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 8010a3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a42:	2200      	movs	r2, #0
 8010a44:	663b      	str	r3, [r7, #96]	@ 0x60
 8010a46:	667a      	str	r2, [r7, #100]	@ 0x64
 8010a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010a4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8010a50:	4622      	mov	r2, r4
 8010a52:	fb02 f203 	mul.w	r2, r2, r3
 8010a56:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010a5a:	4629      	mov	r1, r5
 8010a5c:	fb01 f303 	mul.w	r3, r1, r3
 8010a60:	441a      	add	r2, r3
 8010a62:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010a66:	4621      	mov	r1, r4
 8010a68:	fba3 1301 	umull	r1, r3, r3, r1
 8010a6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8010a70:	460b      	mov	r3, r1
 8010a72:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8010a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010a7a:	18d3      	adds	r3, r2, r3
 8010a7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8010a80:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8010a84:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010a88:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010a8c:	e030      	b.n	8010af0 <VL53LX_f_023+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010a8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a92:	2200      	movs	r2, #0
 8010a94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010a96:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8010a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010a9c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8010aa0:	4622      	mov	r2, r4
 8010aa2:	fb02 f203 	mul.w	r2, r2, r3
 8010aa6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010aaa:	4629      	mov	r1, r5
 8010aac:	fb01 f303 	mul.w	r3, r1, r3
 8010ab0:	441a      	add	r2, r3
 8010ab2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010ab6:	4621      	mov	r1, r4
 8010ab8:	fba3 1301 	umull	r1, r3, r3, r1
 8010abc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8010ac0:	460b      	mov	r3, r1
 8010ac2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8010ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010aca:	18d3      	adds	r3, r2, r3
 8010acc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8010ad0:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8010ad4:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010ad8:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010adc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010ae0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010ae4:	f7ef fbec 	bl	80002c0 <__aeabi_uldivmod>
 8010ae8:	4602      	mov	r2, r0
 8010aea:	460b      	mov	r3, r1
 8010aec:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010af0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	da05      	bge.n	8010b04 <VL53LX_f_023+0x4c0>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010af8:	f04f 32ff 	mov.w	r2, #4294967295
 8010afc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010b00:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8010b04:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010b08:	2b01      	cmp	r3, #1
 8010b0a:	d33d      	bcc.n	8010b88 <VL53LX_f_023+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010b0c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010b10:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010b14:	f7ef fbd4 	bl	80002c0 <__aeabi_uldivmod>
 8010b18:	4602      	mov	r2, r0
 8010b1a:	460b      	mov	r3, r1
 8010b1c:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 8010b20:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010b24:	f04f 0200 	mov.w	r2, #0
 8010b28:	f04f 0300 	mov.w	r3, #0
 8010b2c:	0882      	lsrs	r2, r0, #2
 8010b2e:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010b32:	088b      	lsrs	r3, r1, #2
 8010b34:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 8010b38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010b40:	657a      	str	r2, [r7, #84]	@ 0x54
 8010b42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010b46:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8010b4a:	4622      	mov	r2, r4
 8010b4c:	fb02 f203 	mul.w	r2, r2, r3
 8010b50:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010b54:	4629      	mov	r1, r5
 8010b56:	fb01 f303 	mul.w	r3, r1, r3
 8010b5a:	4413      	add	r3, r2
 8010b5c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8010b60:	4621      	mov	r1, r4
 8010b62:	fba2 1201 	umull	r1, r2, r2, r1
 8010b66:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8010b6a:	460a      	mov	r2, r1
 8010b6c:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8010b70:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8010b74:	4413      	add	r3, r2
 8010b76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8010b7a:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8010b7e:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010b82:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010b86:	e03c      	b.n	8010c02 <VL53LX_f_023+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010b88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010b90:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8010b92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010b96:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8010b9a:	4622      	mov	r2, r4
 8010b9c:	fb02 f203 	mul.w	r2, r2, r3
 8010ba0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010ba4:	4629      	mov	r1, r5
 8010ba6:	fb01 f303 	mul.w	r3, r1, r3
 8010baa:	4413      	add	r3, r2
 8010bac:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8010bb0:	4621      	mov	r1, r4
 8010bb2:	fba2 1201 	umull	r1, r2, r2, r1
 8010bb6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010bba:	460a      	mov	r2, r1
 8010bbc:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8010bc0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8010bc4:	4413      	add	r3, r2
 8010bc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8010bca:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 8010bce:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010bd2:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010bd6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010bda:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010bde:	f7ef fb6f 	bl	80002c0 <__aeabi_uldivmod>
 8010be2:	4602      	mov	r2, r0
 8010be4:	460b      	mov	r3, r1
 8010be6:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 8010bea:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010bee:	f04f 0200 	mov.w	r2, #0
 8010bf2:	f04f 0300 	mov.w	r3, #0
 8010bf6:	0882      	lsrs	r2, r0, #2
 8010bf8:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010bfc:	088b      	lsrs	r3, r1, #2
 8010bfe:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010c02:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	da05      	bge.n	8010c16 <VL53LX_f_023+0x5d2>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8010c0e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010c12:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp0 = tmp0 >> 2;
 8010c16:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010c1a:	f04f 0200 	mov.w	r2, #0
 8010c1e:	f04f 0300 	mov.w	r3, #0
 8010c22:	0882      	lsrs	r2, r0, #2
 8010c24:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010c28:	088b      	lsrs	r3, r1, #2
 8010c2a:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010c2e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010c32:	2b01      	cmp	r3, #1
 8010c34:	d305      	bcc.n	8010c42 <VL53LX_f_023+0x5fe>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010c36:	f04f 32ff 	mov.w	r2, #4294967295
 8010c3a:	f04f 0300 	mov.w	r3, #0
 8010c3e:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8010c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010c46:	2200      	movs	r2, #0
 8010c48:	643b      	str	r3, [r7, #64]	@ 0x40
 8010c4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8010c4c:	f04f 0200 	mov.w	r2, #0
 8010c50:	f04f 0300 	mov.w	r3, #0
 8010c54:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8010c58:	4629      	mov	r1, r5
 8010c5a:	01cb      	lsls	r3, r1, #7
 8010c5c:	4621      	mov	r1, r4
 8010c5e:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8010c62:	4621      	mov	r1, r4
 8010c64:	01ca      	lsls	r2, r1, #7
 8010c66:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = tmp1 * tmp1;
 8010c6a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8010c6e:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8010c72:	fb03 f202 	mul.w	r2, r3, r2
 8010c76:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8010c7a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8010c7e:	fb01 f303 	mul.w	r3, r1, r3
 8010c82:	441a      	add	r2, r3
 8010c84:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8010c88:	fba3 1303 	umull	r1, r3, r3, r3
 8010c8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010c90:	460b      	mov	r3, r1
 8010c92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010c9a:	18d3      	adds	r3, r2, r3
 8010c9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010ca0:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8010ca4:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 8010ca8:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp0 = tmp0 + tmp1;
 8010cac:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010cb0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8010cb4:	1884      	adds	r4, r0, r2
 8010cb6:	603c      	str	r4, [r7, #0]
 8010cb8:	eb41 0303 	adc.w	r3, r1, r3
 8010cbc:	607b      	str	r3, [r7, #4]
 8010cbe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010cc2:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010cc6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010cca:	2b01      	cmp	r3, #1
 8010ccc:	d305      	bcc.n	8010cda <VL53LX_f_023+0x696>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010cce:	f04f 32ff 	mov.w	r2, #4294967295
 8010cd2:	f04f 0300 	mov.w	r3, #0
 8010cd6:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 8010cda:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7fa fd88 	bl	800b7f4 <VL53LX_isqrt>
 8010ce4:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8010ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010cec:	b29a      	uxth	r2, r3
 8010cee:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8010cf2:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
		}

	}

	return status;
 8010cfa:	f997 3157 	ldrsb.w	r3, [r7, #343]	@ 0x157
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8010d04:	46bd      	mov	sp, r7
 8010d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010d0a <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 8010d0a:	b580      	push	{r7, lr}
 8010d0c:	b086      	sub	sp, #24
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010d12:	2300      	movs	r3, #0
 8010d14:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	3318      	adds	r3, #24
 8010d1a:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d107      	bne.n	8010d38 <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 8010d28:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f000 f88b 	bl	8010e48 <VL53LX_poll_for_range_completion>
 8010d32:	4603      	mov	r3, r0
 8010d34:	75fb      	strb	r3, [r7, #23]
 8010d36:	e01b      	b.n	8010d70 <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010d3c:	e011      	b.n	8010d62 <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 8010d3e:	f107 030f 	add.w	r3, r7, #15
 8010d42:	4619      	mov	r1, r3
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f000 f819 	bl	8010d7c <VL53LX_is_new_data_ready>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 8010d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d105      	bne.n	8010d62 <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 8010d56:	2101      	movs	r1, #1
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f000 fd71 	bl	8011840 <VL53LX_WaitMs>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010d62:	7bfb      	ldrb	r3, [r7, #15]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d103      	bne.n	8010d70 <VL53LX_wait_for_test_completion+0x66>
 8010d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d0e6      	beq.n	8010d3e <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d74:	4618      	mov	r0, r3
 8010d76:	3718      	adds	r7, #24
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}

08010d7c <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b086      	sub	sp, #24
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
 8010d84:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010d86:	2300      	movs	r3, #0
 8010d88:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	3318      	adds	r3, #24
 8010d8e:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010d90:	2300      	movs	r3, #0
 8010d92:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8010d94:	2300      	movs	r3, #0
 8010d96:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010d9c:	693b      	ldr	r3, [r7, #16]
 8010d9e:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
	gpio__mux_active_high_hv =
 8010da2:	f003 0310 	and.w	r3, r3, #16
 8010da6:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010da8:	7bfb      	ldrb	r3, [r7, #15]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d102      	bne.n	8010db4 <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8010dae:	2301      	movs	r3, #1
 8010db0:	75fb      	strb	r3, [r7, #23]
 8010db2:	e001      	b.n	8010db8 <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8010db4:	2300      	movs	r3, #0
 8010db6:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 8010db8:	f107 030e 	add.w	r3, r7, #14
 8010dbc:	461a      	mov	r2, r3
 8010dbe:	2131      	movs	r1, #49	@ 0x31
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f000 fcb7 	bl	8011734 <VL53LX_RdByte>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8010dca:	7bbb      	ldrb	r3, [r7, #14]
 8010dcc:	f003 0201 	and.w	r2, r3, #1
 8010dd0:	7dfb      	ldrb	r3, [r7, #23]
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d103      	bne.n	8010dde <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	2201      	movs	r2, #1
 8010dda:	701a      	strb	r2, [r3, #0]
 8010ddc:	e002      	b.n	8010de4 <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	2200      	movs	r2, #0
 8010de2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8010de4:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	3718      	adds	r7, #24
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}

08010df0 <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b086      	sub	sp, #24
 8010df4:	af02      	add	r7, sp, #8
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 8010dfe:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f000 fd2c 	bl	8011860 <VL53LX_WaitUs>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 8010e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d10b      	bne.n	8010e2c <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 8010e14:	2301      	movs	r3, #1
 8010e16:	9301      	str	r3, [sp, #4]
 8010e18:	2301      	movs	r3, #1
 8010e1a:	9300      	str	r3, [sp, #0]
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	22e5      	movs	r2, #229	@ 0xe5
 8010e20:	6839      	ldr	r1, [r7, #0]
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 fd34 	bl	8011890 <VL53LX_WaitValueMaskEx>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 8010e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d103      	bne.n	8010e3c <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 8010e34:	2103      	movs	r1, #3
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f7f6 fc36 	bl	80076a8 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8010e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3710      	adds	r7, #16
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b088      	sub	sp, #32
 8010e4c:	af02      	add	r7, sp, #8
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010e52:	2300      	movs	r3, #0
 8010e54:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	3318      	adds	r3, #24
 8010e5a:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8010e60:	2300      	movs	r3, #0
 8010e62:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010e64:	693b      	ldr	r3, [r7, #16]
 8010e66:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
	gpio__mux_active_high_hv =
 8010e6a:	f003 0310 	and.w	r3, r3, #16
 8010e6e:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010e70:	7bfb      	ldrb	r3, [r7, #15]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d102      	bne.n	8010e7c <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8010e76:	2301      	movs	r3, #1
 8010e78:	75fb      	strb	r3, [r7, #23]
 8010e7a:	e001      	b.n	8010e80 <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 8010e80:	7dfb      	ldrb	r3, [r7, #23]
 8010e82:	2201      	movs	r2, #1
 8010e84:	9201      	str	r2, [sp, #4]
 8010e86:	2201      	movs	r2, #1
 8010e88:	9200      	str	r2, [sp, #0]
 8010e8a:	2231      	movs	r2, #49	@ 0x31
 8010e8c:	6839      	ldr	r1, [r7, #0]
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f000 fcfe 	bl	8011890 <VL53LX_WaitValueMaskEx>
 8010e94:	4603      	mov	r3, r0
 8010e96:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8010e98:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3718      	adds	r7, #24
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8010ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010ea8:	b0c0      	sub	sp, #256	@ 0x100
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 8010eb8:	4613      	mov	r3, r2
 8010eba:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf

	uint8_t row = 0;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
	uint8_t col = 0;
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd



	int16_t  bound_l_x = 0;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
	int16_t  bound_r_x = 0;
 8010edc:	2300      	movs	r3, #0
 8010ede:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
	int16_t  bound_u_y = 0;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
	int16_t  bound_d_y = 0;
 8010ee8:	2300      	movs	r3, #0
 8010eea:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

	int64_t xtalk_rate_ll = 0;
 8010eee:	f04f 0200 	mov.w	r2, #0
 8010ef2:	f04f 0300 	mov.w	r3, #0
 8010ef6:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
	int64_t xtalk_rate_ur = 0;
 8010efa:	f04f 0200 	mov.w	r2, #0
 8010efe:	f04f 0300 	mov.w	r3, #0
 8010f02:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8

	int64_t xtalk_avg = 0;
 8010f06:	f04f 0200 	mov.w	r2, #0
 8010f0a:	f04f 0300 	mov.w	r3, #0
 8010f0e:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0





	if (status == VL53LX_ERROR_NONE) {
 8010f12:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d108      	bne.n	8010f2c <VL53LX_f_032+0x88>
		VL53LX_decode_row_col(
 8010f1a:	f107 02dd 	add.w	r2, r7, #221	@ 0xdd
 8010f1e:	f107 01de 	add.w	r1, r7, #222	@ 0xde
 8010f22:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7fb f846 	bl	800bfb8 <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 8010f2c:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d162      	bne.n	8010ffa <VL53LX_f_032+0x156>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8010f34:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010f38:	091b      	lsrs	r3, r3, #4
 8010f3a:	b2db      	uxtb	r3, r3
 8010f3c:	f003 0301 	and.w	r3, r3, #1
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d00d      	beq.n	8010f60 <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 8010f44:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8010f48:	461a      	mov	r2, r3
 8010f4a:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010f4e:	095b      	lsrs	r3, r3, #5
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	1ad3      	subs	r3, r2, r3
 8010f54:	b29b      	uxth	r3, r3
 8010f56:	3b01      	subs	r3, #1
 8010f58:	b29b      	uxth	r3, r3
 8010f5a:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 8010f5e:	e00a      	b.n	8010f76 <VL53LX_f_032+0xd2>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8010f60:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8010f64:	461a      	mov	r2, r3
 8010f66:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010f6a:	095b      	lsrs	r3, r3, #5
 8010f6c:	b2db      	uxtb	r3, r3
 8010f6e:	1ad3      	subs	r3, r2, r3
 8010f70:	b29b      	uxth	r3, r3
 8010f72:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8010f76:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010f80:	095b      	lsrs	r3, r3, #5
 8010f82:	b2db      	uxtb	r3, r3
 8010f84:	4413      	add	r3, r2
 8010f86:	b29b      	uxth	r3, r3
 8010f88:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8010f8c:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010f90:	f003 0301 	and.w	r3, r3, #1
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d011      	beq.n	8010fbc <VL53LX_f_032+0x118>
			bound_d_y = (int16_t) row -
 8010f98:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8010f9c:	4619      	mov	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8010f9e:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010fa2:	f003 020f 	and.w	r2, r3, #15
 8010fa6:	0fd3      	lsrs	r3, r2, #31
 8010fa8:	4413      	add	r3, r2
 8010faa:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	1acb      	subs	r3, r1, r3
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	3b01      	subs	r3, #1
 8010fb4:	b29b      	uxth	r3, r3
 8010fb6:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
 8010fba:	e00f      	b.n	8010fdc <VL53LX_f_032+0x138>
		else
			bound_d_y = (int16_t) row -
 8010fbc:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8010fc0:	4619      	mov	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8010fc2:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010fc6:	f003 020f 	and.w	r2, r3, #15
 8010fca:	0fd3      	lsrs	r3, r2, #31
 8010fcc:	4413      	add	r3, r2
 8010fce:	105b      	asrs	r3, r3, #1
 8010fd0:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	440b      	add	r3, r1
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

		bound_u_y = (int16_t) row +
 8010fdc:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8010fe0:	4619      	mov	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8010fe2:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010fe6:	f003 020f 	and.w	r2, r3, #15
 8010fea:	0fd3      	lsrs	r3, r2, #31
 8010fec:	4413      	add	r3, r2
 8010fee:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	440b      	add	r3, r1
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010ffa:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d133      	bne.n	801106a <VL53LX_f_032+0x1c6>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8011002:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8011006:	b29a      	uxth	r2, r3
 8011008:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 801100c:	4413      	add	r3, r2
 801100e:	b29b      	uxth	r3, r3
 8011010:	005b      	lsls	r3, r3, #1
 8011012:	b29b      	uxth	r3, r3
 8011014:	3b0f      	subs	r3, #15
 8011016:	b29b      	uxth	r3, r3
 8011018:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 801101c:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8011020:	b29a      	uxth	r2, r3
 8011022:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8011026:	4413      	add	r3, r2
 8011028:	b29b      	uxth	r3, r3
 801102a:	005b      	lsls	r3, r3, #1
 801102c:	b29b      	uxth	r3, r3
 801102e:	3b0f      	subs	r3, #15
 8011030:	b29b      	uxth	r3, r3
 8011032:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8011036:	f997 3120 	ldrsb.w	r3, [r7, #288]	@ 0x120
 801103a:	b29a      	uxth	r2, r3
 801103c:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 8011040:	4413      	add	r3, r2
 8011042:	b29b      	uxth	r3, r3
 8011044:	005b      	lsls	r3, r3, #1
 8011046:	b29b      	uxth	r3, r3
 8011048:	3b0f      	subs	r3, #15
 801104a:	b29b      	uxth	r3, r3
 801104c:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8011050:	f997 3120 	ldrsb.w	r3, [r7, #288]	@ 0x120
 8011054:	b29a      	uxth	r2, r3
 8011056:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 801105a:	4413      	add	r3, r2
 801105c:	b29b      	uxth	r3, r3
 801105e:	005b      	lsls	r3, r3, #1
 8011060:	b29b      	uxth	r3, r3
 8011062:	3b0f      	subs	r3, #15
 8011064:	b29b      	uxth	r3, r3
 8011066:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 801106a:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 801106e:	2b00      	cmp	r3, #0
 8011070:	f040 8135 	bne.w	80112de <VL53LX_f_032+0x43a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011074:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 8011078:	17da      	asrs	r2, r3, #31
 801107a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801107e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8011082:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 8011086:	17da      	asrs	r2, r3, #31
 8011088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801108c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011090:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8011094:	460b      	mov	r3, r1
 8011096:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801109a:	fb02 f203 	mul.w	r2, r2, r3
 801109e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80110a2:	e9c7 0130 	strd	r0, r1, [r7, #192]	@ 0xc0
 80110a6:	4601      	mov	r1, r0
 80110a8:	fb01 f303 	mul.w	r3, r1, r3
 80110ac:	4413      	add	r3, r2
 80110ae:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80110b2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80110b6:	fba2 4501 	umull	r4, r5, r2, r1
 80110ba:	442b      	add	r3, r5
 80110bc:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80110be:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	@ 0xf8
 80110c2:	17da      	asrs	r2, r3, #31
 80110c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80110c8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
					((int64_t)ygradient));
 80110cc:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 80110d0:	17da      	asrs	r2, r3, #31
 80110d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80110d6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80110da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80110de:	460b      	mov	r3, r1
 80110e0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80110e4:	fb02 f203 	mul.w	r2, r2, r3
 80110e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80110ec:	e9c7 012c 	strd	r0, r1, [r7, #176]	@ 0xb0
 80110f0:	4601      	mov	r1, r0
 80110f2:	fb01 f303 	mul.w	r3, r1, r3
 80110f6:	4413      	add	r3, r2
 80110f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80110fc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8011100:	fba2 8901 	umull	r8, r9, r2, r1
 8011104:	444b      	add	r3, r9
 8011106:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011108:	eb14 0308 	adds.w	r3, r4, r8
 801110c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801110e:	eb45 0309 	adc.w	r3, r5, r9
 8011112:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011114:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8011118:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 801111c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8011120:	1c51      	adds	r1, r2, #1
 8011122:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8011126:	f143 0300 	adc.w	r3, r3, #0
 801112a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801112e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8011132:	460b      	mov	r3, r1
 8011134:	0fdb      	lsrs	r3, r3, #31
 8011136:	2200      	movs	r2, #0
 8011138:	643b      	str	r3, [r7, #64]	@ 0x40
 801113a:	647a      	str	r2, [r7, #68]	@ 0x44
 801113c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8011140:	4623      	mov	r3, r4
 8011142:	4602      	mov	r2, r0
 8011144:	189b      	adds	r3, r3, r2
 8011146:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011148:	460b      	mov	r3, r1
 801114a:	462a      	mov	r2, r5
 801114c:	eb42 0303 	adc.w	r3, r2, r3
 8011150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011152:	f04f 0200 	mov.w	r2, #0
 8011156:	f04f 0300 	mov.w	r3, #0
 801115a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801115e:	4621      	mov	r1, r4
 8011160:	084a      	lsrs	r2, r1, #1
 8011162:	4629      	mov	r1, r5
 8011164:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011168:	4629      	mov	r1, r5
 801116a:	104b      	asrs	r3, r1, #1
 801116c:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8011170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011174:	2200      	movs	r2, #0
 8011176:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801117a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801117e:	f04f 0000 	mov.w	r0, #0
 8011182:	f04f 0100 	mov.w	r1, #0
 8011186:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801118a:	462b      	mov	r3, r5
 801118c:	0099      	lsls	r1, r3, #2
 801118e:	4623      	mov	r3, r4
 8011190:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8011194:	4623      	mov	r3, r4
 8011196:	0098      	lsls	r0, r3, #2
 8011198:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 801119c:	1814      	adds	r4, r2, r0
 801119e:	633c      	str	r4, [r7, #48]	@ 0x30
 80111a0:	414b      	adcs	r3, r1
 80111a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80111a4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80111a8:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80111ac:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	@ 0xfc
 80111b0:	17da      	asrs	r2, r3, #31
 80111b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80111b6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80111ba:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 80111be:	17da      	asrs	r2, r3, #31
 80111c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80111c4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80111c8:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80111cc:	462b      	mov	r3, r5
 80111ce:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80111d2:	4642      	mov	r2, r8
 80111d4:	fb02 f203 	mul.w	r2, r2, r3
 80111d8:	464b      	mov	r3, r9
 80111da:	4621      	mov	r1, r4
 80111dc:	fb01 f303 	mul.w	r3, r1, r3
 80111e0:	4413      	add	r3, r2
 80111e2:	4622      	mov	r2, r4
 80111e4:	4641      	mov	r1, r8
 80111e6:	fba2 ab01 	umull	sl, fp, r2, r1
 80111ea:	445b      	add	r3, fp
 80111ec:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80111ee:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	@ 0xfa
 80111f2:	17da      	asrs	r2, r3, #31
 80111f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80111f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
			((int64_t)ygradient));
 80111f8:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 80111fc:	17da      	asrs	r2, r3, #31
 80111fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8011200:	677a      	str	r2, [r7, #116]	@ 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8011202:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8011206:	462b      	mov	r3, r5
 8011208:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 801120c:	4642      	mov	r2, r8
 801120e:	fb02 f203 	mul.w	r2, r2, r3
 8011212:	464b      	mov	r3, r9
 8011214:	4621      	mov	r1, r4
 8011216:	fb01 f303 	mul.w	r3, r1, r3
 801121a:	4413      	add	r3, r2
 801121c:	4622      	mov	r2, r4
 801121e:	4641      	mov	r1, r8
 8011220:	fba2 1201 	umull	r1, r2, r2, r1
 8011224:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011228:	460a      	mov	r2, r1
 801122a:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 801122e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011232:	4413      	add	r3, r2
 8011234:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8011238:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801123c:	460b      	mov	r3, r1
 801123e:	eb1a 0303 	adds.w	r3, sl, r3
 8011242:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011244:	4613      	mov	r3, r2
 8011246:	eb4b 0303 	adc.w	r3, fp, r3
 801124a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801124c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8011250:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8011254:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8011258:	1c51      	adds	r1, r2, #1
 801125a:	66b9      	str	r1, [r7, #104]	@ 0x68
 801125c:	f143 0300 	adc.w	r3, r3, #0
 8011260:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011262:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8011266:	460b      	mov	r3, r1
 8011268:	0fdb      	lsrs	r3, r3, #31
 801126a:	2200      	movs	r2, #0
 801126c:	623b      	str	r3, [r7, #32]
 801126e:	627a      	str	r2, [r7, #36]	@ 0x24
 8011270:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8011274:	4623      	mov	r3, r4
 8011276:	4602      	mov	r2, r0
 8011278:	189b      	adds	r3, r3, r2
 801127a:	61bb      	str	r3, [r7, #24]
 801127c:	460b      	mov	r3, r1
 801127e:	462a      	mov	r2, r5
 8011280:	eb42 0303 	adc.w	r3, r2, r3
 8011284:	61fb      	str	r3, [r7, #28]
 8011286:	f04f 0200 	mov.w	r2, #0
 801128a:	f04f 0300 	mov.w	r3, #0
 801128e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011292:	4621      	mov	r1, r4
 8011294:	084a      	lsrs	r2, r1, #1
 8011296:	4629      	mov	r1, r5
 8011298:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801129c:	4629      	mov	r1, r5
 801129e:	104b      	asrs	r3, r1, #1
 80112a0:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 80112a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80112a8:	2200      	movs	r2, #0
 80112aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80112ac:	667a      	str	r2, [r7, #100]	@ 0x64
 80112ae:	f04f 0200 	mov.w	r2, #0
 80112b2:	f04f 0300 	mov.w	r3, #0
 80112b6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80112ba:	4629      	mov	r1, r5
 80112bc:	008b      	lsls	r3, r1, #2
 80112be:	4621      	mov	r1, r4
 80112c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80112c4:	4621      	mov	r1, r4
 80112c6:	008a      	lsls	r2, r1, #2
 80112c8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80112cc:	1884      	adds	r4, r0, r2
 80112ce:	613c      	str	r4, [r7, #16]
 80112d0:	eb41 0303 	adc.w	r3, r1, r3
 80112d4:	617b      	str	r3, [r7, #20]
 80112d6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80112da:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 80112de:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d132      	bne.n	801134c <VL53LX_f_032+0x4a8>
		xtalk_avg = do_division_s(
 80112e6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 80112ea:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 80112ee:	1884      	adds	r4, r0, r2
 80112f0:	65bc      	str	r4, [r7, #88]	@ 0x58
 80112f2:	eb41 0303 	adc.w	r3, r1, r3
 80112f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80112f8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80112fc:	460b      	mov	r3, r1
 80112fe:	3301      	adds	r3, #1
 8011300:	653b      	str	r3, [r7, #80]	@ 0x50
 8011302:	4613      	mov	r3, r2
 8011304:	f143 0300 	adc.w	r3, r3, #0
 8011308:	657b      	str	r3, [r7, #84]	@ 0x54
 801130a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801130e:	460b      	mov	r3, r1
 8011310:	0fdb      	lsrs	r3, r3, #31
 8011312:	2200      	movs	r2, #0
 8011314:	60bb      	str	r3, [r7, #8]
 8011316:	60fa      	str	r2, [r7, #12]
 8011318:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801131c:	4623      	mov	r3, r4
 801131e:	4602      	mov	r2, r0
 8011320:	189b      	adds	r3, r3, r2
 8011322:	603b      	str	r3, [r7, #0]
 8011324:	460b      	mov	r3, r1
 8011326:	462a      	mov	r2, r5
 8011328:	eb42 0303 	adc.w	r3, r2, r3
 801132c:	607b      	str	r3, [r7, #4]
 801132e:	f04f 0200 	mov.w	r2, #0
 8011332:	f04f 0300 	mov.w	r3, #0
 8011336:	e9d7 4500 	ldrd	r4, r5, [r7]
 801133a:	4621      	mov	r1, r4
 801133c:	084a      	lsrs	r2, r1, #1
 801133e:	4629      	mov	r1, r5
 8011340:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011344:	4629      	mov	r1, r5
 8011346:	104b      	asrs	r3, r1, #1
 8011348:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 801134c:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8011350:	2b00      	cmp	r3, #0
 8011352:	d109      	bne.n	8011368 <VL53LX_f_032+0x4c4>
		if (xtalk_avg < 0)
 8011354:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8011358:	2b00      	cmp	r3, #0
 801135a:	da05      	bge.n	8011368 <VL53LX_f_032+0x4c4>
			xtalk_avg = 0;
 801135c:	f04f 0200 	mov.w	r2, #0
 8011360:	f04f 0300 	mov.w	r3, #0
 8011364:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8011368:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801136c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011370:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8011372:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
}
 8011376:	4618      	mov	r0, r3
 8011378:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801137c:	46bd      	mov	sp, r7
 801137e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011382 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8011382:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011386:	b09a      	sub	sp, #104	@ 0x68
 8011388:	af00      	add	r7, sp, #0
 801138a:	6478      	str	r0, [r7, #68]	@ 0x44
 801138c:	6439      	str	r1, [r7, #64]	@ 0x40
 801138e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011390:	63bb      	str	r3, [r7, #56]	@ 0x38


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8011392:	2300      	movs	r3, #0
 8011394:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8011398:	f04f 0200 	mov.w	r2, #0
 801139c:	f04f 0300 	mov.w	r3, #0
 80113a0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_total_events = 0;
 80113a4:	f04f 0200 	mov.w	r2, #0
 80113a8:	f04f 0300 	mov.w	r3, #0
 80113ac:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	uint64_t xtalk_temp_bin = 0;
 80113b0:	f04f 0200 	mov.w	r2, #0
 80113b4:	f04f 0300 	mov.w	r3, #0
 80113b8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	uint8_t  i = 0;
 80113bc:	2300      	movs	r3, #0
 80113be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80113c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113c4:	2200      	movs	r2, #0
 80113c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80113c8:	637a      	str	r2, [r7, #52]	@ 0x34
 80113ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80113cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80113d0:	2200      	movs	r2, #0
 80113d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80113d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80113d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80113da:	460b      	mov	r3, r1
 80113dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80113de:	fb02 f203 	mul.w	r2, r2, r3
 80113e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113e4:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 80113e8:	4601      	mov	r1, r0
 80113ea:	fb01 f303 	mul.w	r3, r1, r3
 80113ee:	4413      	add	r3, r2
 80113f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80113f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80113f4:	fba2 4501 	umull	r4, r5, r2, r1
 80113f8:	442b      	add	r3, r5
 80113fa:	461d      	mov	r5, r3
 80113fc:	f514 73fa 	adds.w	r3, r4, #500	@ 0x1f4
 8011400:	623b      	str	r3, [r7, #32]
 8011402:	f145 0300 	adc.w	r3, r5, #0
 8011406:	627b      	str	r3, [r7, #36]	@ 0x24
 8011408:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801140c:	f04f 0300 	mov.w	r3, #0
 8011410:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011414:	f7ee ff54 	bl	80002c0 <__aeabi_uldivmod>
 8011418:	4602      	mov	r2, r0
 801141a:	460b      	mov	r3, r1
 801141c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8011420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011422:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8011426:	b29b      	uxth	r3, r3
 8011428:	2200      	movs	r2, #0
 801142a:	61bb      	str	r3, [r7, #24]
 801142c:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 801142e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011430:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011434:	4622      	mov	r2, r4
 8011436:	fb02 f203 	mul.w	r2, r2, r3
 801143a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801143c:	4629      	mov	r1, r5
 801143e:	fb01 f303 	mul.w	r3, r1, r3
 8011442:	4413      	add	r3, r2
 8011444:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011446:	4621      	mov	r1, r4
 8011448:	fba2 ab01 	umull	sl, fp, r2, r1
 801144c:	445b      	add	r3, fp
 801144e:	469b      	mov	fp, r3
 8011450:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 8011454:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8011458:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801145c:	f04f 0200 	mov.w	r2, #0
 8011460:	f04f 0300 	mov.w	r3, #0
 8011464:	0a02      	lsrs	r2, r0, #8
 8011466:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801146a:	0a0b      	lsrs	r3, r1, #8
 801146c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8011470:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8011474:	f512 6180 	adds.w	r1, r2, #1024	@ 0x400
 8011478:	6139      	str	r1, [r7, #16]
 801147a:	f143 0300 	adc.w	r3, r3, #0
 801147e:	617b      	str	r3, [r7, #20]
 8011480:	f04f 0200 	mov.w	r2, #0
 8011484:	f04f 0300 	mov.w	r3, #0
 8011488:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801148c:	4621      	mov	r1, r4
 801148e:	0aca      	lsrs	r2, r1, #11
 8011490:	4629      	mov	r1, r5
 8011492:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8011496:	4629      	mov	r1, r5
 8011498:	0acb      	lsrs	r3, r1, #11
 801149a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 801149e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80114a2:	2b01      	cmp	r3, #1
 80114a4:	d305      	bcc.n	80114b2 <VL53LX_f_033+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 80114a6:	f04f 32ff 	mov.w	r2, #4294967295
 80114aa:	f04f 0300 	mov.w	r3, #0
 80114ae:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 80114b2:	2300      	movs	r3, #0
 80114b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80114b8:	e041      	b.n	801153e <VL53LX_f_033+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 80114ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80114be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80114c0:	3302      	adds	r3, #2
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	4413      	add	r3, r2
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	2200      	movs	r2, #0
 80114ca:	60bb      	str	r3, [r7, #8]
 80114cc:	60fa      	str	r2, [r7, #12]
 80114ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80114d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80114d4:	4622      	mov	r2, r4
 80114d6:	fb02 f203 	mul.w	r2, r2, r3
 80114da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80114dc:	4629      	mov	r1, r5
 80114de:	fb01 f303 	mul.w	r3, r1, r3
 80114e2:	4413      	add	r3, r2
 80114e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80114e6:	4621      	mov	r1, r4
 80114e8:	fba2 8901 	umull	r8, r9, r2, r1
 80114ec:	444b      	add	r3, r9
 80114ee:	4699      	mov	r9, r3
 80114f0:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
 80114f4:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80114f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80114fc:	f512 7100 	adds.w	r1, r2, #512	@ 0x200
 8011500:	6039      	str	r1, [r7, #0]
 8011502:	f143 0300 	adc.w	r3, r3, #0
 8011506:	607b      	str	r3, [r7, #4]
 8011508:	f04f 0200 	mov.w	r2, #0
 801150c:	f04f 0300 	mov.w	r3, #0
 8011510:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011514:	4621      	mov	r1, r4
 8011516:	0a8a      	lsrs	r2, r1, #10
 8011518:	4629      	mov	r1, r5
 801151a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 801151e:	4629      	mov	r1, r5
 8011520:	0a8b      	lsrs	r3, r1, #10
 8011522:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8011526:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801152a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801152c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801152e:	3206      	adds	r2, #6
 8011530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8011534:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011538:	3301      	adds	r3, #1
 801153a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801153e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011540:	7a9b      	ldrb	r3, [r3, #10]
 8011542:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8011546:	429a      	cmp	r2, r3
 8011548:	d3b7      	bcc.n	80114ba <VL53LX_f_033+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 801154a:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
}
 801154e:	4618      	mov	r0, r3
 8011550:	3768      	adds	r7, #104	@ 0x68
 8011552:	46bd      	mov	sp, r7
 8011554:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011558 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8011558:	b580      	push	{r7, lr}
 801155a:	b084      	sub	sp, #16
 801155c:	af00      	add	r7, sp, #0
 801155e:	60f8      	str	r0, [r7, #12]
 8011560:	60b9      	str	r1, [r7, #8]
 8011562:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	68db      	ldr	r3, [r3, #12]
 8011568:	68fa      	ldr	r2, [r7, #12]
 801156a:	8910      	ldrh	r0, [r2, #8]
 801156c:	687a      	ldr	r2, [r7, #4]
 801156e:	b292      	uxth	r2, r2
 8011570:	68b9      	ldr	r1, [r7, #8]
 8011572:	4798      	blx	r3
 8011574:	4603      	mov	r3, r0
}
 8011576:	4618      	mov	r0, r3
 8011578:	3710      	adds	r7, #16
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}

0801157e <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 801157e:	b580      	push	{r7, lr}
 8011580:	b084      	sub	sp, #16
 8011582:	af00      	add	r7, sp, #0
 8011584:	60f8      	str	r0, [r7, #12]
 8011586:	60b9      	str	r1, [r7, #8]
 8011588:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	691b      	ldr	r3, [r3, #16]
 801158e:	68fa      	ldr	r2, [r7, #12]
 8011590:	8910      	ldrh	r0, [r2, #8]
 8011592:	687a      	ldr	r2, [r7, #4]
 8011594:	b292      	uxth	r2, r2
 8011596:	68b9      	ldr	r1, [r7, #8]
 8011598:	4798      	blx	r3
 801159a:	4603      	mov	r3, r0
}
 801159c:	4618      	mov	r0, r3
 801159e:	3710      	adds	r7, #16
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}

080115a4 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b086      	sub	sp, #24
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	60f8      	str	r0, [r7, #12]
 80115ac:	607a      	str	r2, [r7, #4]
 80115ae:	603b      	str	r3, [r7, #0]
 80115b0:	460b      	mov	r3, r1
 80115b2:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80115b4:	2300      	movs	r3, #0
 80115b6:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	2bff      	cmp	r3, #255	@ 0xff
 80115bc:	d902      	bls.n	80115c4 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 80115be:	f06f 0303 	mvn.w	r3, #3
 80115c2:	e01d      	b.n	8011600 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 80115c4:	897b      	ldrh	r3, [r7, #10]
 80115c6:	0a1b      	lsrs	r3, r3, #8
 80115c8:	b29b      	uxth	r3, r3
 80115ca:	b2da      	uxtb	r2, r3
 80115cc:	4b0e      	ldr	r3, [pc, #56]	@ (8011608 <VL53LX_WriteMulti+0x64>)
 80115ce:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80115d0:	897b      	ldrh	r3, [r7, #10]
 80115d2:	b2da      	uxtb	r2, r3
 80115d4:	4b0c      	ldr	r3, [pc, #48]	@ (8011608 <VL53LX_WriteMulti+0x64>)
 80115d6:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80115d8:	683a      	ldr	r2, [r7, #0]
 80115da:	6879      	ldr	r1, [r7, #4]
 80115dc:	480b      	ldr	r0, [pc, #44]	@ (801160c <VL53LX_WriteMulti+0x68>)
 80115de:	f008 fb9a 	bl	8019d16 <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	3302      	adds	r3, #2
 80115e6:	461a      	mov	r2, r3
 80115e8:	4907      	ldr	r1, [pc, #28]	@ (8011608 <VL53LX_WriteMulti+0x64>)
 80115ea:	68f8      	ldr	r0, [r7, #12]
 80115ec:	f7ff ffb4 	bl	8011558 <_I2CWrite>
 80115f0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d001      	beq.n	80115fc <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80115f8:	23f3      	movs	r3, #243	@ 0xf3
 80115fa:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 80115fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011600:	4618      	mov	r0, r3
 8011602:	3718      	adds	r7, #24
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}
 8011608:	20007988 	.word	0x20007988
 801160c:	2000798a 	.word	0x2000798a

08011610 <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011610:	b580      	push	{r7, lr}
 8011612:	b086      	sub	sp, #24
 8011614:	af00      	add	r7, sp, #0
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	607a      	str	r2, [r7, #4]
 801161a:	603b      	str	r3, [r7, #0]
 801161c:	460b      	mov	r3, r1
 801161e:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011620:	2300      	movs	r3, #0
 8011622:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011624:	897b      	ldrh	r3, [r7, #10]
 8011626:	0a1b      	lsrs	r3, r3, #8
 8011628:	b29b      	uxth	r3, r3
 801162a:	b2da      	uxtb	r2, r3
 801162c:	4b12      	ldr	r3, [pc, #72]	@ (8011678 <VL53LX_ReadMulti+0x68>)
 801162e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011630:	897b      	ldrh	r3, [r7, #10]
 8011632:	b2da      	uxtb	r2, r3
 8011634:	4b10      	ldr	r3, [pc, #64]	@ (8011678 <VL53LX_ReadMulti+0x68>)
 8011636:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8011638:	2202      	movs	r2, #2
 801163a:	490f      	ldr	r1, [pc, #60]	@ (8011678 <VL53LX_ReadMulti+0x68>)
 801163c:	68f8      	ldr	r0, [r7, #12]
 801163e:	f7ff ff8b 	bl	8011558 <_I2CWrite>
 8011642:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d002      	beq.n	8011650 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801164a:	23f3      	movs	r3, #243	@ 0xf3
 801164c:	75fb      	strb	r3, [r7, #23]
        goto done;
 801164e:	e00c      	b.n	801166a <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8011650:	683a      	ldr	r2, [r7, #0]
 8011652:	6879      	ldr	r1, [r7, #4]
 8011654:	68f8      	ldr	r0, [r7, #12]
 8011656:	f7ff ff92 	bl	801157e <_I2CRead>
 801165a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d002      	beq.n	8011668 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011662:	23f3      	movs	r3, #243	@ 0xf3
 8011664:	75fb      	strb	r3, [r7, #23]
 8011666:	e000      	b.n	801166a <VL53LX_ReadMulti+0x5a>
    }
done:
 8011668:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 801166a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801166e:	4618      	mov	r0, r3
 8011670:	3718      	adds	r7, #24
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop
 8011678:	20007988 	.word	0x20007988

0801167c <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	460b      	mov	r3, r1
 8011686:	807b      	strh	r3, [r7, #2]
 8011688:	4613      	mov	r3, r2
 801168a:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801168c:	2300      	movs	r3, #0
 801168e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011690:	887b      	ldrh	r3, [r7, #2]
 8011692:	0a1b      	lsrs	r3, r3, #8
 8011694:	b29b      	uxth	r3, r3
 8011696:	b2da      	uxtb	r2, r3
 8011698:	4b0c      	ldr	r3, [pc, #48]	@ (80116cc <VL53LX_WrByte+0x50>)
 801169a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801169c:	887b      	ldrh	r3, [r7, #2]
 801169e:	b2da      	uxtb	r2, r3
 80116a0:	4b0a      	ldr	r3, [pc, #40]	@ (80116cc <VL53LX_WrByte+0x50>)
 80116a2:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80116a4:	4a09      	ldr	r2, [pc, #36]	@ (80116cc <VL53LX_WrByte+0x50>)
 80116a6:	787b      	ldrb	r3, [r7, #1]
 80116a8:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80116aa:	2203      	movs	r2, #3
 80116ac:	4907      	ldr	r1, [pc, #28]	@ (80116cc <VL53LX_WrByte+0x50>)
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f7ff ff52 	bl	8011558 <_I2CWrite>
 80116b4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d001      	beq.n	80116c0 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80116bc:	23f3      	movs	r3, #243	@ 0xf3
 80116be:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 80116c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3710      	adds	r7, #16
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	20007988 	.word	0x20007988

080116d0 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	460b      	mov	r3, r1
 80116da:	807b      	strh	r3, [r7, #2]
 80116dc:	4613      	mov	r3, r2
 80116de:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80116e0:	2300      	movs	r3, #0
 80116e2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80116e4:	887b      	ldrh	r3, [r7, #2]
 80116e6:	0a1b      	lsrs	r3, r3, #8
 80116e8:	b29b      	uxth	r3, r3
 80116ea:	b2da      	uxtb	r2, r3
 80116ec:	4b10      	ldr	r3, [pc, #64]	@ (8011730 <VL53LX_WrWord+0x60>)
 80116ee:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80116f0:	887b      	ldrh	r3, [r7, #2]
 80116f2:	b2da      	uxtb	r2, r3
 80116f4:	4b0e      	ldr	r3, [pc, #56]	@ (8011730 <VL53LX_WrWord+0x60>)
 80116f6:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80116f8:	883b      	ldrh	r3, [r7, #0]
 80116fa:	0a1b      	lsrs	r3, r3, #8
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	b2da      	uxtb	r2, r3
 8011700:	4b0b      	ldr	r3, [pc, #44]	@ (8011730 <VL53LX_WrWord+0x60>)
 8011702:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8011704:	883b      	ldrh	r3, [r7, #0]
 8011706:	b2da      	uxtb	r2, r3
 8011708:	4b09      	ldr	r3, [pc, #36]	@ (8011730 <VL53LX_WrWord+0x60>)
 801170a:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 801170c:	2204      	movs	r2, #4
 801170e:	4908      	ldr	r1, [pc, #32]	@ (8011730 <VL53LX_WrWord+0x60>)
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f7ff ff21 	bl	8011558 <_I2CWrite>
 8011716:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d001      	beq.n	8011722 <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801171e:	23f3      	movs	r3, #243	@ 0xf3
 8011720:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8011722:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011726:	4618      	mov	r0, r3
 8011728:	3710      	adds	r7, #16
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
 801172e:	bf00      	nop
 8011730:	20007988 	.word	0x20007988

08011734 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8011734:	b580      	push	{r7, lr}
 8011736:	b086      	sub	sp, #24
 8011738:	af00      	add	r7, sp, #0
 801173a:	60f8      	str	r0, [r7, #12]
 801173c:	460b      	mov	r3, r1
 801173e:	607a      	str	r2, [r7, #4]
 8011740:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011742:	2300      	movs	r3, #0
 8011744:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8011746:	897b      	ldrh	r3, [r7, #10]
 8011748:	0a1b      	lsrs	r3, r3, #8
 801174a:	b29b      	uxth	r3, r3
 801174c:	b2da      	uxtb	r2, r3
 801174e:	4b12      	ldr	r3, [pc, #72]	@ (8011798 <VL53LX_RdByte+0x64>)
 8011750:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8011752:	897b      	ldrh	r3, [r7, #10]
 8011754:	b2da      	uxtb	r2, r3
 8011756:	4b10      	ldr	r3, [pc, #64]	@ (8011798 <VL53LX_RdByte+0x64>)
 8011758:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801175a:	2202      	movs	r2, #2
 801175c:	490e      	ldr	r1, [pc, #56]	@ (8011798 <VL53LX_RdByte+0x64>)
 801175e:	68f8      	ldr	r0, [r7, #12]
 8011760:	f7ff fefa 	bl	8011558 <_I2CWrite>
 8011764:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d002      	beq.n	8011772 <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801176c:	23f3      	movs	r3, #243	@ 0xf3
 801176e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011770:	e00c      	b.n	801178c <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8011772:	2201      	movs	r2, #1
 8011774:	6879      	ldr	r1, [r7, #4]
 8011776:	68f8      	ldr	r0, [r7, #12]
 8011778:	f7ff ff01 	bl	801157e <_I2CRead>
 801177c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801177e:	693b      	ldr	r3, [r7, #16]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d002      	beq.n	801178a <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011784:	23f3      	movs	r3, #243	@ 0xf3
 8011786:	75fb      	strb	r3, [r7, #23]
 8011788:	e000      	b.n	801178c <VL53LX_RdByte+0x58>
    }
done:
 801178a:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 801178c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011790:	4618      	mov	r0, r3
 8011792:	3718      	adds	r7, #24
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}
 8011798:	20007988 	.word	0x20007988

0801179c <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 801179c:	b580      	push	{r7, lr}
 801179e:	b086      	sub	sp, #24
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	60f8      	str	r0, [r7, #12]
 80117a4:	460b      	mov	r3, r1
 80117a6:	607a      	str	r2, [r7, #4]
 80117a8:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80117aa:	2300      	movs	r3, #0
 80117ac:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80117ae:	897b      	ldrh	r3, [r7, #10]
 80117b0:	0a1b      	lsrs	r3, r3, #8
 80117b2:	b29b      	uxth	r3, r3
 80117b4:	b2da      	uxtb	r2, r3
 80117b6:	4b17      	ldr	r3, [pc, #92]	@ (8011814 <VL53LX_RdWord+0x78>)
 80117b8:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80117ba:	897b      	ldrh	r3, [r7, #10]
 80117bc:	b2da      	uxtb	r2, r3
 80117be:	4b15      	ldr	r3, [pc, #84]	@ (8011814 <VL53LX_RdWord+0x78>)
 80117c0:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80117c2:	2202      	movs	r2, #2
 80117c4:	4913      	ldr	r1, [pc, #76]	@ (8011814 <VL53LX_RdWord+0x78>)
 80117c6:	68f8      	ldr	r0, [r7, #12]
 80117c8:	f7ff fec6 	bl	8011558 <_I2CWrite>
 80117cc:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d002      	beq.n	80117da <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80117d4:	23f3      	movs	r3, #243	@ 0xf3
 80117d6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80117d8:	e015      	b.n	8011806 <VL53LX_RdWord+0x6a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80117da:	2202      	movs	r2, #2
 80117dc:	490d      	ldr	r1, [pc, #52]	@ (8011814 <VL53LX_RdWord+0x78>)
 80117de:	68f8      	ldr	r0, [r7, #12]
 80117e0:	f7ff fecd 	bl	801157e <_I2CRead>
 80117e4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d002      	beq.n	80117f2 <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80117ec:	23f3      	movs	r3, #243	@ 0xf3
 80117ee:	75fb      	strb	r3, [r7, #23]
        goto done;
 80117f0:	e009      	b.n	8011806 <VL53LX_RdWord+0x6a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80117f2:	4b08      	ldr	r3, [pc, #32]	@ (8011814 <VL53LX_RdWord+0x78>)
 80117f4:	781b      	ldrb	r3, [r3, #0]
 80117f6:	021b      	lsls	r3, r3, #8
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	4a06      	ldr	r2, [pc, #24]	@ (8011814 <VL53LX_RdWord+0x78>)
 80117fc:	7852      	ldrb	r2, [r2, #1]
 80117fe:	4413      	add	r3, r2
 8011800:	b29a      	uxth	r2, r3
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 8011806:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801180a:	4618      	mov	r0, r3
 801180c:	3718      	adds	r7, #24
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}
 8011812:	bf00      	nop
 8011814:	20007988 	.word	0x20007988

08011818 <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 8011822:	2300      	movs	r3, #0
 8011824:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	695b      	ldr	r3, [r3, #20]
 801182a:	4798      	blx	r3
 801182c:	4603      	mov	r3, r0
 801182e:	461a      	mov	r2, r3
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8011834:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011838:	4618      	mov	r0, r3
 801183a:	3710      	adds	r7, #16
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}

08011840 <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 8011840:	b580      	push	{r7, lr}
 8011842:	b082      	sub	sp, #8
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
 8011848:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	4619      	mov	r1, r3
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f000 f8d2 	bl	80119f8 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8011854:	2300      	movs	r3, #0
}
 8011856:	4618      	mov	r0, r3
 8011858:	3708      	adds	r7, #8
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
	...

08011860 <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	4a07      	ldr	r2, [pc, #28]	@ (801188c <VL53LX_WaitUs+0x2c>)
 801186e:	fb82 1203 	smull	r1, r2, r2, r3
 8011872:	1192      	asrs	r2, r2, #6
 8011874:	17db      	asrs	r3, r3, #31
 8011876:	1ad3      	subs	r3, r2, r3
 8011878:	4619      	mov	r1, r3
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f000 f8bc 	bl	80119f8 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8011880:	2300      	movs	r3, #0
}
 8011882:	4618      	mov	r0, r3
 8011884:	3708      	adds	r7, #8
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}
 801188a:	bf00      	nop
 801188c:	10624dd3 	.word	0x10624dd3

08011890 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8011890:	b590      	push	{r4, r7, lr}
 8011892:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8011896:	af00      	add	r7, sp, #0
 8011898:	f507 740a 	add.w	r4, r7, #552	@ 0x228
 801189c:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 80118a0:	6020      	str	r0, [r4, #0]
 80118a2:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 80118a6:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 80118aa:	6001      	str	r1, [r0, #0]
 80118ac:	4619      	mov	r1, r3
 80118ae:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80118b2:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 80118b6:	801a      	strh	r2, [r3, #0]
 80118b8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80118bc:	f2a3 2323 	subw	r3, r3, #547	@ 0x223
 80118c0:	460a      	mov	r2, r1
 80118c2:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80118c4:	2300      	movs	r3, #0
 80118c6:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
	uint32_t     start_time_ms = 0;
 80118ca:	2300      	movs	r3, #0
 80118cc:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	uint32_t     current_time_ms = 0;
 80118d0:	2300      	movs	r3, #0
 80118d2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	uint32_t     polling_time_ms = 0;
 80118d6:	2300      	movs	r3, #0
 80118d8:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	uint8_t      byte_value      = 0;
 80118dc:	2300      	movs	r3, #0
 80118de:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
	uint8_t      found           = 0;
 80118e2:	2300      	movs	r3, #0
 80118e4:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 80118e8:	f107 0310 	add.w	r3, r7, #16
 80118ec:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80118f0:	4940      	ldr	r1, [pc, #256]	@ (80119f4 <VL53LX_WaitValueMaskEx+0x164>)
 80118f2:	4618      	mov	r0, r3
 80118f4:	f008 f932 	bl	8019b5c <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 80118f8:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80118fc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011900:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011904:	4611      	mov	r1, r2
 8011906:	6818      	ldr	r0, [r3, #0]
 8011908:	f7ff ff86 	bl	8011818 <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 801190c:	e04e      	b.n	80119ac <VL53LX_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 801190e:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8011912:	2b00      	cmp	r3, #0
 8011914:	d110      	bne.n	8011938 <VL53LX_WaitValueMaskEx+0xa8>
			status = VL53LX_RdByte(
 8011916:	f207 2213 	addw	r2, r7, #531	@ 0x213
 801191a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801191e:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8011922:	8819      	ldrh	r1, [r3, #0]
 8011924:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011928:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801192c:	6818      	ldr	r0, [r3, #0]
 801192e:	f7ff ff01 	bl	8011734 <VL53LX_RdByte>
 8011932:	4603      	mov	r3, r0
 8011934:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8011938:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 801193c:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 8011940:	4013      	ands	r3, r2
 8011942:	b2db      	uxtb	r3, r3
 8011944:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8011948:	f2a2 2223 	subw	r2, r2, #547	@ 0x223
 801194c:	7812      	ldrb	r2, [r2, #0]
 801194e:	429a      	cmp	r2, r3
 8011950:	d102      	bne.n	8011958 <VL53LX_WaitValueMaskEx+0xc8>
			found = 1;
 8011952:	2301      	movs	r3, #1
 8011954:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 8011958:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 801195c:	2b00      	cmp	r3, #0
 801195e:	d114      	bne.n	801198a <VL53LX_WaitValueMaskEx+0xfa>
 8011960:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8011964:	2b00      	cmp	r3, #0
 8011966:	d110      	bne.n	801198a <VL53LX_WaitValueMaskEx+0xfa>
			found == 0 &&
 8011968:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801196c:	2b00      	cmp	r3, #0
 801196e:	d00c      	beq.n	801198a <VL53LX_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 8011970:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8011974:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011978:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801197c:	4611      	mov	r1, r2
 801197e:	6818      	ldr	r0, [r3, #0]
 8011980:	f7ff ff5e 	bl	8011840 <VL53LX_WaitMs>
 8011984:	4603      	mov	r3, r0
 8011986:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 801198a:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 801198e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011992:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011996:	4611      	mov	r1, r2
 8011998:	6818      	ldr	r0, [r3, #0]
 801199a:	f7ff ff3d 	bl	8011818 <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 801199e:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80119a2:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80119a6:	1ad3      	subs	r3, r2, r3
 80119a8:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		   (polling_time_ms < timeout_ms) &&
 80119ac:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d10c      	bne.n	80119ce <VL53LX_WaitValueMaskEx+0x13e>
	while ((status == VL53LX_ERROR_NONE) &&
 80119b4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80119b8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80119bc:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d203      	bcs.n	80119ce <VL53LX_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 80119c6:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d09f      	beq.n	801190e <VL53LX_WaitValueMaskEx+0x7e>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 80119ce:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d106      	bne.n	80119e4 <VL53LX_WaitValueMaskEx+0x154>
 80119d6:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d102      	bne.n	80119e4 <VL53LX_WaitValueMaskEx+0x154>
		status = VL53LX_ERROR_TIME_OUT;
 80119de:	23f9      	movs	r3, #249	@ 0xf9
 80119e0:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227

	return status;
 80119e4:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd90      	pop	{r4, r7, pc}
 80119f2:	bf00      	nop
 80119f4:	0801a94c 	.word	0x0801a94c

080119f8 <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b084      	sub	sp, #16
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	695b      	ldr	r3, [r3, #20]
 8011a06:	4798      	blx	r3
 8011a08:	4603      	mov	r3, r0
 8011a0a:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8011a0c:	bf00      	nop
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	695b      	ldr	r3, [r3, #20]
 8011a12:	4798      	blx	r3
 8011a14:	4603      	mov	r3, r0
 8011a16:	461a      	mov	r2, r3
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	1ad3      	subs	r3, r2, r3
 8011a1c:	683a      	ldr	r2, [r7, #0]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	d8f5      	bhi.n	8011a0e <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 8011a22:	2300      	movs	r3, #0
}
 8011a24:	4618      	mov	r0, r3
 8011a26:	3710      	adds	r7, #16
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}

08011a2c <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b08c      	sub	sp, #48	@ 0x30
 8011a30:	af06      	add	r7, sp, #24
 8011a32:	60f8      	str	r0, [r7, #12]
 8011a34:	60b9      	str	r1, [r7, #8]
 8011a36:	607a      	str	r2, [r7, #4]
 8011a38:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 8011a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a40:	9304      	str	r3, [sp, #16]
 8011a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a44:	9303      	str	r3, [sp, #12]
 8011a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a48:	9302      	str	r3, [sp, #8]
 8011a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a4c:	9301      	str	r3, [sp, #4]
 8011a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a50:	9300      	str	r3, [sp, #0]
 8011a52:	6a3b      	ldr	r3, [r7, #32]
 8011a54:	683a      	ldr	r2, [r7, #0]
 8011a56:	6879      	ldr	r1, [r7, #4]
 8011a58:	68b8      	ldr	r0, [r7, #8]
 8011a5a:	f7fc ffd5 	bl	800ea08 <VL53LX_hist_process_data>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8011a62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3718      	adds	r7, #24
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}

08011a6e <VL53L4CX_RegisterBusIO>:
  * @param pObj    vl53l4cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_RegisterBusIO(VL53L4CX_Object_t *pObj, VL53L4CX_IO_t *pIO)
{
 8011a6e:	b580      	push	{r7, lr}
 8011a70:	b084      	sub	sp, #16
 8011a72:	af00      	add	r7, sp, #0
 8011a74:	6078      	str	r0, [r7, #4]
 8011a76:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d103      	bne.n	8011a86 <VL53L4CX_RegisterBusIO+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011a7e:	f06f 0301 	mvn.w	r3, #1
 8011a82:	60fb      	str	r3, [r7, #12]
 8011a84:	e023      	b.n	8011ace <VL53L4CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	681a      	ldr	r2, [r3, #0]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	685a      	ldr	r2, [r3, #4]
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8011a96:	683b      	ldr	r3, [r7, #0]
 8011a98:	891a      	ldrh	r2, [r3, #8]
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	68da      	ldr	r2, [r3, #12]
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	691a      	ldr	r2, [r3, #16]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	695a      	ldr	r2, [r3, #20]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d004      	beq.n	8011ac8 <VL53L4CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	4798      	blx	r3
 8011ac4:	60f8      	str	r0, [r7, #12]
 8011ac6:	e002      	b.n	8011ace <VL53L4CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L4CX_ERROR;
 8011ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8011acc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011ace:	68fb      	ldr	r3, [r7, #12]
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	3710      	adds	r7, #16
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}

08011ad8 <VL53L4CX_Init>:
  * @brief Initializes the vl53l4cx.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Init(VL53L4CX_Object_t *pObj)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b084      	sub	sp, #16
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011ae6:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d003      	beq.n	8011af6 <VL53L4CX_Init+0x1e>
  {
    ret =  VL53L4CX_ERROR;
 8011aee:	f04f 33ff 	mov.w	r3, #4294967295
 8011af2:	60fb      	str	r3, [r7, #12]
 8011af4:	e043      	b.n	8011b7e <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f7ef ff00 	bl	80018fc <VL53LX_WaitDeviceBooted>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d003      	beq.n	8011b0a <VL53L4CX_Init+0x32>
  {
    ret =  VL53L4CX_ERROR;
 8011b02:	f04f 33ff 	mov.w	r3, #4294967295
 8011b06:	60fb      	str	r3, [r7, #12]
 8011b08:	e039      	b.n	8011b7e <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f7ef fe9b 	bl	8001846 <VL53LX_DataInit>
 8011b10:	4603      	mov	r3, r0
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d003      	beq.n	8011b1e <VL53L4CX_Init+0x46>
  {
    ret = VL53L4CX_ERROR;
 8011b16:	f04f 33ff 	mov.w	r3, #4294967295
 8011b1a:	60fb      	str	r3, [r7, #12]
 8011b1c:	e02f      	b.n	8011b7e <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 8011b1e:	6878      	ldr	r0, [r7, #4]
 8011b20:	f7f0 fd98 	bl	8002654 <VL53LX_PerformRefSpadManagement>
 8011b24:	4603      	mov	r3, r0
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d003      	beq.n	8011b32 <VL53L4CX_Init+0x5a>
  {
    ret = VL53L4CX_ERROR;
 8011b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b2e:	60fb      	str	r3, [r7, #12]
 8011b30:	e025      	b.n	8011b7e <VL53L4CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011b38:	2200      	movs	r2, #0
 8011b3a:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    pObj->IsBlocking = 0;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011b44:	2200      	movs	r2, #0
 8011b46:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
    pObj->IsContinuous = 0;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011b50:	2200      	movs	r2, #0
 8011b52:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
    pObj->IsAmbientEnabled = 0;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    pObj->IsSignalEnabled = 0;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011b68:	2200      	movs	r2, #0
 8011b6a:	f883 24ed 	strb.w	r2, [r3, #1261]	@ 0x4ed
    pObj->IsInitialized = 1;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011b74:	2201      	movs	r2, #1
 8011b76:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    ret = VL53L4CX_OK;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3710      	adds	r7, #16
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}

08011b88 <VL53L4CX_DeInit>:
  * @brief Deinitializes the vl53l4cx.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_DeInit(VL53L4CX_Object_t *pObj)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b084      	sub	sp, #16
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L4CX_ERROR;
 8011b90:	f04f 33ff 	mov.w	r3, #4294967295
 8011b94:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011b9c:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d111      	bne.n	8011bc8 <VL53L4CX_DeInit+0x40>
  {
    /* De-initialize the vl53l4cx interface */
    if (pObj->IO.DeInit() != 0)
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	4798      	blx	r3
 8011baa:	4603      	mov	r3, r0
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d003      	beq.n	8011bb8 <VL53L4CX_DeInit+0x30>
    {
      ret = VL53L4CX_ERROR;
 8011bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8011bb4:	60fb      	str	r3, [r7, #12]
 8011bb6:	e007      	b.n	8011bc8 <VL53L4CX_DeInit+0x40>
    }
    else
    {
      ret = VL53L4CX_OK;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    }
  }

  return ret;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3710      	adds	r7, #16
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}

08011bd2 <VL53L4CX_ReadID>:
  * @param pObj    vl53l4cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ReadID(VL53L4CX_Object_t *pObj, uint32_t *pId)
{
 8011bd2:	b580      	push	{r7, lr}
 8011bd4:	b084      	sub	sp, #16
 8011bd6:	af00      	add	r7, sp, #0
 8011bd8:	6078      	str	r0, [r7, #4]
 8011bda:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d002      	beq.n	8011be8 <VL53L4CX_ReadID+0x16>
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d103      	bne.n	8011bf0 <VL53L4CX_ReadID+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011be8:	f06f 0301 	mvn.w	r3, #1
 8011bec:	60fb      	str	r3, [r7, #12]
 8011bee:	e00a      	b.n	8011c06 <VL53L4CX_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	601a      	str	r2, [r3, #0]
    ret = VL53LX_RdWord(pObj, VL53L4CX_ID_REG, (uint16_t *) pId);
 8011bf6:	683a      	ldr	r2, [r7, #0]
 8011bf8:	f240 110f 	movw	r1, #271	@ 0x10f
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f7ff fdcd 	bl	801179c <VL53LX_RdWord>
 8011c02:	4603      	mov	r3, r0
 8011c04:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011c06:	68fb      	ldr	r3, [r7, #12]
}
 8011c08:	4618      	mov	r0, r3
 8011c0a:	3710      	adds	r7, #16
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd80      	pop	{r7, pc}

08011c10 <VL53L4CX_GetCapabilities>:
  * @param pObj    vl53l4cx context object.
  * @param pCap    Pointer to the vl53l4cx capabilities.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetCapabilities(VL53L4CX_Object_t *pObj, VL53L4CX_Capabilities_t *pCap)
{
 8011c10:	b480      	push	{r7}
 8011c12:	b085      	sub	sp, #20
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d002      	beq.n	8011c26 <VL53L4CX_GetCapabilities+0x16>
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d103      	bne.n	8011c2e <VL53L4CX_GetCapabilities+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011c26:	f06f 0301 	mvn.w	r3, #1
 8011c2a:	60fb      	str	r3, [r7, #12]
 8011c2c:	e00d      	b.n	8011c4a <VL53L4CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	2201      	movs	r2, #1
 8011c32:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L4CX_NB_TARGET_PER_ZONE;
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	2204      	movs	r2, #4
 8011c38:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	2201      	movs	r2, #1
 8011c3e:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	2200      	movs	r2, #0
 8011c44:	60da      	str	r2, [r3, #12]

    ret = VL53L4CX_OK;
 8011c46:	2300      	movs	r3, #0
 8011c48:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3714      	adds	r7, #20
 8011c50:	46bd      	mov	sp, r7
 8011c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c56:	4770      	bx	lr

08011c58 <VL53L4CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L4CX the profile corresponds to the distance modes.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigProfile(VL53L4CX_Object_t *pObj, VL53L4CX_ProfileConfig_t *pConfig)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b084      	sub	sp, #16
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d009      	beq.n	8011c7c <VL53L4CX_ConfigProfile+0x24>
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d006      	beq.n	8011c7c <VL53L4CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	781b      	ldrb	r3, [r3, #0]
 8011c72:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L4CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L4CX_PROFILE_SHORT) &&
 8011c74:	7afb      	ldrb	r3, [r7, #11]
 8011c76:	2b01      	cmp	r3, #1
 8011c78:	d103      	bne.n	8011c82 <VL53L4CX_ConfigProfile+0x2a>
 8011c7a:	e00c      	b.n	8011c96 <VL53L4CX_ConfigProfile+0x3e>
    return VL53L4CX_INVALID_PARAM;
 8011c7c:	f06f 0301 	mvn.w	r3, #1
 8011c80:	e043      	b.n	8011d0a <VL53L4CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L4CX_PROFILE_SHORT) &&
 8011c82:	7afb      	ldrb	r3, [r7, #11]
 8011c84:	2b02      	cmp	r3, #2
 8011c86:	d006      	beq.n	8011c96 <VL53L4CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L4CX_PROFILE_MEDIUM) &&
 8011c88:	7afb      	ldrb	r3, [r7, #11]
 8011c8a:	2b03      	cmp	r3, #3
 8011c8c:	d003      	beq.n	8011c96 <VL53L4CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L4CX_PROFILE_LONG))
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011c8e:	f06f 0301 	mvn.w	r3, #1
 8011c92:	60fb      	str	r3, [r7, #12]
 8011c94:	e038      	b.n	8011d08 <VL53L4CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 8011c96:	7afb      	ldrb	r3, [r7, #11]
 8011c98:	4619      	mov	r1, r3
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f7ef ff0f 	bl	8001abe <VL53LX_SetDistanceMode>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d003      	beq.n	8011cae <VL53L4CX_ConfigProfile+0x56>
  {
    ret = VL53L4CX_ERROR;
 8011ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8011caa:	60fb      	str	r3, [r7, #12]
 8011cac:	e02c      	b.n	8011d08 <VL53L4CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 8011cb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011cb6:	fb02 f303 	mul.w	r3, r2, r3
 8011cba:	4619      	mov	r1, r3
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	f7ef ff67 	bl	8001b90 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d003      	beq.n	8011cd0 <VL53L4CX_ConfigProfile+0x78>
  {
    ret = VL53L4CX_ERROR;
 8011cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8011ccc:	60fb      	str	r3, [r7, #12]
 8011cce:	e01b      	b.n	8011d08 <VL53L4CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	68db      	ldr	r3, [r3, #12]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	bf14      	ite	ne
 8011cd8:	2301      	movne	r3, #1
 8011cda:	2300      	moveq	r3, #0
 8011cdc:	b2db      	uxtb	r3, r3
 8011cde:	461a      	mov	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011ce6:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	691b      	ldr	r3, [r3, #16]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	bf14      	ite	ne
 8011cf2:	2301      	movne	r3, #1
 8011cf4:	2300      	moveq	r3, #0
 8011cf6:	b2db      	uxtb	r3, r3
 8011cf8:	461a      	mov	r2, r3
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011d00:	f883 24ed 	strb.w	r2, [r3, #1261]	@ 0x4ed

    ret = VL53L4CX_OK;
 8011d04:	2300      	movs	r3, #0
 8011d06:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011d08:	68fb      	ldr	r3, [r7, #12]
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3710      	adds	r7, #16
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}

08011d12 <VL53L4CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigROI(VL53L4CX_Object_t *pObj, VL53L4CX_ROIConfig_t *pROIConfig)
{
 8011d12:	b580      	push	{r7, lr}
 8011d14:	b084      	sub	sp, #16
 8011d16:	af00      	add	r7, sp, #0
 8011d18:	6078      	str	r0, [r7, #4]
 8011d1a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d002      	beq.n	8011d28 <VL53L4CX_ConfigROI+0x16>
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d103      	bne.n	8011d30 <VL53L4CX_ConfigROI+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011d28:	f06f 0301 	mvn.w	r3, #1
 8011d2c:	60fb      	str	r3, [r7, #12]
 8011d2e:	e01a      	b.n	8011d66 <VL53L4CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	789b      	ldrb	r3, [r3, #2]
 8011d34:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	78db      	ldrb	r3, [r3, #3]
 8011d3a:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	785b      	ldrb	r3, [r3, #1]
 8011d46:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 8011d48:	f107 0308 	add.w	r3, r7, #8
 8011d4c:	4619      	mov	r1, r3
 8011d4e:	6878      	ldr	r0, [r7, #4]
 8011d50:	f7ef ff96 	bl	8001c80 <VL53LX_SetUserROI>
 8011d54:	4603      	mov	r3, r0
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d003      	beq.n	8011d62 <VL53L4CX_ConfigROI+0x50>
    {
      ret = VL53L4CX_ERROR;
 8011d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8011d5e:	60fb      	str	r3, [r7, #12]
 8011d60:	e001      	b.n	8011d66 <VL53L4CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L4CX_OK;
 8011d62:	2300      	movs	r3, #0
 8011d64:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011d66:	68fb      	ldr	r3, [r7, #12]
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3710      	adds	r7, #16
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <VL53L4CX_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigIT(VL53L4CX_Object_t *pObj, VL53L4CX_ITConfig_t *pITConfig)
{
 8011d70:	b480      	push	{r7}
 8011d72:	b083      	sub	sp, #12
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L4CX_NOT_IMPLEMENTED;
 8011d7a:	f06f 0303 	mvn.w	r3, #3
}
 8011d7e:	4618      	mov	r0, r3
 8011d80:	370c      	adds	r7, #12
 8011d82:	46bd      	mov	sp, r7
 8011d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d88:	4770      	bx	lr

08011d8a <VL53L4CX_GetDistance>:
  * @param pObj    vl53l4cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetDistance(VL53L4CX_Object_t *pObj, VL53L4CX_Result_t *pResult)
{
 8011d8a:	b580      	push	{r7, lr}
 8011d8c:	b084      	sub	sp, #16
 8011d8e:	af00      	add	r7, sp, #0
 8011d90:	6078      	str	r0, [r7, #4]
 8011d92:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = VL53L4CX_OK;
 8011d94:	2300      	movs	r3, #0
 8011d96:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d002      	beq.n	8011da4 <VL53L4CX_GetDistance+0x1a>
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d103      	bne.n	8011dac <VL53L4CX_GetDistance+0x22>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011da4:	f06f 0301 	mvn.w	r3, #1
 8011da8:	60fb      	str	r3, [r7, #12]
 8011daa:	e009      	b.n	8011dc0 <VL53L4CX_GetDistance+0x36>
  }
  else if (pObj->IsRanging == 0U)
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011db2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d102      	bne.n	8011dc0 <VL53L4CX_GetDistance+0x36>
  {
    ret = VL53L4CX_ERROR;
 8011dba:	f04f 33ff 	mov.w	r3, #4294967295
 8011dbe:	60fb      	str	r3, [r7, #12]
  }
  if (ret == VL53L4CX_OK)
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d112      	bne.n	8011dec <VL53L4CX_GetDistance+0x62>
  {
    if (pObj->IsBlocking == 1U)
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011dcc:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8011dd0:	2b01      	cmp	r3, #1
 8011dd2:	d106      	bne.n	8011de2 <VL53L4CX_GetDistance+0x58>
    {
      ret = vl53l4cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 8011dd4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f000 f931 	bl	8012040 <vl53l4cx_poll_for_measurement>
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	e004      	b.n	8011dec <VL53L4CX_GetDistance+0x62>
    }
    else
    {
      ret = vl53l4cx_poll_for_measurement(pObj, 0U);
 8011de2:	2100      	movs	r1, #0
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f000 f92b 	bl	8012040 <vl53l4cx_poll_for_measurement>
 8011dea:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L4CX_OK)
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d119      	bne.n	8011e26 <VL53L4CX_GetDistance+0x9c>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l4cx_get_result(pObj, pResult) != VL53L4CX_OK)
 8011df2:	6839      	ldr	r1, [r7, #0]
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f000 f951 	bl	801209c <vl53l4cx_get_result>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d003      	beq.n	8011e08 <VL53L4CX_GetDistance+0x7e>
    {
      ret = VL53L4CX_ERROR;
 8011e00:	f04f 33ff 	mov.w	r3, #4294967295
 8011e04:	60fb      	str	r3, [r7, #12]
 8011e06:	e00e      	b.n	8011e26 <VL53L4CX_GetDistance+0x9c>
    }
    else if (pObj->IsContinuous == 1U)
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e0e:	f893 34eb 	ldrb.w	r3, [r3, #1259]	@ 0x4eb
 8011e12:	2b01      	cmp	r3, #1
 8011e14:	d105      	bne.n	8011e22 <VL53L4CX_GetDistance+0x98>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f7f0 f801 	bl	8001e1e <VL53LX_ClearInterruptAndStartMeasurement>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	60fb      	str	r3, [r7, #12]
 8011e20:	e001      	b.n	8011e26 <VL53L4CX_GetDistance+0x9c>
    }
    else
    {
      ret = VL53L4CX_OK;
 8011e22:	2300      	movs	r3, #0
 8011e24:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011e26:	68fb      	ldr	r3, [r7, #12]
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	3710      	adds	r7, #16
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}

08011e30 <VL53L4CX_Start>:
  * @param pObj    vl53l4cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Start(VL53L4CX_Object_t *pObj, uint32_t Mode)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b084      	sub	sp, #16
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d103      	bne.n	8011e48 <VL53L4CX_Start+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011e40:	f06f 0301 	mvn.w	r3, #1
 8011e44:	60fb      	str	r3, [r7, #12]
 8011e46:	e06e      	b.n	8011f26 <VL53L4CX_Start+0xf6>
  }
  else if (pObj->IsRanging == 1U)
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e4e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8011e52:	2b01      	cmp	r3, #1
 8011e54:	d103      	bne.n	8011e5e <VL53L4CX_Start+0x2e>
  {
    ret = VL53L4CX_ERROR;
 8011e56:	f04f 33ff 	mov.w	r3, #4294967295
 8011e5a:	60fb      	str	r3, [r7, #12]
 8011e5c:	e063      	b.n	8011f26 <VL53L4CX_Start+0xf6>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f7ef ff7b 	bl	8001d5a <VL53LX_StartMeasurement>
 8011e64:	4603      	mov	r3, r0
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d15a      	bne.n	8011f20 <VL53L4CX_Start+0xf0>
  {
    pObj->IsRanging = 1;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e70:	2201      	movs	r2, #1
 8011e72:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    ret = VL53L4CX_OK;
 8011e76:	2300      	movs	r3, #0
 8011e78:	60fb      	str	r3, [r7, #12]

    ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f7ef ffcf 	bl	8001e1e <VL53LX_ClearInterruptAndStartMeasurement>
 8011e80:	4603      	mov	r3, r0
 8011e82:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	3b01      	subs	r3, #1
 8011e88:	2b03      	cmp	r3, #3
 8011e8a:	d83f      	bhi.n	8011f0c <VL53L4CX_Start+0xdc>
 8011e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8011e94 <VL53L4CX_Start+0x64>)
 8011e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e92:	bf00      	nop
 8011e94:	08011ea5 	.word	0x08011ea5
 8011e98:	08011ebf 	.word	0x08011ebf
 8011e9c:	08011ed9 	.word	0x08011ed9
 8011ea0:	08011ef3 	.word	0x08011ef3
    {
    case VL53L4CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011eaa:	2201      	movs	r2, #1
 8011eac:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 1U;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011eb6:	2201      	movs	r2, #1
 8011eb8:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011ebc:	e033      	b.n	8011f26 <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 1U;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011ed0:	2201      	movs	r2, #1
 8011ed2:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011ed6:	e026      	b.n	8011f26 <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011ede:	2201      	movs	r2, #1
 8011ee0:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 0U;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011eea:	2200      	movs	r2, #0
 8011eec:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011ef0:	e019      	b.n	8011f26 <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011ef8:	2200      	movs	r2, #0
 8011efa:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 0U;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011f04:	2200      	movs	r2, #0
 8011f06:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011f0a:	e00c      	b.n	8011f26 <VL53L4CX_Start+0xf6>

    default:
      pObj->IsRanging = 0U;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011f12:	2200      	movs	r2, #0
 8011f14:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
      ret = VL53L4CX_INVALID_PARAM;
 8011f18:	f06f 0301 	mvn.w	r3, #1
 8011f1c:	60fb      	str	r3, [r7, #12]
      break;
 8011f1e:	e002      	b.n	8011f26 <VL53L4CX_Start+0xf6>
    }
  }
  else
  {
    ret = VL53L4CX_ERROR;
 8011f20:	f04f 33ff 	mov.w	r3, #4294967295
 8011f24:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011f26:	68fb      	ldr	r3, [r7, #12]
}
 8011f28:	4618      	mov	r0, r3
 8011f2a:	3710      	adds	r7, #16
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}

08011f30 <VL53L4CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Stop(VL53L4CX_Object_t *pObj)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b084      	sub	sp, #16
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d103      	bne.n	8011f46 <VL53L4CX_Stop+0x16>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011f3e:	f06f 0301 	mvn.w	r3, #1
 8011f42:	60fb      	str	r3, [r7, #12]
 8011f44:	e01c      	b.n	8011f80 <VL53L4CX_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011f4c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d103      	bne.n	8011f5c <VL53L4CX_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L4CX_ERROR;
 8011f54:	f04f 33ff 	mov.w	r3, #4294967295
 8011f58:	60fb      	str	r3, [r7, #12]
 8011f5a:	e011      	b.n	8011f80 <VL53L4CX_Stop+0x50>
  }
  else if (VL53LX_StopMeasurement(pObj) == VL53LX_ERROR_NONE)
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f7ef ff4a 	bl	8001df6 <VL53LX_StopMeasurement>
 8011f62:	4603      	mov	r3, r0
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d108      	bne.n	8011f7a <VL53L4CX_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011f6e:	2200      	movs	r2, #0
 8011f70:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    ret = VL53L4CX_OK;
 8011f74:	2300      	movs	r3, #0
 8011f76:	60fb      	str	r3, [r7, #12]
 8011f78:	e002      	b.n	8011f80 <VL53L4CX_Stop+0x50>
  }
  else
  {
    ret = VL53L4CX_ERROR;
 8011f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f7e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011f80:	68fb      	ldr	r3, [r7, #12]
}
 8011f82:	4618      	mov	r0, r3
 8011f84:	3710      	adds	r7, #16
 8011f86:	46bd      	mov	sp, r7
 8011f88:	bd80      	pop	{r7, pc}

08011f8a <VL53L4CX_SetAddress>:
  * @param pObj    vl53l4cx context object.
  * @param Address     New I2C address.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_SetAddress(VL53L4CX_Object_t *pObj, uint32_t Address)
{
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b084      	sub	sp, #16
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
 8011f92:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d103      	bne.n	8011fa2 <VL53L4CX_SetAddress+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011f9a:	f06f 0301 	mvn.w	r3, #1
 8011f9e:	60fb      	str	r3, [r7, #12]
 8011fa0:	e012      	b.n	8011fc8 <VL53L4CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	b2db      	uxtb	r3, r3
 8011fa6:	4619      	mov	r1, r3
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	f7ef fc25 	bl	80017f8 <VL53LX_SetDeviceAddress>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d003      	beq.n	8011fbc <VL53L4CX_SetAddress+0x32>
  {
    ret = VL53L4CX_ERROR;
 8011fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8011fb8:	60fb      	str	r3, [r7, #12]
 8011fba:	e005      	b.n	8011fc8 <VL53L4CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	b29a      	uxth	r2, r3
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	811a      	strh	r2, [r3, #8]
    ret = VL53L4CX_OK;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3710      	adds	r7, #16
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}

08011fd2 <VL53L4CX_GetAddress>:
  * @param pObj    vl53l4cx context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetAddress(VL53L4CX_Object_t *pObj, uint32_t *pAddress)
{
 8011fd2:	b480      	push	{r7}
 8011fd4:	b085      	sub	sp, #20
 8011fd6:	af00      	add	r7, sp, #0
 8011fd8:	6078      	str	r0, [r7, #4]
 8011fda:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d002      	beq.n	8011fe8 <VL53L4CX_GetAddress+0x16>
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d103      	bne.n	8011ff0 <VL53L4CX_GetAddress+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011fe8:	f06f 0301 	mvn.w	r3, #1
 8011fec:	60fb      	str	r3, [r7, #12]
 8011fee:	e006      	b.n	8011ffe <VL53L4CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	891b      	ldrh	r3, [r3, #8]
 8011ff4:	461a      	mov	r2, r3
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	601a      	str	r2, [r3, #0]
    ret = VL53L4CX_OK;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011ffe:	68fb      	ldr	r3, [r7, #12]
}
 8012000:	4618      	mov	r0, r3
 8012002:	3714      	adds	r7, #20
 8012004:	46bd      	mov	sp, r7
 8012006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200a:	4770      	bx	lr

0801200c <VL53L4CX_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_SetPowerMode(VL53L4CX_Object_t *pObj, uint32_t PowerMode)
{
 801200c:	b480      	push	{r7}
 801200e:	b083      	sub	sp, #12
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L4CX_NOT_IMPLEMENTED;
 8012016:	f06f 0303 	mvn.w	r3, #3
}
 801201a:	4618      	mov	r0, r3
 801201c:	370c      	adds	r7, #12
 801201e:	46bd      	mov	sp, r7
 8012020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012024:	4770      	bx	lr

08012026 <VL53L4CX_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetPowerMode(VL53L4CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8012026:	b480      	push	{r7}
 8012028:	b083      	sub	sp, #12
 801202a:	af00      	add	r7, sp, #0
 801202c:	6078      	str	r0, [r7, #4]
 801202e:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L4CX_NOT_IMPLEMENTED;
 8012030:	f06f 0303 	mvn.w	r3, #3
}
 8012034:	4618      	mov	r0, r3
 8012036:	370c      	adds	r7, #12
 8012038:	46bd      	mov	sp, r7
 801203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203e:	4770      	bx	lr

08012040 <vl53l4cx_poll_for_measurement>:
/** @defgroup VL53L4CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l4cx_poll_for_measurement(VL53L4CX_Object_t *pObj, uint32_t Timeout)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b084      	sub	sp, #16
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
 8012048:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 801204a:	2300      	movs	r3, #0
 801204c:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d102      	bne.n	801205a <vl53l4cx_poll_for_measurement+0x1a>
  {
    return VL53L4CX_INVALID_PARAM;
 8012054:	f06f 0301 	mvn.w	r3, #1
 8012058:	e01b      	b.n	8012092 <vl53l4cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	695b      	ldr	r3, [r3, #20]
 801205e:	4798      	blx	r3
 8012060:	4603      	mov	r3, r0
 8012062:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 8012064:	f107 030b 	add.w	r3, r7, #11
 8012068:	4619      	mov	r1, r3
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f7ef feed 	bl	8001e4a <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8012070:	7afb      	ldrb	r3, [r7, #11]
 8012072:	2b01      	cmp	r3, #1
 8012074:	d101      	bne.n	801207a <vl53l4cx_poll_for_measurement+0x3a>
    {
      return VL53L4CX_OK;
 8012076:	2300      	movs	r3, #0
 8012078:	e00b      	b.n	8012092 <vl53l4cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	695b      	ldr	r3, [r3, #20]
 801207e:	4798      	blx	r3
 8012080:	4603      	mov	r3, r0
 8012082:	461a      	mov	r2, r3
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	1ad3      	subs	r3, r2, r3
 8012088:	683a      	ldr	r2, [r7, #0]
 801208a:	429a      	cmp	r2, r3
 801208c:	d8ea      	bhi.n	8012064 <vl53l4cx_poll_for_measurement+0x24>

  return VL53L4CX_TIMEOUT;
 801208e:	f06f 0302 	mvn.w	r3, #2
}
 8012092:	4618      	mov	r0, r3
 8012094:	3710      	adds	r7, #16
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}
	...

0801209c <vl53l4cx_get_result>:

static int32_t vl53l4cx_get_result(VL53L4CX_Object_t *pObj, VL53L4CX_Result_t *pResult)
{
 801209c:	b590      	push	{r4, r7, lr}
 801209e:	b089      	sub	sp, #36	@ 0x24
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
 80120a4:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  static VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d002      	beq.n	80120b2 <vl53l4cx_get_result+0x16>
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d103      	bne.n	80120ba <vl53l4cx_get_result+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 80120b2:	f06f 0301 	mvn.w	r3, #1
 80120b6:	61fb      	str	r3, [r7, #28]
 80120b8:	e103      	b.n	80122c2 <vl53l4cx_get_result+0x226>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 80120ba:	4984      	ldr	r1, [pc, #528]	@ (80122cc <vl53l4cx_get_result+0x230>)
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f7f0 faa2 	bl	8002606 <VL53LX_GetMultiRangingData>
 80120c2:	4603      	mov	r3, r0
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d003      	beq.n	80120d0 <vl53l4cx_get_result+0x34>
  {
    ret = VL53L4CX_ERROR;
 80120c8:	f04f 33ff 	mov.w	r3, #4294967295
 80120cc:	61fb      	str	r3, [r7, #28]
 80120ce:	e0f8      	b.n	80122c2 <vl53l4cx_get_result+0x226>
  }
  else
  {
    for (i = 0; i < VL53L4CX_MAX_NB_ZONES; i++)
 80120d0:	2300      	movs	r3, #0
 80120d2:	76fb      	strb	r3, [r7, #27]
 80120d4:	e0ec      	b.n	80122b0 <vl53l4cx_get_result+0x214>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 80120d6:	4b7d      	ldr	r3, [pc, #500]	@ (80122cc <vl53l4cx_get_result+0x230>)
 80120d8:	795b      	ldrb	r3, [r3, #5]
 80120da:	7efa      	ldrb	r2, [r7, #27]
 80120dc:	4618      	mov	r0, r3
 80120de:	6839      	ldr	r1, [r7, #0]
 80120e0:	4613      	mov	r3, r2
 80120e2:	011b      	lsls	r3, r3, #4
 80120e4:	4413      	add	r3, r2
 80120e6:	009b      	lsls	r3, r3, #2
 80120e8:	440b      	add	r3, r1
 80120ea:	3304      	adds	r3, #4
 80120ec:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 80120ee:	2300      	movs	r3, #0
 80120f0:	76bb      	strb	r3, [r7, #26]
 80120f2:	e0d4      	b.n	801229e <vl53l4cx_get_result+0x202>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 80120f4:	7eba      	ldrb	r2, [r7, #26]
 80120f6:	4975      	ldr	r1, [pc, #468]	@ (80122cc <vl53l4cx_get_result+0x230>)
 80120f8:	4613      	mov	r3, r2
 80120fa:	009b      	lsls	r3, r3, #2
 80120fc:	4413      	add	r3, r2
 80120fe:	009b      	lsls	r3, r3, #2
 8012100:	440b      	add	r3, r1
 8012102:	3318      	adds	r3, #24
 8012104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012108:	2b00      	cmp	r3, #0
 801210a:	da0b      	bge.n	8012124 <vl53l4cx_get_result+0x88>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 801210c:	7efa      	ldrb	r2, [r7, #27]
 801210e:	7eb8      	ldrb	r0, [r7, #26]
 8012110:	6839      	ldr	r1, [r7, #0]
 8012112:	4613      	mov	r3, r2
 8012114:	011b      	lsls	r3, r3, #4
 8012116:	4413      	add	r3, r2
 8012118:	4403      	add	r3, r0
 801211a:	009b      	lsls	r3, r3, #2
 801211c:	440b      	add	r3, r1
 801211e:	2200      	movs	r2, #0
 8012120:	609a      	str	r2, [r3, #8]
 8012122:	e014      	b.n	801214e <vl53l4cx_get_result+0xb2>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8012124:	7eba      	ldrb	r2, [r7, #26]
 8012126:	4969      	ldr	r1, [pc, #420]	@ (80122cc <vl53l4cx_get_result+0x230>)
 8012128:	4613      	mov	r3, r2
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	4413      	add	r3, r2
 801212e:	009b      	lsls	r3, r3, #2
 8012130:	440b      	add	r3, r1
 8012132:	3318      	adds	r3, #24
 8012134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012138:	7efa      	ldrb	r2, [r7, #27]
 801213a:	7eb8      	ldrb	r0, [r7, #26]
 801213c:	461c      	mov	r4, r3
 801213e:	6839      	ldr	r1, [r7, #0]
 8012140:	4613      	mov	r3, r2
 8012142:	011b      	lsls	r3, r3, #4
 8012144:	4413      	add	r3, r2
 8012146:	4403      	add	r3, r0
 8012148:	009b      	lsls	r3, r3, #2
 801214a:	440b      	add	r3, r1
 801214c:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012154:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 8012158:	2b01      	cmp	r3, #1
 801215a:	d132      	bne.n	80121c2 <vl53l4cx_get_result+0x126>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 801215c:	7eba      	ldrb	r2, [r7, #26]
 801215e:	495b      	ldr	r1, [pc, #364]	@ (80122cc <vl53l4cx_get_result+0x230>)
 8012160:	4613      	mov	r3, r2
 8012162:	009b      	lsls	r3, r3, #2
 8012164:	4413      	add	r3, r2
 8012166:	009b      	lsls	r3, r3, #2
 8012168:	440b      	add	r3, r1
 801216a:	3310      	adds	r3, #16
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	ee07 3a90 	vmov	s15, r3
 8012172:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012176:	eddf 6a56 	vldr	s13, [pc, #344]	@ 80122d0 <vl53l4cx_get_result+0x234>
 801217a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801217e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80122d4 <vl53l4cx_get_result+0x238>
 8012182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012186:	edc7 7a05 	vstr	s15, [r7, #20]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 801218a:	4b50      	ldr	r3, [pc, #320]	@ (80122cc <vl53l4cx_get_result+0x230>)
 801218c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8012190:	0a1b      	lsrs	r3, r3, #8
 8012192:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8012194:	8a7b      	ldrh	r3, [r7, #18]
 8012196:	ee07 3a90 	vmov	s15, r3
 801219a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801219e:	7efa      	ldrb	r2, [r7, #27]
 80121a0:	7eb8      	ldrb	r0, [r7, #26]
 80121a2:	edd7 6a05 	vldr	s13, [r7, #20]
 80121a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80121aa:	6839      	ldr	r1, [r7, #0]
 80121ac:	4613      	mov	r3, r2
 80121ae:	011b      	lsls	r3, r3, #4
 80121b0:	4413      	add	r3, r2
 80121b2:	4403      	add	r3, r0
 80121b4:	3308      	adds	r3, #8
 80121b6:	009b      	lsls	r3, r3, #2
 80121b8:	440b      	add	r3, r1
 80121ba:	3308      	adds	r3, #8
 80121bc:	edc3 7a00 	vstr	s15, [r3]
 80121c0:	e00d      	b.n	80121de <vl53l4cx_get_result+0x142>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 80121c2:	7efa      	ldrb	r2, [r7, #27]
 80121c4:	7eb8      	ldrb	r0, [r7, #26]
 80121c6:	6839      	ldr	r1, [r7, #0]
 80121c8:	4613      	mov	r3, r2
 80121ca:	011b      	lsls	r3, r3, #4
 80121cc:	4413      	add	r3, r2
 80121ce:	4403      	add	r3, r0
 80121d0:	3308      	adds	r3, #8
 80121d2:	009b      	lsls	r3, r3, #2
 80121d4:	440b      	add	r3, r1
 80121d6:	3308      	adds	r3, #8
 80121d8:	f04f 0200 	mov.w	r2, #0
 80121dc:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80121e4:	f893 34ed 	ldrb.w	r3, [r3, #1261]	@ 0x4ed
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	d132      	bne.n	8012252 <vl53l4cx_get_result+0x1b6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 80121ec:	7eba      	ldrb	r2, [r7, #26]
 80121ee:	4937      	ldr	r1, [pc, #220]	@ (80122cc <vl53l4cx_get_result+0x230>)
 80121f0:	4613      	mov	r3, r2
 80121f2:	009b      	lsls	r3, r3, #2
 80121f4:	4413      	add	r3, r2
 80121f6:	009b      	lsls	r3, r3, #2
 80121f8:	440b      	add	r3, r1
 80121fa:	330c      	adds	r3, #12
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	ee07 3a90 	vmov	s15, r3
 8012202:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012206:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80122d0 <vl53l4cx_get_result+0x234>
 801220a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801220e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80122d4 <vl53l4cx_get_result+0x238>
 8012212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012216:	edc7 7a03 	vstr	s15, [r7, #12]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 801221a:	4b2c      	ldr	r3, [pc, #176]	@ (80122cc <vl53l4cx_get_result+0x230>)
 801221c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8012220:	0a1b      	lsrs	r3, r3, #8
 8012222:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8012224:	8a7b      	ldrh	r3, [r7, #18]
 8012226:	ee07 3a90 	vmov	s15, r3
 801222a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801222e:	7efa      	ldrb	r2, [r7, #27]
 8012230:	7eb8      	ldrb	r0, [r7, #26]
 8012232:	edd7 6a03 	vldr	s13, [r7, #12]
 8012236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801223a:	6839      	ldr	r1, [r7, #0]
 801223c:	4613      	mov	r3, r2
 801223e:	011b      	lsls	r3, r3, #4
 8012240:	4413      	add	r3, r2
 8012242:	4403      	add	r3, r0
 8012244:	330c      	adds	r3, #12
 8012246:	009b      	lsls	r3, r3, #2
 8012248:	440b      	add	r3, r1
 801224a:	3308      	adds	r3, #8
 801224c:	edc3 7a00 	vstr	s15, [r3]
 8012250:	e00d      	b.n	801226e <vl53l4cx_get_result+0x1d2>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8012252:	7efa      	ldrb	r2, [r7, #27]
 8012254:	7eb8      	ldrb	r0, [r7, #26]
 8012256:	6839      	ldr	r1, [r7, #0]
 8012258:	4613      	mov	r3, r2
 801225a:	011b      	lsls	r3, r3, #4
 801225c:	4413      	add	r3, r2
 801225e:	4403      	add	r3, r0
 8012260:	330c      	adds	r3, #12
 8012262:	009b      	lsls	r3, r3, #2
 8012264:	440b      	add	r3, r1
 8012266:	3308      	adds	r3, #8
 8012268:	f04f 0200 	mov.w	r2, #0
 801226c:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 801226e:	7eba      	ldrb	r2, [r7, #26]
 8012270:	4916      	ldr	r1, [pc, #88]	@ (80122cc <vl53l4cx_get_result+0x230>)
 8012272:	4613      	mov	r3, r2
 8012274:	009b      	lsls	r3, r3, #2
 8012276:	4413      	add	r3, r2
 8012278:	009b      	lsls	r3, r3, #2
 801227a:	440b      	add	r3, r1
 801227c:	331a      	adds	r3, #26
 801227e:	781b      	ldrb	r3, [r3, #0]
 8012280:	7efa      	ldrb	r2, [r7, #27]
 8012282:	7eb8      	ldrb	r0, [r7, #26]
 8012284:	461c      	mov	r4, r3
 8012286:	6839      	ldr	r1, [r7, #0]
 8012288:	4613      	mov	r3, r2
 801228a:	011b      	lsls	r3, r3, #4
 801228c:	4413      	add	r3, r2
 801228e:	4403      	add	r3, r0
 8012290:	3304      	adds	r3, #4
 8012292:	009b      	lsls	r3, r3, #2
 8012294:	440b      	add	r3, r1
 8012296:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8012298:	7ebb      	ldrb	r3, [r7, #26]
 801229a:	3301      	adds	r3, #1
 801229c:	76bb      	strb	r3, [r7, #26]
 801229e:	4b0b      	ldr	r3, [pc, #44]	@ (80122cc <vl53l4cx_get_result+0x230>)
 80122a0:	795b      	ldrb	r3, [r3, #5]
 80122a2:	7eba      	ldrb	r2, [r7, #26]
 80122a4:	429a      	cmp	r2, r3
 80122a6:	f4ff af25 	bcc.w	80120f4 <vl53l4cx_get_result+0x58>
    for (i = 0; i < VL53L4CX_MAX_NB_ZONES; i++)
 80122aa:	7efb      	ldrb	r3, [r7, #27]
 80122ac:	3301      	adds	r3, #1
 80122ae:	76fb      	strb	r3, [r7, #27]
 80122b0:	7efb      	ldrb	r3, [r7, #27]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	f43f af0f 	beq.w	80120d6 <vl53l4cx_get_result+0x3a>
      }
    }

    pResult->NumberOfZones = VL53L4CX_MAX_NB_ZONES;
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	2201      	movs	r2, #1
 80122bc:	601a      	str	r2, [r3, #0]

    ret = VL53L4CX_OK;
 80122be:	2300      	movs	r3, #0
 80122c0:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80122c2:	69fb      	ldr	r3, [r7, #28]
}
 80122c4:	4618      	mov	r0, r3
 80122c6:	3724      	adds	r7, #36	@ 0x24
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd90      	pop	{r4, r7, pc}
 80122cc:	20007a88 	.word	0x20007a88
 80122d0:	47800000 	.word	0x47800000
 80122d4:	447a0000 	.word	0x447a0000

080122d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80122de:	2300      	movs	r3, #0
 80122e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80122e2:	4b0c      	ldr	r3, [pc, #48]	@ (8012314 <HAL_Init+0x3c>)
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	4a0b      	ldr	r2, [pc, #44]	@ (8012314 <HAL_Init+0x3c>)
 80122e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80122ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80122ee:	2003      	movs	r0, #3
 80122f0:	f000 f8eb 	bl	80124ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80122f4:	200f      	movs	r0, #15
 80122f6:	f7ee fe2b 	bl	8000f50 <HAL_InitTick>
 80122fa:	4603      	mov	r3, r0
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d002      	beq.n	8012306 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8012300:	2301      	movs	r3, #1
 8012302:	71fb      	strb	r3, [r7, #7]
 8012304:	e001      	b.n	801230a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8012306:	f7ee fd62 	bl	8000dce <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801230a:	79fb      	ldrb	r3, [r7, #7]
}
 801230c:	4618      	mov	r0, r3
 801230e:	3708      	adds	r7, #8
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}
 8012314:	58004000 	.word	0x58004000

08012318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012318:	b480      	push	{r7}
 801231a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801231c:	4b06      	ldr	r3, [pc, #24]	@ (8012338 <HAL_IncTick+0x20>)
 801231e:	781b      	ldrb	r3, [r3, #0]
 8012320:	461a      	mov	r2, r3
 8012322:	4b06      	ldr	r3, [pc, #24]	@ (801233c <HAL_IncTick+0x24>)
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	4413      	add	r3, r2
 8012328:	4a04      	ldr	r2, [pc, #16]	@ (801233c <HAL_IncTick+0x24>)
 801232a:	6013      	str	r3, [r2, #0]
}
 801232c:	bf00      	nop
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr
 8012336:	bf00      	nop
 8012338:	20000074 	.word	0x20000074
 801233c:	20007ae4 	.word	0x20007ae4

08012340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012340:	b480      	push	{r7}
 8012342:	af00      	add	r7, sp, #0
  return uwTick;
 8012344:	4b03      	ldr	r3, [pc, #12]	@ (8012354 <HAL_GetTick+0x14>)
 8012346:	681b      	ldr	r3, [r3, #0]
}
 8012348:	4618      	mov	r0, r3
 801234a:	46bd      	mov	sp, r7
 801234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012350:	4770      	bx	lr
 8012352:	bf00      	nop
 8012354:	20007ae4 	.word	0x20007ae4

08012358 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8012358:	b480      	push	{r7}
 801235a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 801235c:	4b03      	ldr	r3, [pc, #12]	@ (801236c <HAL_GetTickPrio+0x14>)
 801235e:	681b      	ldr	r3, [r3, #0]
}
 8012360:	4618      	mov	r0, r3
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr
 801236a:	bf00      	nop
 801236c:	20000070 	.word	0x20000070

08012370 <__NVIC_SetPriorityGrouping>:
{
 8012370:	b480      	push	{r7}
 8012372:	b085      	sub	sp, #20
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f003 0307 	and.w	r3, r3, #7
 801237e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012380:	4b0c      	ldr	r3, [pc, #48]	@ (80123b4 <__NVIC_SetPriorityGrouping+0x44>)
 8012382:	68db      	ldr	r3, [r3, #12]
 8012384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012386:	68ba      	ldr	r2, [r7, #8]
 8012388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801238c:	4013      	ands	r3, r2
 801238e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 801239c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80123a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80123a2:	4a04      	ldr	r2, [pc, #16]	@ (80123b4 <__NVIC_SetPriorityGrouping+0x44>)
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	60d3      	str	r3, [r2, #12]
}
 80123a8:	bf00      	nop
 80123aa:	3714      	adds	r7, #20
 80123ac:	46bd      	mov	sp, r7
 80123ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b2:	4770      	bx	lr
 80123b4:	e000ed00 	.word	0xe000ed00

080123b8 <__NVIC_GetPriorityGrouping>:
{
 80123b8:	b480      	push	{r7}
 80123ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80123bc:	4b04      	ldr	r3, [pc, #16]	@ (80123d0 <__NVIC_GetPriorityGrouping+0x18>)
 80123be:	68db      	ldr	r3, [r3, #12]
 80123c0:	0a1b      	lsrs	r3, r3, #8
 80123c2:	f003 0307 	and.w	r3, r3, #7
}
 80123c6:	4618      	mov	r0, r3
 80123c8:	46bd      	mov	sp, r7
 80123ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ce:	4770      	bx	lr
 80123d0:	e000ed00 	.word	0xe000ed00

080123d4 <__NVIC_EnableIRQ>:
{
 80123d4:	b480      	push	{r7}
 80123d6:	b083      	sub	sp, #12
 80123d8:	af00      	add	r7, sp, #0
 80123da:	4603      	mov	r3, r0
 80123dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80123de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	db0b      	blt.n	80123fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80123e6:	79fb      	ldrb	r3, [r7, #7]
 80123e8:	f003 021f 	and.w	r2, r3, #31
 80123ec:	4907      	ldr	r1, [pc, #28]	@ (801240c <__NVIC_EnableIRQ+0x38>)
 80123ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80123f2:	095b      	lsrs	r3, r3, #5
 80123f4:	2001      	movs	r0, #1
 80123f6:	fa00 f202 	lsl.w	r2, r0, r2
 80123fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80123fe:	bf00      	nop
 8012400:	370c      	adds	r7, #12
 8012402:	46bd      	mov	sp, r7
 8012404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012408:	4770      	bx	lr
 801240a:	bf00      	nop
 801240c:	e000e100 	.word	0xe000e100

08012410 <__NVIC_SetPriority>:
{
 8012410:	b480      	push	{r7}
 8012412:	b083      	sub	sp, #12
 8012414:	af00      	add	r7, sp, #0
 8012416:	4603      	mov	r3, r0
 8012418:	6039      	str	r1, [r7, #0]
 801241a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012420:	2b00      	cmp	r3, #0
 8012422:	db0a      	blt.n	801243a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	b2da      	uxtb	r2, r3
 8012428:	490c      	ldr	r1, [pc, #48]	@ (801245c <__NVIC_SetPriority+0x4c>)
 801242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801242e:	0112      	lsls	r2, r2, #4
 8012430:	b2d2      	uxtb	r2, r2
 8012432:	440b      	add	r3, r1
 8012434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8012438:	e00a      	b.n	8012450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	b2da      	uxtb	r2, r3
 801243e:	4908      	ldr	r1, [pc, #32]	@ (8012460 <__NVIC_SetPriority+0x50>)
 8012440:	79fb      	ldrb	r3, [r7, #7]
 8012442:	f003 030f 	and.w	r3, r3, #15
 8012446:	3b04      	subs	r3, #4
 8012448:	0112      	lsls	r2, r2, #4
 801244a:	b2d2      	uxtb	r2, r2
 801244c:	440b      	add	r3, r1
 801244e:	761a      	strb	r2, [r3, #24]
}
 8012450:	bf00      	nop
 8012452:	370c      	adds	r7, #12
 8012454:	46bd      	mov	sp, r7
 8012456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245a:	4770      	bx	lr
 801245c:	e000e100 	.word	0xe000e100
 8012460:	e000ed00 	.word	0xe000ed00

08012464 <NVIC_EncodePriority>:
{
 8012464:	b480      	push	{r7}
 8012466:	b089      	sub	sp, #36	@ 0x24
 8012468:	af00      	add	r7, sp, #0
 801246a:	60f8      	str	r0, [r7, #12]
 801246c:	60b9      	str	r1, [r7, #8]
 801246e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	f003 0307 	and.w	r3, r3, #7
 8012476:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012478:	69fb      	ldr	r3, [r7, #28]
 801247a:	f1c3 0307 	rsb	r3, r3, #7
 801247e:	2b04      	cmp	r3, #4
 8012480:	bf28      	it	cs
 8012482:	2304      	movcs	r3, #4
 8012484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012486:	69fb      	ldr	r3, [r7, #28]
 8012488:	3304      	adds	r3, #4
 801248a:	2b06      	cmp	r3, #6
 801248c:	d902      	bls.n	8012494 <NVIC_EncodePriority+0x30>
 801248e:	69fb      	ldr	r3, [r7, #28]
 8012490:	3b03      	subs	r3, #3
 8012492:	e000      	b.n	8012496 <NVIC_EncodePriority+0x32>
 8012494:	2300      	movs	r3, #0
 8012496:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012498:	f04f 32ff 	mov.w	r2, #4294967295
 801249c:	69bb      	ldr	r3, [r7, #24]
 801249e:	fa02 f303 	lsl.w	r3, r2, r3
 80124a2:	43da      	mvns	r2, r3
 80124a4:	68bb      	ldr	r3, [r7, #8]
 80124a6:	401a      	ands	r2, r3
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80124ac:	f04f 31ff 	mov.w	r1, #4294967295
 80124b0:	697b      	ldr	r3, [r7, #20]
 80124b2:	fa01 f303 	lsl.w	r3, r1, r3
 80124b6:	43d9      	mvns	r1, r3
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80124bc:	4313      	orrs	r3, r2
}
 80124be:	4618      	mov	r0, r3
 80124c0:	3724      	adds	r7, #36	@ 0x24
 80124c2:	46bd      	mov	sp, r7
 80124c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c8:	4770      	bx	lr

080124ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80124ca:	b580      	push	{r7, lr}
 80124cc:	b082      	sub	sp, #8
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f7ff ff4c 	bl	8012370 <__NVIC_SetPriorityGrouping>
}
 80124d8:	bf00      	nop
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}

080124e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b086      	sub	sp, #24
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	4603      	mov	r3, r0
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	607a      	str	r2, [r7, #4]
 80124ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80124ee:	f7ff ff63 	bl	80123b8 <__NVIC_GetPriorityGrouping>
 80124f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80124f4:	687a      	ldr	r2, [r7, #4]
 80124f6:	68b9      	ldr	r1, [r7, #8]
 80124f8:	6978      	ldr	r0, [r7, #20]
 80124fa:	f7ff ffb3 	bl	8012464 <NVIC_EncodePriority>
 80124fe:	4602      	mov	r2, r0
 8012500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012504:	4611      	mov	r1, r2
 8012506:	4618      	mov	r0, r3
 8012508:	f7ff ff82 	bl	8012410 <__NVIC_SetPriority>
}
 801250c:	bf00      	nop
 801250e:	3718      	adds	r7, #24
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}

08012514 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
 801251a:	4603      	mov	r3, r0
 801251c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012522:	4618      	mov	r0, r3
 8012524:	f7ff ff56 	bl	80123d4 <__NVIC_EnableIRQ>
}
 8012528:	bf00      	nop
 801252a:	3708      	adds	r7, #8
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}

08012530 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012530:	b480      	push	{r7}
 8012532:	b087      	sub	sp, #28
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801253a:	2300      	movs	r3, #0
 801253c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801253e:	e14c      	b.n	80127da <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	681a      	ldr	r2, [r3, #0]
 8012544:	2101      	movs	r1, #1
 8012546:	697b      	ldr	r3, [r7, #20]
 8012548:	fa01 f303 	lsl.w	r3, r1, r3
 801254c:	4013      	ands	r3, r2
 801254e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	2b00      	cmp	r3, #0
 8012554:	f000 813e 	beq.w	80127d4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	685b      	ldr	r3, [r3, #4]
 801255c:	f003 0303 	and.w	r3, r3, #3
 8012560:	2b01      	cmp	r3, #1
 8012562:	d005      	beq.n	8012570 <HAL_GPIO_Init+0x40>
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	f003 0303 	and.w	r3, r3, #3
 801256c:	2b02      	cmp	r3, #2
 801256e:	d130      	bne.n	80125d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	689b      	ldr	r3, [r3, #8]
 8012574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	005b      	lsls	r3, r3, #1
 801257a:	2203      	movs	r2, #3
 801257c:	fa02 f303 	lsl.w	r3, r2, r3
 8012580:	43db      	mvns	r3, r3
 8012582:	693a      	ldr	r2, [r7, #16]
 8012584:	4013      	ands	r3, r2
 8012586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	68da      	ldr	r2, [r3, #12]
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	005b      	lsls	r3, r3, #1
 8012590:	fa02 f303 	lsl.w	r3, r2, r3
 8012594:	693a      	ldr	r2, [r7, #16]
 8012596:	4313      	orrs	r3, r2
 8012598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	693a      	ldr	r2, [r7, #16]
 801259e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	685b      	ldr	r3, [r3, #4]
 80125a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80125a6:	2201      	movs	r2, #1
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	fa02 f303 	lsl.w	r3, r2, r3
 80125ae:	43db      	mvns	r3, r3
 80125b0:	693a      	ldr	r2, [r7, #16]
 80125b2:	4013      	ands	r3, r2
 80125b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	091b      	lsrs	r3, r3, #4
 80125bc:	f003 0201 	and.w	r2, r3, #1
 80125c0:	697b      	ldr	r3, [r7, #20]
 80125c2:	fa02 f303 	lsl.w	r3, r2, r3
 80125c6:	693a      	ldr	r2, [r7, #16]
 80125c8:	4313      	orrs	r3, r2
 80125ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	693a      	ldr	r2, [r7, #16]
 80125d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	685b      	ldr	r3, [r3, #4]
 80125d6:	f003 0303 	and.w	r3, r3, #3
 80125da:	2b03      	cmp	r3, #3
 80125dc:	d017      	beq.n	801260e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	68db      	ldr	r3, [r3, #12]
 80125e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	005b      	lsls	r3, r3, #1
 80125e8:	2203      	movs	r2, #3
 80125ea:	fa02 f303 	lsl.w	r3, r2, r3
 80125ee:	43db      	mvns	r3, r3
 80125f0:	693a      	ldr	r2, [r7, #16]
 80125f2:	4013      	ands	r3, r2
 80125f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	689a      	ldr	r2, [r3, #8]
 80125fa:	697b      	ldr	r3, [r7, #20]
 80125fc:	005b      	lsls	r3, r3, #1
 80125fe:	fa02 f303 	lsl.w	r3, r2, r3
 8012602:	693a      	ldr	r2, [r7, #16]
 8012604:	4313      	orrs	r3, r2
 8012606:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	693a      	ldr	r2, [r7, #16]
 801260c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	f003 0303 	and.w	r3, r3, #3
 8012616:	2b02      	cmp	r3, #2
 8012618:	d123      	bne.n	8012662 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	08da      	lsrs	r2, r3, #3
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	3208      	adds	r2, #8
 8012622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012626:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	f003 0307 	and.w	r3, r3, #7
 801262e:	009b      	lsls	r3, r3, #2
 8012630:	220f      	movs	r2, #15
 8012632:	fa02 f303 	lsl.w	r3, r2, r3
 8012636:	43db      	mvns	r3, r3
 8012638:	693a      	ldr	r2, [r7, #16]
 801263a:	4013      	ands	r3, r2
 801263c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	691a      	ldr	r2, [r3, #16]
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	f003 0307 	and.w	r3, r3, #7
 8012648:	009b      	lsls	r3, r3, #2
 801264a:	fa02 f303 	lsl.w	r3, r2, r3
 801264e:	693a      	ldr	r2, [r7, #16]
 8012650:	4313      	orrs	r3, r2
 8012652:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	08da      	lsrs	r2, r3, #3
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	3208      	adds	r2, #8
 801265c:	6939      	ldr	r1, [r7, #16]
 801265e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	005b      	lsls	r3, r3, #1
 801266c:	2203      	movs	r2, #3
 801266e:	fa02 f303 	lsl.w	r3, r2, r3
 8012672:	43db      	mvns	r3, r3
 8012674:	693a      	ldr	r2, [r7, #16]
 8012676:	4013      	ands	r3, r2
 8012678:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	685b      	ldr	r3, [r3, #4]
 801267e:	f003 0203 	and.w	r2, r3, #3
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	005b      	lsls	r3, r3, #1
 8012686:	fa02 f303 	lsl.w	r3, r2, r3
 801268a:	693a      	ldr	r2, [r7, #16]
 801268c:	4313      	orrs	r3, r2
 801268e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	693a      	ldr	r2, [r7, #16]
 8012694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	685b      	ldr	r3, [r3, #4]
 801269a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801269e:	2b00      	cmp	r3, #0
 80126a0:	f000 8098 	beq.w	80127d4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80126a4:	4a54      	ldr	r2, [pc, #336]	@ (80127f8 <HAL_GPIO_Init+0x2c8>)
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	089b      	lsrs	r3, r3, #2
 80126aa:	3302      	adds	r3, #2
 80126ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	f003 0303 	and.w	r3, r3, #3
 80126b8:	009b      	lsls	r3, r3, #2
 80126ba:	220f      	movs	r2, #15
 80126bc:	fa02 f303 	lsl.w	r3, r2, r3
 80126c0:	43db      	mvns	r3, r3
 80126c2:	693a      	ldr	r2, [r7, #16]
 80126c4:	4013      	ands	r3, r2
 80126c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80126ce:	d019      	beq.n	8012704 <HAL_GPIO_Init+0x1d4>
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	4a4a      	ldr	r2, [pc, #296]	@ (80127fc <HAL_GPIO_Init+0x2cc>)
 80126d4:	4293      	cmp	r3, r2
 80126d6:	d013      	beq.n	8012700 <HAL_GPIO_Init+0x1d0>
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	4a49      	ldr	r2, [pc, #292]	@ (8012800 <HAL_GPIO_Init+0x2d0>)
 80126dc:	4293      	cmp	r3, r2
 80126de:	d00d      	beq.n	80126fc <HAL_GPIO_Init+0x1cc>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	4a48      	ldr	r2, [pc, #288]	@ (8012804 <HAL_GPIO_Init+0x2d4>)
 80126e4:	4293      	cmp	r3, r2
 80126e6:	d007      	beq.n	80126f8 <HAL_GPIO_Init+0x1c8>
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	4a47      	ldr	r2, [pc, #284]	@ (8012808 <HAL_GPIO_Init+0x2d8>)
 80126ec:	4293      	cmp	r3, r2
 80126ee:	d101      	bne.n	80126f4 <HAL_GPIO_Init+0x1c4>
 80126f0:	2304      	movs	r3, #4
 80126f2:	e008      	b.n	8012706 <HAL_GPIO_Init+0x1d6>
 80126f4:	2307      	movs	r3, #7
 80126f6:	e006      	b.n	8012706 <HAL_GPIO_Init+0x1d6>
 80126f8:	2303      	movs	r3, #3
 80126fa:	e004      	b.n	8012706 <HAL_GPIO_Init+0x1d6>
 80126fc:	2302      	movs	r3, #2
 80126fe:	e002      	b.n	8012706 <HAL_GPIO_Init+0x1d6>
 8012700:	2301      	movs	r3, #1
 8012702:	e000      	b.n	8012706 <HAL_GPIO_Init+0x1d6>
 8012704:	2300      	movs	r3, #0
 8012706:	697a      	ldr	r2, [r7, #20]
 8012708:	f002 0203 	and.w	r2, r2, #3
 801270c:	0092      	lsls	r2, r2, #2
 801270e:	4093      	lsls	r3, r2
 8012710:	693a      	ldr	r2, [r7, #16]
 8012712:	4313      	orrs	r3, r2
 8012714:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8012716:	4938      	ldr	r1, [pc, #224]	@ (80127f8 <HAL_GPIO_Init+0x2c8>)
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	089b      	lsrs	r3, r3, #2
 801271c:	3302      	adds	r3, #2
 801271e:	693a      	ldr	r2, [r7, #16]
 8012720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8012724:	4b39      	ldr	r3, [pc, #228]	@ (801280c <HAL_GPIO_Init+0x2dc>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	43db      	mvns	r3, r3
 801272e:	693a      	ldr	r2, [r7, #16]
 8012730:	4013      	ands	r3, r2
 8012732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	685b      	ldr	r3, [r3, #4]
 8012738:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801273c:	2b00      	cmp	r3, #0
 801273e:	d003      	beq.n	8012748 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8012740:	693a      	ldr	r2, [r7, #16]
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	4313      	orrs	r3, r2
 8012746:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8012748:	4a30      	ldr	r2, [pc, #192]	@ (801280c <HAL_GPIO_Init+0x2dc>)
 801274a:	693b      	ldr	r3, [r7, #16]
 801274c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801274e:	4b2f      	ldr	r3, [pc, #188]	@ (801280c <HAL_GPIO_Init+0x2dc>)
 8012750:	685b      	ldr	r3, [r3, #4]
 8012752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	43db      	mvns	r3, r3
 8012758:	693a      	ldr	r2, [r7, #16]
 801275a:	4013      	ands	r3, r2
 801275c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012766:	2b00      	cmp	r3, #0
 8012768:	d003      	beq.n	8012772 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 801276a:	693a      	ldr	r2, [r7, #16]
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	4313      	orrs	r3, r2
 8012770:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8012772:	4a26      	ldr	r2, [pc, #152]	@ (801280c <HAL_GPIO_Init+0x2dc>)
 8012774:	693b      	ldr	r3, [r7, #16]
 8012776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8012778:	4b24      	ldr	r3, [pc, #144]	@ (801280c <HAL_GPIO_Init+0x2dc>)
 801277a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801277e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	43db      	mvns	r3, r3
 8012784:	693a      	ldr	r2, [r7, #16]
 8012786:	4013      	ands	r3, r2
 8012788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012792:	2b00      	cmp	r3, #0
 8012794:	d003      	beq.n	801279e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8012796:	693a      	ldr	r2, [r7, #16]
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	4313      	orrs	r3, r2
 801279c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801279e:	4a1b      	ldr	r2, [pc, #108]	@ (801280c <HAL_GPIO_Init+0x2dc>)
 80127a0:	693b      	ldr	r3, [r7, #16]
 80127a2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80127a6:	4b19      	ldr	r3, [pc, #100]	@ (801280c <HAL_GPIO_Init+0x2dc>)
 80127a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80127ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	43db      	mvns	r3, r3
 80127b2:	693a      	ldr	r2, [r7, #16]
 80127b4:	4013      	ands	r3, r2
 80127b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	685b      	ldr	r3, [r3, #4]
 80127bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d003      	beq.n	80127cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80127c4:	693a      	ldr	r2, [r7, #16]
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	4313      	orrs	r3, r2
 80127ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80127cc:	4a0f      	ldr	r2, [pc, #60]	@ (801280c <HAL_GPIO_Init+0x2dc>)
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	3301      	adds	r3, #1
 80127d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	681a      	ldr	r2, [r3, #0]
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	fa22 f303 	lsr.w	r3, r2, r3
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	f47f aeab 	bne.w	8012540 <HAL_GPIO_Init+0x10>
  }
}
 80127ea:	bf00      	nop
 80127ec:	bf00      	nop
 80127ee:	371c      	adds	r7, #28
 80127f0:	46bd      	mov	sp, r7
 80127f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f6:	4770      	bx	lr
 80127f8:	40010000 	.word	0x40010000
 80127fc:	48000400 	.word	0x48000400
 8012800:	48000800 	.word	0x48000800
 8012804:	48000c00 	.word	0x48000c00
 8012808:	48001000 	.word	0x48001000
 801280c:	58000800 	.word	0x58000800

08012810 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012810:	b480      	push	{r7}
 8012812:	b087      	sub	sp, #28
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801281a:	2300      	movs	r3, #0
 801281c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 801281e:	e0bb      	b.n	8012998 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8012820:	2201      	movs	r2, #1
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	fa02 f303 	lsl.w	r3, r2, r3
 8012828:	683a      	ldr	r2, [r7, #0]
 801282a:	4013      	ands	r3, r2
 801282c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	2b00      	cmp	r3, #0
 8012832:	f000 80ae 	beq.w	8012992 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8012836:	4a5f      	ldr	r2, [pc, #380]	@ (80129b4 <HAL_GPIO_DeInit+0x1a4>)
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	089b      	lsrs	r3, r3, #2
 801283c:	3302      	adds	r3, #2
 801283e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012842:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	f003 0303 	and.w	r3, r3, #3
 801284a:	009b      	lsls	r3, r3, #2
 801284c:	220f      	movs	r2, #15
 801284e:	fa02 f303 	lsl.w	r3, r2, r3
 8012852:	68fa      	ldr	r2, [r7, #12]
 8012854:	4013      	ands	r3, r2
 8012856:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 801285e:	d019      	beq.n	8012894 <HAL_GPIO_DeInit+0x84>
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	4a55      	ldr	r2, [pc, #340]	@ (80129b8 <HAL_GPIO_DeInit+0x1a8>)
 8012864:	4293      	cmp	r3, r2
 8012866:	d013      	beq.n	8012890 <HAL_GPIO_DeInit+0x80>
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	4a54      	ldr	r2, [pc, #336]	@ (80129bc <HAL_GPIO_DeInit+0x1ac>)
 801286c:	4293      	cmp	r3, r2
 801286e:	d00d      	beq.n	801288c <HAL_GPIO_DeInit+0x7c>
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	4a53      	ldr	r2, [pc, #332]	@ (80129c0 <HAL_GPIO_DeInit+0x1b0>)
 8012874:	4293      	cmp	r3, r2
 8012876:	d007      	beq.n	8012888 <HAL_GPIO_DeInit+0x78>
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	4a52      	ldr	r2, [pc, #328]	@ (80129c4 <HAL_GPIO_DeInit+0x1b4>)
 801287c:	4293      	cmp	r3, r2
 801287e:	d101      	bne.n	8012884 <HAL_GPIO_DeInit+0x74>
 8012880:	2304      	movs	r3, #4
 8012882:	e008      	b.n	8012896 <HAL_GPIO_DeInit+0x86>
 8012884:	2307      	movs	r3, #7
 8012886:	e006      	b.n	8012896 <HAL_GPIO_DeInit+0x86>
 8012888:	2303      	movs	r3, #3
 801288a:	e004      	b.n	8012896 <HAL_GPIO_DeInit+0x86>
 801288c:	2302      	movs	r3, #2
 801288e:	e002      	b.n	8012896 <HAL_GPIO_DeInit+0x86>
 8012890:	2301      	movs	r3, #1
 8012892:	e000      	b.n	8012896 <HAL_GPIO_DeInit+0x86>
 8012894:	2300      	movs	r3, #0
 8012896:	697a      	ldr	r2, [r7, #20]
 8012898:	f002 0203 	and.w	r2, r2, #3
 801289c:	0092      	lsls	r2, r2, #2
 801289e:	4093      	lsls	r3, r2
 80128a0:	68fa      	ldr	r2, [r7, #12]
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d136      	bne.n	8012914 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80128a6:	4b48      	ldr	r3, [pc, #288]	@ (80129c8 <HAL_GPIO_DeInit+0x1b8>)
 80128a8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80128ac:	693b      	ldr	r3, [r7, #16]
 80128ae:	43db      	mvns	r3, r3
 80128b0:	4945      	ldr	r1, [pc, #276]	@ (80129c8 <HAL_GPIO_DeInit+0x1b8>)
 80128b2:	4013      	ands	r3, r2
 80128b4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80128b8:	4b43      	ldr	r3, [pc, #268]	@ (80129c8 <HAL_GPIO_DeInit+0x1b8>)
 80128ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	43db      	mvns	r3, r3
 80128c2:	4941      	ldr	r1, [pc, #260]	@ (80129c8 <HAL_GPIO_DeInit+0x1b8>)
 80128c4:	4013      	ands	r3, r2
 80128c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80128ca:	4b3f      	ldr	r3, [pc, #252]	@ (80129c8 <HAL_GPIO_DeInit+0x1b8>)
 80128cc:	681a      	ldr	r2, [r3, #0]
 80128ce:	693b      	ldr	r3, [r7, #16]
 80128d0:	43db      	mvns	r3, r3
 80128d2:	493d      	ldr	r1, [pc, #244]	@ (80129c8 <HAL_GPIO_DeInit+0x1b8>)
 80128d4:	4013      	ands	r3, r2
 80128d6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80128d8:	4b3b      	ldr	r3, [pc, #236]	@ (80129c8 <HAL_GPIO_DeInit+0x1b8>)
 80128da:	685a      	ldr	r2, [r3, #4]
 80128dc:	693b      	ldr	r3, [r7, #16]
 80128de:	43db      	mvns	r3, r3
 80128e0:	4939      	ldr	r1, [pc, #228]	@ (80129c8 <HAL_GPIO_DeInit+0x1b8>)
 80128e2:	4013      	ands	r3, r2
 80128e4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	f003 0303 	and.w	r3, r3, #3
 80128ec:	009b      	lsls	r3, r3, #2
 80128ee:	220f      	movs	r2, #15
 80128f0:	fa02 f303 	lsl.w	r3, r2, r3
 80128f4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80128f6:	4a2f      	ldr	r2, [pc, #188]	@ (80129b4 <HAL_GPIO_DeInit+0x1a4>)
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	089b      	lsrs	r3, r3, #2
 80128fc:	3302      	adds	r3, #2
 80128fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	43da      	mvns	r2, r3
 8012906:	482b      	ldr	r0, [pc, #172]	@ (80129b4 <HAL_GPIO_DeInit+0x1a4>)
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	089b      	lsrs	r3, r3, #2
 801290c:	400a      	ands	r2, r1
 801290e:	3302      	adds	r3, #2
 8012910:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681a      	ldr	r2, [r3, #0]
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	005b      	lsls	r3, r3, #1
 801291c:	2103      	movs	r1, #3
 801291e:	fa01 f303 	lsl.w	r3, r1, r3
 8012922:	431a      	orrs	r2, r3
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	08da      	lsrs	r2, r3, #3
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	3208      	adds	r2, #8
 8012930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	f003 0307 	and.w	r3, r3, #7
 801293a:	009b      	lsls	r3, r3, #2
 801293c:	220f      	movs	r2, #15
 801293e:	fa02 f303 	lsl.w	r3, r2, r3
 8012942:	43db      	mvns	r3, r3
 8012944:	697a      	ldr	r2, [r7, #20]
 8012946:	08d2      	lsrs	r2, r2, #3
 8012948:	4019      	ands	r1, r3
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	3208      	adds	r2, #8
 801294e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	68da      	ldr	r2, [r3, #12]
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	005b      	lsls	r3, r3, #1
 801295a:	2103      	movs	r1, #3
 801295c:	fa01 f303 	lsl.w	r3, r1, r3
 8012960:	43db      	mvns	r3, r3
 8012962:	401a      	ands	r2, r3
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	685a      	ldr	r2, [r3, #4]
 801296c:	2101      	movs	r1, #1
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	fa01 f303 	lsl.w	r3, r1, r3
 8012974:	43db      	mvns	r3, r3
 8012976:	401a      	ands	r2, r3
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	689a      	ldr	r2, [r3, #8]
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	005b      	lsls	r3, r3, #1
 8012984:	2103      	movs	r1, #3
 8012986:	fa01 f303 	lsl.w	r3, r1, r3
 801298a:	43db      	mvns	r3, r3
 801298c:	401a      	ands	r2, r3
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	609a      	str	r2, [r3, #8]
    }

    position++;
 8012992:	697b      	ldr	r3, [r7, #20]
 8012994:	3301      	adds	r3, #1
 8012996:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8012998:	683a      	ldr	r2, [r7, #0]
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	fa22 f303 	lsr.w	r3, r2, r3
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	f47f af3d 	bne.w	8012820 <HAL_GPIO_DeInit+0x10>
  }
}
 80129a6:	bf00      	nop
 80129a8:	bf00      	nop
 80129aa:	371c      	adds	r7, #28
 80129ac:	46bd      	mov	sp, r7
 80129ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b2:	4770      	bx	lr
 80129b4:	40010000 	.word	0x40010000
 80129b8:	48000400 	.word	0x48000400
 80129bc:	48000800 	.word	0x48000800
 80129c0:	48000c00 	.word	0x48000c00
 80129c4:	48001000 	.word	0x48001000
 80129c8:	58000800 	.word	0x58000800

080129cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80129cc:	b480      	push	{r7}
 80129ce:	b083      	sub	sp, #12
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
 80129d4:	460b      	mov	r3, r1
 80129d6:	807b      	strh	r3, [r7, #2]
 80129d8:	4613      	mov	r3, r2
 80129da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80129dc:	787b      	ldrb	r3, [r7, #1]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d003      	beq.n	80129ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80129e2:	887a      	ldrh	r2, [r7, #2]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80129e8:	e002      	b.n	80129f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80129ea:	887a      	ldrh	r2, [r7, #2]
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80129f0:	bf00      	nop
 80129f2:	370c      	adds	r7, #12
 80129f4:	46bd      	mov	sp, r7
 80129f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fa:	4770      	bx	lr

080129fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b082      	sub	sp, #8
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	4603      	mov	r3, r0
 8012a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8012a06:	4b08      	ldr	r3, [pc, #32]	@ (8012a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8012a08:	68da      	ldr	r2, [r3, #12]
 8012a0a:	88fb      	ldrh	r3, [r7, #6]
 8012a0c:	4013      	ands	r3, r2
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d006      	beq.n	8012a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8012a12:	4a05      	ldr	r2, [pc, #20]	@ (8012a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8012a14:	88fb      	ldrh	r3, [r7, #6]
 8012a16:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8012a18:	88fb      	ldrh	r3, [r7, #6]
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f000 f806 	bl	8012a2c <HAL_GPIO_EXTI_Callback>
  }
}
 8012a20:	bf00      	nop
 8012a22:	3708      	adds	r7, #8
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	58000800 	.word	0x58000800

08012a2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8012a2c:	b480      	push	{r7}
 8012a2e:	b083      	sub	sp, #12
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	4603      	mov	r3, r0
 8012a34:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8012a36:	bf00      	nop
 8012a38:	370c      	adds	r7, #12
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a40:	4770      	bx	lr

08012a42 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012a42:	b580      	push	{r7, lr}
 8012a44:	b082      	sub	sp, #8
 8012a46:	af00      	add	r7, sp, #0
 8012a48:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d101      	bne.n	8012a54 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8012a50:	2301      	movs	r3, #1
 8012a52:	e08d      	b.n	8012b70 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012a5a:	b2db      	uxtb	r3, r3
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d106      	bne.n	8012a6e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2200      	movs	r2, #0
 8012a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f000 f8b4 	bl	8012bd6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	2224      	movs	r2, #36	@ 0x24
 8012a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	681a      	ldr	r2, [r3, #0]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	f022 0201 	bic.w	r2, r2, #1
 8012a84:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	685a      	ldr	r2, [r3, #4]
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8012a92:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	689a      	ldr	r2, [r3, #8]
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012aa2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	68db      	ldr	r3, [r3, #12]
 8012aa8:	2b01      	cmp	r3, #1
 8012aaa:	d107      	bne.n	8012abc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	689a      	ldr	r2, [r3, #8]
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012ab8:	609a      	str	r2, [r3, #8]
 8012aba:	e006      	b.n	8012aca <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	689a      	ldr	r2, [r3, #8]
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8012ac8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	68db      	ldr	r3, [r3, #12]
 8012ace:	2b02      	cmp	r3, #2
 8012ad0:	d108      	bne.n	8012ae4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	685a      	ldr	r2, [r3, #4]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012ae0:	605a      	str	r2, [r3, #4]
 8012ae2:	e007      	b.n	8012af4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	685a      	ldr	r2, [r3, #4]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8012af2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	685b      	ldr	r3, [r3, #4]
 8012afa:	687a      	ldr	r2, [r7, #4]
 8012afc:	6812      	ldr	r2, [r2, #0]
 8012afe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012b06:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	68da      	ldr	r2, [r3, #12]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012b16:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	691a      	ldr	r2, [r3, #16]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	695b      	ldr	r3, [r3, #20]
 8012b20:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	699b      	ldr	r3, [r3, #24]
 8012b28:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	430a      	orrs	r2, r1
 8012b30:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	69d9      	ldr	r1, [r3, #28]
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	6a1a      	ldr	r2, [r3, #32]
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	430a      	orrs	r2, r1
 8012b40:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	681a      	ldr	r2, [r3, #0]
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	f042 0201 	orr.w	r2, r2, #1
 8012b50:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2200      	movs	r2, #0
 8012b56:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2220      	movs	r2, #32
 8012b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2200      	movs	r2, #0
 8012b64:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8012b6e:	2300      	movs	r3, #0
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	3708      	adds	r7, #8
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}

08012b78 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b082      	sub	sp, #8
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d101      	bne.n	8012b8a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8012b86:	2301      	movs	r3, #1
 8012b88:	e021      	b.n	8012bce <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	2224      	movs	r2, #36	@ 0x24
 8012b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	681a      	ldr	r2, [r3, #0]
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	f022 0201 	bic.w	r2, r2, #1
 8012ba0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	f000 f821 	bl	8012bea <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2200      	movs	r2, #0
 8012bac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8012bcc:	2300      	movs	r3, #0
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3708      	adds	r7, #8
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}

08012bd6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8012bd6:	b480      	push	{r7}
 8012bd8:	b083      	sub	sp, #12
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8012bde:	bf00      	nop
 8012be0:	370c      	adds	r7, #12
 8012be2:	46bd      	mov	sp, r7
 8012be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be8:	4770      	bx	lr

08012bea <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8012bea:	b480      	push	{r7}
 8012bec:	b083      	sub	sp, #12
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8012bf2:	bf00      	nop
 8012bf4:	370c      	adds	r7, #12
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfc:	4770      	bx	lr
	...

08012c00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b088      	sub	sp, #32
 8012c04:	af02      	add	r7, sp, #8
 8012c06:	60f8      	str	r0, [r7, #12]
 8012c08:	607a      	str	r2, [r7, #4]
 8012c0a:	461a      	mov	r2, r3
 8012c0c:	460b      	mov	r3, r1
 8012c0e:	817b      	strh	r3, [r7, #10]
 8012c10:	4613      	mov	r3, r2
 8012c12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012c1a:	b2db      	uxtb	r3, r3
 8012c1c:	2b20      	cmp	r3, #32
 8012c1e:	f040 80fd 	bne.w	8012e1c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012c28:	2b01      	cmp	r3, #1
 8012c2a:	d101      	bne.n	8012c30 <HAL_I2C_Master_Transmit+0x30>
 8012c2c:	2302      	movs	r3, #2
 8012c2e:	e0f6      	b.n	8012e1e <HAL_I2C_Master_Transmit+0x21e>
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	2201      	movs	r2, #1
 8012c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8012c38:	f7ff fb82 	bl	8012340 <HAL_GetTick>
 8012c3c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	9300      	str	r3, [sp, #0]
 8012c42:	2319      	movs	r3, #25
 8012c44:	2201      	movs	r2, #1
 8012c46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8012c4a:	68f8      	ldr	r0, [r7, #12]
 8012c4c:	f000 fa24 	bl	8013098 <I2C_WaitOnFlagUntilTimeout>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d001      	beq.n	8012c5a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8012c56:	2301      	movs	r3, #1
 8012c58:	e0e1      	b.n	8012e1e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	2221      	movs	r2, #33	@ 0x21
 8012c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	2210      	movs	r2, #16
 8012c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	687a      	ldr	r2, [r7, #4]
 8012c74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	893a      	ldrh	r2, [r7, #8]
 8012c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	2200      	movs	r2, #0
 8012c80:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	2bff      	cmp	r3, #255	@ 0xff
 8012c8a:	d906      	bls.n	8012c9a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	22ff      	movs	r2, #255	@ 0xff
 8012c90:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8012c92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012c96:	617b      	str	r3, [r7, #20]
 8012c98:	e007      	b.n	8012caa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c9e:	b29a      	uxth	r2, r3
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8012ca4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012ca8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d024      	beq.n	8012cfc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cb6:	781a      	ldrb	r2, [r3, #0]
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cc2:	1c5a      	adds	r2, r3, #1
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012ccc:	b29b      	uxth	r3, r3
 8012cce:	3b01      	subs	r3, #1
 8012cd0:	b29a      	uxth	r2, r3
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012cda:	3b01      	subs	r3, #1
 8012cdc:	b29a      	uxth	r2, r3
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ce6:	b2db      	uxtb	r3, r3
 8012ce8:	3301      	adds	r3, #1
 8012cea:	b2da      	uxtb	r2, r3
 8012cec:	8979      	ldrh	r1, [r7, #10]
 8012cee:	4b4e      	ldr	r3, [pc, #312]	@ (8012e28 <HAL_I2C_Master_Transmit+0x228>)
 8012cf0:	9300      	str	r3, [sp, #0]
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	68f8      	ldr	r0, [r7, #12]
 8012cf6:	f000 fc1f 	bl	8013538 <I2C_TransferConfig>
 8012cfa:	e066      	b.n	8012dca <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d00:	b2da      	uxtb	r2, r3
 8012d02:	8979      	ldrh	r1, [r7, #10]
 8012d04:	4b48      	ldr	r3, [pc, #288]	@ (8012e28 <HAL_I2C_Master_Transmit+0x228>)
 8012d06:	9300      	str	r3, [sp, #0]
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	68f8      	ldr	r0, [r7, #12]
 8012d0c:	f000 fc14 	bl	8013538 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8012d10:	e05b      	b.n	8012dca <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012d12:	693a      	ldr	r2, [r7, #16]
 8012d14:	6a39      	ldr	r1, [r7, #32]
 8012d16:	68f8      	ldr	r0, [r7, #12]
 8012d18:	f000 fa17 	bl	801314a <I2C_WaitOnTXISFlagUntilTimeout>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d001      	beq.n	8012d26 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8012d22:	2301      	movs	r3, #1
 8012d24:	e07b      	b.n	8012e1e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d2a:	781a      	ldrb	r2, [r3, #0]
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d36:	1c5a      	adds	r2, r3, #1
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012d40:	b29b      	uxth	r3, r3
 8012d42:	3b01      	subs	r3, #1
 8012d44:	b29a      	uxth	r2, r3
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d4e:	3b01      	subs	r3, #1
 8012d50:	b29a      	uxth	r2, r3
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012d5a:	b29b      	uxth	r3, r3
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d034      	beq.n	8012dca <HAL_I2C_Master_Transmit+0x1ca>
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d130      	bne.n	8012dca <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	9300      	str	r3, [sp, #0]
 8012d6c:	6a3b      	ldr	r3, [r7, #32]
 8012d6e:	2200      	movs	r2, #0
 8012d70:	2180      	movs	r1, #128	@ 0x80
 8012d72:	68f8      	ldr	r0, [r7, #12]
 8012d74:	f000 f990 	bl	8013098 <I2C_WaitOnFlagUntilTimeout>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d001      	beq.n	8012d82 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8012d7e:	2301      	movs	r3, #1
 8012d80:	e04d      	b.n	8012e1e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012d86:	b29b      	uxth	r3, r3
 8012d88:	2bff      	cmp	r3, #255	@ 0xff
 8012d8a:	d90e      	bls.n	8012daa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	22ff      	movs	r2, #255	@ 0xff
 8012d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d96:	b2da      	uxtb	r2, r3
 8012d98:	8979      	ldrh	r1, [r7, #10]
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	9300      	str	r3, [sp, #0]
 8012d9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012da2:	68f8      	ldr	r0, [r7, #12]
 8012da4:	f000 fbc8 	bl	8013538 <I2C_TransferConfig>
 8012da8:	e00f      	b.n	8012dca <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012dae:	b29a      	uxth	r2, r3
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012db8:	b2da      	uxtb	r2, r3
 8012dba:	8979      	ldrh	r1, [r7, #10]
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	9300      	str	r3, [sp, #0]
 8012dc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012dc4:	68f8      	ldr	r0, [r7, #12]
 8012dc6:	f000 fbb7 	bl	8013538 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012dce:	b29b      	uxth	r3, r3
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d19e      	bne.n	8012d12 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012dd4:	693a      	ldr	r2, [r7, #16]
 8012dd6:	6a39      	ldr	r1, [r7, #32]
 8012dd8:	68f8      	ldr	r0, [r7, #12]
 8012dda:	f000 f9fd 	bl	80131d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012dde:	4603      	mov	r3, r0
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d001      	beq.n	8012de8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8012de4:	2301      	movs	r3, #1
 8012de6:	e01a      	b.n	8012e1e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	2220      	movs	r2, #32
 8012dee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	6859      	ldr	r1, [r3, #4]
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	681a      	ldr	r2, [r3, #0]
 8012dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8012e2c <HAL_I2C_Master_Transmit+0x22c>)
 8012dfc:	400b      	ands	r3, r1
 8012dfe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	2220      	movs	r2, #32
 8012e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	2200      	movs	r2, #0
 8012e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	e000      	b.n	8012e1e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8012e1c:	2302      	movs	r3, #2
  }
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	3718      	adds	r7, #24
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}
 8012e26:	bf00      	nop
 8012e28:	80002000 	.word	0x80002000
 8012e2c:	fe00e800 	.word	0xfe00e800

08012e30 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b088      	sub	sp, #32
 8012e34:	af02      	add	r7, sp, #8
 8012e36:	60f8      	str	r0, [r7, #12]
 8012e38:	607a      	str	r2, [r7, #4]
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	460b      	mov	r3, r1
 8012e3e:	817b      	strh	r3, [r7, #10]
 8012e40:	4613      	mov	r3, r2
 8012e42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012e4a:	b2db      	uxtb	r3, r3
 8012e4c:	2b20      	cmp	r3, #32
 8012e4e:	f040 80db 	bne.w	8013008 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012e58:	2b01      	cmp	r3, #1
 8012e5a:	d101      	bne.n	8012e60 <HAL_I2C_Master_Receive+0x30>
 8012e5c:	2302      	movs	r3, #2
 8012e5e:	e0d4      	b.n	801300a <HAL_I2C_Master_Receive+0x1da>
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	2201      	movs	r2, #1
 8012e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8012e68:	f7ff fa6a 	bl	8012340 <HAL_GetTick>
 8012e6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	9300      	str	r3, [sp, #0]
 8012e72:	2319      	movs	r3, #25
 8012e74:	2201      	movs	r2, #1
 8012e76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8012e7a:	68f8      	ldr	r0, [r7, #12]
 8012e7c:	f000 f90c 	bl	8013098 <I2C_WaitOnFlagUntilTimeout>
 8012e80:	4603      	mov	r3, r0
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d001      	beq.n	8012e8a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8012e86:	2301      	movs	r3, #1
 8012e88:	e0bf      	b.n	801300a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	2222      	movs	r2, #34	@ 0x22
 8012e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	2210      	movs	r2, #16
 8012e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	687a      	ldr	r2, [r7, #4]
 8012ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	893a      	ldrh	r2, [r7, #8]
 8012eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	2200      	movs	r2, #0
 8012eb0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012eb6:	b29b      	uxth	r3, r3
 8012eb8:	2bff      	cmp	r3, #255	@ 0xff
 8012eba:	d90e      	bls.n	8012eda <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	22ff      	movs	r2, #255	@ 0xff
 8012ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ec6:	b2da      	uxtb	r2, r3
 8012ec8:	8979      	ldrh	r1, [r7, #10]
 8012eca:	4b52      	ldr	r3, [pc, #328]	@ (8013014 <HAL_I2C_Master_Receive+0x1e4>)
 8012ecc:	9300      	str	r3, [sp, #0]
 8012ece:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012ed2:	68f8      	ldr	r0, [r7, #12]
 8012ed4:	f000 fb30 	bl	8013538 <I2C_TransferConfig>
 8012ed8:	e06d      	b.n	8012fb6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012ede:	b29a      	uxth	r2, r3
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ee8:	b2da      	uxtb	r2, r3
 8012eea:	8979      	ldrh	r1, [r7, #10]
 8012eec:	4b49      	ldr	r3, [pc, #292]	@ (8013014 <HAL_I2C_Master_Receive+0x1e4>)
 8012eee:	9300      	str	r3, [sp, #0]
 8012ef0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012ef4:	68f8      	ldr	r0, [r7, #12]
 8012ef6:	f000 fb1f 	bl	8013538 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8012efa:	e05c      	b.n	8012fb6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012efc:	697a      	ldr	r2, [r7, #20]
 8012efe:	6a39      	ldr	r1, [r7, #32]
 8012f00:	68f8      	ldr	r0, [r7, #12]
 8012f02:	f000 f9ad 	bl	8013260 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012f06:	4603      	mov	r3, r0
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d001      	beq.n	8012f10 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	e07c      	b.n	801300a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f1a:	b2d2      	uxtb	r2, r2
 8012f1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f22:	1c5a      	adds	r2, r3, #1
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f2c:	3b01      	subs	r3, #1
 8012f2e:	b29a      	uxth	r2, r3
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012f38:	b29b      	uxth	r3, r3
 8012f3a:	3b01      	subs	r3, #1
 8012f3c:	b29a      	uxth	r2, r3
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012f46:	b29b      	uxth	r3, r3
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d034      	beq.n	8012fb6 <HAL_I2C_Master_Receive+0x186>
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d130      	bne.n	8012fb6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	9300      	str	r3, [sp, #0]
 8012f58:	6a3b      	ldr	r3, [r7, #32]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	2180      	movs	r1, #128	@ 0x80
 8012f5e:	68f8      	ldr	r0, [r7, #12]
 8012f60:	f000 f89a 	bl	8013098 <I2C_WaitOnFlagUntilTimeout>
 8012f64:	4603      	mov	r3, r0
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d001      	beq.n	8012f6e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	e04d      	b.n	801300a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	2bff      	cmp	r3, #255	@ 0xff
 8012f76:	d90e      	bls.n	8012f96 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	22ff      	movs	r2, #255	@ 0xff
 8012f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f82:	b2da      	uxtb	r2, r3
 8012f84:	8979      	ldrh	r1, [r7, #10]
 8012f86:	2300      	movs	r3, #0
 8012f88:	9300      	str	r3, [sp, #0]
 8012f8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012f8e:	68f8      	ldr	r0, [r7, #12]
 8012f90:	f000 fad2 	bl	8013538 <I2C_TransferConfig>
 8012f94:	e00f      	b.n	8012fb6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012f9a:	b29a      	uxth	r2, r3
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012fa4:	b2da      	uxtb	r2, r3
 8012fa6:	8979      	ldrh	r1, [r7, #10]
 8012fa8:	2300      	movs	r3, #0
 8012faa:	9300      	str	r3, [sp, #0]
 8012fac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012fb0:	68f8      	ldr	r0, [r7, #12]
 8012fb2:	f000 fac1 	bl	8013538 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d19d      	bne.n	8012efc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012fc0:	697a      	ldr	r2, [r7, #20]
 8012fc2:	6a39      	ldr	r1, [r7, #32]
 8012fc4:	68f8      	ldr	r0, [r7, #12]
 8012fc6:	f000 f907 	bl	80131d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d001      	beq.n	8012fd4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	e01a      	b.n	801300a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	2220      	movs	r2, #32
 8012fda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	6859      	ldr	r1, [r3, #4]
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	681a      	ldr	r2, [r3, #0]
 8012fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8013018 <HAL_I2C_Master_Receive+0x1e8>)
 8012fe8:	400b      	ands	r3, r1
 8012fea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	2220      	movs	r2, #32
 8012ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	2200      	movs	r2, #0
 8013000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8013004:	2300      	movs	r3, #0
 8013006:	e000      	b.n	801300a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8013008:	2302      	movs	r3, #2
  }
}
 801300a:	4618      	mov	r0, r3
 801300c:	3718      	adds	r7, #24
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}
 8013012:	bf00      	nop
 8013014:	80002400 	.word	0x80002400
 8013018:	fe00e800 	.word	0xfe00e800

0801301c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 801301c:	b480      	push	{r7}
 801301e:	b083      	sub	sp, #12
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801302a:	b2db      	uxtb	r3, r3
}
 801302c:	4618      	mov	r0, r3
 801302e:	370c      	adds	r7, #12
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr

08013038 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8013038:	b480      	push	{r7}
 801303a:	b083      	sub	sp, #12
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8013044:	4618      	mov	r0, r3
 8013046:	370c      	adds	r7, #12
 8013048:	46bd      	mov	sp, r7
 801304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304e:	4770      	bx	lr

08013050 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8013050:	b480      	push	{r7}
 8013052:	b083      	sub	sp, #12
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	699b      	ldr	r3, [r3, #24]
 801305e:	f003 0302 	and.w	r3, r3, #2
 8013062:	2b02      	cmp	r3, #2
 8013064:	d103      	bne.n	801306e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	2200      	movs	r2, #0
 801306c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	699b      	ldr	r3, [r3, #24]
 8013074:	f003 0301 	and.w	r3, r3, #1
 8013078:	2b01      	cmp	r3, #1
 801307a:	d007      	beq.n	801308c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	699a      	ldr	r2, [r3, #24]
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	f042 0201 	orr.w	r2, r2, #1
 801308a:	619a      	str	r2, [r3, #24]
  }
}
 801308c:	bf00      	nop
 801308e:	370c      	adds	r7, #12
 8013090:	46bd      	mov	sp, r7
 8013092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013096:	4770      	bx	lr

08013098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b084      	sub	sp, #16
 801309c:	af00      	add	r7, sp, #0
 801309e:	60f8      	str	r0, [r7, #12]
 80130a0:	60b9      	str	r1, [r7, #8]
 80130a2:	603b      	str	r3, [r7, #0]
 80130a4:	4613      	mov	r3, r2
 80130a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80130a8:	e03b      	b.n	8013122 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80130aa:	69ba      	ldr	r2, [r7, #24]
 80130ac:	6839      	ldr	r1, [r7, #0]
 80130ae:	68f8      	ldr	r0, [r7, #12]
 80130b0:	f000 f962 	bl	8013378 <I2C_IsErrorOccurred>
 80130b4:	4603      	mov	r3, r0
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d001      	beq.n	80130be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80130ba:	2301      	movs	r3, #1
 80130bc:	e041      	b.n	8013142 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130c4:	d02d      	beq.n	8013122 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80130c6:	f7ff f93b 	bl	8012340 <HAL_GetTick>
 80130ca:	4602      	mov	r2, r0
 80130cc:	69bb      	ldr	r3, [r7, #24]
 80130ce:	1ad3      	subs	r3, r2, r3
 80130d0:	683a      	ldr	r2, [r7, #0]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d302      	bcc.n	80130dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d122      	bne.n	8013122 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	699a      	ldr	r2, [r3, #24]
 80130e2:	68bb      	ldr	r3, [r7, #8]
 80130e4:	4013      	ands	r3, r2
 80130e6:	68ba      	ldr	r2, [r7, #8]
 80130e8:	429a      	cmp	r2, r3
 80130ea:	bf0c      	ite	eq
 80130ec:	2301      	moveq	r3, #1
 80130ee:	2300      	movne	r3, #0
 80130f0:	b2db      	uxtb	r3, r3
 80130f2:	461a      	mov	r2, r3
 80130f4:	79fb      	ldrb	r3, [r7, #7]
 80130f6:	429a      	cmp	r2, r3
 80130f8:	d113      	bne.n	8013122 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80130fe:	f043 0220 	orr.w	r2, r3, #32
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	2220      	movs	r2, #32
 801310a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	2200      	movs	r2, #0
 8013112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	2200      	movs	r2, #0
 801311a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 801311e:	2301      	movs	r3, #1
 8013120:	e00f      	b.n	8013142 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	699a      	ldr	r2, [r3, #24]
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	4013      	ands	r3, r2
 801312c:	68ba      	ldr	r2, [r7, #8]
 801312e:	429a      	cmp	r2, r3
 8013130:	bf0c      	ite	eq
 8013132:	2301      	moveq	r3, #1
 8013134:	2300      	movne	r3, #0
 8013136:	b2db      	uxtb	r3, r3
 8013138:	461a      	mov	r2, r3
 801313a:	79fb      	ldrb	r3, [r7, #7]
 801313c:	429a      	cmp	r2, r3
 801313e:	d0b4      	beq.n	80130aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013140:	2300      	movs	r3, #0
}
 8013142:	4618      	mov	r0, r3
 8013144:	3710      	adds	r7, #16
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}

0801314a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801314a:	b580      	push	{r7, lr}
 801314c:	b084      	sub	sp, #16
 801314e:	af00      	add	r7, sp, #0
 8013150:	60f8      	str	r0, [r7, #12]
 8013152:	60b9      	str	r1, [r7, #8]
 8013154:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8013156:	e033      	b.n	80131c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8013158:	687a      	ldr	r2, [r7, #4]
 801315a:	68b9      	ldr	r1, [r7, #8]
 801315c:	68f8      	ldr	r0, [r7, #12]
 801315e:	f000 f90b 	bl	8013378 <I2C_IsErrorOccurred>
 8013162:	4603      	mov	r3, r0
 8013164:	2b00      	cmp	r3, #0
 8013166:	d001      	beq.n	801316c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8013168:	2301      	movs	r3, #1
 801316a:	e031      	b.n	80131d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013172:	d025      	beq.n	80131c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013174:	f7ff f8e4 	bl	8012340 <HAL_GetTick>
 8013178:	4602      	mov	r2, r0
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	1ad3      	subs	r3, r2, r3
 801317e:	68ba      	ldr	r2, [r7, #8]
 8013180:	429a      	cmp	r2, r3
 8013182:	d302      	bcc.n	801318a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8013184:	68bb      	ldr	r3, [r7, #8]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d11a      	bne.n	80131c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	699b      	ldr	r3, [r3, #24]
 8013190:	f003 0302 	and.w	r3, r3, #2
 8013194:	2b02      	cmp	r3, #2
 8013196:	d013      	beq.n	80131c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801319c:	f043 0220 	orr.w	r2, r3, #32
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	2220      	movs	r2, #32
 80131a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	2200      	movs	r2, #0
 80131b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	2200      	movs	r2, #0
 80131b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80131bc:	2301      	movs	r3, #1
 80131be:	e007      	b.n	80131d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	699b      	ldr	r3, [r3, #24]
 80131c6:	f003 0302 	and.w	r3, r3, #2
 80131ca:	2b02      	cmp	r3, #2
 80131cc:	d1c4      	bne.n	8013158 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80131ce:	2300      	movs	r3, #0
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	3710      	adds	r7, #16
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}

080131d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b084      	sub	sp, #16
 80131dc:	af00      	add	r7, sp, #0
 80131de:	60f8      	str	r0, [r7, #12]
 80131e0:	60b9      	str	r1, [r7, #8]
 80131e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80131e4:	e02f      	b.n	8013246 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80131e6:	687a      	ldr	r2, [r7, #4]
 80131e8:	68b9      	ldr	r1, [r7, #8]
 80131ea:	68f8      	ldr	r0, [r7, #12]
 80131ec:	f000 f8c4 	bl	8013378 <I2C_IsErrorOccurred>
 80131f0:	4603      	mov	r3, r0
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d001      	beq.n	80131fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80131f6:	2301      	movs	r3, #1
 80131f8:	e02d      	b.n	8013256 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80131fa:	f7ff f8a1 	bl	8012340 <HAL_GetTick>
 80131fe:	4602      	mov	r2, r0
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	1ad3      	subs	r3, r2, r3
 8013204:	68ba      	ldr	r2, [r7, #8]
 8013206:	429a      	cmp	r2, r3
 8013208:	d302      	bcc.n	8013210 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d11a      	bne.n	8013246 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	699b      	ldr	r3, [r3, #24]
 8013216:	f003 0320 	and.w	r3, r3, #32
 801321a:	2b20      	cmp	r3, #32
 801321c:	d013      	beq.n	8013246 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013222:	f043 0220 	orr.w	r2, r3, #32
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	2220      	movs	r2, #32
 801322e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	2200      	movs	r2, #0
 8013236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	2200      	movs	r2, #0
 801323e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8013242:	2301      	movs	r3, #1
 8013244:	e007      	b.n	8013256 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	699b      	ldr	r3, [r3, #24]
 801324c:	f003 0320 	and.w	r3, r3, #32
 8013250:	2b20      	cmp	r3, #32
 8013252:	d1c8      	bne.n	80131e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013254:	2300      	movs	r3, #0
}
 8013256:	4618      	mov	r0, r3
 8013258:	3710      	adds	r7, #16
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
	...

08013260 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b086      	sub	sp, #24
 8013264:	af00      	add	r7, sp, #0
 8013266:	60f8      	str	r0, [r7, #12]
 8013268:	60b9      	str	r1, [r7, #8]
 801326a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801326c:	2300      	movs	r3, #0
 801326e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8013270:	e071      	b.n	8013356 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8013272:	687a      	ldr	r2, [r7, #4]
 8013274:	68b9      	ldr	r1, [r7, #8]
 8013276:	68f8      	ldr	r0, [r7, #12]
 8013278:	f000 f87e 	bl	8013378 <I2C_IsErrorOccurred>
 801327c:	4603      	mov	r3, r0
 801327e:	2b00      	cmp	r3, #0
 8013280:	d001      	beq.n	8013286 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8013282:	2301      	movs	r3, #1
 8013284:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	699b      	ldr	r3, [r3, #24]
 801328c:	f003 0320 	and.w	r3, r3, #32
 8013290:	2b20      	cmp	r3, #32
 8013292:	d13b      	bne.n	801330c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8013294:	7dfb      	ldrb	r3, [r7, #23]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d138      	bne.n	801330c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	699b      	ldr	r3, [r3, #24]
 80132a0:	f003 0304 	and.w	r3, r3, #4
 80132a4:	2b04      	cmp	r3, #4
 80132a6:	d105      	bne.n	80132b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d001      	beq.n	80132b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80132b0:	2300      	movs	r3, #0
 80132b2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	699b      	ldr	r3, [r3, #24]
 80132ba:	f003 0310 	and.w	r3, r3, #16
 80132be:	2b10      	cmp	r3, #16
 80132c0:	d121      	bne.n	8013306 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	2210      	movs	r2, #16
 80132c8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	2204      	movs	r2, #4
 80132ce:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	2220      	movs	r2, #32
 80132d6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	6859      	ldr	r1, [r3, #4]
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	681a      	ldr	r2, [r3, #0]
 80132e2:	4b24      	ldr	r3, [pc, #144]	@ (8013374 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80132e4:	400b      	ands	r3, r1
 80132e6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2220      	movs	r2, #32
 80132ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	2200      	movs	r2, #0
 80132f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	2200      	movs	r2, #0
 80132fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8013300:	2301      	movs	r3, #1
 8013302:	75fb      	strb	r3, [r7, #23]
 8013304:	e002      	b.n	801330c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	2200      	movs	r2, #0
 801330a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 801330c:	f7ff f818 	bl	8012340 <HAL_GetTick>
 8013310:	4602      	mov	r2, r0
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	1ad3      	subs	r3, r2, r3
 8013316:	68ba      	ldr	r2, [r7, #8]
 8013318:	429a      	cmp	r2, r3
 801331a:	d302      	bcc.n	8013322 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 801331c:	68bb      	ldr	r3, [r7, #8]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d119      	bne.n	8013356 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8013322:	7dfb      	ldrb	r3, [r7, #23]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d116      	bne.n	8013356 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	699b      	ldr	r3, [r3, #24]
 801332e:	f003 0304 	and.w	r3, r3, #4
 8013332:	2b04      	cmp	r3, #4
 8013334:	d00f      	beq.n	8013356 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801333a:	f043 0220 	orr.w	r2, r3, #32
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	2220      	movs	r2, #32
 8013346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	2200      	movs	r2, #0
 801334e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8013352:	2301      	movs	r3, #1
 8013354:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	699b      	ldr	r3, [r3, #24]
 801335c:	f003 0304 	and.w	r3, r3, #4
 8013360:	2b04      	cmp	r3, #4
 8013362:	d002      	beq.n	801336a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8013364:	7dfb      	ldrb	r3, [r7, #23]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d083      	beq.n	8013272 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 801336a:	7dfb      	ldrb	r3, [r7, #23]
}
 801336c:	4618      	mov	r0, r3
 801336e:	3718      	adds	r7, #24
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	fe00e800 	.word	0xfe00e800

08013378 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b08a      	sub	sp, #40	@ 0x28
 801337c:	af00      	add	r7, sp, #0
 801337e:	60f8      	str	r0, [r7, #12]
 8013380:	60b9      	str	r1, [r7, #8]
 8013382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013384:	2300      	movs	r3, #0
 8013386:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	699b      	ldr	r3, [r3, #24]
 8013390:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8013392:	2300      	movs	r3, #0
 8013394:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801339a:	69bb      	ldr	r3, [r7, #24]
 801339c:	f003 0310 	and.w	r3, r3, #16
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d068      	beq.n	8013476 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	2210      	movs	r2, #16
 80133aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80133ac:	e049      	b.n	8013442 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133b4:	d045      	beq.n	8013442 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80133b6:	f7fe ffc3 	bl	8012340 <HAL_GetTick>
 80133ba:	4602      	mov	r2, r0
 80133bc:	69fb      	ldr	r3, [r7, #28]
 80133be:	1ad3      	subs	r3, r2, r3
 80133c0:	68ba      	ldr	r2, [r7, #8]
 80133c2:	429a      	cmp	r2, r3
 80133c4:	d302      	bcc.n	80133cc <I2C_IsErrorOccurred+0x54>
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d13a      	bne.n	8013442 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	685b      	ldr	r3, [r3, #4]
 80133d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80133d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80133de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	699b      	ldr	r3, [r3, #24]
 80133e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80133ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80133ee:	d121      	bne.n	8013434 <I2C_IsErrorOccurred+0xbc>
 80133f0:	697b      	ldr	r3, [r7, #20]
 80133f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80133f6:	d01d      	beq.n	8013434 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80133f8:	7cfb      	ldrb	r3, [r7, #19]
 80133fa:	2b20      	cmp	r3, #32
 80133fc:	d01a      	beq.n	8013434 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	685a      	ldr	r2, [r3, #4]
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801340c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801340e:	f7fe ff97 	bl	8012340 <HAL_GetTick>
 8013412:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013414:	e00e      	b.n	8013434 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8013416:	f7fe ff93 	bl	8012340 <HAL_GetTick>
 801341a:	4602      	mov	r2, r0
 801341c:	69fb      	ldr	r3, [r7, #28]
 801341e:	1ad3      	subs	r3, r2, r3
 8013420:	2b19      	cmp	r3, #25
 8013422:	d907      	bls.n	8013434 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8013424:	6a3b      	ldr	r3, [r7, #32]
 8013426:	f043 0320 	orr.w	r3, r3, #32
 801342a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801342c:	2301      	movs	r3, #1
 801342e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8013432:	e006      	b.n	8013442 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	699b      	ldr	r3, [r3, #24]
 801343a:	f003 0320 	and.w	r3, r3, #32
 801343e:	2b20      	cmp	r3, #32
 8013440:	d1e9      	bne.n	8013416 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	699b      	ldr	r3, [r3, #24]
 8013448:	f003 0320 	and.w	r3, r3, #32
 801344c:	2b20      	cmp	r3, #32
 801344e:	d003      	beq.n	8013458 <I2C_IsErrorOccurred+0xe0>
 8013450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013454:	2b00      	cmp	r3, #0
 8013456:	d0aa      	beq.n	80133ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8013458:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801345c:	2b00      	cmp	r3, #0
 801345e:	d103      	bne.n	8013468 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	2220      	movs	r2, #32
 8013466:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8013468:	6a3b      	ldr	r3, [r7, #32]
 801346a:	f043 0304 	orr.w	r3, r3, #4
 801346e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8013470:	2301      	movs	r3, #1
 8013472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	699b      	ldr	r3, [r3, #24]
 801347c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801347e:	69bb      	ldr	r3, [r7, #24]
 8013480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013484:	2b00      	cmp	r3, #0
 8013486:	d00b      	beq.n	80134a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8013488:	6a3b      	ldr	r3, [r7, #32]
 801348a:	f043 0301 	orr.w	r3, r3, #1
 801348e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013498:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801349a:	2301      	movs	r3, #1
 801349c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80134a0:	69bb      	ldr	r3, [r7, #24]
 80134a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d00b      	beq.n	80134c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80134aa:	6a3b      	ldr	r3, [r7, #32]
 80134ac:	f043 0308 	orr.w	r3, r3, #8
 80134b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80134ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80134bc:	2301      	movs	r3, #1
 80134be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80134c2:	69bb      	ldr	r3, [r7, #24]
 80134c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d00b      	beq.n	80134e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80134cc:	6a3b      	ldr	r3, [r7, #32]
 80134ce:	f043 0302 	orr.w	r3, r3, #2
 80134d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80134dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80134de:	2301      	movs	r3, #1
 80134e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80134e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d01c      	beq.n	8013526 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80134ec:	68f8      	ldr	r0, [r7, #12]
 80134ee:	f7ff fdaf 	bl	8013050 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	6859      	ldr	r1, [r3, #4]
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	681a      	ldr	r2, [r3, #0]
 80134fc:	4b0d      	ldr	r3, [pc, #52]	@ (8013534 <I2C_IsErrorOccurred+0x1bc>)
 80134fe:	400b      	ands	r3, r1
 8013500:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013506:	6a3b      	ldr	r3, [r7, #32]
 8013508:	431a      	orrs	r2, r3
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	2220      	movs	r2, #32
 8013512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	2200      	movs	r2, #0
 801351a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	2200      	movs	r2, #0
 8013522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8013526:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801352a:	4618      	mov	r0, r3
 801352c:	3728      	adds	r7, #40	@ 0x28
 801352e:	46bd      	mov	sp, r7
 8013530:	bd80      	pop	{r7, pc}
 8013532:	bf00      	nop
 8013534:	fe00e800 	.word	0xfe00e800

08013538 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8013538:	b480      	push	{r7}
 801353a:	b087      	sub	sp, #28
 801353c:	af00      	add	r7, sp, #0
 801353e:	60f8      	str	r0, [r7, #12]
 8013540:	607b      	str	r3, [r7, #4]
 8013542:	460b      	mov	r3, r1
 8013544:	817b      	strh	r3, [r7, #10]
 8013546:	4613      	mov	r3, r2
 8013548:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801354a:	897b      	ldrh	r3, [r7, #10]
 801354c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8013550:	7a7b      	ldrb	r3, [r7, #9]
 8013552:	041b      	lsls	r3, r3, #16
 8013554:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8013558:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801355e:	6a3b      	ldr	r3, [r7, #32]
 8013560:	4313      	orrs	r3, r2
 8013562:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013566:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	685a      	ldr	r2, [r3, #4]
 801356e:	6a3b      	ldr	r3, [r7, #32]
 8013570:	0d5b      	lsrs	r3, r3, #21
 8013572:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8013576:	4b08      	ldr	r3, [pc, #32]	@ (8013598 <I2C_TransferConfig+0x60>)
 8013578:	430b      	orrs	r3, r1
 801357a:	43db      	mvns	r3, r3
 801357c:	ea02 0103 	and.w	r1, r2, r3
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	697a      	ldr	r2, [r7, #20]
 8013586:	430a      	orrs	r2, r1
 8013588:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801358a:	bf00      	nop
 801358c:	371c      	adds	r7, #28
 801358e:	46bd      	mov	sp, r7
 8013590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013594:	4770      	bx	lr
 8013596:	bf00      	nop
 8013598:	03ff63ff 	.word	0x03ff63ff

0801359c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801359c:	b480      	push	{r7}
 801359e:	b083      	sub	sp, #12
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80135ac:	b2db      	uxtb	r3, r3
 80135ae:	2b20      	cmp	r3, #32
 80135b0:	d138      	bne.n	8013624 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80135b8:	2b01      	cmp	r3, #1
 80135ba:	d101      	bne.n	80135c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80135bc:	2302      	movs	r3, #2
 80135be:	e032      	b.n	8013626 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2201      	movs	r2, #1
 80135c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2224      	movs	r2, #36	@ 0x24
 80135cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	681a      	ldr	r2, [r3, #0]
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	f022 0201 	bic.w	r2, r2, #1
 80135de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	681a      	ldr	r2, [r3, #0]
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80135ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	6819      	ldr	r1, [r3, #0]
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	683a      	ldr	r2, [r7, #0]
 80135fc:	430a      	orrs	r2, r1
 80135fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	681a      	ldr	r2, [r3, #0]
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	f042 0201 	orr.w	r2, r2, #1
 801360e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2220      	movs	r2, #32
 8013614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	2200      	movs	r2, #0
 801361c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8013620:	2300      	movs	r3, #0
 8013622:	e000      	b.n	8013626 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013624:	2302      	movs	r3, #2
  }
}
 8013626:	4618      	mov	r0, r3
 8013628:	370c      	adds	r7, #12
 801362a:	46bd      	mov	sp, r7
 801362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013630:	4770      	bx	lr

08013632 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8013632:	b480      	push	{r7}
 8013634:	b085      	sub	sp, #20
 8013636:	af00      	add	r7, sp, #0
 8013638:	6078      	str	r0, [r7, #4]
 801363a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013642:	b2db      	uxtb	r3, r3
 8013644:	2b20      	cmp	r3, #32
 8013646:	d139      	bne.n	80136bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801364e:	2b01      	cmp	r3, #1
 8013650:	d101      	bne.n	8013656 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8013652:	2302      	movs	r3, #2
 8013654:	e033      	b.n	80136be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2201      	movs	r2, #1
 801365a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	2224      	movs	r2, #36	@ 0x24
 8013662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	681a      	ldr	r2, [r3, #0]
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	f022 0201 	bic.w	r2, r2, #1
 8013674:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8013684:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8013686:	683b      	ldr	r3, [r7, #0]
 8013688:	021b      	lsls	r3, r3, #8
 801368a:	68fa      	ldr	r2, [r7, #12]
 801368c:	4313      	orrs	r3, r2
 801368e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	68fa      	ldr	r2, [r7, #12]
 8013696:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	681a      	ldr	r2, [r3, #0]
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	f042 0201 	orr.w	r2, r2, #1
 80136a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2220      	movs	r2, #32
 80136ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	2200      	movs	r2, #0
 80136b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80136b8:	2300      	movs	r3, #0
 80136ba:	e000      	b.n	80136be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80136bc:	2302      	movs	r3, #2
  }
}
 80136be:	4618      	mov	r0, r3
 80136c0:	3714      	adds	r7, #20
 80136c2:	46bd      	mov	sp, r7
 80136c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c8:	4770      	bx	lr

080136ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80136ca:	b580      	push	{r7, lr}
 80136cc:	b084      	sub	sp, #16
 80136ce:	af00      	add	r7, sp, #0
 80136d0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d101      	bne.n	80136dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80136d8:	2301      	movs	r3, #1
 80136da:	e0c0      	b.n	801385e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80136e2:	b2db      	uxtb	r3, r3
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d106      	bne.n	80136f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	2200      	movs	r2, #0
 80136ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	f7ed fbbd 	bl	8000e70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	2203      	movs	r2, #3
 80136fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	4618      	mov	r0, r3
 8013704:	f002 ff20 	bl	8016548 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013708:	2300      	movs	r3, #0
 801370a:	73fb      	strb	r3, [r7, #15]
 801370c:	e03e      	b.n	801378c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801370e:	7bfa      	ldrb	r2, [r7, #15]
 8013710:	6879      	ldr	r1, [r7, #4]
 8013712:	4613      	mov	r3, r2
 8013714:	009b      	lsls	r3, r3, #2
 8013716:	4413      	add	r3, r2
 8013718:	00db      	lsls	r3, r3, #3
 801371a:	440b      	add	r3, r1
 801371c:	3311      	adds	r3, #17
 801371e:	2201      	movs	r2, #1
 8013720:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8013722:	7bfa      	ldrb	r2, [r7, #15]
 8013724:	6879      	ldr	r1, [r7, #4]
 8013726:	4613      	mov	r3, r2
 8013728:	009b      	lsls	r3, r3, #2
 801372a:	4413      	add	r3, r2
 801372c:	00db      	lsls	r3, r3, #3
 801372e:	440b      	add	r3, r1
 8013730:	3310      	adds	r3, #16
 8013732:	7bfa      	ldrb	r2, [r7, #15]
 8013734:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8013736:	7bfa      	ldrb	r2, [r7, #15]
 8013738:	6879      	ldr	r1, [r7, #4]
 801373a:	4613      	mov	r3, r2
 801373c:	009b      	lsls	r3, r3, #2
 801373e:	4413      	add	r3, r2
 8013740:	00db      	lsls	r3, r3, #3
 8013742:	440b      	add	r3, r1
 8013744:	3313      	adds	r3, #19
 8013746:	2200      	movs	r2, #0
 8013748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801374a:	7bfa      	ldrb	r2, [r7, #15]
 801374c:	6879      	ldr	r1, [r7, #4]
 801374e:	4613      	mov	r3, r2
 8013750:	009b      	lsls	r3, r3, #2
 8013752:	4413      	add	r3, r2
 8013754:	00db      	lsls	r3, r3, #3
 8013756:	440b      	add	r3, r1
 8013758:	3320      	adds	r3, #32
 801375a:	2200      	movs	r2, #0
 801375c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801375e:	7bfa      	ldrb	r2, [r7, #15]
 8013760:	6879      	ldr	r1, [r7, #4]
 8013762:	4613      	mov	r3, r2
 8013764:	009b      	lsls	r3, r3, #2
 8013766:	4413      	add	r3, r2
 8013768:	00db      	lsls	r3, r3, #3
 801376a:	440b      	add	r3, r1
 801376c:	3324      	adds	r3, #36	@ 0x24
 801376e:	2200      	movs	r2, #0
 8013770:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8013772:	7bfb      	ldrb	r3, [r7, #15]
 8013774:	6879      	ldr	r1, [r7, #4]
 8013776:	1c5a      	adds	r2, r3, #1
 8013778:	4613      	mov	r3, r2
 801377a:	009b      	lsls	r3, r3, #2
 801377c:	4413      	add	r3, r2
 801377e:	00db      	lsls	r3, r3, #3
 8013780:	440b      	add	r3, r1
 8013782:	2200      	movs	r2, #0
 8013784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013786:	7bfb      	ldrb	r3, [r7, #15]
 8013788:	3301      	adds	r3, #1
 801378a:	73fb      	strb	r3, [r7, #15]
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	791b      	ldrb	r3, [r3, #4]
 8013790:	7bfa      	ldrb	r2, [r7, #15]
 8013792:	429a      	cmp	r2, r3
 8013794:	d3bb      	bcc.n	801370e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013796:	2300      	movs	r3, #0
 8013798:	73fb      	strb	r3, [r7, #15]
 801379a:	e044      	b.n	8013826 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801379c:	7bfa      	ldrb	r2, [r7, #15]
 801379e:	6879      	ldr	r1, [r7, #4]
 80137a0:	4613      	mov	r3, r2
 80137a2:	009b      	lsls	r3, r3, #2
 80137a4:	4413      	add	r3, r2
 80137a6:	00db      	lsls	r3, r3, #3
 80137a8:	440b      	add	r3, r1
 80137aa:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80137ae:	2200      	movs	r2, #0
 80137b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80137b2:	7bfa      	ldrb	r2, [r7, #15]
 80137b4:	6879      	ldr	r1, [r7, #4]
 80137b6:	4613      	mov	r3, r2
 80137b8:	009b      	lsls	r3, r3, #2
 80137ba:	4413      	add	r3, r2
 80137bc:	00db      	lsls	r3, r3, #3
 80137be:	440b      	add	r3, r1
 80137c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80137c4:	7bfa      	ldrb	r2, [r7, #15]
 80137c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80137c8:	7bfa      	ldrb	r2, [r7, #15]
 80137ca:	6879      	ldr	r1, [r7, #4]
 80137cc:	4613      	mov	r3, r2
 80137ce:	009b      	lsls	r3, r3, #2
 80137d0:	4413      	add	r3, r2
 80137d2:	00db      	lsls	r3, r3, #3
 80137d4:	440b      	add	r3, r1
 80137d6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80137da:	2200      	movs	r2, #0
 80137dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80137de:	7bfa      	ldrb	r2, [r7, #15]
 80137e0:	6879      	ldr	r1, [r7, #4]
 80137e2:	4613      	mov	r3, r2
 80137e4:	009b      	lsls	r3, r3, #2
 80137e6:	4413      	add	r3, r2
 80137e8:	00db      	lsls	r3, r3, #3
 80137ea:	440b      	add	r3, r1
 80137ec:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80137f0:	2200      	movs	r2, #0
 80137f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80137f4:	7bfa      	ldrb	r2, [r7, #15]
 80137f6:	6879      	ldr	r1, [r7, #4]
 80137f8:	4613      	mov	r3, r2
 80137fa:	009b      	lsls	r3, r3, #2
 80137fc:	4413      	add	r3, r2
 80137fe:	00db      	lsls	r3, r3, #3
 8013800:	440b      	add	r3, r1
 8013802:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013806:	2200      	movs	r2, #0
 8013808:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801380a:	7bfa      	ldrb	r2, [r7, #15]
 801380c:	6879      	ldr	r1, [r7, #4]
 801380e:	4613      	mov	r3, r2
 8013810:	009b      	lsls	r3, r3, #2
 8013812:	4413      	add	r3, r2
 8013814:	00db      	lsls	r3, r3, #3
 8013816:	440b      	add	r3, r1
 8013818:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 801381c:	2200      	movs	r2, #0
 801381e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013820:	7bfb      	ldrb	r3, [r7, #15]
 8013822:	3301      	adds	r3, #1
 8013824:	73fb      	strb	r3, [r7, #15]
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	791b      	ldrb	r3, [r3, #4]
 801382a:	7bfa      	ldrb	r2, [r7, #15]
 801382c:	429a      	cmp	r2, r3
 801382e:	d3b5      	bcc.n	801379c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6818      	ldr	r0, [r3, #0]
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	3304      	adds	r3, #4
 8013838:	e893 0006 	ldmia.w	r3, {r1, r2}
 801383c:	f002 fe9f 	bl	801657e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	2200      	movs	r2, #0
 8013844:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2201      	movs	r2, #1
 801384a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	7a9b      	ldrb	r3, [r3, #10]
 8013852:	2b01      	cmp	r3, #1
 8013854:	d102      	bne.n	801385c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f000 f805 	bl	8013866 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801385c:	2300      	movs	r3, #0
}
 801385e:	4618      	mov	r0, r3
 8013860:	3710      	adds	r7, #16
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}

08013866 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8013866:	b480      	push	{r7}
 8013868:	b085      	sub	sp, #20
 801386a:	af00      	add	r7, sp, #0
 801386c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2201      	movs	r2, #1
 8013878:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	2200      	movs	r2, #0
 8013880:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 801388a:	b29b      	uxth	r3, r3
 801388c:	f043 0301 	orr.w	r3, r3, #1
 8013890:	b29a      	uxth	r2, r3
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 801389e:	b29b      	uxth	r3, r3
 80138a0:	f043 0302 	orr.w	r3, r3, #2
 80138a4:	b29a      	uxth	r2, r3
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80138ac:	2300      	movs	r3, #0
}
 80138ae:	4618      	mov	r0, r3
 80138b0:	3714      	adds	r7, #20
 80138b2:	46bd      	mov	sp, r7
 80138b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b8:	4770      	bx	lr
	...

080138bc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80138bc:	b480      	push	{r7}
 80138be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80138c0:	4b05      	ldr	r3, [pc, #20]	@ (80138d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	4a04      	ldr	r2, [pc, #16]	@ (80138d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80138c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80138ca:	6013      	str	r3, [r2, #0]
}
 80138cc:	bf00      	nop
 80138ce:	46bd      	mov	sp, r7
 80138d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d4:	4770      	bx	lr
 80138d6:	bf00      	nop
 80138d8:	58000400 	.word	0x58000400

080138dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80138dc:	b480      	push	{r7}
 80138de:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80138e0:	4b04      	ldr	r3, [pc, #16]	@ (80138f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80138e8:	4618      	mov	r0, r3
 80138ea:	46bd      	mov	sp, r7
 80138ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f0:	4770      	bx	lr
 80138f2:	bf00      	nop
 80138f4:	58000400 	.word	0x58000400

080138f8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80138f8:	b480      	push	{r7}
 80138fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80138fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801390a:	d101      	bne.n	8013910 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 801390c:	2301      	movs	r3, #1
 801390e:	e000      	b.n	8013912 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8013910:	2300      	movs	r3, #0
}
 8013912:	4618      	mov	r0, r3
 8013914:	46bd      	mov	sp, r7
 8013916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391a:	4770      	bx	lr

0801391c <LL_RCC_HSE_Enable>:
{
 801391c:	b480      	push	{r7}
 801391e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8013920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801392a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801392e:	6013      	str	r3, [r2, #0]
}
 8013930:	bf00      	nop
 8013932:	46bd      	mov	sp, r7
 8013934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013938:	4770      	bx	lr

0801393a <LL_RCC_HSE_Disable>:
{
 801393a:	b480      	push	{r7}
 801393c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 801393e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801394c:	6013      	str	r3, [r2, #0]
}
 801394e:	bf00      	nop
 8013950:	46bd      	mov	sp, r7
 8013952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013956:	4770      	bx	lr

08013958 <LL_RCC_HSE_IsReady>:
{
 8013958:	b480      	push	{r7}
 801395a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 801395c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801396a:	d101      	bne.n	8013970 <LL_RCC_HSE_IsReady+0x18>
 801396c:	2301      	movs	r3, #1
 801396e:	e000      	b.n	8013972 <LL_RCC_HSE_IsReady+0x1a>
 8013970:	2300      	movs	r3, #0
}
 8013972:	4618      	mov	r0, r3
 8013974:	46bd      	mov	sp, r7
 8013976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397a:	4770      	bx	lr

0801397c <LL_RCC_HSI_Enable>:
{
 801397c:	b480      	push	{r7}
 801397e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8013980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801398a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801398e:	6013      	str	r3, [r2, #0]
}
 8013990:	bf00      	nop
 8013992:	46bd      	mov	sp, r7
 8013994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013998:	4770      	bx	lr

0801399a <LL_RCC_HSI_Disable>:
{
 801399a:	b480      	push	{r7}
 801399c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 801399e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80139a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80139ac:	6013      	str	r3, [r2, #0]
}
 80139ae:	bf00      	nop
 80139b0:	46bd      	mov	sp, r7
 80139b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b6:	4770      	bx	lr

080139b8 <LL_RCC_HSI_IsReady>:
{
 80139b8:	b480      	push	{r7}
 80139ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80139bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80139c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80139ca:	d101      	bne.n	80139d0 <LL_RCC_HSI_IsReady+0x18>
 80139cc:	2301      	movs	r3, #1
 80139ce:	e000      	b.n	80139d2 <LL_RCC_HSI_IsReady+0x1a>
 80139d0:	2300      	movs	r3, #0
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr

080139dc <LL_RCC_HSI_SetCalibTrimming>:
{
 80139dc:	b480      	push	{r7}
 80139de:	b083      	sub	sp, #12
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80139e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80139e8:	685b      	ldr	r3, [r3, #4]
 80139ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	061b      	lsls	r3, r3, #24
 80139f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80139f6:	4313      	orrs	r3, r2
 80139f8:	604b      	str	r3, [r1, #4]
}
 80139fa:	bf00      	nop
 80139fc:	370c      	adds	r7, #12
 80139fe:	46bd      	mov	sp, r7
 8013a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a04:	4770      	bx	lr

08013a06 <LL_RCC_HSI48_Enable>:
{
 8013a06:	b480      	push	{r7}
 8013a08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8013a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013a12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013a16:	f043 0301 	orr.w	r3, r3, #1
 8013a1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8013a1e:	bf00      	nop
 8013a20:	46bd      	mov	sp, r7
 8013a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a26:	4770      	bx	lr

08013a28 <LL_RCC_HSI48_Disable>:
{
 8013a28:	b480      	push	{r7}
 8013a2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8013a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013a38:	f023 0301 	bic.w	r3, r3, #1
 8013a3c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8013a40:	bf00      	nop
 8013a42:	46bd      	mov	sp, r7
 8013a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a48:	4770      	bx	lr

08013a4a <LL_RCC_HSI48_IsReady>:
{
 8013a4a:	b480      	push	{r7}
 8013a4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8013a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013a56:	f003 0302 	and.w	r3, r3, #2
 8013a5a:	2b02      	cmp	r3, #2
 8013a5c:	d101      	bne.n	8013a62 <LL_RCC_HSI48_IsReady+0x18>
 8013a5e:	2301      	movs	r3, #1
 8013a60:	e000      	b.n	8013a64 <LL_RCC_HSI48_IsReady+0x1a>
 8013a62:	2300      	movs	r3, #0
}
 8013a64:	4618      	mov	r0, r3
 8013a66:	46bd      	mov	sp, r7
 8013a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6c:	4770      	bx	lr

08013a6e <LL_RCC_LSE_Enable>:
{
 8013a6e:	b480      	push	{r7}
 8013a70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013a72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013a7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013a7e:	f043 0301 	orr.w	r3, r3, #1
 8013a82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8013a86:	bf00      	nop
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8e:	4770      	bx	lr

08013a90 <LL_RCC_LSE_Disable>:
{
 8013a90:	b480      	push	{r7}
 8013a92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013a9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013aa0:	f023 0301 	bic.w	r3, r3, #1
 8013aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8013aa8:	bf00      	nop
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab0:	4770      	bx	lr

08013ab2 <LL_RCC_LSE_EnableBypass>:
{
 8013ab2:	b480      	push	{r7}
 8013ab4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8013ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013abe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013ac2:	f043 0304 	orr.w	r3, r3, #4
 8013ac6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8013aca:	bf00      	nop
 8013acc:	46bd      	mov	sp, r7
 8013ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad2:	4770      	bx	lr

08013ad4 <LL_RCC_LSE_DisableBypass>:
{
 8013ad4:	b480      	push	{r7}
 8013ad6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8013ad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013ae0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013ae4:	f023 0304 	bic.w	r3, r3, #4
 8013ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8013aec:	bf00      	nop
 8013aee:	46bd      	mov	sp, r7
 8013af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af4:	4770      	bx	lr

08013af6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8013af6:	b480      	push	{r7}
 8013af8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8013afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013b02:	f003 0302 	and.w	r3, r3, #2
 8013b06:	2b02      	cmp	r3, #2
 8013b08:	d101      	bne.n	8013b0e <LL_RCC_LSE_IsReady+0x18>
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	e000      	b.n	8013b10 <LL_RCC_LSE_IsReady+0x1a>
 8013b0e:	2300      	movs	r3, #0
}
 8013b10:	4618      	mov	r0, r3
 8013b12:	46bd      	mov	sp, r7
 8013b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b18:	4770      	bx	lr

08013b1a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8013b1a:	b480      	push	{r7}
 8013b1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8013b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013b26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013b2a:	f043 0301 	orr.w	r3, r3, #1
 8013b2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8013b32:	bf00      	nop
 8013b34:	46bd      	mov	sp, r7
 8013b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3a:	4770      	bx	lr

08013b3c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8013b3c:	b480      	push	{r7}
 8013b3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8013b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013b48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013b4c:	f023 0301 	bic.w	r3, r3, #1
 8013b50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8013b54:	bf00      	nop
 8013b56:	46bd      	mov	sp, r7
 8013b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5c:	4770      	bx	lr

08013b5e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8013b5e:	b480      	push	{r7}
 8013b60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8013b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013b6a:	f003 0302 	and.w	r3, r3, #2
 8013b6e:	2b02      	cmp	r3, #2
 8013b70:	d101      	bne.n	8013b76 <LL_RCC_LSI1_IsReady+0x18>
 8013b72:	2301      	movs	r3, #1
 8013b74:	e000      	b.n	8013b78 <LL_RCC_LSI1_IsReady+0x1a>
 8013b76:	2300      	movs	r3, #0
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b80:	4770      	bx	lr

08013b82 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8013b82:	b480      	push	{r7}
 8013b84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8013b86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013b8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013b92:	f043 0304 	orr.w	r3, r3, #4
 8013b96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8013b9a:	bf00      	nop
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba2:	4770      	bx	lr

08013ba4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8013ba4:	b480      	push	{r7}
 8013ba6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8013ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013bb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013bb4:	f023 0304 	bic.w	r3, r3, #4
 8013bb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8013bbc:	bf00      	nop
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc4:	4770      	bx	lr

08013bc6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8013bc6:	b480      	push	{r7}
 8013bc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8013bca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013bd2:	f003 0308 	and.w	r3, r3, #8
 8013bd6:	2b08      	cmp	r3, #8
 8013bd8:	d101      	bne.n	8013bde <LL_RCC_LSI2_IsReady+0x18>
 8013bda:	2301      	movs	r3, #1
 8013bdc:	e000      	b.n	8013be0 <LL_RCC_LSI2_IsReady+0x1a>
 8013bde:	2300      	movs	r3, #0
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	46bd      	mov	sp, r7
 8013be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be8:	4770      	bx	lr

08013bea <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8013bea:	b480      	push	{r7}
 8013bec:	b083      	sub	sp, #12
 8013bee:	af00      	add	r7, sp, #0
 8013bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8013bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013bfa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	021b      	lsls	r3, r3, #8
 8013c02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013c06:	4313      	orrs	r3, r2
 8013c08:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8013c0c:	bf00      	nop
 8013c0e:	370c      	adds	r7, #12
 8013c10:	46bd      	mov	sp, r7
 8013c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c16:	4770      	bx	lr

08013c18 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8013c18:	b480      	push	{r7}
 8013c1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8013c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013c26:	f043 0301 	orr.w	r3, r3, #1
 8013c2a:	6013      	str	r3, [r2, #0]
}
 8013c2c:	bf00      	nop
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c34:	4770      	bx	lr

08013c36 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8013c36:	b480      	push	{r7}
 8013c38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8013c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013c44:	f023 0301 	bic.w	r3, r3, #1
 8013c48:	6013      	str	r3, [r2, #0]
}
 8013c4a:	bf00      	nop
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c52:	4770      	bx	lr

08013c54 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8013c54:	b480      	push	{r7}
 8013c56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8013c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	f003 0302 	and.w	r3, r3, #2
 8013c62:	2b02      	cmp	r3, #2
 8013c64:	d101      	bne.n	8013c6a <LL_RCC_MSI_IsReady+0x16>
 8013c66:	2301      	movs	r3, #1
 8013c68:	e000      	b.n	8013c6c <LL_RCC_MSI_IsReady+0x18>
 8013c6a:	2300      	movs	r3, #0
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c74:	4770      	bx	lr

08013c76 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8013c76:	b480      	push	{r7}
 8013c78:	b083      	sub	sp, #12
 8013c7a:	af00      	add	r7, sp, #0
 8013c7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8013c7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8013c88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	4313      	orrs	r3, r2
 8013c90:	600b      	str	r3, [r1, #0]
}
 8013c92:	bf00      	nop
 8013c94:	370c      	adds	r7, #12
 8013c96:	46bd      	mov	sp, r7
 8013c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9c:	4770      	bx	lr

08013c9e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8013c9e:	b480      	push	{r7}
 8013ca0:	b083      	sub	sp, #12
 8013ca2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8013ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013cae:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2bb0      	cmp	r3, #176	@ 0xb0
 8013cb4:	d901      	bls.n	8013cba <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8013cb6:	23b0      	movs	r3, #176	@ 0xb0
 8013cb8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8013cba:	687b      	ldr	r3, [r7, #4]
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	370c      	adds	r7, #12
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr

08013cc8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8013cc8:	b480      	push	{r7}
 8013cca:	b083      	sub	sp, #12
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8013cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013cd4:	685b      	ldr	r3, [r3, #4]
 8013cd6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	021b      	lsls	r3, r3, #8
 8013cde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013ce2:	4313      	orrs	r3, r2
 8013ce4:	604b      	str	r3, [r1, #4]
}
 8013ce6:	bf00      	nop
 8013ce8:	370c      	adds	r7, #12
 8013cea:	46bd      	mov	sp, r7
 8013cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf0:	4770      	bx	lr

08013cf2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8013cf2:	b480      	push	{r7}
 8013cf4:	b083      	sub	sp, #12
 8013cf6:	af00      	add	r7, sp, #0
 8013cf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8013cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013cfe:	689b      	ldr	r3, [r3, #8]
 8013d00:	f023 0203 	bic.w	r2, r3, #3
 8013d04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	4313      	orrs	r3, r2
 8013d0c:	608b      	str	r3, [r1, #8]
}
 8013d0e:	bf00      	nop
 8013d10:	370c      	adds	r7, #12
 8013d12:	46bd      	mov	sp, r7
 8013d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d18:	4770      	bx	lr

08013d1a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8013d1a:	b480      	push	{r7}
 8013d1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8013d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d22:	689b      	ldr	r3, [r3, #8]
 8013d24:	f003 030c 	and.w	r3, r3, #12
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d30:	4770      	bx	lr

08013d32 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8013d32:	b480      	push	{r7}
 8013d34:	b083      	sub	sp, #12
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8013d3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d3e:	689b      	ldr	r3, [r3, #8]
 8013d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8013d44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	4313      	orrs	r3, r2
 8013d4c:	608b      	str	r3, [r1, #8]
}
 8013d4e:	bf00      	nop
 8013d50:	370c      	adds	r7, #12
 8013d52:	46bd      	mov	sp, r7
 8013d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d58:	4770      	bx	lr

08013d5a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8013d5a:	b480      	push	{r7}
 8013d5c:	b083      	sub	sp, #12
 8013d5e:	af00      	add	r7, sp, #0
 8013d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8013d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d66:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013d6a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8013d6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	4313      	orrs	r3, r2
 8013d76:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8013d7a:	bf00      	nop
 8013d7c:	370c      	adds	r7, #12
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d84:	4770      	bx	lr

08013d86 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8013d86:	b480      	push	{r7}
 8013d88:	b083      	sub	sp, #12
 8013d8a:	af00      	add	r7, sp, #0
 8013d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8013d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d92:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013d96:	f023 020f 	bic.w	r2, r3, #15
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	091b      	lsrs	r3, r3, #4
 8013d9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013da2:	4313      	orrs	r3, r2
 8013da4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8013da8:	bf00      	nop
 8013daa:	370c      	adds	r7, #12
 8013dac:	46bd      	mov	sp, r7
 8013dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db2:	4770      	bx	lr

08013db4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8013db4:	b480      	push	{r7}
 8013db6:	b083      	sub	sp, #12
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8013dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013dc0:	689b      	ldr	r3, [r3, #8]
 8013dc2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8013dc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	4313      	orrs	r3, r2
 8013dce:	608b      	str	r3, [r1, #8]
}
 8013dd0:	bf00      	nop
 8013dd2:	370c      	adds	r7, #12
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dda:	4770      	bx	lr

08013ddc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8013ddc:	b480      	push	{r7}
 8013dde:	b083      	sub	sp, #12
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8013de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013de8:	689b      	ldr	r3, [r3, #8]
 8013dea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8013dee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	4313      	orrs	r3, r2
 8013df6:	608b      	str	r3, [r1, #8]
}
 8013df8:	bf00      	nop
 8013dfa:	370c      	adds	r7, #12
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e02:	4770      	bx	lr

08013e04 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8013e04:	b480      	push	{r7}
 8013e06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8013e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e0c:	689b      	ldr	r3, [r3, #8]
 8013e0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8013e12:	4618      	mov	r0, r3
 8013e14:	46bd      	mov	sp, r7
 8013e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1a:	4770      	bx	lr

08013e1c <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8013e1c:	b480      	push	{r7}
 8013e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8013e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e24:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013e28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e34:	4770      	bx	lr

08013e36 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8013e36:	b480      	push	{r7}
 8013e38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8013e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013e42:	011b      	lsls	r3, r3, #4
 8013e44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8013e48:	4618      	mov	r0, r3
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e50:	4770      	bx	lr

08013e52 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8013e52:	b480      	push	{r7}
 8013e54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8013e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e5a:	689b      	ldr	r3, [r3, #8]
 8013e5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8013e60:	4618      	mov	r0, r3
 8013e62:	46bd      	mov	sp, r7
 8013e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e68:	4770      	bx	lr

08013e6a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8013e6a:	b480      	push	{r7}
 8013e6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8013e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e72:	689b      	ldr	r3, [r3, #8]
 8013e74:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e80:	4770      	bx	lr

08013e82 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8013e82:	b480      	push	{r7}
 8013e84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8013e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013e90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8013e94:	6013      	str	r3, [r2, #0]
}
 8013e96:	bf00      	nop
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9e:	4770      	bx	lr

08013ea0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8013ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013eae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013eb2:	6013      	str	r3, [r2, #0]
}
 8013eb4:	bf00      	nop
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ebc:	4770      	bx	lr

08013ebe <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8013ebe:	b480      	push	{r7}
 8013ec0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8013ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013ecc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013ed0:	d101      	bne.n	8013ed6 <LL_RCC_PLL_IsReady+0x18>
 8013ed2:	2301      	movs	r3, #1
 8013ed4:	e000      	b.n	8013ed8 <LL_RCC_PLL_IsReady+0x1a>
 8013ed6:	2300      	movs	r3, #0
}
 8013ed8:	4618      	mov	r0, r3
 8013eda:	46bd      	mov	sp, r7
 8013edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee0:	4770      	bx	lr

08013ee2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8013ee2:	b480      	push	{r7}
 8013ee4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8013ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013eea:	68db      	ldr	r3, [r3, #12]
 8013eec:	0a1b      	lsrs	r3, r3, #8
 8013eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efa:	4770      	bx	lr

08013efc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8013efc:	b480      	push	{r7}
 8013efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8013f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f04:	68db      	ldr	r3, [r3, #12]
 8013f06:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f12:	4770      	bx	lr

08013f14 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8013f14:	b480      	push	{r7}
 8013f16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8013f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f1c:	68db      	ldr	r3, [r3, #12]
 8013f1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	46bd      	mov	sp, r7
 8013f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2a:	4770      	bx	lr

08013f2c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8013f2c:	b480      	push	{r7}
 8013f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8013f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f34:	68db      	ldr	r3, [r3, #12]
 8013f36:	f003 0303 	and.w	r3, r3, #3
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f42:	4770      	bx	lr

08013f44 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8013f44:	b480      	push	{r7}
 8013f46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8013f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f4c:	689b      	ldr	r3, [r3, #8]
 8013f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f56:	d101      	bne.n	8013f5c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8013f58:	2301      	movs	r3, #1
 8013f5a:	e000      	b.n	8013f5e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8013f5c:	2300      	movs	r3, #0
}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	46bd      	mov	sp, r7
 8013f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f66:	4770      	bx	lr

08013f68 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8013f68:	b480      	push	{r7}
 8013f6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8013f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f70:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013f78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013f7c:	d101      	bne.n	8013f82 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8013f7e:	2301      	movs	r3, #1
 8013f80:	e000      	b.n	8013f84 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8013f82:	2300      	movs	r3, #0
}
 8013f84:	4618      	mov	r0, r3
 8013f86:	46bd      	mov	sp, r7
 8013f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8c:	4770      	bx	lr

08013f8e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8013f8e:	b480      	push	{r7}
 8013f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8013f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f96:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013fa2:	d101      	bne.n	8013fa8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	e000      	b.n	8013faa <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8013fa8:	2300      	movs	r3, #0
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	46bd      	mov	sp, r7
 8013fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb2:	4770      	bx	lr

08013fb4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8013fb4:	b480      	push	{r7}
 8013fb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8013fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013fbc:	689b      	ldr	r3, [r3, #8]
 8013fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013fc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013fc6:	d101      	bne.n	8013fcc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8013fc8:	2301      	movs	r3, #1
 8013fca:	e000      	b.n	8013fce <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8013fcc:	2300      	movs	r3, #0
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd6:	4770      	bx	lr

08013fd8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8013fd8:	b480      	push	{r7}
 8013fda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8013fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013fe0:	689b      	ldr	r3, [r3, #8]
 8013fe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8013fe6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013fea:	d101      	bne.n	8013ff0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8013fec:	2301      	movs	r3, #1
 8013fee:	e000      	b.n	8013ff2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8013ff0:	2300      	movs	r3, #0
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffa:	4770      	bx	lr

08013ffc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013ffc:	b590      	push	{r4, r7, lr}
 8013ffe:	b08d      	sub	sp, #52	@ 0x34
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d101      	bne.n	801400e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801400a:	2301      	movs	r3, #1
 801400c:	e363      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	f003 0320 	and.w	r3, r3, #32
 8014016:	2b00      	cmp	r3, #0
 8014018:	f000 808d 	beq.w	8014136 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801401c:	f7ff fe7d 	bl	8013d1a <LL_RCC_GetSysClkSource>
 8014020:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014022:	f7ff ff83 	bl	8013f2c <LL_RCC_PLL_GetMainSource>
 8014026:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8014028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801402a:	2b00      	cmp	r3, #0
 801402c:	d005      	beq.n	801403a <HAL_RCC_OscConfig+0x3e>
 801402e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014030:	2b0c      	cmp	r3, #12
 8014032:	d147      	bne.n	80140c4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8014034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014036:	2b01      	cmp	r3, #1
 8014038:	d144      	bne.n	80140c4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	69db      	ldr	r3, [r3, #28]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d101      	bne.n	8014046 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8014042:	2301      	movs	r3, #1
 8014044:	e347      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801404a:	f7ff fe28 	bl	8013c9e <LL_RCC_MSI_GetRange>
 801404e:	4603      	mov	r3, r0
 8014050:	429c      	cmp	r4, r3
 8014052:	d914      	bls.n	801407e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014058:	4618      	mov	r0, r3
 801405a:	f000 fd61 	bl	8014b20 <RCC_SetFlashLatencyFromMSIRange>
 801405e:	4603      	mov	r3, r0
 8014060:	2b00      	cmp	r3, #0
 8014062:	d001      	beq.n	8014068 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8014064:	2301      	movs	r3, #1
 8014066:	e336      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801406c:	4618      	mov	r0, r3
 801406e:	f7ff fe02 	bl	8013c76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	6a1b      	ldr	r3, [r3, #32]
 8014076:	4618      	mov	r0, r3
 8014078:	f7ff fe26 	bl	8013cc8 <LL_RCC_MSI_SetCalibTrimming>
 801407c:	e013      	b.n	80140a6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014082:	4618      	mov	r0, r3
 8014084:	f7ff fdf7 	bl	8013c76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6a1b      	ldr	r3, [r3, #32]
 801408c:	4618      	mov	r0, r3
 801408e:	f7ff fe1b 	bl	8013cc8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014096:	4618      	mov	r0, r3
 8014098:	f000 fd42 	bl	8014b20 <RCC_SetFlashLatencyFromMSIRange>
 801409c:	4603      	mov	r3, r0
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d001      	beq.n	80140a6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80140a2:	2301      	movs	r3, #1
 80140a4:	e317      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80140a6:	f000 fcc9 	bl	8014a3c <HAL_RCC_GetHCLKFreq>
 80140aa:	4603      	mov	r3, r0
 80140ac:	4aa4      	ldr	r2, [pc, #656]	@ (8014340 <HAL_RCC_OscConfig+0x344>)
 80140ae:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80140b0:	4ba4      	ldr	r3, [pc, #656]	@ (8014344 <HAL_RCC_OscConfig+0x348>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	4618      	mov	r0, r3
 80140b6:	f7ec ff4b 	bl	8000f50 <HAL_InitTick>
 80140ba:	4603      	mov	r3, r0
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d039      	beq.n	8014134 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80140c0:	2301      	movs	r3, #1
 80140c2:	e308      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	69db      	ldr	r3, [r3, #28]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d01e      	beq.n	801410a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80140cc:	f7ff fda4 	bl	8013c18 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80140d0:	f7fe f936 	bl	8012340 <HAL_GetTick>
 80140d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80140d6:	e008      	b.n	80140ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80140d8:	f7fe f932 	bl	8012340 <HAL_GetTick>
 80140dc:	4602      	mov	r2, r0
 80140de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140e0:	1ad3      	subs	r3, r2, r3
 80140e2:	2b02      	cmp	r3, #2
 80140e4:	d901      	bls.n	80140ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80140e6:	2303      	movs	r3, #3
 80140e8:	e2f5      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80140ea:	f7ff fdb3 	bl	8013c54 <LL_RCC_MSI_IsReady>
 80140ee:	4603      	mov	r3, r0
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d0f1      	beq.n	80140d8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7ff fdbc 	bl	8013c76 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	6a1b      	ldr	r3, [r3, #32]
 8014102:	4618      	mov	r0, r3
 8014104:	f7ff fde0 	bl	8013cc8 <LL_RCC_MSI_SetCalibTrimming>
 8014108:	e015      	b.n	8014136 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801410a:	f7ff fd94 	bl	8013c36 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801410e:	f7fe f917 	bl	8012340 <HAL_GetTick>
 8014112:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8014114:	e008      	b.n	8014128 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014116:	f7fe f913 	bl	8012340 <HAL_GetTick>
 801411a:	4602      	mov	r2, r0
 801411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801411e:	1ad3      	subs	r3, r2, r3
 8014120:	2b02      	cmp	r3, #2
 8014122:	d901      	bls.n	8014128 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8014124:	2303      	movs	r3, #3
 8014126:	e2d6      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8014128:	f7ff fd94 	bl	8013c54 <LL_RCC_MSI_IsReady>
 801412c:	4603      	mov	r3, r0
 801412e:	2b00      	cmp	r3, #0
 8014130:	d1f1      	bne.n	8014116 <HAL_RCC_OscConfig+0x11a>
 8014132:	e000      	b.n	8014136 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8014134:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	f003 0301 	and.w	r3, r3, #1
 801413e:	2b00      	cmp	r3, #0
 8014140:	d047      	beq.n	80141d2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014142:	f7ff fdea 	bl	8013d1a <LL_RCC_GetSysClkSource>
 8014146:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014148:	f7ff fef0 	bl	8013f2c <LL_RCC_PLL_GetMainSource>
 801414c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 801414e:	6a3b      	ldr	r3, [r7, #32]
 8014150:	2b08      	cmp	r3, #8
 8014152:	d005      	beq.n	8014160 <HAL_RCC_OscConfig+0x164>
 8014154:	6a3b      	ldr	r3, [r7, #32]
 8014156:	2b0c      	cmp	r3, #12
 8014158:	d108      	bne.n	801416c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 801415a:	69fb      	ldr	r3, [r7, #28]
 801415c:	2b03      	cmp	r3, #3
 801415e:	d105      	bne.n	801416c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	685b      	ldr	r3, [r3, #4]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d134      	bne.n	80141d2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8014168:	2301      	movs	r3, #1
 801416a:	e2b4      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	685b      	ldr	r3, [r3, #4]
 8014170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014174:	d102      	bne.n	801417c <HAL_RCC_OscConfig+0x180>
 8014176:	f7ff fbd1 	bl	801391c <LL_RCC_HSE_Enable>
 801417a:	e001      	b.n	8014180 <HAL_RCC_OscConfig+0x184>
 801417c:	f7ff fbdd 	bl	801393a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	685b      	ldr	r3, [r3, #4]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d012      	beq.n	80141ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014188:	f7fe f8da 	bl	8012340 <HAL_GetTick>
 801418c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 801418e:	e008      	b.n	80141a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014190:	f7fe f8d6 	bl	8012340 <HAL_GetTick>
 8014194:	4602      	mov	r2, r0
 8014196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014198:	1ad3      	subs	r3, r2, r3
 801419a:	2b64      	cmp	r3, #100	@ 0x64
 801419c:	d901      	bls.n	80141a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801419e:	2303      	movs	r3, #3
 80141a0:	e299      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80141a2:	f7ff fbd9 	bl	8013958 <LL_RCC_HSE_IsReady>
 80141a6:	4603      	mov	r3, r0
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d0f1      	beq.n	8014190 <HAL_RCC_OscConfig+0x194>
 80141ac:	e011      	b.n	80141d2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80141ae:	f7fe f8c7 	bl	8012340 <HAL_GetTick>
 80141b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80141b4:	e008      	b.n	80141c8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80141b6:	f7fe f8c3 	bl	8012340 <HAL_GetTick>
 80141ba:	4602      	mov	r2, r0
 80141bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141be:	1ad3      	subs	r3, r2, r3
 80141c0:	2b64      	cmp	r3, #100	@ 0x64
 80141c2:	d901      	bls.n	80141c8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80141c4:	2303      	movs	r3, #3
 80141c6:	e286      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80141c8:	f7ff fbc6 	bl	8013958 <LL_RCC_HSE_IsReady>
 80141cc:	4603      	mov	r3, r0
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d1f1      	bne.n	80141b6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	f003 0302 	and.w	r3, r3, #2
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d04c      	beq.n	8014278 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80141de:	f7ff fd9c 	bl	8013d1a <LL_RCC_GetSysClkSource>
 80141e2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80141e4:	f7ff fea2 	bl	8013f2c <LL_RCC_PLL_GetMainSource>
 80141e8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80141ea:	69bb      	ldr	r3, [r7, #24]
 80141ec:	2b04      	cmp	r3, #4
 80141ee:	d005      	beq.n	80141fc <HAL_RCC_OscConfig+0x200>
 80141f0:	69bb      	ldr	r3, [r7, #24]
 80141f2:	2b0c      	cmp	r3, #12
 80141f4:	d10e      	bne.n	8014214 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80141f6:	697b      	ldr	r3, [r7, #20]
 80141f8:	2b02      	cmp	r3, #2
 80141fa:	d10b      	bne.n	8014214 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	68db      	ldr	r3, [r3, #12]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d101      	bne.n	8014208 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8014204:	2301      	movs	r3, #1
 8014206:	e266      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	691b      	ldr	r3, [r3, #16]
 801420c:	4618      	mov	r0, r3
 801420e:	f7ff fbe5 	bl	80139dc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8014212:	e031      	b.n	8014278 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	68db      	ldr	r3, [r3, #12]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d019      	beq.n	8014250 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801421c:	f7ff fbae 	bl	801397c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014220:	f7fe f88e 	bl	8012340 <HAL_GetTick>
 8014224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8014226:	e008      	b.n	801423a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014228:	f7fe f88a 	bl	8012340 <HAL_GetTick>
 801422c:	4602      	mov	r2, r0
 801422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014230:	1ad3      	subs	r3, r2, r3
 8014232:	2b02      	cmp	r3, #2
 8014234:	d901      	bls.n	801423a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8014236:	2303      	movs	r3, #3
 8014238:	e24d      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 801423a:	f7ff fbbd 	bl	80139b8 <LL_RCC_HSI_IsReady>
 801423e:	4603      	mov	r3, r0
 8014240:	2b00      	cmp	r3, #0
 8014242:	d0f1      	beq.n	8014228 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	691b      	ldr	r3, [r3, #16]
 8014248:	4618      	mov	r0, r3
 801424a:	f7ff fbc7 	bl	80139dc <LL_RCC_HSI_SetCalibTrimming>
 801424e:	e013      	b.n	8014278 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014250:	f7ff fba3 	bl	801399a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014254:	f7fe f874 	bl	8012340 <HAL_GetTick>
 8014258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 801425a:	e008      	b.n	801426e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801425c:	f7fe f870 	bl	8012340 <HAL_GetTick>
 8014260:	4602      	mov	r2, r0
 8014262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014264:	1ad3      	subs	r3, r2, r3
 8014266:	2b02      	cmp	r3, #2
 8014268:	d901      	bls.n	801426e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 801426a:	2303      	movs	r3, #3
 801426c:	e233      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 801426e:	f7ff fba3 	bl	80139b8 <LL_RCC_HSI_IsReady>
 8014272:	4603      	mov	r3, r0
 8014274:	2b00      	cmp	r3, #0
 8014276:	d1f1      	bne.n	801425c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	f003 0308 	and.w	r3, r3, #8
 8014280:	2b00      	cmp	r3, #0
 8014282:	d106      	bne.n	8014292 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801428c:	2b00      	cmp	r3, #0
 801428e:	f000 80a3 	beq.w	80143d8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	695b      	ldr	r3, [r3, #20]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d076      	beq.n	8014388 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	f003 0310 	and.w	r3, r3, #16
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d046      	beq.n	8014334 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80142a6:	f7ff fc5a 	bl	8013b5e <LL_RCC_LSI1_IsReady>
 80142aa:	4603      	mov	r3, r0
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d113      	bne.n	80142d8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80142b0:	f7ff fc33 	bl	8013b1a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80142b4:	f7fe f844 	bl	8012340 <HAL_GetTick>
 80142b8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80142ba:	e008      	b.n	80142ce <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80142bc:	f7fe f840 	bl	8012340 <HAL_GetTick>
 80142c0:	4602      	mov	r2, r0
 80142c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142c4:	1ad3      	subs	r3, r2, r3
 80142c6:	2b02      	cmp	r3, #2
 80142c8:	d901      	bls.n	80142ce <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80142ca:	2303      	movs	r3, #3
 80142cc:	e203      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80142ce:	f7ff fc46 	bl	8013b5e <LL_RCC_LSI1_IsReady>
 80142d2:	4603      	mov	r3, r0
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d0f1      	beq.n	80142bc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80142d8:	f7ff fc53 	bl	8013b82 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80142dc:	f7fe f830 	bl	8012340 <HAL_GetTick>
 80142e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80142e2:	e008      	b.n	80142f6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80142e4:	f7fe f82c 	bl	8012340 <HAL_GetTick>
 80142e8:	4602      	mov	r2, r0
 80142ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142ec:	1ad3      	subs	r3, r2, r3
 80142ee:	2b03      	cmp	r3, #3
 80142f0:	d901      	bls.n	80142f6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80142f2:	2303      	movs	r3, #3
 80142f4:	e1ef      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80142f6:	f7ff fc66 	bl	8013bc6 <LL_RCC_LSI2_IsReady>
 80142fa:	4603      	mov	r3, r0
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d0f1      	beq.n	80142e4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	699b      	ldr	r3, [r3, #24]
 8014304:	4618      	mov	r0, r3
 8014306:	f7ff fc70 	bl	8013bea <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 801430a:	f7ff fc17 	bl	8013b3c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801430e:	f7fe f817 	bl	8012340 <HAL_GetTick>
 8014312:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8014314:	e008      	b.n	8014328 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8014316:	f7fe f813 	bl	8012340 <HAL_GetTick>
 801431a:	4602      	mov	r2, r0
 801431c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801431e:	1ad3      	subs	r3, r2, r3
 8014320:	2b02      	cmp	r3, #2
 8014322:	d901      	bls.n	8014328 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8014324:	2303      	movs	r3, #3
 8014326:	e1d6      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8014328:	f7ff fc19 	bl	8013b5e <LL_RCC_LSI1_IsReady>
 801432c:	4603      	mov	r3, r0
 801432e:	2b00      	cmp	r3, #0
 8014330:	d1f1      	bne.n	8014316 <HAL_RCC_OscConfig+0x31a>
 8014332:	e051      	b.n	80143d8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8014334:	f7ff fbf1 	bl	8013b1a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014338:	f7fe f802 	bl	8012340 <HAL_GetTick>
 801433c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 801433e:	e00c      	b.n	801435a <HAL_RCC_OscConfig+0x35e>
 8014340:	20000008 	.word	0x20000008
 8014344:	20000070 	.word	0x20000070
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8014348:	f7fd fffa 	bl	8012340 <HAL_GetTick>
 801434c:	4602      	mov	r2, r0
 801434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014350:	1ad3      	subs	r3, r2, r3
 8014352:	2b02      	cmp	r3, #2
 8014354:	d901      	bls.n	801435a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8014356:	2303      	movs	r3, #3
 8014358:	e1bd      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 801435a:	f7ff fc00 	bl	8013b5e <LL_RCC_LSI1_IsReady>
 801435e:	4603      	mov	r3, r0
 8014360:	2b00      	cmp	r3, #0
 8014362:	d0f1      	beq.n	8014348 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8014364:	f7ff fc1e 	bl	8013ba4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8014368:	e008      	b.n	801437c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801436a:	f7fd ffe9 	bl	8012340 <HAL_GetTick>
 801436e:	4602      	mov	r2, r0
 8014370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014372:	1ad3      	subs	r3, r2, r3
 8014374:	2b03      	cmp	r3, #3
 8014376:	d901      	bls.n	801437c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8014378:	2303      	movs	r3, #3
 801437a:	e1ac      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 801437c:	f7ff fc23 	bl	8013bc6 <LL_RCC_LSI2_IsReady>
 8014380:	4603      	mov	r3, r0
 8014382:	2b00      	cmp	r3, #0
 8014384:	d1f1      	bne.n	801436a <HAL_RCC_OscConfig+0x36e>
 8014386:	e027      	b.n	80143d8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8014388:	f7ff fc0c 	bl	8013ba4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801438c:	f7fd ffd8 	bl	8012340 <HAL_GetTick>
 8014390:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8014392:	e008      	b.n	80143a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8014394:	f7fd ffd4 	bl	8012340 <HAL_GetTick>
 8014398:	4602      	mov	r2, r0
 801439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801439c:	1ad3      	subs	r3, r2, r3
 801439e:	2b03      	cmp	r3, #3
 80143a0:	d901      	bls.n	80143a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80143a2:	2303      	movs	r3, #3
 80143a4:	e197      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80143a6:	f7ff fc0e 	bl	8013bc6 <LL_RCC_LSI2_IsReady>
 80143aa:	4603      	mov	r3, r0
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d1f1      	bne.n	8014394 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80143b0:	f7ff fbc4 	bl	8013b3c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80143b4:	f7fd ffc4 	bl	8012340 <HAL_GetTick>
 80143b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80143ba:	e008      	b.n	80143ce <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80143bc:	f7fd ffc0 	bl	8012340 <HAL_GetTick>
 80143c0:	4602      	mov	r2, r0
 80143c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143c4:	1ad3      	subs	r3, r2, r3
 80143c6:	2b02      	cmp	r3, #2
 80143c8:	d901      	bls.n	80143ce <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80143ca:	2303      	movs	r3, #3
 80143cc:	e183      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80143ce:	f7ff fbc6 	bl	8013b5e <LL_RCC_LSI1_IsReady>
 80143d2:	4603      	mov	r3, r0
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d1f1      	bne.n	80143bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	f003 0304 	and.w	r3, r3, #4
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d05b      	beq.n	801449c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80143e4:	4ba7      	ldr	r3, [pc, #668]	@ (8014684 <HAL_RCC_OscConfig+0x688>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d114      	bne.n	801441a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80143f0:	f7ff fa64 	bl	80138bc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80143f4:	f7fd ffa4 	bl	8012340 <HAL_GetTick>
 80143f8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80143fa:	e008      	b.n	801440e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80143fc:	f7fd ffa0 	bl	8012340 <HAL_GetTick>
 8014400:	4602      	mov	r2, r0
 8014402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014404:	1ad3      	subs	r3, r2, r3
 8014406:	2b02      	cmp	r3, #2
 8014408:	d901      	bls.n	801440e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 801440a:	2303      	movs	r3, #3
 801440c:	e163      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801440e:	4b9d      	ldr	r3, [pc, #628]	@ (8014684 <HAL_RCC_OscConfig+0x688>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014416:	2b00      	cmp	r3, #0
 8014418:	d0f0      	beq.n	80143fc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	689b      	ldr	r3, [r3, #8]
 801441e:	2b01      	cmp	r3, #1
 8014420:	d102      	bne.n	8014428 <HAL_RCC_OscConfig+0x42c>
 8014422:	f7ff fb24 	bl	8013a6e <LL_RCC_LSE_Enable>
 8014426:	e00c      	b.n	8014442 <HAL_RCC_OscConfig+0x446>
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	689b      	ldr	r3, [r3, #8]
 801442c:	2b05      	cmp	r3, #5
 801442e:	d104      	bne.n	801443a <HAL_RCC_OscConfig+0x43e>
 8014430:	f7ff fb3f 	bl	8013ab2 <LL_RCC_LSE_EnableBypass>
 8014434:	f7ff fb1b 	bl	8013a6e <LL_RCC_LSE_Enable>
 8014438:	e003      	b.n	8014442 <HAL_RCC_OscConfig+0x446>
 801443a:	f7ff fb29 	bl	8013a90 <LL_RCC_LSE_Disable>
 801443e:	f7ff fb49 	bl	8013ad4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	689b      	ldr	r3, [r3, #8]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d014      	beq.n	8014474 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801444a:	f7fd ff79 	bl	8012340 <HAL_GetTick>
 801444e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8014450:	e00a      	b.n	8014468 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014452:	f7fd ff75 	bl	8012340 <HAL_GetTick>
 8014456:	4602      	mov	r2, r0
 8014458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801445a:	1ad3      	subs	r3, r2, r3
 801445c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014460:	4293      	cmp	r3, r2
 8014462:	d901      	bls.n	8014468 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8014464:	2303      	movs	r3, #3
 8014466:	e136      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8014468:	f7ff fb45 	bl	8013af6 <LL_RCC_LSE_IsReady>
 801446c:	4603      	mov	r3, r0
 801446e:	2b00      	cmp	r3, #0
 8014470:	d0ef      	beq.n	8014452 <HAL_RCC_OscConfig+0x456>
 8014472:	e013      	b.n	801449c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014474:	f7fd ff64 	bl	8012340 <HAL_GetTick>
 8014478:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 801447a:	e00a      	b.n	8014492 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801447c:	f7fd ff60 	bl	8012340 <HAL_GetTick>
 8014480:	4602      	mov	r2, r0
 8014482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014484:	1ad3      	subs	r3, r2, r3
 8014486:	f241 3288 	movw	r2, #5000	@ 0x1388
 801448a:	4293      	cmp	r3, r2
 801448c:	d901      	bls.n	8014492 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 801448e:	2303      	movs	r3, #3
 8014490:	e121      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8014492:	f7ff fb30 	bl	8013af6 <LL_RCC_LSE_IsReady>
 8014496:	4603      	mov	r3, r0
 8014498:	2b00      	cmp	r3, #0
 801449a:	d1ef      	bne.n	801447c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d02c      	beq.n	8014502 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d014      	beq.n	80144da <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80144b0:	f7ff faa9 	bl	8013a06 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80144b4:	f7fd ff44 	bl	8012340 <HAL_GetTick>
 80144b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80144ba:	e008      	b.n	80144ce <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80144bc:	f7fd ff40 	bl	8012340 <HAL_GetTick>
 80144c0:	4602      	mov	r2, r0
 80144c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144c4:	1ad3      	subs	r3, r2, r3
 80144c6:	2b02      	cmp	r3, #2
 80144c8:	d901      	bls.n	80144ce <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80144ca:	2303      	movs	r3, #3
 80144cc:	e103      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80144ce:	f7ff fabc 	bl	8013a4a <LL_RCC_HSI48_IsReady>
 80144d2:	4603      	mov	r3, r0
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d0f1      	beq.n	80144bc <HAL_RCC_OscConfig+0x4c0>
 80144d8:	e013      	b.n	8014502 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80144da:	f7ff faa5 	bl	8013a28 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80144de:	f7fd ff2f 	bl	8012340 <HAL_GetTick>
 80144e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80144e4:	e008      	b.n	80144f8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80144e6:	f7fd ff2b 	bl	8012340 <HAL_GetTick>
 80144ea:	4602      	mov	r2, r0
 80144ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144ee:	1ad3      	subs	r3, r2, r3
 80144f0:	2b02      	cmp	r3, #2
 80144f2:	d901      	bls.n	80144f8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80144f4:	2303      	movs	r3, #3
 80144f6:	e0ee      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80144f8:	f7ff faa7 	bl	8013a4a <LL_RCC_HSI48_IsReady>
 80144fc:	4603      	mov	r3, r0
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d1f1      	bne.n	80144e6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014506:	2b00      	cmp	r3, #0
 8014508:	f000 80e4 	beq.w	80146d4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801450c:	f7ff fc05 	bl	8013d1a <LL_RCC_GetSysClkSource>
 8014510:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8014512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014516:	68db      	ldr	r3, [r3, #12]
 8014518:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801451e:	2b02      	cmp	r3, #2
 8014520:	f040 80b4 	bne.w	801468c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	f003 0203 	and.w	r2, r3, #3
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801452e:	429a      	cmp	r2, r3
 8014530:	d123      	bne.n	801457a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801453c:	429a      	cmp	r2, r3
 801453e:	d11c      	bne.n	801457a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	0a1b      	lsrs	r3, r3, #8
 8014544:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801454c:	429a      	cmp	r2, r3
 801454e:	d114      	bne.n	801457a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801455a:	429a      	cmp	r2, r3
 801455c:	d10d      	bne.n	801457a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014568:	429a      	cmp	r2, r3
 801456a:	d106      	bne.n	801457a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8014576:	429a      	cmp	r2, r3
 8014578:	d05d      	beq.n	8014636 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801457a:	693b      	ldr	r3, [r7, #16]
 801457c:	2b0c      	cmp	r3, #12
 801457e:	d058      	beq.n	8014632 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8014580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801458a:	2b00      	cmp	r3, #0
 801458c:	d001      	beq.n	8014592 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 801458e:	2301      	movs	r3, #1
 8014590:	e0a1      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8014592:	f7ff fc85 	bl	8013ea0 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8014596:	f7fd fed3 	bl	8012340 <HAL_GetTick>
 801459a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801459c:	e008      	b.n	80145b0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801459e:	f7fd fecf 	bl	8012340 <HAL_GetTick>
 80145a2:	4602      	mov	r2, r0
 80145a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145a6:	1ad3      	subs	r3, r2, r3
 80145a8:	2b02      	cmp	r3, #2
 80145aa:	d901      	bls.n	80145b0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80145ac:	2303      	movs	r3, #3
 80145ae:	e092      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80145b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d1ef      	bne.n	801459e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80145be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80145c2:	68da      	ldr	r2, [r3, #12]
 80145c4:	4b30      	ldr	r3, [pc, #192]	@ (8014688 <HAL_RCC_OscConfig+0x68c>)
 80145c6:	4013      	ands	r3, r2
 80145c8:	687a      	ldr	r2, [r7, #4]
 80145ca:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80145cc:	687a      	ldr	r2, [r7, #4]
 80145ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80145d0:	4311      	orrs	r1, r2
 80145d2:	687a      	ldr	r2, [r7, #4]
 80145d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80145d6:	0212      	lsls	r2, r2, #8
 80145d8:	4311      	orrs	r1, r2
 80145da:	687a      	ldr	r2, [r7, #4]
 80145dc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80145de:	4311      	orrs	r1, r2
 80145e0:	687a      	ldr	r2, [r7, #4]
 80145e2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80145e4:	4311      	orrs	r1, r2
 80145e6:	687a      	ldr	r2, [r7, #4]
 80145e8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80145ea:	430a      	orrs	r2, r1
 80145ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80145f0:	4313      	orrs	r3, r2
 80145f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80145f4:	f7ff fc45 	bl	8013e82 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80145f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80145fc:	68db      	ldr	r3, [r3, #12]
 80145fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014606:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8014608:	f7fd fe9a 	bl	8012340 <HAL_GetTick>
 801460c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801460e:	e008      	b.n	8014622 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014610:	f7fd fe96 	bl	8012340 <HAL_GetTick>
 8014614:	4602      	mov	r2, r0
 8014616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014618:	1ad3      	subs	r3, r2, r3
 801461a:	2b02      	cmp	r3, #2
 801461c:	d901      	bls.n	8014622 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 801461e:	2303      	movs	r3, #3
 8014620:	e059      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801462c:	2b00      	cmp	r3, #0
 801462e:	d0ef      	beq.n	8014610 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014630:	e050      	b.n	80146d4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8014632:	2301      	movs	r3, #1
 8014634:	e04f      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014640:	2b00      	cmp	r3, #0
 8014642:	d147      	bne.n	80146d4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8014644:	f7ff fc1d 	bl	8013e82 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8014648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801464c:	68db      	ldr	r3, [r3, #12]
 801464e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014656:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8014658:	f7fd fe72 	bl	8012340 <HAL_GetTick>
 801465c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801465e:	e008      	b.n	8014672 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014660:	f7fd fe6e 	bl	8012340 <HAL_GetTick>
 8014664:	4602      	mov	r2, r0
 8014666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014668:	1ad3      	subs	r3, r2, r3
 801466a:	2b02      	cmp	r3, #2
 801466c:	d901      	bls.n	8014672 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 801466e:	2303      	movs	r3, #3
 8014670:	e031      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801467c:	2b00      	cmp	r3, #0
 801467e:	d0ef      	beq.n	8014660 <HAL_RCC_OscConfig+0x664>
 8014680:	e028      	b.n	80146d4 <HAL_RCC_OscConfig+0x6d8>
 8014682:	bf00      	nop
 8014684:	58000400 	.word	0x58000400
 8014688:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801468c:	693b      	ldr	r3, [r7, #16]
 801468e:	2b0c      	cmp	r3, #12
 8014690:	d01e      	beq.n	80146d0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014692:	f7ff fc05 	bl	8013ea0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014696:	f7fd fe53 	bl	8012340 <HAL_GetTick>
 801469a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801469c:	e008      	b.n	80146b0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801469e:	f7fd fe4f 	bl	8012340 <HAL_GetTick>
 80146a2:	4602      	mov	r2, r0
 80146a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146a6:	1ad3      	subs	r3, r2, r3
 80146a8:	2b02      	cmp	r3, #2
 80146aa:	d901      	bls.n	80146b0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80146ac:	2303      	movs	r3, #3
 80146ae:	e012      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80146b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d1ef      	bne.n	801469e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80146be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80146c2:	68da      	ldr	r2, [r3, #12]
 80146c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80146c8:	4b05      	ldr	r3, [pc, #20]	@ (80146e0 <HAL_RCC_OscConfig+0x6e4>)
 80146ca:	4013      	ands	r3, r2
 80146cc:	60cb      	str	r3, [r1, #12]
 80146ce:	e001      	b.n	80146d4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80146d0:	2301      	movs	r3, #1
 80146d2:	e000      	b.n	80146d6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80146d4:	2300      	movs	r3, #0
}
 80146d6:	4618      	mov	r0, r3
 80146d8:	3734      	adds	r7, #52	@ 0x34
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd90      	pop	{r4, r7, pc}
 80146de:	bf00      	nop
 80146e0:	eefefffc 	.word	0xeefefffc

080146e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b084      	sub	sp, #16
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
 80146ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d101      	bne.n	80146f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80146f4:	2301      	movs	r3, #1
 80146f6:	e12d      	b.n	8014954 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80146f8:	4b98      	ldr	r3, [pc, #608]	@ (801495c <HAL_RCC_ClockConfig+0x278>)
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	f003 0307 	and.w	r3, r3, #7
 8014700:	683a      	ldr	r2, [r7, #0]
 8014702:	429a      	cmp	r2, r3
 8014704:	d91b      	bls.n	801473e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014706:	4b95      	ldr	r3, [pc, #596]	@ (801495c <HAL_RCC_ClockConfig+0x278>)
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	f023 0207 	bic.w	r2, r3, #7
 801470e:	4993      	ldr	r1, [pc, #588]	@ (801495c <HAL_RCC_ClockConfig+0x278>)
 8014710:	683b      	ldr	r3, [r7, #0]
 8014712:	4313      	orrs	r3, r2
 8014714:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014716:	f7fd fe13 	bl	8012340 <HAL_GetTick>
 801471a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801471c:	e008      	b.n	8014730 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801471e:	f7fd fe0f 	bl	8012340 <HAL_GetTick>
 8014722:	4602      	mov	r2, r0
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	1ad3      	subs	r3, r2, r3
 8014728:	2b02      	cmp	r3, #2
 801472a:	d901      	bls.n	8014730 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 801472c:	2303      	movs	r3, #3
 801472e:	e111      	b.n	8014954 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014730:	4b8a      	ldr	r3, [pc, #552]	@ (801495c <HAL_RCC_ClockConfig+0x278>)
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	f003 0307 	and.w	r3, r3, #7
 8014738:	683a      	ldr	r2, [r7, #0]
 801473a:	429a      	cmp	r2, r3
 801473c:	d1ef      	bne.n	801471e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	f003 0302 	and.w	r3, r3, #2
 8014746:	2b00      	cmp	r3, #0
 8014748:	d016      	beq.n	8014778 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	689b      	ldr	r3, [r3, #8]
 801474e:	4618      	mov	r0, r3
 8014750:	f7ff faef 	bl	8013d32 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014754:	f7fd fdf4 	bl	8012340 <HAL_GetTick>
 8014758:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801475a:	e008      	b.n	801476e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801475c:	f7fd fdf0 	bl	8012340 <HAL_GetTick>
 8014760:	4602      	mov	r2, r0
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	1ad3      	subs	r3, r2, r3
 8014766:	2b02      	cmp	r3, #2
 8014768:	d901      	bls.n	801476e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 801476a:	2303      	movs	r3, #3
 801476c:	e0f2      	b.n	8014954 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801476e:	f7ff fbe9 	bl	8013f44 <LL_RCC_IsActiveFlag_HPRE>
 8014772:	4603      	mov	r3, r0
 8014774:	2b00      	cmp	r3, #0
 8014776:	d0f1      	beq.n	801475c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	f003 0320 	and.w	r3, r3, #32
 8014780:	2b00      	cmp	r3, #0
 8014782:	d016      	beq.n	80147b2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	695b      	ldr	r3, [r3, #20]
 8014788:	4618      	mov	r0, r3
 801478a:	f7ff fae6 	bl	8013d5a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801478e:	f7fd fdd7 	bl	8012340 <HAL_GetTick>
 8014792:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8014794:	e008      	b.n	80147a8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014796:	f7fd fdd3 	bl	8012340 <HAL_GetTick>
 801479a:	4602      	mov	r2, r0
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	1ad3      	subs	r3, r2, r3
 80147a0:	2b02      	cmp	r3, #2
 80147a2:	d901      	bls.n	80147a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80147a4:	2303      	movs	r3, #3
 80147a6:	e0d5      	b.n	8014954 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80147a8:	f7ff fbde 	bl	8013f68 <LL_RCC_IsActiveFlag_C2HPRE>
 80147ac:	4603      	mov	r3, r0
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d0f1      	beq.n	8014796 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d016      	beq.n	80147ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	699b      	ldr	r3, [r3, #24]
 80147c2:	4618      	mov	r0, r3
 80147c4:	f7ff fadf 	bl	8013d86 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80147c8:	f7fd fdba 	bl	8012340 <HAL_GetTick>
 80147cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80147ce:	e008      	b.n	80147e2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80147d0:	f7fd fdb6 	bl	8012340 <HAL_GetTick>
 80147d4:	4602      	mov	r2, r0
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	1ad3      	subs	r3, r2, r3
 80147da:	2b02      	cmp	r3, #2
 80147dc:	d901      	bls.n	80147e2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80147de:	2303      	movs	r3, #3
 80147e0:	e0b8      	b.n	8014954 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80147e2:	f7ff fbd4 	bl	8013f8e <LL_RCC_IsActiveFlag_SHDHPRE>
 80147e6:	4603      	mov	r3, r0
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d0f1      	beq.n	80147d0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	f003 0304 	and.w	r3, r3, #4
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d016      	beq.n	8014826 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	68db      	ldr	r3, [r3, #12]
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7ff fad9 	bl	8013db4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014802:	f7fd fd9d 	bl	8012340 <HAL_GetTick>
 8014806:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8014808:	e008      	b.n	801481c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801480a:	f7fd fd99 	bl	8012340 <HAL_GetTick>
 801480e:	4602      	mov	r2, r0
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	1ad3      	subs	r3, r2, r3
 8014814:	2b02      	cmp	r3, #2
 8014816:	d901      	bls.n	801481c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8014818:	2303      	movs	r3, #3
 801481a:	e09b      	b.n	8014954 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801481c:	f7ff fbca 	bl	8013fb4 <LL_RCC_IsActiveFlag_PPRE1>
 8014820:	4603      	mov	r3, r0
 8014822:	2b00      	cmp	r3, #0
 8014824:	d0f1      	beq.n	801480a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	f003 0308 	and.w	r3, r3, #8
 801482e:	2b00      	cmp	r3, #0
 8014830:	d017      	beq.n	8014862 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	691b      	ldr	r3, [r3, #16]
 8014836:	00db      	lsls	r3, r3, #3
 8014838:	4618      	mov	r0, r3
 801483a:	f7ff facf 	bl	8013ddc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801483e:	f7fd fd7f 	bl	8012340 <HAL_GetTick>
 8014842:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8014844:	e008      	b.n	8014858 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014846:	f7fd fd7b 	bl	8012340 <HAL_GetTick>
 801484a:	4602      	mov	r2, r0
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	1ad3      	subs	r3, r2, r3
 8014850:	2b02      	cmp	r3, #2
 8014852:	d901      	bls.n	8014858 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8014854:	2303      	movs	r3, #3
 8014856:	e07d      	b.n	8014954 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8014858:	f7ff fbbe 	bl	8013fd8 <LL_RCC_IsActiveFlag_PPRE2>
 801485c:	4603      	mov	r3, r0
 801485e:	2b00      	cmp	r3, #0
 8014860:	d0f1      	beq.n	8014846 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	f003 0301 	and.w	r3, r3, #1
 801486a:	2b00      	cmp	r3, #0
 801486c:	d043      	beq.n	80148f6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	685b      	ldr	r3, [r3, #4]
 8014872:	2b02      	cmp	r3, #2
 8014874:	d106      	bne.n	8014884 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8014876:	f7ff f86f 	bl	8013958 <LL_RCC_HSE_IsReady>
 801487a:	4603      	mov	r3, r0
 801487c:	2b00      	cmp	r3, #0
 801487e:	d11e      	bne.n	80148be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014880:	2301      	movs	r3, #1
 8014882:	e067      	b.n	8014954 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	685b      	ldr	r3, [r3, #4]
 8014888:	2b03      	cmp	r3, #3
 801488a:	d106      	bne.n	801489a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 801488c:	f7ff fb17 	bl	8013ebe <LL_RCC_PLL_IsReady>
 8014890:	4603      	mov	r3, r0
 8014892:	2b00      	cmp	r3, #0
 8014894:	d113      	bne.n	80148be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014896:	2301      	movs	r3, #1
 8014898:	e05c      	b.n	8014954 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	685b      	ldr	r3, [r3, #4]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d106      	bne.n	80148b0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80148a2:	f7ff f9d7 	bl	8013c54 <LL_RCC_MSI_IsReady>
 80148a6:	4603      	mov	r3, r0
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d108      	bne.n	80148be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80148ac:	2301      	movs	r3, #1
 80148ae:	e051      	b.n	8014954 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80148b0:	f7ff f882 	bl	80139b8 <LL_RCC_HSI_IsReady>
 80148b4:	4603      	mov	r3, r0
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d101      	bne.n	80148be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80148ba:	2301      	movs	r3, #1
 80148bc:	e04a      	b.n	8014954 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	685b      	ldr	r3, [r3, #4]
 80148c2:	4618      	mov	r0, r3
 80148c4:	f7ff fa15 	bl	8013cf2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80148c8:	f7fd fd3a 	bl	8012340 <HAL_GetTick>
 80148cc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80148ce:	e00a      	b.n	80148e6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80148d0:	f7fd fd36 	bl	8012340 <HAL_GetTick>
 80148d4:	4602      	mov	r2, r0
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	1ad3      	subs	r3, r2, r3
 80148da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80148de:	4293      	cmp	r3, r2
 80148e0:	d901      	bls.n	80148e6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80148e2:	2303      	movs	r3, #3
 80148e4:	e036      	b.n	8014954 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80148e6:	f7ff fa18 	bl	8013d1a <LL_RCC_GetSysClkSource>
 80148ea:	4602      	mov	r2, r0
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	685b      	ldr	r3, [r3, #4]
 80148f0:	009b      	lsls	r3, r3, #2
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d1ec      	bne.n	80148d0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80148f6:	4b19      	ldr	r3, [pc, #100]	@ (801495c <HAL_RCC_ClockConfig+0x278>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	f003 0307 	and.w	r3, r3, #7
 80148fe:	683a      	ldr	r2, [r7, #0]
 8014900:	429a      	cmp	r2, r3
 8014902:	d21b      	bcs.n	801493c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014904:	4b15      	ldr	r3, [pc, #84]	@ (801495c <HAL_RCC_ClockConfig+0x278>)
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	f023 0207 	bic.w	r2, r3, #7
 801490c:	4913      	ldr	r1, [pc, #76]	@ (801495c <HAL_RCC_ClockConfig+0x278>)
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	4313      	orrs	r3, r2
 8014912:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014914:	f7fd fd14 	bl	8012340 <HAL_GetTick>
 8014918:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801491a:	e008      	b.n	801492e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801491c:	f7fd fd10 	bl	8012340 <HAL_GetTick>
 8014920:	4602      	mov	r2, r0
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	1ad3      	subs	r3, r2, r3
 8014926:	2b02      	cmp	r3, #2
 8014928:	d901      	bls.n	801492e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 801492a:	2303      	movs	r3, #3
 801492c:	e012      	b.n	8014954 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801492e:	4b0b      	ldr	r3, [pc, #44]	@ (801495c <HAL_RCC_ClockConfig+0x278>)
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	f003 0307 	and.w	r3, r3, #7
 8014936:	683a      	ldr	r2, [r7, #0]
 8014938:	429a      	cmp	r2, r3
 801493a:	d1ef      	bne.n	801491c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801493c:	f000 f87e 	bl	8014a3c <HAL_RCC_GetHCLKFreq>
 8014940:	4603      	mov	r3, r0
 8014942:	4a07      	ldr	r2, [pc, #28]	@ (8014960 <HAL_RCC_ClockConfig+0x27c>)
 8014944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8014946:	f7fd fd07 	bl	8012358 <HAL_GetTickPrio>
 801494a:	4603      	mov	r3, r0
 801494c:	4618      	mov	r0, r3
 801494e:	f7ec faff 	bl	8000f50 <HAL_InitTick>
 8014952:	4603      	mov	r3, r0
}
 8014954:	4618      	mov	r0, r3
 8014956:	3710      	adds	r7, #16
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}
 801495c:	58004000 	.word	0x58004000
 8014960:	20000008 	.word	0x20000008

08014964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014964:	b590      	push	{r4, r7, lr}
 8014966:	b085      	sub	sp, #20
 8014968:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801496a:	f7ff f9d6 	bl	8013d1a <LL_RCC_GetSysClkSource>
 801496e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d10a      	bne.n	801498c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014976:	f7ff f992 	bl	8013c9e <LL_RCC_MSI_GetRange>
 801497a:	4603      	mov	r3, r0
 801497c:	091b      	lsrs	r3, r3, #4
 801497e:	f003 030f 	and.w	r3, r3, #15
 8014982:	4a2b      	ldr	r2, [pc, #172]	@ (8014a30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8014984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014988:	60fb      	str	r3, [r7, #12]
 801498a:	e04b      	b.n	8014a24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2b04      	cmp	r3, #4
 8014990:	d102      	bne.n	8014998 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8014992:	4b28      	ldr	r3, [pc, #160]	@ (8014a34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8014994:	60fb      	str	r3, [r7, #12]
 8014996:	e045      	b.n	8014a24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2b08      	cmp	r3, #8
 801499c:	d10a      	bne.n	80149b4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801499e:	f7fe ffab 	bl	80138f8 <LL_RCC_HSE_IsEnabledDiv2>
 80149a2:	4603      	mov	r3, r0
 80149a4:	2b01      	cmp	r3, #1
 80149a6:	d102      	bne.n	80149ae <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80149a8:	4b22      	ldr	r3, [pc, #136]	@ (8014a34 <HAL_RCC_GetSysClockFreq+0xd0>)
 80149aa:	60fb      	str	r3, [r7, #12]
 80149ac:	e03a      	b.n	8014a24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80149ae:	4b22      	ldr	r3, [pc, #136]	@ (8014a38 <HAL_RCC_GetSysClockFreq+0xd4>)
 80149b0:	60fb      	str	r3, [r7, #12]
 80149b2:	e037      	b.n	8014a24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80149b4:	f7ff faba 	bl	8013f2c <LL_RCC_PLL_GetMainSource>
 80149b8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	2b02      	cmp	r3, #2
 80149be:	d003      	beq.n	80149c8 <HAL_RCC_GetSysClockFreq+0x64>
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	2b03      	cmp	r3, #3
 80149c4:	d003      	beq.n	80149ce <HAL_RCC_GetSysClockFreq+0x6a>
 80149c6:	e00d      	b.n	80149e4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80149c8:	4b1a      	ldr	r3, [pc, #104]	@ (8014a34 <HAL_RCC_GetSysClockFreq+0xd0>)
 80149ca:	60bb      	str	r3, [r7, #8]
        break;
 80149cc:	e015      	b.n	80149fa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80149ce:	f7fe ff93 	bl	80138f8 <LL_RCC_HSE_IsEnabledDiv2>
 80149d2:	4603      	mov	r3, r0
 80149d4:	2b01      	cmp	r3, #1
 80149d6:	d102      	bne.n	80149de <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80149d8:	4b16      	ldr	r3, [pc, #88]	@ (8014a34 <HAL_RCC_GetSysClockFreq+0xd0>)
 80149da:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80149dc:	e00d      	b.n	80149fa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80149de:	4b16      	ldr	r3, [pc, #88]	@ (8014a38 <HAL_RCC_GetSysClockFreq+0xd4>)
 80149e0:	60bb      	str	r3, [r7, #8]
        break;
 80149e2:	e00a      	b.n	80149fa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80149e4:	f7ff f95b 	bl	8013c9e <LL_RCC_MSI_GetRange>
 80149e8:	4603      	mov	r3, r0
 80149ea:	091b      	lsrs	r3, r3, #4
 80149ec:	f003 030f 	and.w	r3, r3, #15
 80149f0:	4a0f      	ldr	r2, [pc, #60]	@ (8014a30 <HAL_RCC_GetSysClockFreq+0xcc>)
 80149f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80149f6:	60bb      	str	r3, [r7, #8]
        break;
 80149f8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80149fa:	f7ff fa72 	bl	8013ee2 <LL_RCC_PLL_GetN>
 80149fe:	4602      	mov	r2, r0
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	fb03 f402 	mul.w	r4, r3, r2
 8014a06:	f7ff fa85 	bl	8013f14 <LL_RCC_PLL_GetDivider>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	091b      	lsrs	r3, r3, #4
 8014a0e:	3301      	adds	r3, #1
 8014a10:	fbb4 f4f3 	udiv	r4, r4, r3
 8014a14:	f7ff fa72 	bl	8013efc <LL_RCC_PLL_GetR>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	0f5b      	lsrs	r3, r3, #29
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	fbb4 f3f3 	udiv	r3, r4, r3
 8014a22:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8014a24:	68fb      	ldr	r3, [r7, #12]
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	3714      	adds	r7, #20
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	bd90      	pop	{r4, r7, pc}
 8014a2e:	bf00      	nop
 8014a30:	0801aa88 	.word	0x0801aa88
 8014a34:	00f42400 	.word	0x00f42400
 8014a38:	01e84800 	.word	0x01e84800

08014a3c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014a3c:	b598      	push	{r3, r4, r7, lr}
 8014a3e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8014a40:	f7ff ff90 	bl	8014964 <HAL_RCC_GetSysClockFreq>
 8014a44:	4604      	mov	r4, r0
 8014a46:	f7ff f9dd 	bl	8013e04 <LL_RCC_GetAHBPrescaler>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	091b      	lsrs	r3, r3, #4
 8014a4e:	f003 030f 	and.w	r3, r3, #15
 8014a52:	4a03      	ldr	r2, [pc, #12]	@ (8014a60 <HAL_RCC_GetHCLKFreq+0x24>)
 8014a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a58:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	bd98      	pop	{r3, r4, r7, pc}
 8014a60:	0801aa28 	.word	0x0801aa28

08014a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014a64:	b598      	push	{r3, r4, r7, lr}
 8014a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8014a68:	f7ff ffe8 	bl	8014a3c <HAL_RCC_GetHCLKFreq>
 8014a6c:	4604      	mov	r4, r0
 8014a6e:	f7ff f9f0 	bl	8013e52 <LL_RCC_GetAPB1Prescaler>
 8014a72:	4603      	mov	r3, r0
 8014a74:	0a1b      	lsrs	r3, r3, #8
 8014a76:	f003 0307 	and.w	r3, r3, #7
 8014a7a:	4a04      	ldr	r2, [pc, #16]	@ (8014a8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8014a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a80:	f003 031f 	and.w	r3, r3, #31
 8014a84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8014a88:	4618      	mov	r0, r3
 8014a8a:	bd98      	pop	{r3, r4, r7, pc}
 8014a8c:	0801aa68 	.word	0x0801aa68

08014a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014a90:	b598      	push	{r3, r4, r7, lr}
 8014a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8014a94:	f7ff ffd2 	bl	8014a3c <HAL_RCC_GetHCLKFreq>
 8014a98:	4604      	mov	r4, r0
 8014a9a:	f7ff f9e6 	bl	8013e6a <LL_RCC_GetAPB2Prescaler>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	0adb      	lsrs	r3, r3, #11
 8014aa2:	f003 0307 	and.w	r3, r3, #7
 8014aa6:	4a04      	ldr	r2, [pc, #16]	@ (8014ab8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8014aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014aac:	f003 031f 	and.w	r3, r3, #31
 8014ab0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	bd98      	pop	{r3, r4, r7, pc}
 8014ab8:	0801aa68 	.word	0x0801aa68

08014abc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b082      	sub	sp, #8
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
 8014ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	226f      	movs	r2, #111	@ 0x6f
 8014aca:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8014acc:	f7ff f925 	bl	8013d1a <LL_RCC_GetSysClkSource>
 8014ad0:	4602      	mov	r2, r0
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8014ad6:	f7ff f995 	bl	8013e04 <LL_RCC_GetAHBPrescaler>
 8014ada:	4602      	mov	r2, r0
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8014ae0:	f7ff f9b7 	bl	8013e52 <LL_RCC_GetAPB1Prescaler>
 8014ae4:	4602      	mov	r2, r0
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8014aea:	f7ff f9be 	bl	8013e6a <LL_RCC_GetAPB2Prescaler>
 8014aee:	4602      	mov	r2, r0
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8014af4:	f7ff f992 	bl	8013e1c <LL_C2_RCC_GetAHBPrescaler>
 8014af8:	4602      	mov	r2, r0
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8014afe:	f7ff f99a 	bl	8013e36 <LL_RCC_GetAHB4Prescaler>
 8014b02:	4602      	mov	r2, r0
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8014b08:	4b04      	ldr	r3, [pc, #16]	@ (8014b1c <HAL_RCC_GetClockConfig+0x60>)
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	f003 0207 	and.w	r2, r3, #7
 8014b10:	683b      	ldr	r3, [r7, #0]
 8014b12:	601a      	str	r2, [r3, #0]
}
 8014b14:	bf00      	nop
 8014b16:	3708      	adds	r7, #8
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	bd80      	pop	{r7, pc}
 8014b1c:	58004000 	.word	0x58004000

08014b20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8014b20:	b590      	push	{r4, r7, lr}
 8014b22:	b085      	sub	sp, #20
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	2bb0      	cmp	r3, #176	@ 0xb0
 8014b2c:	d903      	bls.n	8014b36 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8014b2e:	4b15      	ldr	r3, [pc, #84]	@ (8014b84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8014b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b32:	60fb      	str	r3, [r7, #12]
 8014b34:	e007      	b.n	8014b46 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	091b      	lsrs	r3, r3, #4
 8014b3a:	f003 030f 	and.w	r3, r3, #15
 8014b3e:	4a11      	ldr	r2, [pc, #68]	@ (8014b84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8014b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b44:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8014b46:	f7ff f976 	bl	8013e36 <LL_RCC_GetAHB4Prescaler>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	091b      	lsrs	r3, r3, #4
 8014b4e:	f003 030f 	and.w	r3, r3, #15
 8014b52:	4a0d      	ldr	r2, [pc, #52]	@ (8014b88 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8014b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b58:	68fa      	ldr	r2, [r7, #12]
 8014b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b5e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	4a0a      	ldr	r2, [pc, #40]	@ (8014b8c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8014b64:	fba2 2303 	umull	r2, r3, r2, r3
 8014b68:	0c9c      	lsrs	r4, r3, #18
 8014b6a:	f7fe feb7 	bl	80138dc <HAL_PWREx_GetVoltageRange>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	4619      	mov	r1, r3
 8014b72:	4620      	mov	r0, r4
 8014b74:	f000 f80c 	bl	8014b90 <RCC_SetFlashLatency>
 8014b78:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	3714      	adds	r7, #20
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	bd90      	pop	{r4, r7, pc}
 8014b82:	bf00      	nop
 8014b84:	0801aa88 	.word	0x0801aa88
 8014b88:	0801aa28 	.word	0x0801aa28
 8014b8c:	431bde83 	.word	0x431bde83

08014b90 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8014b90:	b590      	push	{r4, r7, lr}
 8014b92:	b093      	sub	sp, #76	@ 0x4c
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
 8014b98:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8014b9a:	4b37      	ldr	r3, [pc, #220]	@ (8014c78 <RCC_SetFlashLatency+0xe8>)
 8014b9c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8014ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8014ba6:	4a35      	ldr	r2, [pc, #212]	@ (8014c7c <RCC_SetFlashLatency+0xec>)
 8014ba8:	f107 031c 	add.w	r3, r7, #28
 8014bac:	ca07      	ldmia	r2, {r0, r1, r2}
 8014bae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8014bb2:	4b33      	ldr	r3, [pc, #204]	@ (8014c80 <RCC_SetFlashLatency+0xf0>)
 8014bb4:	f107 040c 	add.w	r4, r7, #12
 8014bb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014bba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014bc8:	d11a      	bne.n	8014c00 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8014bca:	2300      	movs	r3, #0
 8014bcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8014bce:	e013      	b.n	8014bf8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8014bd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014bd2:	009b      	lsls	r3, r3, #2
 8014bd4:	3348      	adds	r3, #72	@ 0x48
 8014bd6:	443b      	add	r3, r7
 8014bd8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8014bdc:	687a      	ldr	r2, [r7, #4]
 8014bde:	429a      	cmp	r2, r3
 8014be0:	d807      	bhi.n	8014bf2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8014be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014be4:	009b      	lsls	r3, r3, #2
 8014be6:	3348      	adds	r3, #72	@ 0x48
 8014be8:	443b      	add	r3, r7
 8014bea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8014bee:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8014bf0:	e020      	b.n	8014c34 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8014bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014bf4:	3301      	adds	r3, #1
 8014bf6:	643b      	str	r3, [r7, #64]	@ 0x40
 8014bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014bfa:	2b03      	cmp	r3, #3
 8014bfc:	d9e8      	bls.n	8014bd0 <RCC_SetFlashLatency+0x40>
 8014bfe:	e019      	b.n	8014c34 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8014c00:	2300      	movs	r3, #0
 8014c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014c04:	e013      	b.n	8014c2e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8014c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c08:	009b      	lsls	r3, r3, #2
 8014c0a:	3348      	adds	r3, #72	@ 0x48
 8014c0c:	443b      	add	r3, r7
 8014c0e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8014c12:	687a      	ldr	r2, [r7, #4]
 8014c14:	429a      	cmp	r2, r3
 8014c16:	d807      	bhi.n	8014c28 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8014c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c1a:	009b      	lsls	r3, r3, #2
 8014c1c:	3348      	adds	r3, #72	@ 0x48
 8014c1e:	443b      	add	r3, r7
 8014c20:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8014c24:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8014c26:	e005      	b.n	8014c34 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8014c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c2a:	3301      	adds	r3, #1
 8014c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c30:	2b02      	cmp	r3, #2
 8014c32:	d9e8      	bls.n	8014c06 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8014c34:	4b13      	ldr	r3, [pc, #76]	@ (8014c84 <RCC_SetFlashLatency+0xf4>)
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	f023 0207 	bic.w	r2, r3, #7
 8014c3c:	4911      	ldr	r1, [pc, #68]	@ (8014c84 <RCC_SetFlashLatency+0xf4>)
 8014c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014c40:	4313      	orrs	r3, r2
 8014c42:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8014c44:	f7fd fb7c 	bl	8012340 <HAL_GetTick>
 8014c48:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8014c4a:	e008      	b.n	8014c5e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8014c4c:	f7fd fb78 	bl	8012340 <HAL_GetTick>
 8014c50:	4602      	mov	r2, r0
 8014c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c54:	1ad3      	subs	r3, r2, r3
 8014c56:	2b02      	cmp	r3, #2
 8014c58:	d901      	bls.n	8014c5e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8014c5a:	2303      	movs	r3, #3
 8014c5c:	e007      	b.n	8014c6e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8014c5e:	4b09      	ldr	r3, [pc, #36]	@ (8014c84 <RCC_SetFlashLatency+0xf4>)
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	f003 0307 	and.w	r3, r3, #7
 8014c66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014c68:	429a      	cmp	r2, r3
 8014c6a:	d1ef      	bne.n	8014c4c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8014c6c:	2300      	movs	r3, #0
}
 8014c6e:	4618      	mov	r0, r3
 8014c70:	374c      	adds	r7, #76	@ 0x4c
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd90      	pop	{r4, r7, pc}
 8014c76:	bf00      	nop
 8014c78:	0801a950 	.word	0x0801a950
 8014c7c:	0801a960 	.word	0x0801a960
 8014c80:	0801a96c 	.word	0x0801a96c
 8014c84:	58004000 	.word	0x58004000

08014c88 <LL_RCC_LSE_IsEnabled>:
{
 8014c88:	b480      	push	{r7}
 8014c8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8014c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014c94:	f003 0301 	and.w	r3, r3, #1
 8014c98:	2b01      	cmp	r3, #1
 8014c9a:	d101      	bne.n	8014ca0 <LL_RCC_LSE_IsEnabled+0x18>
 8014c9c:	2301      	movs	r3, #1
 8014c9e:	e000      	b.n	8014ca2 <LL_RCC_LSE_IsEnabled+0x1a>
 8014ca0:	2300      	movs	r3, #0
}
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014caa:	4770      	bx	lr

08014cac <LL_RCC_LSE_IsReady>:
{
 8014cac:	b480      	push	{r7}
 8014cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8014cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014cb8:	f003 0302 	and.w	r3, r3, #2
 8014cbc:	2b02      	cmp	r3, #2
 8014cbe:	d101      	bne.n	8014cc4 <LL_RCC_LSE_IsReady+0x18>
 8014cc0:	2301      	movs	r3, #1
 8014cc2:	e000      	b.n	8014cc6 <LL_RCC_LSE_IsReady+0x1a>
 8014cc4:	2300      	movs	r3, #0
}
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cce:	4770      	bx	lr

08014cd0 <LL_RCC_MSI_EnablePLLMode>:
{
 8014cd0:	b480      	push	{r7}
 8014cd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8014cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014cde:	f043 0304 	orr.w	r3, r3, #4
 8014ce2:	6013      	str	r3, [r2, #0]
}
 8014ce4:	bf00      	nop
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cec:	4770      	bx	lr

08014cee <LL_RCC_SetRFWKPClockSource>:
{
 8014cee:	b480      	push	{r7}
 8014cf0:	b083      	sub	sp, #12
 8014cf2:	af00      	add	r7, sp, #0
 8014cf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8014cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014cfe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8014d02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	4313      	orrs	r3, r2
 8014d0a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8014d0e:	bf00      	nop
 8014d10:	370c      	adds	r7, #12
 8014d12:	46bd      	mov	sp, r7
 8014d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d18:	4770      	bx	lr

08014d1a <LL_RCC_SetSMPSClockSource>:
{
 8014d1a:	b480      	push	{r7}
 8014d1c:	b083      	sub	sp, #12
 8014d1e:	af00      	add	r7, sp, #0
 8014d20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8014d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d28:	f023 0203 	bic.w	r2, r3, #3
 8014d2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	4313      	orrs	r3, r2
 8014d34:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8014d36:	bf00      	nop
 8014d38:	370c      	adds	r7, #12
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d40:	4770      	bx	lr

08014d42 <LL_RCC_SetSMPSPrescaler>:
{
 8014d42:	b480      	push	{r7}
 8014d44:	b083      	sub	sp, #12
 8014d46:	af00      	add	r7, sp, #0
 8014d48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8014d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8014d54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	4313      	orrs	r3, r2
 8014d5c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8014d5e:	bf00      	nop
 8014d60:	370c      	adds	r7, #12
 8014d62:	46bd      	mov	sp, r7
 8014d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d68:	4770      	bx	lr

08014d6a <LL_RCC_SetUSARTClockSource>:
{
 8014d6a:	b480      	push	{r7}
 8014d6c:	b083      	sub	sp, #12
 8014d6e:	af00      	add	r7, sp, #0
 8014d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8014d72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014d7a:	f023 0203 	bic.w	r2, r3, #3
 8014d7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	4313      	orrs	r3, r2
 8014d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014d8a:	bf00      	nop
 8014d8c:	370c      	adds	r7, #12
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d94:	4770      	bx	lr

08014d96 <LL_RCC_SetLPUARTClockSource>:
{
 8014d96:	b480      	push	{r7}
 8014d98:	b083      	sub	sp, #12
 8014d9a:	af00      	add	r7, sp, #0
 8014d9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8014d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014da6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8014daa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	4313      	orrs	r3, r2
 8014db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014db6:	bf00      	nop
 8014db8:	370c      	adds	r7, #12
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc0:	4770      	bx	lr

08014dc2 <LL_RCC_SetI2CClockSource>:
{
 8014dc2:	b480      	push	{r7}
 8014dc4:	b083      	sub	sp, #12
 8014dc6:	af00      	add	r7, sp, #0
 8014dc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8014dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014dce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	091b      	lsrs	r3, r3, #4
 8014dd6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8014dda:	43db      	mvns	r3, r3
 8014ddc:	401a      	ands	r2, r3
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	011b      	lsls	r3, r3, #4
 8014de2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8014de6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014dea:	4313      	orrs	r3, r2
 8014dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014df0:	bf00      	nop
 8014df2:	370c      	adds	r7, #12
 8014df4:	46bd      	mov	sp, r7
 8014df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfa:	4770      	bx	lr

08014dfc <LL_RCC_SetLPTIMClockSource>:
{
 8014dfc:	b480      	push	{r7}
 8014dfe:	b083      	sub	sp, #12
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8014e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014e08:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	0c1b      	lsrs	r3, r3, #16
 8014e10:	041b      	lsls	r3, r3, #16
 8014e12:	43db      	mvns	r3, r3
 8014e14:	401a      	ands	r2, r3
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	041b      	lsls	r3, r3, #16
 8014e1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014e1e:	4313      	orrs	r3, r2
 8014e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014e24:	bf00      	nop
 8014e26:	370c      	adds	r7, #12
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2e:	4770      	bx	lr

08014e30 <LL_RCC_SetSAIClockSource>:
{
 8014e30:	b480      	push	{r7}
 8014e32:	b083      	sub	sp, #12
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8014e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014e40:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8014e44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	4313      	orrs	r3, r2
 8014e4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014e50:	bf00      	nop
 8014e52:	370c      	adds	r7, #12
 8014e54:	46bd      	mov	sp, r7
 8014e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5a:	4770      	bx	lr

08014e5c <LL_RCC_SetRNGClockSource>:
{
 8014e5c:	b480      	push	{r7}
 8014e5e:	b083      	sub	sp, #12
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8014e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014e6c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8014e70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	4313      	orrs	r3, r2
 8014e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014e7c:	bf00      	nop
 8014e7e:	370c      	adds	r7, #12
 8014e80:	46bd      	mov	sp, r7
 8014e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e86:	4770      	bx	lr

08014e88 <LL_RCC_SetCLK48ClockSource>:
{
 8014e88:	b480      	push	{r7}
 8014e8a:	b083      	sub	sp, #12
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8014e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014e98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8014e9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	4313      	orrs	r3, r2
 8014ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014ea8:	bf00      	nop
 8014eaa:	370c      	adds	r7, #12
 8014eac:	46bd      	mov	sp, r7
 8014eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb2:	4770      	bx	lr

08014eb4 <LL_RCC_SetUSBClockSource>:
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b082      	sub	sp, #8
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f7ff ffe3 	bl	8014e88 <LL_RCC_SetCLK48ClockSource>
}
 8014ec2:	bf00      	nop
 8014ec4:	3708      	adds	r7, #8
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd80      	pop	{r7, pc}

08014eca <LL_RCC_SetADCClockSource>:
{
 8014eca:	b480      	push	{r7}
 8014ecc:	b083      	sub	sp, #12
 8014ece:	af00      	add	r7, sp, #0
 8014ed0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8014ed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014eda:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8014ede:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	4313      	orrs	r3, r2
 8014ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8014eea:	bf00      	nop
 8014eec:	370c      	adds	r7, #12
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef4:	4770      	bx	lr

08014ef6 <LL_RCC_SetRTCClockSource>:
{
 8014ef6:	b480      	push	{r7}
 8014ef8:	b083      	sub	sp, #12
 8014efa:	af00      	add	r7, sp, #0
 8014efc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8014efe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014f06:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8014f0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	4313      	orrs	r3, r2
 8014f12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8014f16:	bf00      	nop
 8014f18:	370c      	adds	r7, #12
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f20:	4770      	bx	lr

08014f22 <LL_RCC_GetRTCClockSource>:
{
 8014f22:	b480      	push	{r7}
 8014f24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8014f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8014f32:	4618      	mov	r0, r3
 8014f34:	46bd      	mov	sp, r7
 8014f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3a:	4770      	bx	lr

08014f3c <LL_RCC_ForceBackupDomainReset>:
{
 8014f3c:	b480      	push	{r7}
 8014f3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8014f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014f48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8014f54:	bf00      	nop
 8014f56:	46bd      	mov	sp, r7
 8014f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5c:	4770      	bx	lr

08014f5e <LL_RCC_ReleaseBackupDomainReset>:
{
 8014f5e:	b480      	push	{r7}
 8014f60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8014f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014f6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014f72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8014f76:	bf00      	nop
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7e:	4770      	bx	lr

08014f80 <LL_RCC_PLLSAI1_Enable>:
{
 8014f80:	b480      	push	{r7}
 8014f82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8014f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014f8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8014f92:	6013      	str	r3, [r2, #0]
}
 8014f94:	bf00      	nop
 8014f96:	46bd      	mov	sp, r7
 8014f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9c:	4770      	bx	lr

08014f9e <LL_RCC_PLLSAI1_Disable>:
{
 8014f9e:	b480      	push	{r7}
 8014fa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8014fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014fac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014fb0:	6013      	str	r3, [r2, #0]
}
 8014fb2:	bf00      	nop
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fba:	4770      	bx	lr

08014fbc <LL_RCC_PLLSAI1_IsReady>:
{
 8014fbc:	b480      	push	{r7}
 8014fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8014fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014fca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014fce:	d101      	bne.n	8014fd4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	e000      	b.n	8014fd6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8014fd4:	2300      	movs	r3, #0
}
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fde:	4770      	bx	lr

08014fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b088      	sub	sp, #32
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8014fe8:	2300      	movs	r3, #0
 8014fea:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8014fec:	2300      	movs	r3, #0
 8014fee:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d034      	beq.n	8015066 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015000:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8015004:	d021      	beq.n	801504a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8015006:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801500a:	d81b      	bhi.n	8015044 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801500c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015010:	d01d      	beq.n	801504e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8015012:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015016:	d815      	bhi.n	8015044 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8015018:	2b00      	cmp	r3, #0
 801501a:	d00b      	beq.n	8015034 <HAL_RCCEx_PeriphCLKConfig+0x54>
 801501c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015020:	d110      	bne.n	8015044 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8015022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015026:	68db      	ldr	r3, [r3, #12]
 8015028:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801502c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015030:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8015032:	e00d      	b.n	8015050 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	3304      	adds	r3, #4
 8015038:	4618      	mov	r0, r3
 801503a:	f000 f94d 	bl	80152d8 <RCCEx_PLLSAI1_ConfigNP>
 801503e:	4603      	mov	r3, r0
 8015040:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8015042:	e005      	b.n	8015050 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8015044:	2301      	movs	r3, #1
 8015046:	77fb      	strb	r3, [r7, #31]
        break;
 8015048:	e002      	b.n	8015050 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801504a:	bf00      	nop
 801504c:	e000      	b.n	8015050 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801504e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015050:	7ffb      	ldrb	r3, [r7, #31]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d105      	bne.n	8015062 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801505a:	4618      	mov	r0, r3
 801505c:	f7ff fee8 	bl	8014e30 <LL_RCC_SetSAIClockSource>
 8015060:	e001      	b.n	8015066 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015062:	7ffb      	ldrb	r3, [r7, #31]
 8015064:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801506e:	2b00      	cmp	r3, #0
 8015070:	d046      	beq.n	8015100 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8015072:	f7ff ff56 	bl	8014f22 <LL_RCC_GetRTCClockSource>
 8015076:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801507c:	69ba      	ldr	r2, [r7, #24]
 801507e:	429a      	cmp	r2, r3
 8015080:	d03c      	beq.n	80150fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8015082:	f7fe fc1b 	bl	80138bc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8015086:	69bb      	ldr	r3, [r7, #24]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d105      	bne.n	8015098 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015090:	4618      	mov	r0, r3
 8015092:	f7ff ff30 	bl	8014ef6 <LL_RCC_SetRTCClockSource>
 8015096:	e02e      	b.n	80150f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8015098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80150a0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80150a2:	f7ff ff4b 	bl	8014f3c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80150a6:	f7ff ff5a 	bl	8014f5e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80150aa:	697b      	ldr	r3, [r7, #20]
 80150ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80150b4:	4313      	orrs	r3, r2
 80150b6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80150b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80150c2:	f7ff fde1 	bl	8014c88 <LL_RCC_LSE_IsEnabled>
 80150c6:	4603      	mov	r3, r0
 80150c8:	2b01      	cmp	r3, #1
 80150ca:	d114      	bne.n	80150f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80150cc:	f7fd f938 	bl	8012340 <HAL_GetTick>
 80150d0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80150d2:	e00b      	b.n	80150ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80150d4:	f7fd f934 	bl	8012340 <HAL_GetTick>
 80150d8:	4602      	mov	r2, r0
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	1ad3      	subs	r3, r2, r3
 80150de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80150e2:	4293      	cmp	r3, r2
 80150e4:	d902      	bls.n	80150ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80150e6:	2303      	movs	r3, #3
 80150e8:	77fb      	strb	r3, [r7, #31]
              break;
 80150ea:	e004      	b.n	80150f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80150ec:	f7ff fdde 	bl	8014cac <LL_RCC_LSE_IsReady>
 80150f0:	4603      	mov	r3, r0
 80150f2:	2b01      	cmp	r3, #1
 80150f4:	d1ee      	bne.n	80150d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80150f6:	7ffb      	ldrb	r3, [r7, #31]
 80150f8:	77bb      	strb	r3, [r7, #30]
 80150fa:	e001      	b.n	8015100 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80150fc:	7ffb      	ldrb	r3, [r7, #31]
 80150fe:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	f003 0301 	and.w	r3, r3, #1
 8015108:	2b00      	cmp	r3, #0
 801510a:	d004      	beq.n	8015116 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	699b      	ldr	r3, [r3, #24]
 8015110:	4618      	mov	r0, r3
 8015112:	f7ff fe2a 	bl	8014d6a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	f003 0302 	and.w	r3, r3, #2
 801511e:	2b00      	cmp	r3, #0
 8015120:	d004      	beq.n	801512c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	69db      	ldr	r3, [r3, #28]
 8015126:	4618      	mov	r0, r3
 8015128:	f7ff fe35 	bl	8014d96 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	f003 0310 	and.w	r3, r3, #16
 8015134:	2b00      	cmp	r3, #0
 8015136:	d004      	beq.n	8015142 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801513c:	4618      	mov	r0, r3
 801513e:	f7ff fe5d 	bl	8014dfc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	f003 0320 	and.w	r3, r3, #32
 801514a:	2b00      	cmp	r3, #0
 801514c:	d004      	beq.n	8015158 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015152:	4618      	mov	r0, r3
 8015154:	f7ff fe52 	bl	8014dfc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	f003 0304 	and.w	r3, r3, #4
 8015160:	2b00      	cmp	r3, #0
 8015162:	d004      	beq.n	801516e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	6a1b      	ldr	r3, [r3, #32]
 8015168:	4618      	mov	r0, r3
 801516a:	f7ff fe2a 	bl	8014dc2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	f003 0308 	and.w	r3, r3, #8
 8015176:	2b00      	cmp	r3, #0
 8015178:	d004      	beq.n	8015184 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801517e:	4618      	mov	r0, r3
 8015180:	f7ff fe1f 	bl	8014dc2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801518c:	2b00      	cmp	r3, #0
 801518e:	d022      	beq.n	80151d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015194:	4618      	mov	r0, r3
 8015196:	f7ff fe8d 	bl	8014eb4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801519e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80151a2:	d107      	bne.n	80151b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80151a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80151a8:	68db      	ldr	r3, [r3, #12]
 80151aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80151ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80151b2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80151b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80151bc:	d10b      	bne.n	80151d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	3304      	adds	r3, #4
 80151c2:	4618      	mov	r0, r3
 80151c4:	f000 f8e3 	bl	801538e <RCCEx_PLLSAI1_ConfigNQ>
 80151c8:	4603      	mov	r3, r0
 80151ca:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80151cc:	7ffb      	ldrb	r3, [r7, #31]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d001      	beq.n	80151d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80151d2:	7ffb      	ldrb	r3, [r7, #31]
 80151d4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d02b      	beq.n	801523a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80151ea:	d008      	beq.n	80151fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80151f4:	d003      	beq.n	80151fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d105      	bne.n	801520a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015202:	4618      	mov	r0, r3
 8015204:	f7ff fe2a 	bl	8014e5c <LL_RCC_SetRNGClockSource>
 8015208:	e00a      	b.n	8015220 <HAL_RCCEx_PeriphCLKConfig+0x240>
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801520e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8015212:	60fb      	str	r3, [r7, #12]
 8015214:	2000      	movs	r0, #0
 8015216:	f7ff fe21 	bl	8014e5c <LL_RCC_SetRNGClockSource>
 801521a:	68f8      	ldr	r0, [r7, #12]
 801521c:	f7ff fe34 	bl	8014e88 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015224:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8015228:	d107      	bne.n	801523a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 801522a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801522e:	68db      	ldr	r3, [r3, #12]
 8015230:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015234:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8015238:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015242:	2b00      	cmp	r3, #0
 8015244:	d022      	beq.n	801528c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801524a:	4618      	mov	r0, r3
 801524c:	f7ff fe3d 	bl	8014eca <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015254:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015258:	d107      	bne.n	801526a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801525a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801525e:	68db      	ldr	r3, [r3, #12]
 8015260:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015268:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801526e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015272:	d10b      	bne.n	801528c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	3304      	adds	r3, #4
 8015278:	4618      	mov	r0, r3
 801527a:	f000 f8e3 	bl	8015444 <RCCEx_PLLSAI1_ConfigNR>
 801527e:	4603      	mov	r3, r0
 8015280:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8015282:	7ffb      	ldrb	r3, [r7, #31]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d001      	beq.n	801528c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8015288:	7ffb      	ldrb	r3, [r7, #31]
 801528a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8015294:	2b00      	cmp	r3, #0
 8015296:	d004      	beq.n	80152a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801529c:	4618      	mov	r0, r3
 801529e:	f7ff fd26 	bl	8014cee <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d009      	beq.n	80152c2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80152b2:	4618      	mov	r0, r3
 80152b4:	f7ff fd45 	bl	8014d42 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80152bc:	4618      	mov	r0, r3
 80152be:	f7ff fd2c 	bl	8014d1a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80152c2:	7fbb      	ldrb	r3, [r7, #30]
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	3720      	adds	r7, #32
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}

080152cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80152d0:	f7ff fcfe 	bl	8014cd0 <LL_RCC_MSI_EnablePLLMode>
}
 80152d4:	bf00      	nop
 80152d6:	bd80      	pop	{r7, pc}

080152d8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b084      	sub	sp, #16
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80152e0:	2300      	movs	r3, #0
 80152e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80152e4:	f7ff fe5b 	bl	8014f9e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80152e8:	f7fd f82a 	bl	8012340 <HAL_GetTick>
 80152ec:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80152ee:	e009      	b.n	8015304 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80152f0:	f7fd f826 	bl	8012340 <HAL_GetTick>
 80152f4:	4602      	mov	r2, r0
 80152f6:	68bb      	ldr	r3, [r7, #8]
 80152f8:	1ad3      	subs	r3, r2, r3
 80152fa:	2b02      	cmp	r3, #2
 80152fc:	d902      	bls.n	8015304 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80152fe:	2303      	movs	r3, #3
 8015300:	73fb      	strb	r3, [r7, #15]
      break;
 8015302:	e004      	b.n	801530e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015304:	f7ff fe5a 	bl	8014fbc <LL_RCC_PLLSAI1_IsReady>
 8015308:	4603      	mov	r3, r0
 801530a:	2b00      	cmp	r3, #0
 801530c:	d1f0      	bne.n	80152f0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 801530e:	7bfb      	ldrb	r3, [r7, #15]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d137      	bne.n	8015384 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8015314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015318:	691b      	ldr	r3, [r3, #16]
 801531a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	021b      	lsls	r3, r3, #8
 8015324:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015328:	4313      	orrs	r3, r2
 801532a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 801532c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015330:	691b      	ldr	r3, [r3, #16]
 8015332:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	685b      	ldr	r3, [r3, #4]
 801533a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801533e:	4313      	orrs	r3, r2
 8015340:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8015342:	f7ff fe1d 	bl	8014f80 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015346:	f7fc fffb 	bl	8012340 <HAL_GetTick>
 801534a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801534c:	e009      	b.n	8015362 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801534e:	f7fc fff7 	bl	8012340 <HAL_GetTick>
 8015352:	4602      	mov	r2, r0
 8015354:	68bb      	ldr	r3, [r7, #8]
 8015356:	1ad3      	subs	r3, r2, r3
 8015358:	2b02      	cmp	r3, #2
 801535a:	d902      	bls.n	8015362 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 801535c:	2303      	movs	r3, #3
 801535e:	73fb      	strb	r3, [r7, #15]
        break;
 8015360:	e004      	b.n	801536c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015362:	f7ff fe2b 	bl	8014fbc <LL_RCC_PLLSAI1_IsReady>
 8015366:	4603      	mov	r3, r0
 8015368:	2b01      	cmp	r3, #1
 801536a:	d1f0      	bne.n	801534e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 801536c:	7bfb      	ldrb	r3, [r7, #15]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d108      	bne.n	8015384 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8015372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015376:	691a      	ldr	r2, [r3, #16]
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	691b      	ldr	r3, [r3, #16]
 801537c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015380:	4313      	orrs	r3, r2
 8015382:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8015384:	7bfb      	ldrb	r3, [r7, #15]
}
 8015386:	4618      	mov	r0, r3
 8015388:	3710      	adds	r7, #16
 801538a:	46bd      	mov	sp, r7
 801538c:	bd80      	pop	{r7, pc}

0801538e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801538e:	b580      	push	{r7, lr}
 8015390:	b084      	sub	sp, #16
 8015392:	af00      	add	r7, sp, #0
 8015394:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8015396:	2300      	movs	r3, #0
 8015398:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801539a:	f7ff fe00 	bl	8014f9e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801539e:	f7fc ffcf 	bl	8012340 <HAL_GetTick>
 80153a2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80153a4:	e009      	b.n	80153ba <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80153a6:	f7fc ffcb 	bl	8012340 <HAL_GetTick>
 80153aa:	4602      	mov	r2, r0
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	1ad3      	subs	r3, r2, r3
 80153b0:	2b02      	cmp	r3, #2
 80153b2:	d902      	bls.n	80153ba <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80153b4:	2303      	movs	r3, #3
 80153b6:	73fb      	strb	r3, [r7, #15]
      break;
 80153b8:	e004      	b.n	80153c4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80153ba:	f7ff fdff 	bl	8014fbc <LL_RCC_PLLSAI1_IsReady>
 80153be:	4603      	mov	r3, r0
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d1f0      	bne.n	80153a6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80153c4:	7bfb      	ldrb	r3, [r7, #15]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d137      	bne.n	801543a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80153ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80153ce:	691b      	ldr	r3, [r3, #16]
 80153d0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	021b      	lsls	r3, r3, #8
 80153da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80153de:	4313      	orrs	r3, r2
 80153e0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80153e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80153e6:	691b      	ldr	r3, [r3, #16]
 80153e8:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	689b      	ldr	r3, [r3, #8]
 80153f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80153f4:	4313      	orrs	r3, r2
 80153f6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80153f8:	f7ff fdc2 	bl	8014f80 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80153fc:	f7fc ffa0 	bl	8012340 <HAL_GetTick>
 8015400:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015402:	e009      	b.n	8015418 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015404:	f7fc ff9c 	bl	8012340 <HAL_GetTick>
 8015408:	4602      	mov	r2, r0
 801540a:	68bb      	ldr	r3, [r7, #8]
 801540c:	1ad3      	subs	r3, r2, r3
 801540e:	2b02      	cmp	r3, #2
 8015410:	d902      	bls.n	8015418 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8015412:	2303      	movs	r3, #3
 8015414:	73fb      	strb	r3, [r7, #15]
        break;
 8015416:	e004      	b.n	8015422 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015418:	f7ff fdd0 	bl	8014fbc <LL_RCC_PLLSAI1_IsReady>
 801541c:	4603      	mov	r3, r0
 801541e:	2b01      	cmp	r3, #1
 8015420:	d1f0      	bne.n	8015404 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8015422:	7bfb      	ldrb	r3, [r7, #15]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d108      	bne.n	801543a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8015428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801542c:	691a      	ldr	r2, [r3, #16]
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	691b      	ldr	r3, [r3, #16]
 8015432:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015436:	4313      	orrs	r3, r2
 8015438:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801543a:	7bfb      	ldrb	r3, [r7, #15]
}
 801543c:	4618      	mov	r0, r3
 801543e:	3710      	adds	r7, #16
 8015440:	46bd      	mov	sp, r7
 8015442:	bd80      	pop	{r7, pc}

08015444 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b084      	sub	sp, #16
 8015448:	af00      	add	r7, sp, #0
 801544a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801544c:	2300      	movs	r3, #0
 801544e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8015450:	f7ff fda5 	bl	8014f9e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8015454:	f7fc ff74 	bl	8012340 <HAL_GetTick>
 8015458:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801545a:	e009      	b.n	8015470 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801545c:	f7fc ff70 	bl	8012340 <HAL_GetTick>
 8015460:	4602      	mov	r2, r0
 8015462:	68bb      	ldr	r3, [r7, #8]
 8015464:	1ad3      	subs	r3, r2, r3
 8015466:	2b02      	cmp	r3, #2
 8015468:	d902      	bls.n	8015470 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 801546a:	2303      	movs	r3, #3
 801546c:	73fb      	strb	r3, [r7, #15]
      break;
 801546e:	e004      	b.n	801547a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015470:	f7ff fda4 	bl	8014fbc <LL_RCC_PLLSAI1_IsReady>
 8015474:	4603      	mov	r3, r0
 8015476:	2b00      	cmp	r3, #0
 8015478:	d1f0      	bne.n	801545c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 801547a:	7bfb      	ldrb	r3, [r7, #15]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d137      	bne.n	80154f0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8015480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015484:	691b      	ldr	r3, [r3, #16]
 8015486:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	021b      	lsls	r3, r3, #8
 8015490:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015494:	4313      	orrs	r3, r2
 8015496:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8015498:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801549c:	691b      	ldr	r3, [r3, #16]
 801549e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	68db      	ldr	r3, [r3, #12]
 80154a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80154aa:	4313      	orrs	r3, r2
 80154ac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80154ae:	f7ff fd67 	bl	8014f80 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80154b2:	f7fc ff45 	bl	8012340 <HAL_GetTick>
 80154b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80154b8:	e009      	b.n	80154ce <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80154ba:	f7fc ff41 	bl	8012340 <HAL_GetTick>
 80154be:	4602      	mov	r2, r0
 80154c0:	68bb      	ldr	r3, [r7, #8]
 80154c2:	1ad3      	subs	r3, r2, r3
 80154c4:	2b02      	cmp	r3, #2
 80154c6:	d902      	bls.n	80154ce <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80154c8:	2303      	movs	r3, #3
 80154ca:	73fb      	strb	r3, [r7, #15]
        break;
 80154cc:	e004      	b.n	80154d8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80154ce:	f7ff fd75 	bl	8014fbc <LL_RCC_PLLSAI1_IsReady>
 80154d2:	4603      	mov	r3, r0
 80154d4:	2b01      	cmp	r3, #1
 80154d6:	d1f0      	bne.n	80154ba <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80154d8:	7bfb      	ldrb	r3, [r7, #15]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d108      	bne.n	80154f0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80154de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80154e2:	691a      	ldr	r2, [r3, #16]
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	691b      	ldr	r3, [r3, #16]
 80154e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80154ec:	4313      	orrs	r3, r2
 80154ee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80154f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3710      	adds	r7, #16
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}

080154fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80154fa:	b580      	push	{r7, lr}
 80154fc:	b082      	sub	sp, #8
 80154fe:	af00      	add	r7, sp, #0
 8015500:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d101      	bne.n	801550c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015508:	2301      	movs	r3, #1
 801550a:	e049      	b.n	80155a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015512:	b2db      	uxtb	r3, r3
 8015514:	2b00      	cmp	r3, #0
 8015516:	d106      	bne.n	8015526 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	2200      	movs	r2, #0
 801551c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015520:	6878      	ldr	r0, [r7, #4]
 8015522:	f000 f841 	bl	80155a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	2202      	movs	r2, #2
 801552a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	681a      	ldr	r2, [r3, #0]
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	3304      	adds	r3, #4
 8015536:	4619      	mov	r1, r3
 8015538:	4610      	mov	r0, r2
 801553a:	f000 f9bd 	bl	80158b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	2201      	movs	r2, #1
 8015542:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2201      	movs	r2, #1
 801554a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	2201      	movs	r2, #1
 8015552:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	2201      	movs	r2, #1
 801555a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2201      	movs	r2, #1
 8015562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	2201      	movs	r2, #1
 801556a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	2201      	movs	r2, #1
 8015572:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	2201      	movs	r2, #1
 801557a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	2201      	movs	r2, #1
 8015582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	2201      	movs	r2, #1
 801558a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	2201      	movs	r2, #1
 8015592:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	2201      	movs	r2, #1
 801559a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801559e:	2300      	movs	r3, #0
}
 80155a0:	4618      	mov	r0, r3
 80155a2:	3708      	adds	r7, #8
 80155a4:	46bd      	mov	sp, r7
 80155a6:	bd80      	pop	{r7, pc}

080155a8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80155a8:	b480      	push	{r7}
 80155aa:	b083      	sub	sp, #12
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80155b0:	bf00      	nop
 80155b2:	370c      	adds	r7, #12
 80155b4:	46bd      	mov	sp, r7
 80155b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ba:	4770      	bx	lr

080155bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80155bc:	b480      	push	{r7}
 80155be:	b085      	sub	sp, #20
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80155ca:	b2db      	uxtb	r3, r3
 80155cc:	2b01      	cmp	r3, #1
 80155ce:	d001      	beq.n	80155d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80155d0:	2301      	movs	r3, #1
 80155d2:	e036      	b.n	8015642 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	2202      	movs	r2, #2
 80155d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	68da      	ldr	r2, [r3, #12]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	f042 0201 	orr.w	r2, r2, #1
 80155ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	4a17      	ldr	r2, [pc, #92]	@ (8015650 <HAL_TIM_Base_Start_IT+0x94>)
 80155f2:	4293      	cmp	r3, r2
 80155f4:	d004      	beq.n	8015600 <HAL_TIM_Base_Start_IT+0x44>
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80155fe:	d115      	bne.n	801562c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	689a      	ldr	r2, [r3, #8]
 8015606:	4b13      	ldr	r3, [pc, #76]	@ (8015654 <HAL_TIM_Base_Start_IT+0x98>)
 8015608:	4013      	ands	r3, r2
 801560a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	2b06      	cmp	r3, #6
 8015610:	d015      	beq.n	801563e <HAL_TIM_Base_Start_IT+0x82>
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015618:	d011      	beq.n	801563e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	681a      	ldr	r2, [r3, #0]
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	f042 0201 	orr.w	r2, r2, #1
 8015628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801562a:	e008      	b.n	801563e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	681a      	ldr	r2, [r3, #0]
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	f042 0201 	orr.w	r2, r2, #1
 801563a:	601a      	str	r2, [r3, #0]
 801563c:	e000      	b.n	8015640 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801563e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015640:	2300      	movs	r3, #0
}
 8015642:	4618      	mov	r0, r3
 8015644:	3714      	adds	r7, #20
 8015646:	46bd      	mov	sp, r7
 8015648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564c:	4770      	bx	lr
 801564e:	bf00      	nop
 8015650:	40012c00 	.word	0x40012c00
 8015654:	00010007 	.word	0x00010007

08015658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b084      	sub	sp, #16
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	68db      	ldr	r3, [r3, #12]
 8015666:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	691b      	ldr	r3, [r3, #16]
 801566e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	f003 0302 	and.w	r3, r3, #2
 8015676:	2b00      	cmp	r3, #0
 8015678:	d020      	beq.n	80156bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	f003 0302 	and.w	r3, r3, #2
 8015680:	2b00      	cmp	r3, #0
 8015682:	d01b      	beq.n	80156bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	f06f 0202 	mvn.w	r2, #2
 801568c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	2201      	movs	r2, #1
 8015692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	699b      	ldr	r3, [r3, #24]
 801569a:	f003 0303 	and.w	r3, r3, #3
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d003      	beq.n	80156aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	f000 f8e9 	bl	801587a <HAL_TIM_IC_CaptureCallback>
 80156a8:	e005      	b.n	80156b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f000 f8db 	bl	8015866 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	f000 f8ec 	bl	801588e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	2200      	movs	r2, #0
 80156ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80156bc:	68bb      	ldr	r3, [r7, #8]
 80156be:	f003 0304 	and.w	r3, r3, #4
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d020      	beq.n	8015708 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	f003 0304 	and.w	r3, r3, #4
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d01b      	beq.n	8015708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	f06f 0204 	mvn.w	r2, #4
 80156d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	2202      	movs	r2, #2
 80156de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	699b      	ldr	r3, [r3, #24]
 80156e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d003      	beq.n	80156f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80156ee:	6878      	ldr	r0, [r7, #4]
 80156f0:	f000 f8c3 	bl	801587a <HAL_TIM_IC_CaptureCallback>
 80156f4:	e005      	b.n	8015702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80156f6:	6878      	ldr	r0, [r7, #4]
 80156f8:	f000 f8b5 	bl	8015866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80156fc:	6878      	ldr	r0, [r7, #4]
 80156fe:	f000 f8c6 	bl	801588e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	2200      	movs	r2, #0
 8015706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	f003 0308 	and.w	r3, r3, #8
 801570e:	2b00      	cmp	r3, #0
 8015710:	d020      	beq.n	8015754 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	f003 0308 	and.w	r3, r3, #8
 8015718:	2b00      	cmp	r3, #0
 801571a:	d01b      	beq.n	8015754 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	f06f 0208 	mvn.w	r2, #8
 8015724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	2204      	movs	r2, #4
 801572a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	69db      	ldr	r3, [r3, #28]
 8015732:	f003 0303 	and.w	r3, r3, #3
 8015736:	2b00      	cmp	r3, #0
 8015738:	d003      	beq.n	8015742 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	f000 f89d 	bl	801587a <HAL_TIM_IC_CaptureCallback>
 8015740:	e005      	b.n	801574e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015742:	6878      	ldr	r0, [r7, #4]
 8015744:	f000 f88f 	bl	8015866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	f000 f8a0 	bl	801588e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	2200      	movs	r2, #0
 8015752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8015754:	68bb      	ldr	r3, [r7, #8]
 8015756:	f003 0310 	and.w	r3, r3, #16
 801575a:	2b00      	cmp	r3, #0
 801575c:	d020      	beq.n	80157a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	f003 0310 	and.w	r3, r3, #16
 8015764:	2b00      	cmp	r3, #0
 8015766:	d01b      	beq.n	80157a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	f06f 0210 	mvn.w	r2, #16
 8015770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	2208      	movs	r2, #8
 8015776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	69db      	ldr	r3, [r3, #28]
 801577e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015782:	2b00      	cmp	r3, #0
 8015784:	d003      	beq.n	801578e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	f000 f877 	bl	801587a <HAL_TIM_IC_CaptureCallback>
 801578c:	e005      	b.n	801579a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f000 f869 	bl	8015866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	f000 f87a 	bl	801588e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2200      	movs	r2, #0
 801579e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80157a0:	68bb      	ldr	r3, [r7, #8]
 80157a2:	f003 0301 	and.w	r3, r3, #1
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d00c      	beq.n	80157c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	f003 0301 	and.w	r3, r3, #1
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d007      	beq.n	80157c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	f06f 0201 	mvn.w	r2, #1
 80157bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80157be:	6878      	ldr	r0, [r7, #4]
 80157c0:	f7eb faa2 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80157c4:	68bb      	ldr	r3, [r7, #8]
 80157c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d104      	bne.n	80157d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d00c      	beq.n	80157f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d007      	beq.n	80157f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80157ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	f000 f8dd 	bl	80159ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80157f2:	68bb      	ldr	r3, [r7, #8]
 80157f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d00c      	beq.n	8015816 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015802:	2b00      	cmp	r3, #0
 8015804:	d007      	beq.n	8015816 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801580e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8015810:	6878      	ldr	r0, [r7, #4]
 8015812:	f000 f8d5 	bl	80159c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8015816:	68bb      	ldr	r3, [r7, #8]
 8015818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801581c:	2b00      	cmp	r3, #0
 801581e:	d00c      	beq.n	801583a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015826:	2b00      	cmp	r3, #0
 8015828:	d007      	beq.n	801583a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8015832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015834:	6878      	ldr	r0, [r7, #4]
 8015836:	f000 f834 	bl	80158a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801583a:	68bb      	ldr	r3, [r7, #8]
 801583c:	f003 0320 	and.w	r3, r3, #32
 8015840:	2b00      	cmp	r3, #0
 8015842:	d00c      	beq.n	801585e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	f003 0320 	and.w	r3, r3, #32
 801584a:	2b00      	cmp	r3, #0
 801584c:	d007      	beq.n	801585e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	f06f 0220 	mvn.w	r2, #32
 8015856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015858:	6878      	ldr	r0, [r7, #4]
 801585a:	f000 f89d 	bl	8015998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801585e:	bf00      	nop
 8015860:	3710      	adds	r7, #16
 8015862:	46bd      	mov	sp, r7
 8015864:	bd80      	pop	{r7, pc}

08015866 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015866:	b480      	push	{r7}
 8015868:	b083      	sub	sp, #12
 801586a:	af00      	add	r7, sp, #0
 801586c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801586e:	bf00      	nop
 8015870:	370c      	adds	r7, #12
 8015872:	46bd      	mov	sp, r7
 8015874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015878:	4770      	bx	lr

0801587a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801587a:	b480      	push	{r7}
 801587c:	b083      	sub	sp, #12
 801587e:	af00      	add	r7, sp, #0
 8015880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015882:	bf00      	nop
 8015884:	370c      	adds	r7, #12
 8015886:	46bd      	mov	sp, r7
 8015888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588c:	4770      	bx	lr

0801588e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801588e:	b480      	push	{r7}
 8015890:	b083      	sub	sp, #12
 8015892:	af00      	add	r7, sp, #0
 8015894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015896:	bf00      	nop
 8015898:	370c      	adds	r7, #12
 801589a:	46bd      	mov	sp, r7
 801589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a0:	4770      	bx	lr

080158a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80158a2:	b480      	push	{r7}
 80158a4:	b083      	sub	sp, #12
 80158a6:	af00      	add	r7, sp, #0
 80158a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80158aa:	bf00      	nop
 80158ac:	370c      	adds	r7, #12
 80158ae:	46bd      	mov	sp, r7
 80158b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b4:	4770      	bx	lr
	...

080158b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80158b8:	b480      	push	{r7}
 80158ba:	b085      	sub	sp, #20
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
 80158c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	4a30      	ldr	r2, [pc, #192]	@ (801598c <TIM_Base_SetConfig+0xd4>)
 80158cc:	4293      	cmp	r3, r2
 80158ce:	d003      	beq.n	80158d8 <TIM_Base_SetConfig+0x20>
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80158d6:	d108      	bne.n	80158ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80158de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	685b      	ldr	r3, [r3, #4]
 80158e4:	68fa      	ldr	r2, [r7, #12]
 80158e6:	4313      	orrs	r3, r2
 80158e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	4a27      	ldr	r2, [pc, #156]	@ (801598c <TIM_Base_SetConfig+0xd4>)
 80158ee:	4293      	cmp	r3, r2
 80158f0:	d00b      	beq.n	801590a <TIM_Base_SetConfig+0x52>
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80158f8:	d007      	beq.n	801590a <TIM_Base_SetConfig+0x52>
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	4a24      	ldr	r2, [pc, #144]	@ (8015990 <TIM_Base_SetConfig+0xd8>)
 80158fe:	4293      	cmp	r3, r2
 8015900:	d003      	beq.n	801590a <TIM_Base_SetConfig+0x52>
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	4a23      	ldr	r2, [pc, #140]	@ (8015994 <TIM_Base_SetConfig+0xdc>)
 8015906:	4293      	cmp	r3, r2
 8015908:	d108      	bne.n	801591c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8015910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	68db      	ldr	r3, [r3, #12]
 8015916:	68fa      	ldr	r2, [r7, #12]
 8015918:	4313      	orrs	r3, r2
 801591a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8015922:	683b      	ldr	r3, [r7, #0]
 8015924:	695b      	ldr	r3, [r3, #20]
 8015926:	4313      	orrs	r3, r2
 8015928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	68fa      	ldr	r2, [r7, #12]
 801592e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015930:	683b      	ldr	r3, [r7, #0]
 8015932:	689a      	ldr	r2, [r3, #8]
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015938:	683b      	ldr	r3, [r7, #0]
 801593a:	681a      	ldr	r2, [r3, #0]
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	4a12      	ldr	r2, [pc, #72]	@ (801598c <TIM_Base_SetConfig+0xd4>)
 8015944:	4293      	cmp	r3, r2
 8015946:	d007      	beq.n	8015958 <TIM_Base_SetConfig+0xa0>
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	4a11      	ldr	r2, [pc, #68]	@ (8015990 <TIM_Base_SetConfig+0xd8>)
 801594c:	4293      	cmp	r3, r2
 801594e:	d003      	beq.n	8015958 <TIM_Base_SetConfig+0xa0>
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	4a10      	ldr	r2, [pc, #64]	@ (8015994 <TIM_Base_SetConfig+0xdc>)
 8015954:	4293      	cmp	r3, r2
 8015956:	d103      	bne.n	8015960 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	691a      	ldr	r2, [r3, #16]
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	2201      	movs	r2, #1
 8015964:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	691b      	ldr	r3, [r3, #16]
 801596a:	f003 0301 	and.w	r3, r3, #1
 801596e:	2b01      	cmp	r3, #1
 8015970:	d105      	bne.n	801597e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	691b      	ldr	r3, [r3, #16]
 8015976:	f023 0201 	bic.w	r2, r3, #1
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	611a      	str	r2, [r3, #16]
  }
}
 801597e:	bf00      	nop
 8015980:	3714      	adds	r7, #20
 8015982:	46bd      	mov	sp, r7
 8015984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015988:	4770      	bx	lr
 801598a:	bf00      	nop
 801598c:	40012c00 	.word	0x40012c00
 8015990:	40014400 	.word	0x40014400
 8015994:	40014800 	.word	0x40014800

08015998 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015998:	b480      	push	{r7}
 801599a:	b083      	sub	sp, #12
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80159a0:	bf00      	nop
 80159a2:	370c      	adds	r7, #12
 80159a4:	46bd      	mov	sp, r7
 80159a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159aa:	4770      	bx	lr

080159ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80159ac:	b480      	push	{r7}
 80159ae:	b083      	sub	sp, #12
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80159b4:	bf00      	nop
 80159b6:	370c      	adds	r7, #12
 80159b8:	46bd      	mov	sp, r7
 80159ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159be:	4770      	bx	lr

080159c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80159c0:	b480      	push	{r7}
 80159c2:	b083      	sub	sp, #12
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80159c8:	bf00      	nop
 80159ca:	370c      	adds	r7, #12
 80159cc:	46bd      	mov	sp, r7
 80159ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d2:	4770      	bx	lr

080159d4 <LL_RCC_GetUSARTClockSource>:
{
 80159d4:	b480      	push	{r7}
 80159d6:	b083      	sub	sp, #12
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80159dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80159e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	4013      	ands	r3, r2
}
 80159e8:	4618      	mov	r0, r3
 80159ea:	370c      	adds	r7, #12
 80159ec:	46bd      	mov	sp, r7
 80159ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f2:	4770      	bx	lr

080159f4 <LL_RCC_GetLPUARTClockSource>:
{
 80159f4:	b480      	push	{r7}
 80159f6:	b083      	sub	sp, #12
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80159fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015a00:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	4013      	ands	r3, r2
}
 8015a08:	4618      	mov	r0, r3
 8015a0a:	370c      	adds	r7, #12
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a12:	4770      	bx	lr

08015a14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b082      	sub	sp, #8
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d101      	bne.n	8015a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015a22:	2301      	movs	r3, #1
 8015a24:	e042      	b.n	8015aac <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d106      	bne.n	8015a3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	2200      	movs	r2, #0
 8015a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015a38:	6878      	ldr	r0, [r7, #4]
 8015a3a:	f7eb f9d3 	bl	8000de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	2224      	movs	r2, #36	@ 0x24
 8015a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	681a      	ldr	r2, [r3, #0]
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	f022 0201 	bic.w	r2, r2, #1
 8015a54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d002      	beq.n	8015a64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8015a5e:	6878      	ldr	r0, [r7, #4]
 8015a60:	f000 fa50 	bl	8015f04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015a64:	6878      	ldr	r0, [r7, #4]
 8015a66:	f000 f825 	bl	8015ab4 <UART_SetConfig>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	2b01      	cmp	r3, #1
 8015a6e:	d101      	bne.n	8015a74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8015a70:	2301      	movs	r3, #1
 8015a72:	e01b      	b.n	8015aac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	685a      	ldr	r2, [r3, #4]
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8015a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	689a      	ldr	r2, [r3, #8]
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8015a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	681a      	ldr	r2, [r3, #0]
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	f042 0201 	orr.w	r2, r2, #1
 8015aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f000 facf 	bl	8016048 <UART_CheckIdleState>
 8015aaa:	4603      	mov	r3, r0
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	3708      	adds	r7, #8
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}

08015ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015ab8:	b08c      	sub	sp, #48	@ 0x30
 8015aba:	af00      	add	r7, sp, #0
 8015abc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015ac4:	697b      	ldr	r3, [r7, #20]
 8015ac6:	689a      	ldr	r2, [r3, #8]
 8015ac8:	697b      	ldr	r3, [r7, #20]
 8015aca:	691b      	ldr	r3, [r3, #16]
 8015acc:	431a      	orrs	r2, r3
 8015ace:	697b      	ldr	r3, [r7, #20]
 8015ad0:	695b      	ldr	r3, [r3, #20]
 8015ad2:	431a      	orrs	r2, r3
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	69db      	ldr	r3, [r3, #28]
 8015ad8:	4313      	orrs	r3, r2
 8015ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015adc:	697b      	ldr	r3, [r7, #20]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	681a      	ldr	r2, [r3, #0]
 8015ae2:	4baf      	ldr	r3, [pc, #700]	@ (8015da0 <UART_SetConfig+0x2ec>)
 8015ae4:	4013      	ands	r3, r2
 8015ae6:	697a      	ldr	r2, [r7, #20]
 8015ae8:	6812      	ldr	r2, [r2, #0]
 8015aea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015aec:	430b      	orrs	r3, r1
 8015aee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015af0:	697b      	ldr	r3, [r7, #20]
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	685b      	ldr	r3, [r3, #4]
 8015af6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8015afa:	697b      	ldr	r3, [r7, #20]
 8015afc:	68da      	ldr	r2, [r3, #12]
 8015afe:	697b      	ldr	r3, [r7, #20]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	430a      	orrs	r2, r1
 8015b04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015b06:	697b      	ldr	r3, [r7, #20]
 8015b08:	699b      	ldr	r3, [r3, #24]
 8015b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8015b0c:	697b      	ldr	r3, [r7, #20]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	4aa4      	ldr	r2, [pc, #656]	@ (8015da4 <UART_SetConfig+0x2f0>)
 8015b12:	4293      	cmp	r3, r2
 8015b14:	d004      	beq.n	8015b20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8015b16:	697b      	ldr	r3, [r7, #20]
 8015b18:	6a1b      	ldr	r3, [r3, #32]
 8015b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015b1c:	4313      	orrs	r3, r2
 8015b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015b20:	697b      	ldr	r3, [r7, #20]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	689b      	ldr	r3, [r3, #8]
 8015b26:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8015b2a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8015b2e:	697a      	ldr	r2, [r7, #20]
 8015b30:	6812      	ldr	r2, [r2, #0]
 8015b32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015b34:	430b      	orrs	r3, r1
 8015b36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015b38:	697b      	ldr	r3, [r7, #20]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b3e:	f023 010f 	bic.w	r1, r3, #15
 8015b42:	697b      	ldr	r3, [r7, #20]
 8015b44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015b46:	697b      	ldr	r3, [r7, #20]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	430a      	orrs	r2, r1
 8015b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015b4e:	697b      	ldr	r3, [r7, #20]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	4a95      	ldr	r2, [pc, #596]	@ (8015da8 <UART_SetConfig+0x2f4>)
 8015b54:	4293      	cmp	r3, r2
 8015b56:	d125      	bne.n	8015ba4 <UART_SetConfig+0xf0>
 8015b58:	2003      	movs	r0, #3
 8015b5a:	f7ff ff3b 	bl	80159d4 <LL_RCC_GetUSARTClockSource>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	2b03      	cmp	r3, #3
 8015b62:	d81b      	bhi.n	8015b9c <UART_SetConfig+0xe8>
 8015b64:	a201      	add	r2, pc, #4	@ (adr r2, 8015b6c <UART_SetConfig+0xb8>)
 8015b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b6a:	bf00      	nop
 8015b6c:	08015b7d 	.word	0x08015b7d
 8015b70:	08015b8d 	.word	0x08015b8d
 8015b74:	08015b85 	.word	0x08015b85
 8015b78:	08015b95 	.word	0x08015b95
 8015b7c:	2301      	movs	r3, #1
 8015b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015b82:	e042      	b.n	8015c0a <UART_SetConfig+0x156>
 8015b84:	2302      	movs	r3, #2
 8015b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015b8a:	e03e      	b.n	8015c0a <UART_SetConfig+0x156>
 8015b8c:	2304      	movs	r3, #4
 8015b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015b92:	e03a      	b.n	8015c0a <UART_SetConfig+0x156>
 8015b94:	2308      	movs	r3, #8
 8015b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015b9a:	e036      	b.n	8015c0a <UART_SetConfig+0x156>
 8015b9c:	2310      	movs	r3, #16
 8015b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015ba2:	e032      	b.n	8015c0a <UART_SetConfig+0x156>
 8015ba4:	697b      	ldr	r3, [r7, #20]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	4a7e      	ldr	r2, [pc, #504]	@ (8015da4 <UART_SetConfig+0x2f0>)
 8015baa:	4293      	cmp	r3, r2
 8015bac:	d12a      	bne.n	8015c04 <UART_SetConfig+0x150>
 8015bae:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8015bb2:	f7ff ff1f 	bl	80159f4 <LL_RCC_GetLPUARTClockSource>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015bbc:	d01a      	beq.n	8015bf4 <UART_SetConfig+0x140>
 8015bbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015bc2:	d81b      	bhi.n	8015bfc <UART_SetConfig+0x148>
 8015bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015bc8:	d00c      	beq.n	8015be4 <UART_SetConfig+0x130>
 8015bca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015bce:	d815      	bhi.n	8015bfc <UART_SetConfig+0x148>
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d003      	beq.n	8015bdc <UART_SetConfig+0x128>
 8015bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015bd8:	d008      	beq.n	8015bec <UART_SetConfig+0x138>
 8015bda:	e00f      	b.n	8015bfc <UART_SetConfig+0x148>
 8015bdc:	2300      	movs	r3, #0
 8015bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015be2:	e012      	b.n	8015c0a <UART_SetConfig+0x156>
 8015be4:	2302      	movs	r3, #2
 8015be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015bea:	e00e      	b.n	8015c0a <UART_SetConfig+0x156>
 8015bec:	2304      	movs	r3, #4
 8015bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015bf2:	e00a      	b.n	8015c0a <UART_SetConfig+0x156>
 8015bf4:	2308      	movs	r3, #8
 8015bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015bfa:	e006      	b.n	8015c0a <UART_SetConfig+0x156>
 8015bfc:	2310      	movs	r3, #16
 8015bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015c02:	e002      	b.n	8015c0a <UART_SetConfig+0x156>
 8015c04:	2310      	movs	r3, #16
 8015c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015c0a:	697b      	ldr	r3, [r7, #20]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	4a65      	ldr	r2, [pc, #404]	@ (8015da4 <UART_SetConfig+0x2f0>)
 8015c10:	4293      	cmp	r3, r2
 8015c12:	f040 8097 	bne.w	8015d44 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015c16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015c1a:	2b08      	cmp	r3, #8
 8015c1c:	d823      	bhi.n	8015c66 <UART_SetConfig+0x1b2>
 8015c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8015c24 <UART_SetConfig+0x170>)
 8015c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c24:	08015c49 	.word	0x08015c49
 8015c28:	08015c67 	.word	0x08015c67
 8015c2c:	08015c51 	.word	0x08015c51
 8015c30:	08015c67 	.word	0x08015c67
 8015c34:	08015c57 	.word	0x08015c57
 8015c38:	08015c67 	.word	0x08015c67
 8015c3c:	08015c67 	.word	0x08015c67
 8015c40:	08015c67 	.word	0x08015c67
 8015c44:	08015c5f 	.word	0x08015c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015c48:	f7fe ff0c 	bl	8014a64 <HAL_RCC_GetPCLK1Freq>
 8015c4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015c4e:	e010      	b.n	8015c72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015c50:	4b56      	ldr	r3, [pc, #344]	@ (8015dac <UART_SetConfig+0x2f8>)
 8015c52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015c54:	e00d      	b.n	8015c72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015c56:	f7fe fe85 	bl	8014964 <HAL_RCC_GetSysClockFreq>
 8015c5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015c5c:	e009      	b.n	8015c72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015c62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015c64:	e005      	b.n	8015c72 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8015c66:	2300      	movs	r3, #0
 8015c68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8015c6a:	2301      	movs	r3, #1
 8015c6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8015c70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	f000 812b 	beq.w	8015ed0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015c7a:	697b      	ldr	r3, [r7, #20]
 8015c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c7e:	4a4c      	ldr	r2, [pc, #304]	@ (8015db0 <UART_SetConfig+0x2fc>)
 8015c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015c84:	461a      	mov	r2, r3
 8015c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8015c8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015c8e:	697b      	ldr	r3, [r7, #20]
 8015c90:	685a      	ldr	r2, [r3, #4]
 8015c92:	4613      	mov	r3, r2
 8015c94:	005b      	lsls	r3, r3, #1
 8015c96:	4413      	add	r3, r2
 8015c98:	69ba      	ldr	r2, [r7, #24]
 8015c9a:	429a      	cmp	r2, r3
 8015c9c:	d305      	bcc.n	8015caa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015c9e:	697b      	ldr	r3, [r7, #20]
 8015ca0:	685b      	ldr	r3, [r3, #4]
 8015ca2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015ca4:	69ba      	ldr	r2, [r7, #24]
 8015ca6:	429a      	cmp	r2, r3
 8015ca8:	d903      	bls.n	8015cb2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8015caa:	2301      	movs	r3, #1
 8015cac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8015cb0:	e10e      	b.n	8015ed0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cb4:	2200      	movs	r2, #0
 8015cb6:	60bb      	str	r3, [r7, #8]
 8015cb8:	60fa      	str	r2, [r7, #12]
 8015cba:	697b      	ldr	r3, [r7, #20]
 8015cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015cbe:	4a3c      	ldr	r2, [pc, #240]	@ (8015db0 <UART_SetConfig+0x2fc>)
 8015cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015cc4:	b29b      	uxth	r3, r3
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	603b      	str	r3, [r7, #0]
 8015cca:	607a      	str	r2, [r7, #4]
 8015ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015cd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015cd4:	f7ea faf4 	bl	80002c0 <__aeabi_uldivmod>
 8015cd8:	4602      	mov	r2, r0
 8015cda:	460b      	mov	r3, r1
 8015cdc:	4610      	mov	r0, r2
 8015cde:	4619      	mov	r1, r3
 8015ce0:	f04f 0200 	mov.w	r2, #0
 8015ce4:	f04f 0300 	mov.w	r3, #0
 8015ce8:	020b      	lsls	r3, r1, #8
 8015cea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015cee:	0202      	lsls	r2, r0, #8
 8015cf0:	6979      	ldr	r1, [r7, #20]
 8015cf2:	6849      	ldr	r1, [r1, #4]
 8015cf4:	0849      	lsrs	r1, r1, #1
 8015cf6:	2000      	movs	r0, #0
 8015cf8:	460c      	mov	r4, r1
 8015cfa:	4605      	mov	r5, r0
 8015cfc:	eb12 0804 	adds.w	r8, r2, r4
 8015d00:	eb43 0905 	adc.w	r9, r3, r5
 8015d04:	697b      	ldr	r3, [r7, #20]
 8015d06:	685b      	ldr	r3, [r3, #4]
 8015d08:	2200      	movs	r2, #0
 8015d0a:	469a      	mov	sl, r3
 8015d0c:	4693      	mov	fp, r2
 8015d0e:	4652      	mov	r2, sl
 8015d10:	465b      	mov	r3, fp
 8015d12:	4640      	mov	r0, r8
 8015d14:	4649      	mov	r1, r9
 8015d16:	f7ea fad3 	bl	80002c0 <__aeabi_uldivmod>
 8015d1a:	4602      	mov	r2, r0
 8015d1c:	460b      	mov	r3, r1
 8015d1e:	4613      	mov	r3, r2
 8015d20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015d22:	6a3b      	ldr	r3, [r7, #32]
 8015d24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015d28:	d308      	bcc.n	8015d3c <UART_SetConfig+0x288>
 8015d2a:	6a3b      	ldr	r3, [r7, #32]
 8015d2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015d30:	d204      	bcs.n	8015d3c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8015d32:	697b      	ldr	r3, [r7, #20]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	6a3a      	ldr	r2, [r7, #32]
 8015d38:	60da      	str	r2, [r3, #12]
 8015d3a:	e0c9      	b.n	8015ed0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8015d3c:	2301      	movs	r3, #1
 8015d3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8015d42:	e0c5      	b.n	8015ed0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015d44:	697b      	ldr	r3, [r7, #20]
 8015d46:	69db      	ldr	r3, [r3, #28]
 8015d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015d4c:	d16d      	bne.n	8015e2a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8015d4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015d52:	3b01      	subs	r3, #1
 8015d54:	2b07      	cmp	r3, #7
 8015d56:	d82d      	bhi.n	8015db4 <UART_SetConfig+0x300>
 8015d58:	a201      	add	r2, pc, #4	@ (adr r2, 8015d60 <UART_SetConfig+0x2ac>)
 8015d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d5e:	bf00      	nop
 8015d60:	08015d81 	.word	0x08015d81
 8015d64:	08015d89 	.word	0x08015d89
 8015d68:	08015db5 	.word	0x08015db5
 8015d6c:	08015d8f 	.word	0x08015d8f
 8015d70:	08015db5 	.word	0x08015db5
 8015d74:	08015db5 	.word	0x08015db5
 8015d78:	08015db5 	.word	0x08015db5
 8015d7c:	08015d97 	.word	0x08015d97
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015d80:	f7fe fe86 	bl	8014a90 <HAL_RCC_GetPCLK2Freq>
 8015d84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015d86:	e01b      	b.n	8015dc0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015d88:	4b08      	ldr	r3, [pc, #32]	@ (8015dac <UART_SetConfig+0x2f8>)
 8015d8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015d8c:	e018      	b.n	8015dc0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015d8e:	f7fe fde9 	bl	8014964 <HAL_RCC_GetSysClockFreq>
 8015d92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015d94:	e014      	b.n	8015dc0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015d9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015d9c:	e010      	b.n	8015dc0 <UART_SetConfig+0x30c>
 8015d9e:	bf00      	nop
 8015da0:	cfff69f3 	.word	0xcfff69f3
 8015da4:	40008000 	.word	0x40008000
 8015da8:	40013800 	.word	0x40013800
 8015dac:	00f42400 	.word	0x00f42400
 8015db0:	0801aac8 	.word	0x0801aac8
      default:
        pclk = 0U;
 8015db4:	2300      	movs	r3, #0
 8015db6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8015db8:	2301      	movs	r3, #1
 8015dba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8015dbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	f000 8084 	beq.w	8015ed0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8015efc <UART_SetConfig+0x448>)
 8015dce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015dd2:	461a      	mov	r2, r3
 8015dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8015dda:	005a      	lsls	r2, r3, #1
 8015ddc:	697b      	ldr	r3, [r7, #20]
 8015dde:	685b      	ldr	r3, [r3, #4]
 8015de0:	085b      	lsrs	r3, r3, #1
 8015de2:	441a      	add	r2, r3
 8015de4:	697b      	ldr	r3, [r7, #20]
 8015de6:	685b      	ldr	r3, [r3, #4]
 8015de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8015dec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015dee:	6a3b      	ldr	r3, [r7, #32]
 8015df0:	2b0f      	cmp	r3, #15
 8015df2:	d916      	bls.n	8015e22 <UART_SetConfig+0x36e>
 8015df4:	6a3b      	ldr	r3, [r7, #32]
 8015df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015dfa:	d212      	bcs.n	8015e22 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015dfc:	6a3b      	ldr	r3, [r7, #32]
 8015dfe:	b29b      	uxth	r3, r3
 8015e00:	f023 030f 	bic.w	r3, r3, #15
 8015e04:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015e06:	6a3b      	ldr	r3, [r7, #32]
 8015e08:	085b      	lsrs	r3, r3, #1
 8015e0a:	b29b      	uxth	r3, r3
 8015e0c:	f003 0307 	and.w	r3, r3, #7
 8015e10:	b29a      	uxth	r2, r3
 8015e12:	8bfb      	ldrh	r3, [r7, #30]
 8015e14:	4313      	orrs	r3, r2
 8015e16:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8015e18:	697b      	ldr	r3, [r7, #20]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	8bfa      	ldrh	r2, [r7, #30]
 8015e1e:	60da      	str	r2, [r3, #12]
 8015e20:	e056      	b.n	8015ed0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8015e22:	2301      	movs	r3, #1
 8015e24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8015e28:	e052      	b.n	8015ed0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015e2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015e2e:	3b01      	subs	r3, #1
 8015e30:	2b07      	cmp	r3, #7
 8015e32:	d822      	bhi.n	8015e7a <UART_SetConfig+0x3c6>
 8015e34:	a201      	add	r2, pc, #4	@ (adr r2, 8015e3c <UART_SetConfig+0x388>)
 8015e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e3a:	bf00      	nop
 8015e3c:	08015e5d 	.word	0x08015e5d
 8015e40:	08015e65 	.word	0x08015e65
 8015e44:	08015e7b 	.word	0x08015e7b
 8015e48:	08015e6b 	.word	0x08015e6b
 8015e4c:	08015e7b 	.word	0x08015e7b
 8015e50:	08015e7b 	.word	0x08015e7b
 8015e54:	08015e7b 	.word	0x08015e7b
 8015e58:	08015e73 	.word	0x08015e73
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015e5c:	f7fe fe18 	bl	8014a90 <HAL_RCC_GetPCLK2Freq>
 8015e60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015e62:	e010      	b.n	8015e86 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015e64:	4b26      	ldr	r3, [pc, #152]	@ (8015f00 <UART_SetConfig+0x44c>)
 8015e66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015e68:	e00d      	b.n	8015e86 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015e6a:	f7fe fd7b 	bl	8014964 <HAL_RCC_GetSysClockFreq>
 8015e6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015e70:	e009      	b.n	8015e86 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015e72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015e76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015e78:	e005      	b.n	8015e86 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8015e7e:	2301      	movs	r3, #1
 8015e80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8015e84:	bf00      	nop
    }

    if (pclk != 0U)
 8015e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d021      	beq.n	8015ed0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015e8c:	697b      	ldr	r3, [r7, #20]
 8015e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e90:	4a1a      	ldr	r2, [pc, #104]	@ (8015efc <UART_SetConfig+0x448>)
 8015e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015e96:	461a      	mov	r2, r3
 8015e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8015e9e:	697b      	ldr	r3, [r7, #20]
 8015ea0:	685b      	ldr	r3, [r3, #4]
 8015ea2:	085b      	lsrs	r3, r3, #1
 8015ea4:	441a      	add	r2, r3
 8015ea6:	697b      	ldr	r3, [r7, #20]
 8015ea8:	685b      	ldr	r3, [r3, #4]
 8015eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8015eae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015eb0:	6a3b      	ldr	r3, [r7, #32]
 8015eb2:	2b0f      	cmp	r3, #15
 8015eb4:	d909      	bls.n	8015eca <UART_SetConfig+0x416>
 8015eb6:	6a3b      	ldr	r3, [r7, #32]
 8015eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015ebc:	d205      	bcs.n	8015eca <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015ebe:	6a3b      	ldr	r3, [r7, #32]
 8015ec0:	b29a      	uxth	r2, r3
 8015ec2:	697b      	ldr	r3, [r7, #20]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	60da      	str	r2, [r3, #12]
 8015ec8:	e002      	b.n	8015ed0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8015eca:	2301      	movs	r3, #1
 8015ecc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015ed0:	697b      	ldr	r3, [r7, #20]
 8015ed2:	2201      	movs	r2, #1
 8015ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8015ed8:	697b      	ldr	r3, [r7, #20]
 8015eda:	2201      	movs	r2, #1
 8015edc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015ee0:	697b      	ldr	r3, [r7, #20]
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8015ee6:	697b      	ldr	r3, [r7, #20]
 8015ee8:	2200      	movs	r2, #0
 8015eea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8015eec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	3730      	adds	r7, #48	@ 0x30
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015efa:	bf00      	nop
 8015efc:	0801aac8 	.word	0x0801aac8
 8015f00:	00f42400 	.word	0x00f42400

08015f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015f04:	b480      	push	{r7}
 8015f06:	b083      	sub	sp, #12
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f10:	f003 0308 	and.w	r3, r3, #8
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d00a      	beq.n	8015f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	685b      	ldr	r3, [r3, #4]
 8015f1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	430a      	orrs	r2, r1
 8015f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f32:	f003 0301 	and.w	r3, r3, #1
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d00a      	beq.n	8015f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	685b      	ldr	r3, [r3, #4]
 8015f40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	430a      	orrs	r2, r1
 8015f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f54:	f003 0302 	and.w	r3, r3, #2
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d00a      	beq.n	8015f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	685b      	ldr	r3, [r3, #4]
 8015f62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	430a      	orrs	r2, r1
 8015f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f76:	f003 0304 	and.w	r3, r3, #4
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d00a      	beq.n	8015f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	685b      	ldr	r3, [r3, #4]
 8015f84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	430a      	orrs	r2, r1
 8015f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f98:	f003 0310 	and.w	r3, r3, #16
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d00a      	beq.n	8015fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	689b      	ldr	r3, [r3, #8]
 8015fa6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	430a      	orrs	r2, r1
 8015fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015fba:	f003 0320 	and.w	r3, r3, #32
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d00a      	beq.n	8015fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	689b      	ldr	r3, [r3, #8]
 8015fc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	430a      	orrs	r2, r1
 8015fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d01a      	beq.n	801601a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	685b      	ldr	r3, [r3, #4]
 8015fea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	430a      	orrs	r2, r1
 8015ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016002:	d10a      	bne.n	801601a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	685b      	ldr	r3, [r3, #4]
 801600a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	430a      	orrs	r2, r1
 8016018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801601e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016022:	2b00      	cmp	r3, #0
 8016024:	d00a      	beq.n	801603c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	685b      	ldr	r3, [r3, #4]
 801602c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	430a      	orrs	r2, r1
 801603a:	605a      	str	r2, [r3, #4]
  }
}
 801603c:	bf00      	nop
 801603e:	370c      	adds	r7, #12
 8016040:	46bd      	mov	sp, r7
 8016042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016046:	4770      	bx	lr

08016048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b098      	sub	sp, #96	@ 0x60
 801604c:	af02      	add	r7, sp, #8
 801604e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	2200      	movs	r2, #0
 8016054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016058:	f7fc f972 	bl	8012340 <HAL_GetTick>
 801605c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	f003 0308 	and.w	r3, r3, #8
 8016068:	2b08      	cmp	r3, #8
 801606a:	d12f      	bne.n	80160cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801606c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8016070:	9300      	str	r3, [sp, #0]
 8016072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016074:	2200      	movs	r2, #0
 8016076:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801607a:	6878      	ldr	r0, [r7, #4]
 801607c:	f000 f88e 	bl	801619c <UART_WaitOnFlagUntilTimeout>
 8016080:	4603      	mov	r3, r0
 8016082:	2b00      	cmp	r3, #0
 8016084:	d022      	beq.n	80160cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801608c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801608e:	e853 3f00 	ldrex	r3, [r3]
 8016092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8016094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801609a:	653b      	str	r3, [r7, #80]	@ 0x50
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	461a      	mov	r2, r3
 80160a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80160a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80160a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80160aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80160ac:	e841 2300 	strex	r3, r2, [r1]
 80160b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80160b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d1e6      	bne.n	8016086 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	2220      	movs	r2, #32
 80160bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	2200      	movs	r2, #0
 80160c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80160c8:	2303      	movs	r3, #3
 80160ca:	e063      	b.n	8016194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	f003 0304 	and.w	r3, r3, #4
 80160d6:	2b04      	cmp	r3, #4
 80160d8:	d149      	bne.n	801616e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80160da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80160de:	9300      	str	r3, [sp, #0]
 80160e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80160e2:	2200      	movs	r2, #0
 80160e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f000 f857 	bl	801619c <UART_WaitOnFlagUntilTimeout>
 80160ee:	4603      	mov	r3, r0
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d03c      	beq.n	801616e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160fc:	e853 3f00 	ldrex	r3, [r3]
 8016100:	623b      	str	r3, [r7, #32]
   return(result);
 8016102:	6a3b      	ldr	r3, [r7, #32]
 8016104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8016108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	461a      	mov	r2, r3
 8016110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016112:	633b      	str	r3, [r7, #48]	@ 0x30
 8016114:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801611a:	e841 2300 	strex	r3, r2, [r1]
 801611e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8016120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016122:	2b00      	cmp	r3, #0
 8016124:	d1e6      	bne.n	80160f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	3308      	adds	r3, #8
 801612c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801612e:	693b      	ldr	r3, [r7, #16]
 8016130:	e853 3f00 	ldrex	r3, [r3]
 8016134:	60fb      	str	r3, [r7, #12]
   return(result);
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	f023 0301 	bic.w	r3, r3, #1
 801613c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	3308      	adds	r3, #8
 8016144:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016146:	61fa      	str	r2, [r7, #28]
 8016148:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801614a:	69b9      	ldr	r1, [r7, #24]
 801614c:	69fa      	ldr	r2, [r7, #28]
 801614e:	e841 2300 	strex	r3, r2, [r1]
 8016152:	617b      	str	r3, [r7, #20]
   return(result);
 8016154:	697b      	ldr	r3, [r7, #20]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d1e5      	bne.n	8016126 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	2220      	movs	r2, #32
 801615e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	2200      	movs	r2, #0
 8016166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801616a:	2303      	movs	r3, #3
 801616c:	e012      	b.n	8016194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	2220      	movs	r2, #32
 8016172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	2220      	movs	r2, #32
 801617a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	2200      	movs	r2, #0
 8016182:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	2200      	movs	r2, #0
 8016188:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	2200      	movs	r2, #0
 801618e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8016192:	2300      	movs	r3, #0
}
 8016194:	4618      	mov	r0, r3
 8016196:	3758      	adds	r7, #88	@ 0x58
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}

0801619c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b084      	sub	sp, #16
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	60f8      	str	r0, [r7, #12]
 80161a4:	60b9      	str	r1, [r7, #8]
 80161a6:	603b      	str	r3, [r7, #0]
 80161a8:	4613      	mov	r3, r2
 80161aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80161ac:	e04f      	b.n	801624e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80161ae:	69bb      	ldr	r3, [r7, #24]
 80161b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161b4:	d04b      	beq.n	801624e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80161b6:	f7fc f8c3 	bl	8012340 <HAL_GetTick>
 80161ba:	4602      	mov	r2, r0
 80161bc:	683b      	ldr	r3, [r7, #0]
 80161be:	1ad3      	subs	r3, r2, r3
 80161c0:	69ba      	ldr	r2, [r7, #24]
 80161c2:	429a      	cmp	r2, r3
 80161c4:	d302      	bcc.n	80161cc <UART_WaitOnFlagUntilTimeout+0x30>
 80161c6:	69bb      	ldr	r3, [r7, #24]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d101      	bne.n	80161d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80161cc:	2303      	movs	r3, #3
 80161ce:	e04e      	b.n	801626e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	f003 0304 	and.w	r3, r3, #4
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d037      	beq.n	801624e <UART_WaitOnFlagUntilTimeout+0xb2>
 80161de:	68bb      	ldr	r3, [r7, #8]
 80161e0:	2b80      	cmp	r3, #128	@ 0x80
 80161e2:	d034      	beq.n	801624e <UART_WaitOnFlagUntilTimeout+0xb2>
 80161e4:	68bb      	ldr	r3, [r7, #8]
 80161e6:	2b40      	cmp	r3, #64	@ 0x40
 80161e8:	d031      	beq.n	801624e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	69db      	ldr	r3, [r3, #28]
 80161f0:	f003 0308 	and.w	r3, r3, #8
 80161f4:	2b08      	cmp	r3, #8
 80161f6:	d110      	bne.n	801621a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	2208      	movs	r2, #8
 80161fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016200:	68f8      	ldr	r0, [r7, #12]
 8016202:	f000 f838 	bl	8016276 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	2208      	movs	r2, #8
 801620a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	2200      	movs	r2, #0
 8016212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8016216:	2301      	movs	r3, #1
 8016218:	e029      	b.n	801626e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	69db      	ldr	r3, [r3, #28]
 8016220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016228:	d111      	bne.n	801624e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016234:	68f8      	ldr	r0, [r7, #12]
 8016236:	f000 f81e 	bl	8016276 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	2220      	movs	r2, #32
 801623e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	2200      	movs	r2, #0
 8016246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801624a:	2303      	movs	r3, #3
 801624c:	e00f      	b.n	801626e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	69da      	ldr	r2, [r3, #28]
 8016254:	68bb      	ldr	r3, [r7, #8]
 8016256:	4013      	ands	r3, r2
 8016258:	68ba      	ldr	r2, [r7, #8]
 801625a:	429a      	cmp	r2, r3
 801625c:	bf0c      	ite	eq
 801625e:	2301      	moveq	r3, #1
 8016260:	2300      	movne	r3, #0
 8016262:	b2db      	uxtb	r3, r3
 8016264:	461a      	mov	r2, r3
 8016266:	79fb      	ldrb	r3, [r7, #7]
 8016268:	429a      	cmp	r2, r3
 801626a:	d0a0      	beq.n	80161ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801626c:	2300      	movs	r3, #0
}
 801626e:	4618      	mov	r0, r3
 8016270:	3710      	adds	r7, #16
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}

08016276 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016276:	b480      	push	{r7}
 8016278:	b095      	sub	sp, #84	@ 0x54
 801627a:	af00      	add	r7, sp, #0
 801627c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016286:	e853 3f00 	ldrex	r3, [r3]
 801628a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801628c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801628e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8016292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	461a      	mov	r2, r3
 801629a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801629c:	643b      	str	r3, [r7, #64]	@ 0x40
 801629e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80162a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80162a4:	e841 2300 	strex	r3, r2, [r1]
 80162a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80162aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d1e6      	bne.n	801627e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	3308      	adds	r3, #8
 80162b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162b8:	6a3b      	ldr	r3, [r7, #32]
 80162ba:	e853 3f00 	ldrex	r3, [r3]
 80162be:	61fb      	str	r3, [r7, #28]
   return(result);
 80162c0:	69fb      	ldr	r3, [r7, #28]
 80162c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80162c6:	f023 0301 	bic.w	r3, r3, #1
 80162ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	3308      	adds	r3, #8
 80162d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80162d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80162d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80162da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80162dc:	e841 2300 	strex	r3, r2, [r1]
 80162e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80162e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d1e3      	bne.n	80162b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80162ec:	2b01      	cmp	r3, #1
 80162ee:	d118      	bne.n	8016322 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	e853 3f00 	ldrex	r3, [r3]
 80162fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80162fe:	68bb      	ldr	r3, [r7, #8]
 8016300:	f023 0310 	bic.w	r3, r3, #16
 8016304:	647b      	str	r3, [r7, #68]	@ 0x44
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	461a      	mov	r2, r3
 801630c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801630e:	61bb      	str	r3, [r7, #24]
 8016310:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016312:	6979      	ldr	r1, [r7, #20]
 8016314:	69ba      	ldr	r2, [r7, #24]
 8016316:	e841 2300 	strex	r3, r2, [r1]
 801631a:	613b      	str	r3, [r7, #16]
   return(result);
 801631c:	693b      	ldr	r3, [r7, #16]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d1e6      	bne.n	80162f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	2220      	movs	r2, #32
 8016326:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	2200      	movs	r2, #0
 801632e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	2200      	movs	r2, #0
 8016334:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8016336:	bf00      	nop
 8016338:	3754      	adds	r7, #84	@ 0x54
 801633a:	46bd      	mov	sp, r7
 801633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016340:	4770      	bx	lr

08016342 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016342:	b480      	push	{r7}
 8016344:	b085      	sub	sp, #20
 8016346:	af00      	add	r7, sp, #0
 8016348:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016350:	2b01      	cmp	r3, #1
 8016352:	d101      	bne.n	8016358 <HAL_UARTEx_DisableFifoMode+0x16>
 8016354:	2302      	movs	r3, #2
 8016356:	e027      	b.n	80163a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	2201      	movs	r2, #1
 801635c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2224      	movs	r2, #36	@ 0x24
 8016364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	681a      	ldr	r2, [r3, #0]
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	f022 0201 	bic.w	r2, r2, #1
 801637e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8016386:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2200      	movs	r2, #0
 801638c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	68fa      	ldr	r2, [r7, #12]
 8016394:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	2220      	movs	r2, #32
 801639a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	2200      	movs	r2, #0
 80163a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80163a6:	2300      	movs	r3, #0
}
 80163a8:	4618      	mov	r0, r3
 80163aa:	3714      	adds	r7, #20
 80163ac:	46bd      	mov	sp, r7
 80163ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b2:	4770      	bx	lr

080163b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b084      	sub	sp, #16
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
 80163bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80163c4:	2b01      	cmp	r3, #1
 80163c6:	d101      	bne.n	80163cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80163c8:	2302      	movs	r3, #2
 80163ca:	e02d      	b.n	8016428 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2201      	movs	r2, #1
 80163d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	2224      	movs	r2, #36	@ 0x24
 80163d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	681a      	ldr	r2, [r3, #0]
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	f022 0201 	bic.w	r2, r2, #1
 80163f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	689b      	ldr	r3, [r3, #8]
 80163fa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	683a      	ldr	r2, [r7, #0]
 8016404:	430a      	orrs	r2, r1
 8016406:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016408:	6878      	ldr	r0, [r7, #4]
 801640a:	f000 f84f 	bl	80164ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	68fa      	ldr	r2, [r7, #12]
 8016414:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	2220      	movs	r2, #32
 801641a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	2200      	movs	r2, #0
 8016422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8016426:	2300      	movs	r3, #0
}
 8016428:	4618      	mov	r0, r3
 801642a:	3710      	adds	r7, #16
 801642c:	46bd      	mov	sp, r7
 801642e:	bd80      	pop	{r7, pc}

08016430 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b084      	sub	sp, #16
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
 8016438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016440:	2b01      	cmp	r3, #1
 8016442:	d101      	bne.n	8016448 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016444:	2302      	movs	r3, #2
 8016446:	e02d      	b.n	80164a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	2201      	movs	r2, #1
 801644c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	2224      	movs	r2, #36	@ 0x24
 8016454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	681a      	ldr	r2, [r3, #0]
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	f022 0201 	bic.w	r2, r2, #1
 801646e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	689b      	ldr	r3, [r3, #8]
 8016476:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	683a      	ldr	r2, [r7, #0]
 8016480:	430a      	orrs	r2, r1
 8016482:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016484:	6878      	ldr	r0, [r7, #4]
 8016486:	f000 f811 	bl	80164ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	68fa      	ldr	r2, [r7, #12]
 8016490:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	2220      	movs	r2, #32
 8016496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	2200      	movs	r2, #0
 801649e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80164a2:	2300      	movs	r3, #0
}
 80164a4:	4618      	mov	r0, r3
 80164a6:	3710      	adds	r7, #16
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd80      	pop	{r7, pc}

080164ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80164ac:	b480      	push	{r7}
 80164ae:	b085      	sub	sp, #20
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d108      	bne.n	80164ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	2201      	movs	r2, #1
 80164c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	2201      	movs	r2, #1
 80164c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80164cc:	e031      	b.n	8016532 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80164ce:	2308      	movs	r3, #8
 80164d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80164d2:	2308      	movs	r3, #8
 80164d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	689b      	ldr	r3, [r3, #8]
 80164dc:	0e5b      	lsrs	r3, r3, #25
 80164de:	b2db      	uxtb	r3, r3
 80164e0:	f003 0307 	and.w	r3, r3, #7
 80164e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	689b      	ldr	r3, [r3, #8]
 80164ec:	0f5b      	lsrs	r3, r3, #29
 80164ee:	b2db      	uxtb	r3, r3
 80164f0:	f003 0307 	and.w	r3, r3, #7
 80164f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80164f6:	7bbb      	ldrb	r3, [r7, #14]
 80164f8:	7b3a      	ldrb	r2, [r7, #12]
 80164fa:	4911      	ldr	r1, [pc, #68]	@ (8016540 <UARTEx_SetNbDataToProcess+0x94>)
 80164fc:	5c8a      	ldrb	r2, [r1, r2]
 80164fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016502:	7b3a      	ldrb	r2, [r7, #12]
 8016504:	490f      	ldr	r1, [pc, #60]	@ (8016544 <UARTEx_SetNbDataToProcess+0x98>)
 8016506:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016508:	fb93 f3f2 	sdiv	r3, r3, r2
 801650c:	b29a      	uxth	r2, r3
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016514:	7bfb      	ldrb	r3, [r7, #15]
 8016516:	7b7a      	ldrb	r2, [r7, #13]
 8016518:	4909      	ldr	r1, [pc, #36]	@ (8016540 <UARTEx_SetNbDataToProcess+0x94>)
 801651a:	5c8a      	ldrb	r2, [r1, r2]
 801651c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016520:	7b7a      	ldrb	r2, [r7, #13]
 8016522:	4908      	ldr	r1, [pc, #32]	@ (8016544 <UARTEx_SetNbDataToProcess+0x98>)
 8016524:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016526:	fb93 f3f2 	sdiv	r3, r3, r2
 801652a:	b29a      	uxth	r2, r3
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8016532:	bf00      	nop
 8016534:	3714      	adds	r7, #20
 8016536:	46bd      	mov	sp, r7
 8016538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653c:	4770      	bx	lr
 801653e:	bf00      	nop
 8016540:	0801aae0 	.word	0x0801aae0
 8016544:	0801aae8 	.word	0x0801aae8

08016548 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8016548:	b480      	push	{r7}
 801654a:	b085      	sub	sp, #20
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8016550:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8016554:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801655c:	b29a      	uxth	r2, r3
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	b29b      	uxth	r3, r3
 8016562:	43db      	mvns	r3, r3
 8016564:	b29b      	uxth	r3, r3
 8016566:	4013      	ands	r3, r2
 8016568:	b29a      	uxth	r2, r3
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8016570:	2300      	movs	r3, #0
}
 8016572:	4618      	mov	r0, r3
 8016574:	3714      	adds	r7, #20
 8016576:	46bd      	mov	sp, r7
 8016578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657c:	4770      	bx	lr

0801657e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801657e:	b480      	push	{r7}
 8016580:	b085      	sub	sp, #20
 8016582:	af00      	add	r7, sp, #0
 8016584:	60f8      	str	r0, [r7, #12]
 8016586:	1d3b      	adds	r3, r7, #4
 8016588:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	2201      	movs	r2, #1
 8016590:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	2200      	movs	r2, #0
 8016598:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	2200      	movs	r2, #0
 80165a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	2200      	movs	r2, #0
 80165a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80165ac:	2300      	movs	r3, #0
}
 80165ae:	4618      	mov	r0, r3
 80165b0:	3714      	adds	r7, #20
 80165b2:	46bd      	mov	sp, r7
 80165b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b8:	4770      	bx	lr
	...

080165bc <__NVIC_SetPriority>:
{
 80165bc:	b480      	push	{r7}
 80165be:	b083      	sub	sp, #12
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	4603      	mov	r3, r0
 80165c4:	6039      	str	r1, [r7, #0]
 80165c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80165c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	db0a      	blt.n	80165e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80165d0:	683b      	ldr	r3, [r7, #0]
 80165d2:	b2da      	uxtb	r2, r3
 80165d4:	490c      	ldr	r1, [pc, #48]	@ (8016608 <__NVIC_SetPriority+0x4c>)
 80165d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80165da:	0112      	lsls	r2, r2, #4
 80165dc:	b2d2      	uxtb	r2, r2
 80165de:	440b      	add	r3, r1
 80165e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80165e4:	e00a      	b.n	80165fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80165e6:	683b      	ldr	r3, [r7, #0]
 80165e8:	b2da      	uxtb	r2, r3
 80165ea:	4908      	ldr	r1, [pc, #32]	@ (801660c <__NVIC_SetPriority+0x50>)
 80165ec:	79fb      	ldrb	r3, [r7, #7]
 80165ee:	f003 030f 	and.w	r3, r3, #15
 80165f2:	3b04      	subs	r3, #4
 80165f4:	0112      	lsls	r2, r2, #4
 80165f6:	b2d2      	uxtb	r2, r2
 80165f8:	440b      	add	r3, r1
 80165fa:	761a      	strb	r2, [r3, #24]
}
 80165fc:	bf00      	nop
 80165fe:	370c      	adds	r7, #12
 8016600:	46bd      	mov	sp, r7
 8016602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016606:	4770      	bx	lr
 8016608:	e000e100 	.word	0xe000e100
 801660c:	e000ed00 	.word	0xe000ed00

08016610 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016610:	b580      	push	{r7, lr}
 8016612:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016614:	4b05      	ldr	r3, [pc, #20]	@ (801662c <SysTick_Handler+0x1c>)
 8016616:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016618:	f002 f806 	bl	8018628 <xTaskGetSchedulerState>
 801661c:	4603      	mov	r3, r0
 801661e:	2b01      	cmp	r3, #1
 8016620:	d001      	beq.n	8016626 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016622:	f002 fe01 	bl	8019228 <xPortSysTickHandler>
  }
}
 8016626:	bf00      	nop
 8016628:	bd80      	pop	{r7, pc}
 801662a:	bf00      	nop
 801662c:	e000e010 	.word	0xe000e010

08016630 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016630:	b580      	push	{r7, lr}
 8016632:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016634:	2100      	movs	r1, #0
 8016636:	f06f 0004 	mvn.w	r0, #4
 801663a:	f7ff ffbf 	bl	80165bc <__NVIC_SetPriority>
#endif
}
 801663e:	bf00      	nop
 8016640:	bd80      	pop	{r7, pc}
	...

08016644 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016644:	b480      	push	{r7}
 8016646:	b083      	sub	sp, #12
 8016648:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801664a:	f3ef 8305 	mrs	r3, IPSR
 801664e:	603b      	str	r3, [r7, #0]
  return(result);
 8016650:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016652:	2b00      	cmp	r3, #0
 8016654:	d003      	beq.n	801665e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016656:	f06f 0305 	mvn.w	r3, #5
 801665a:	607b      	str	r3, [r7, #4]
 801665c:	e00c      	b.n	8016678 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801665e:	4b0a      	ldr	r3, [pc, #40]	@ (8016688 <osKernelInitialize+0x44>)
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d105      	bne.n	8016672 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016666:	4b08      	ldr	r3, [pc, #32]	@ (8016688 <osKernelInitialize+0x44>)
 8016668:	2201      	movs	r2, #1
 801666a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801666c:	2300      	movs	r3, #0
 801666e:	607b      	str	r3, [r7, #4]
 8016670:	e002      	b.n	8016678 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016672:	f04f 33ff 	mov.w	r3, #4294967295
 8016676:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016678:	687b      	ldr	r3, [r7, #4]
}
 801667a:	4618      	mov	r0, r3
 801667c:	370c      	adds	r7, #12
 801667e:	46bd      	mov	sp, r7
 8016680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016684:	4770      	bx	lr
 8016686:	bf00      	nop
 8016688:	20007ae8 	.word	0x20007ae8

0801668c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801668c:	b580      	push	{r7, lr}
 801668e:	b082      	sub	sp, #8
 8016690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016692:	f3ef 8305 	mrs	r3, IPSR
 8016696:	603b      	str	r3, [r7, #0]
  return(result);
 8016698:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801669a:	2b00      	cmp	r3, #0
 801669c:	d003      	beq.n	80166a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 801669e:	f06f 0305 	mvn.w	r3, #5
 80166a2:	607b      	str	r3, [r7, #4]
 80166a4:	e010      	b.n	80166c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80166a6:	4b0b      	ldr	r3, [pc, #44]	@ (80166d4 <osKernelStart+0x48>)
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	2b01      	cmp	r3, #1
 80166ac:	d109      	bne.n	80166c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80166ae:	f7ff ffbf 	bl	8016630 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80166b2:	4b08      	ldr	r3, [pc, #32]	@ (80166d4 <osKernelStart+0x48>)
 80166b4:	2202      	movs	r2, #2
 80166b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80166b8:	f001 fb52 	bl	8017d60 <vTaskStartScheduler>
      stat = osOK;
 80166bc:	2300      	movs	r3, #0
 80166be:	607b      	str	r3, [r7, #4]
 80166c0:	e002      	b.n	80166c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80166c2:	f04f 33ff 	mov.w	r3, #4294967295
 80166c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80166c8:	687b      	ldr	r3, [r7, #4]
}
 80166ca:	4618      	mov	r0, r3
 80166cc:	3708      	adds	r7, #8
 80166ce:	46bd      	mov	sp, r7
 80166d0:	bd80      	pop	{r7, pc}
 80166d2:	bf00      	nop
 80166d4:	20007ae8 	.word	0x20007ae8

080166d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80166d8:	b580      	push	{r7, lr}
 80166da:	b08e      	sub	sp, #56	@ 0x38
 80166dc:	af04      	add	r7, sp, #16
 80166de:	60f8      	str	r0, [r7, #12]
 80166e0:	60b9      	str	r1, [r7, #8]
 80166e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80166e4:	2300      	movs	r3, #0
 80166e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80166e8:	f3ef 8305 	mrs	r3, IPSR
 80166ec:	617b      	str	r3, [r7, #20]
  return(result);
 80166ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d17e      	bne.n	80167f2 <osThreadNew+0x11a>
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d07b      	beq.n	80167f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80166fa:	2380      	movs	r3, #128	@ 0x80
 80166fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80166fe:	2318      	movs	r3, #24
 8016700:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016702:	2300      	movs	r3, #0
 8016704:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8016706:	f04f 33ff 	mov.w	r3, #4294967295
 801670a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d045      	beq.n	801679e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d002      	beq.n	8016720 <osThreadNew+0x48>
        name = attr->name;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	699b      	ldr	r3, [r3, #24]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d002      	beq.n	801672e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	699b      	ldr	r3, [r3, #24]
 801672c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801672e:	69fb      	ldr	r3, [r7, #28]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d008      	beq.n	8016746 <osThreadNew+0x6e>
 8016734:	69fb      	ldr	r3, [r7, #28]
 8016736:	2b38      	cmp	r3, #56	@ 0x38
 8016738:	d805      	bhi.n	8016746 <osThreadNew+0x6e>
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	685b      	ldr	r3, [r3, #4]
 801673e:	f003 0301 	and.w	r3, r3, #1
 8016742:	2b00      	cmp	r3, #0
 8016744:	d001      	beq.n	801674a <osThreadNew+0x72>
        return (NULL);
 8016746:	2300      	movs	r3, #0
 8016748:	e054      	b.n	80167f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	695b      	ldr	r3, [r3, #20]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d003      	beq.n	801675a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	695b      	ldr	r3, [r3, #20]
 8016756:	089b      	lsrs	r3, r3, #2
 8016758:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	689b      	ldr	r3, [r3, #8]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d00e      	beq.n	8016780 <osThreadNew+0xa8>
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	68db      	ldr	r3, [r3, #12]
 8016766:	2ba7      	cmp	r3, #167	@ 0xa7
 8016768:	d90a      	bls.n	8016780 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801676e:	2b00      	cmp	r3, #0
 8016770:	d006      	beq.n	8016780 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	695b      	ldr	r3, [r3, #20]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d002      	beq.n	8016780 <osThreadNew+0xa8>
        mem = 1;
 801677a:	2301      	movs	r3, #1
 801677c:	61bb      	str	r3, [r7, #24]
 801677e:	e010      	b.n	80167a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	689b      	ldr	r3, [r3, #8]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d10c      	bne.n	80167a2 <osThreadNew+0xca>
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	68db      	ldr	r3, [r3, #12]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d108      	bne.n	80167a2 <osThreadNew+0xca>
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	691b      	ldr	r3, [r3, #16]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d104      	bne.n	80167a2 <osThreadNew+0xca>
          mem = 0;
 8016798:	2300      	movs	r3, #0
 801679a:	61bb      	str	r3, [r7, #24]
 801679c:	e001      	b.n	80167a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801679e:	2300      	movs	r3, #0
 80167a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80167a2:	69bb      	ldr	r3, [r7, #24]
 80167a4:	2b01      	cmp	r3, #1
 80167a6:	d110      	bne.n	80167ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80167ac:	687a      	ldr	r2, [r7, #4]
 80167ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80167b0:	9202      	str	r2, [sp, #8]
 80167b2:	9301      	str	r3, [sp, #4]
 80167b4:	69fb      	ldr	r3, [r7, #28]
 80167b6:	9300      	str	r3, [sp, #0]
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	6a3a      	ldr	r2, [r7, #32]
 80167bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80167be:	68f8      	ldr	r0, [r7, #12]
 80167c0:	f001 f8da 	bl	8017978 <xTaskCreateStatic>
 80167c4:	4603      	mov	r3, r0
 80167c6:	613b      	str	r3, [r7, #16]
 80167c8:	e013      	b.n	80167f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80167ca:	69bb      	ldr	r3, [r7, #24]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d110      	bne.n	80167f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80167d0:	6a3b      	ldr	r3, [r7, #32]
 80167d2:	b29a      	uxth	r2, r3
 80167d4:	f107 0310 	add.w	r3, r7, #16
 80167d8:	9301      	str	r3, [sp, #4]
 80167da:	69fb      	ldr	r3, [r7, #28]
 80167dc:	9300      	str	r3, [sp, #0]
 80167de:	68bb      	ldr	r3, [r7, #8]
 80167e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80167e2:	68f8      	ldr	r0, [r7, #12]
 80167e4:	f001 f928 	bl	8017a38 <xTaskCreate>
 80167e8:	4603      	mov	r3, r0
 80167ea:	2b01      	cmp	r3, #1
 80167ec:	d001      	beq.n	80167f2 <osThreadNew+0x11a>
            hTask = NULL;
 80167ee:	2300      	movs	r3, #0
 80167f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80167f2:	693b      	ldr	r3, [r7, #16]
}
 80167f4:	4618      	mov	r0, r3
 80167f6:	3728      	adds	r7, #40	@ 0x28
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}

080167fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b084      	sub	sp, #16
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016804:	f3ef 8305 	mrs	r3, IPSR
 8016808:	60bb      	str	r3, [r7, #8]
  return(result);
 801680a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801680c:	2b00      	cmp	r3, #0
 801680e:	d003      	beq.n	8016818 <osDelay+0x1c>
    stat = osErrorISR;
 8016810:	f06f 0305 	mvn.w	r3, #5
 8016814:	60fb      	str	r3, [r7, #12]
 8016816:	e007      	b.n	8016828 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016818:	2300      	movs	r3, #0
 801681a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d002      	beq.n	8016828 <osDelay+0x2c>
      vTaskDelay(ticks);
 8016822:	6878      	ldr	r0, [r7, #4]
 8016824:	f001 fa66 	bl	8017cf4 <vTaskDelay>
    }
  }

  return (stat);
 8016828:	68fb      	ldr	r3, [r7, #12]
}
 801682a:	4618      	mov	r0, r3
 801682c:	3710      	adds	r7, #16
 801682e:	46bd      	mov	sp, r7
 8016830:	bd80      	pop	{r7, pc}

08016832 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8016832:	b580      	push	{r7, lr}
 8016834:	b088      	sub	sp, #32
 8016836:	af00      	add	r7, sp, #0
 8016838:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 801683a:	2300      	movs	r3, #0
 801683c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801683e:	f3ef 8305 	mrs	r3, IPSR
 8016842:	60bb      	str	r3, [r7, #8]
  return(result);
 8016844:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8016846:	2b00      	cmp	r3, #0
 8016848:	d174      	bne.n	8016934 <osMutexNew+0x102>
    if (attr != NULL) {
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d003      	beq.n	8016858 <osMutexNew+0x26>
      type = attr->attr_bits;
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	685b      	ldr	r3, [r3, #4]
 8016854:	61bb      	str	r3, [r7, #24]
 8016856:	e001      	b.n	801685c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8016858:	2300      	movs	r3, #0
 801685a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801685c:	69bb      	ldr	r3, [r7, #24]
 801685e:	f003 0301 	and.w	r3, r3, #1
 8016862:	2b00      	cmp	r3, #0
 8016864:	d002      	beq.n	801686c <osMutexNew+0x3a>
      rmtx = 1U;
 8016866:	2301      	movs	r3, #1
 8016868:	617b      	str	r3, [r7, #20]
 801686a:	e001      	b.n	8016870 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 801686c:	2300      	movs	r3, #0
 801686e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8016870:	69bb      	ldr	r3, [r7, #24]
 8016872:	f003 0308 	and.w	r3, r3, #8
 8016876:	2b00      	cmp	r3, #0
 8016878:	d15c      	bne.n	8016934 <osMutexNew+0x102>
      mem = -1;
 801687a:	f04f 33ff 	mov.w	r3, #4294967295
 801687e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d015      	beq.n	80168b2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	689b      	ldr	r3, [r3, #8]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d006      	beq.n	801689c <osMutexNew+0x6a>
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	68db      	ldr	r3, [r3, #12]
 8016892:	2b4f      	cmp	r3, #79	@ 0x4f
 8016894:	d902      	bls.n	801689c <osMutexNew+0x6a>
          mem = 1;
 8016896:	2301      	movs	r3, #1
 8016898:	613b      	str	r3, [r7, #16]
 801689a:	e00c      	b.n	80168b6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	689b      	ldr	r3, [r3, #8]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d108      	bne.n	80168b6 <osMutexNew+0x84>
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	68db      	ldr	r3, [r3, #12]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d104      	bne.n	80168b6 <osMutexNew+0x84>
            mem = 0;
 80168ac:	2300      	movs	r3, #0
 80168ae:	613b      	str	r3, [r7, #16]
 80168b0:	e001      	b.n	80168b6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80168b2:	2300      	movs	r3, #0
 80168b4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80168b6:	693b      	ldr	r3, [r7, #16]
 80168b8:	2b01      	cmp	r3, #1
 80168ba:	d112      	bne.n	80168e2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80168bc:	697b      	ldr	r3, [r7, #20]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d007      	beq.n	80168d2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	689b      	ldr	r3, [r3, #8]
 80168c6:	4619      	mov	r1, r3
 80168c8:	2004      	movs	r0, #4
 80168ca:	f000 fbc8 	bl	801705e <xQueueCreateMutexStatic>
 80168ce:	61f8      	str	r0, [r7, #28]
 80168d0:	e016      	b.n	8016900 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	689b      	ldr	r3, [r3, #8]
 80168d6:	4619      	mov	r1, r3
 80168d8:	2001      	movs	r0, #1
 80168da:	f000 fbc0 	bl	801705e <xQueueCreateMutexStatic>
 80168de:	61f8      	str	r0, [r7, #28]
 80168e0:	e00e      	b.n	8016900 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80168e2:	693b      	ldr	r3, [r7, #16]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d10b      	bne.n	8016900 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80168e8:	697b      	ldr	r3, [r7, #20]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d004      	beq.n	80168f8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80168ee:	2004      	movs	r0, #4
 80168f0:	f000 fb9d 	bl	801702e <xQueueCreateMutex>
 80168f4:	61f8      	str	r0, [r7, #28]
 80168f6:	e003      	b.n	8016900 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80168f8:	2001      	movs	r0, #1
 80168fa:	f000 fb98 	bl	801702e <xQueueCreateMutex>
 80168fe:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8016900:	69fb      	ldr	r3, [r7, #28]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d00c      	beq.n	8016920 <osMutexNew+0xee>
        if (attr != NULL) {
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d003      	beq.n	8016914 <osMutexNew+0xe2>
          name = attr->name;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	60fb      	str	r3, [r7, #12]
 8016912:	e001      	b.n	8016918 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8016914:	2300      	movs	r3, #0
 8016916:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8016918:	68f9      	ldr	r1, [r7, #12]
 801691a:	69f8      	ldr	r0, [r7, #28]
 801691c:	f000 ffce 	bl	80178bc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8016920:	69fb      	ldr	r3, [r7, #28]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d006      	beq.n	8016934 <osMutexNew+0x102>
 8016926:	697b      	ldr	r3, [r7, #20]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d003      	beq.n	8016934 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801692c:	69fb      	ldr	r3, [r7, #28]
 801692e:	f043 0301 	orr.w	r3, r3, #1
 8016932:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8016934:	69fb      	ldr	r3, [r7, #28]
}
 8016936:	4618      	mov	r0, r3
 8016938:	3720      	adds	r7, #32
 801693a:	46bd      	mov	sp, r7
 801693c:	bd80      	pop	{r7, pc}

0801693e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801693e:	b580      	push	{r7, lr}
 8016940:	b08a      	sub	sp, #40	@ 0x28
 8016942:	af02      	add	r7, sp, #8
 8016944:	60f8      	str	r0, [r7, #12]
 8016946:	60b9      	str	r1, [r7, #8]
 8016948:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801694a:	2300      	movs	r3, #0
 801694c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801694e:	f3ef 8305 	mrs	r3, IPSR
 8016952:	613b      	str	r3, [r7, #16]
  return(result);
 8016954:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8016956:	2b00      	cmp	r3, #0
 8016958:	d15f      	bne.n	8016a1a <osMessageQueueNew+0xdc>
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d05c      	beq.n	8016a1a <osMessageQueueNew+0xdc>
 8016960:	68bb      	ldr	r3, [r7, #8]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d059      	beq.n	8016a1a <osMessageQueueNew+0xdc>
    mem = -1;
 8016966:	f04f 33ff 	mov.w	r3, #4294967295
 801696a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	2b00      	cmp	r3, #0
 8016970:	d029      	beq.n	80169c6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	689b      	ldr	r3, [r3, #8]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d012      	beq.n	80169a0 <osMessageQueueNew+0x62>
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	68db      	ldr	r3, [r3, #12]
 801697e:	2b4f      	cmp	r3, #79	@ 0x4f
 8016980:	d90e      	bls.n	80169a0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8016986:	2b00      	cmp	r3, #0
 8016988:	d00a      	beq.n	80169a0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	695a      	ldr	r2, [r3, #20]
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	68b9      	ldr	r1, [r7, #8]
 8016992:	fb01 f303 	mul.w	r3, r1, r3
 8016996:	429a      	cmp	r2, r3
 8016998:	d302      	bcc.n	80169a0 <osMessageQueueNew+0x62>
        mem = 1;
 801699a:	2301      	movs	r3, #1
 801699c:	61bb      	str	r3, [r7, #24]
 801699e:	e014      	b.n	80169ca <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	689b      	ldr	r3, [r3, #8]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d110      	bne.n	80169ca <osMessageQueueNew+0x8c>
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	68db      	ldr	r3, [r3, #12]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d10c      	bne.n	80169ca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d108      	bne.n	80169ca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	695b      	ldr	r3, [r3, #20]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d104      	bne.n	80169ca <osMessageQueueNew+0x8c>
          mem = 0;
 80169c0:	2300      	movs	r3, #0
 80169c2:	61bb      	str	r3, [r7, #24]
 80169c4:	e001      	b.n	80169ca <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80169c6:	2300      	movs	r3, #0
 80169c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80169ca:	69bb      	ldr	r3, [r7, #24]
 80169cc:	2b01      	cmp	r3, #1
 80169ce:	d10b      	bne.n	80169e8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	691a      	ldr	r2, [r3, #16]
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	689b      	ldr	r3, [r3, #8]
 80169d8:	2100      	movs	r1, #0
 80169da:	9100      	str	r1, [sp, #0]
 80169dc:	68b9      	ldr	r1, [r7, #8]
 80169de:	68f8      	ldr	r0, [r7, #12]
 80169e0:	f000 fa30 	bl	8016e44 <xQueueGenericCreateStatic>
 80169e4:	61f8      	str	r0, [r7, #28]
 80169e6:	e008      	b.n	80169fa <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80169e8:	69bb      	ldr	r3, [r7, #24]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d105      	bne.n	80169fa <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80169ee:	2200      	movs	r2, #0
 80169f0:	68b9      	ldr	r1, [r7, #8]
 80169f2:	68f8      	ldr	r0, [r7, #12]
 80169f4:	f000 faa3 	bl	8016f3e <xQueueGenericCreate>
 80169f8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80169fa:	69fb      	ldr	r3, [r7, #28]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d00c      	beq.n	8016a1a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d003      	beq.n	8016a0e <osMessageQueueNew+0xd0>
        name = attr->name;
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	617b      	str	r3, [r7, #20]
 8016a0c:	e001      	b.n	8016a12 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8016a0e:	2300      	movs	r3, #0
 8016a10:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8016a12:	6979      	ldr	r1, [r7, #20]
 8016a14:	69f8      	ldr	r0, [r7, #28]
 8016a16:	f000 ff51 	bl	80178bc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8016a1a:	69fb      	ldr	r3, [r7, #28]
}
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	3720      	adds	r7, #32
 8016a20:	46bd      	mov	sp, r7
 8016a22:	bd80      	pop	{r7, pc}

08016a24 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b088      	sub	sp, #32
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	60f8      	str	r0, [r7, #12]
 8016a2c:	60b9      	str	r1, [r7, #8]
 8016a2e:	603b      	str	r3, [r7, #0]
 8016a30:	4613      	mov	r3, r2
 8016a32:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8016a38:	2300      	movs	r3, #0
 8016a3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016a3c:	f3ef 8305 	mrs	r3, IPSR
 8016a40:	617b      	str	r3, [r7, #20]
  return(result);
 8016a42:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d028      	beq.n	8016a9a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016a48:	69bb      	ldr	r3, [r7, #24]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d005      	beq.n	8016a5a <osMessageQueuePut+0x36>
 8016a4e:	68bb      	ldr	r3, [r7, #8]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d002      	beq.n	8016a5a <osMessageQueuePut+0x36>
 8016a54:	683b      	ldr	r3, [r7, #0]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d003      	beq.n	8016a62 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8016a5a:	f06f 0303 	mvn.w	r3, #3
 8016a5e:	61fb      	str	r3, [r7, #28]
 8016a60:	e038      	b.n	8016ad4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8016a62:	2300      	movs	r3, #0
 8016a64:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8016a66:	f107 0210 	add.w	r2, r7, #16
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	68b9      	ldr	r1, [r7, #8]
 8016a6e:	69b8      	ldr	r0, [r7, #24]
 8016a70:	f000 fc12 	bl	8017298 <xQueueGenericSendFromISR>
 8016a74:	4603      	mov	r3, r0
 8016a76:	2b01      	cmp	r3, #1
 8016a78:	d003      	beq.n	8016a82 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8016a7a:	f06f 0302 	mvn.w	r3, #2
 8016a7e:	61fb      	str	r3, [r7, #28]
 8016a80:	e028      	b.n	8016ad4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8016a82:	693b      	ldr	r3, [r7, #16]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d025      	beq.n	8016ad4 <osMessageQueuePut+0xb0>
 8016a88:	4b15      	ldr	r3, [pc, #84]	@ (8016ae0 <osMessageQueuePut+0xbc>)
 8016a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016a8e:	601a      	str	r2, [r3, #0]
 8016a90:	f3bf 8f4f 	dsb	sy
 8016a94:	f3bf 8f6f 	isb	sy
 8016a98:	e01c      	b.n	8016ad4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016a9a:	69bb      	ldr	r3, [r7, #24]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d002      	beq.n	8016aa6 <osMessageQueuePut+0x82>
 8016aa0:	68bb      	ldr	r3, [r7, #8]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d103      	bne.n	8016aae <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8016aa6:	f06f 0303 	mvn.w	r3, #3
 8016aaa:	61fb      	str	r3, [r7, #28]
 8016aac:	e012      	b.n	8016ad4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016aae:	2300      	movs	r3, #0
 8016ab0:	683a      	ldr	r2, [r7, #0]
 8016ab2:	68b9      	ldr	r1, [r7, #8]
 8016ab4:	69b8      	ldr	r0, [r7, #24]
 8016ab6:	f000 faed 	bl	8017094 <xQueueGenericSend>
 8016aba:	4603      	mov	r3, r0
 8016abc:	2b01      	cmp	r3, #1
 8016abe:	d009      	beq.n	8016ad4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8016ac0:	683b      	ldr	r3, [r7, #0]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d003      	beq.n	8016ace <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8016ac6:	f06f 0301 	mvn.w	r3, #1
 8016aca:	61fb      	str	r3, [r7, #28]
 8016acc:	e002      	b.n	8016ad4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8016ace:	f06f 0302 	mvn.w	r3, #2
 8016ad2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8016ad4:	69fb      	ldr	r3, [r7, #28]
}
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	3720      	adds	r7, #32
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}
 8016ade:	bf00      	nop
 8016ae0:	e000ed04 	.word	0xe000ed04

08016ae4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b088      	sub	sp, #32
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	60f8      	str	r0, [r7, #12]
 8016aec:	60b9      	str	r1, [r7, #8]
 8016aee:	607a      	str	r2, [r7, #4]
 8016af0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8016af6:	2300      	movs	r3, #0
 8016af8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016afa:	f3ef 8305 	mrs	r3, IPSR
 8016afe:	617b      	str	r3, [r7, #20]
  return(result);
 8016b00:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d028      	beq.n	8016b58 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016b06:	69bb      	ldr	r3, [r7, #24]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d005      	beq.n	8016b18 <osMessageQueueGet+0x34>
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d002      	beq.n	8016b18 <osMessageQueueGet+0x34>
 8016b12:	683b      	ldr	r3, [r7, #0]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d003      	beq.n	8016b20 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8016b18:	f06f 0303 	mvn.w	r3, #3
 8016b1c:	61fb      	str	r3, [r7, #28]
 8016b1e:	e037      	b.n	8016b90 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8016b20:	2300      	movs	r3, #0
 8016b22:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8016b24:	f107 0310 	add.w	r3, r7, #16
 8016b28:	461a      	mov	r2, r3
 8016b2a:	68b9      	ldr	r1, [r7, #8]
 8016b2c:	69b8      	ldr	r0, [r7, #24]
 8016b2e:	f000 fd33 	bl	8017598 <xQueueReceiveFromISR>
 8016b32:	4603      	mov	r3, r0
 8016b34:	2b01      	cmp	r3, #1
 8016b36:	d003      	beq.n	8016b40 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8016b38:	f06f 0302 	mvn.w	r3, #2
 8016b3c:	61fb      	str	r3, [r7, #28]
 8016b3e:	e027      	b.n	8016b90 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8016b40:	693b      	ldr	r3, [r7, #16]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d024      	beq.n	8016b90 <osMessageQueueGet+0xac>
 8016b46:	4b15      	ldr	r3, [pc, #84]	@ (8016b9c <osMessageQueueGet+0xb8>)
 8016b48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016b4c:	601a      	str	r2, [r3, #0]
 8016b4e:	f3bf 8f4f 	dsb	sy
 8016b52:	f3bf 8f6f 	isb	sy
 8016b56:	e01b      	b.n	8016b90 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016b58:	69bb      	ldr	r3, [r7, #24]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d002      	beq.n	8016b64 <osMessageQueueGet+0x80>
 8016b5e:	68bb      	ldr	r3, [r7, #8]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d103      	bne.n	8016b6c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8016b64:	f06f 0303 	mvn.w	r3, #3
 8016b68:	61fb      	str	r3, [r7, #28]
 8016b6a:	e011      	b.n	8016b90 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016b6c:	683a      	ldr	r2, [r7, #0]
 8016b6e:	68b9      	ldr	r1, [r7, #8]
 8016b70:	69b8      	ldr	r0, [r7, #24]
 8016b72:	f000 fc2f 	bl	80173d4 <xQueueReceive>
 8016b76:	4603      	mov	r3, r0
 8016b78:	2b01      	cmp	r3, #1
 8016b7a:	d009      	beq.n	8016b90 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8016b7c:	683b      	ldr	r3, [r7, #0]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d003      	beq.n	8016b8a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8016b82:	f06f 0301 	mvn.w	r3, #1
 8016b86:	61fb      	str	r3, [r7, #28]
 8016b88:	e002      	b.n	8016b90 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8016b8a:	f06f 0302 	mvn.w	r3, #2
 8016b8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8016b90:	69fb      	ldr	r3, [r7, #28]
}
 8016b92:	4618      	mov	r0, r3
 8016b94:	3720      	adds	r7, #32
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}
 8016b9a:	bf00      	nop
 8016b9c:	e000ed04 	.word	0xe000ed04

08016ba0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016ba0:	b480      	push	{r7}
 8016ba2:	b085      	sub	sp, #20
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	60f8      	str	r0, [r7, #12]
 8016ba8:	60b9      	str	r1, [r7, #8]
 8016baa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	4a07      	ldr	r2, [pc, #28]	@ (8016bcc <vApplicationGetIdleTaskMemory+0x2c>)
 8016bb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016bb2:	68bb      	ldr	r3, [r7, #8]
 8016bb4:	4a06      	ldr	r2, [pc, #24]	@ (8016bd0 <vApplicationGetIdleTaskMemory+0x30>)
 8016bb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	2280      	movs	r2, #128	@ 0x80
 8016bbc:	601a      	str	r2, [r3, #0]
}
 8016bbe:	bf00      	nop
 8016bc0:	3714      	adds	r7, #20
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc8:	4770      	bx	lr
 8016bca:	bf00      	nop
 8016bcc:	20007aec 	.word	0x20007aec
 8016bd0:	20007b94 	.word	0x20007b94

08016bd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016bd4:	b480      	push	{r7}
 8016bd6:	b085      	sub	sp, #20
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	60f8      	str	r0, [r7, #12]
 8016bdc:	60b9      	str	r1, [r7, #8]
 8016bde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	4a07      	ldr	r2, [pc, #28]	@ (8016c00 <vApplicationGetTimerTaskMemory+0x2c>)
 8016be4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016be6:	68bb      	ldr	r3, [r7, #8]
 8016be8:	4a06      	ldr	r2, [pc, #24]	@ (8016c04 <vApplicationGetTimerTaskMemory+0x30>)
 8016bea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016bf2:	601a      	str	r2, [r3, #0]
}
 8016bf4:	bf00      	nop
 8016bf6:	3714      	adds	r7, #20
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfe:	4770      	bx	lr
 8016c00:	20007d94 	.word	0x20007d94
 8016c04:	20007e3c 	.word	0x20007e3c

08016c08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016c08:	b480      	push	{r7}
 8016c0a:	b083      	sub	sp, #12
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	f103 0208 	add.w	r2, r3, #8
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8016c20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	f103 0208 	add.w	r2, r3, #8
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	f103 0208 	add.w	r2, r3, #8
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	2200      	movs	r2, #0
 8016c3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016c3c:	bf00      	nop
 8016c3e:	370c      	adds	r7, #12
 8016c40:	46bd      	mov	sp, r7
 8016c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c46:	4770      	bx	lr

08016c48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016c48:	b480      	push	{r7}
 8016c4a:	b083      	sub	sp, #12
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	2200      	movs	r2, #0
 8016c54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016c56:	bf00      	nop
 8016c58:	370c      	adds	r7, #12
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c60:	4770      	bx	lr

08016c62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016c62:	b480      	push	{r7}
 8016c64:	b085      	sub	sp, #20
 8016c66:	af00      	add	r7, sp, #0
 8016c68:	6078      	str	r0, [r7, #4]
 8016c6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	685b      	ldr	r3, [r3, #4]
 8016c70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016c72:	683b      	ldr	r3, [r7, #0]
 8016c74:	68fa      	ldr	r2, [r7, #12]
 8016c76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	689a      	ldr	r2, [r3, #8]
 8016c7c:	683b      	ldr	r3, [r7, #0]
 8016c7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	689b      	ldr	r3, [r3, #8]
 8016c84:	683a      	ldr	r2, [r7, #0]
 8016c86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	683a      	ldr	r2, [r7, #0]
 8016c8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	687a      	ldr	r2, [r7, #4]
 8016c92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	1c5a      	adds	r2, r3, #1
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	601a      	str	r2, [r3, #0]
}
 8016c9e:	bf00      	nop
 8016ca0:	3714      	adds	r7, #20
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca8:	4770      	bx	lr

08016caa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016caa:	b480      	push	{r7}
 8016cac:	b085      	sub	sp, #20
 8016cae:	af00      	add	r7, sp, #0
 8016cb0:	6078      	str	r0, [r7, #4]
 8016cb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016cb4:	683b      	ldr	r3, [r7, #0]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016cba:	68bb      	ldr	r3, [r7, #8]
 8016cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cc0:	d103      	bne.n	8016cca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	691b      	ldr	r3, [r3, #16]
 8016cc6:	60fb      	str	r3, [r7, #12]
 8016cc8:	e00c      	b.n	8016ce4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	3308      	adds	r3, #8
 8016cce:	60fb      	str	r3, [r7, #12]
 8016cd0:	e002      	b.n	8016cd8 <vListInsert+0x2e>
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	685b      	ldr	r3, [r3, #4]
 8016cd6:	60fb      	str	r3, [r7, #12]
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	685b      	ldr	r3, [r3, #4]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	68ba      	ldr	r2, [r7, #8]
 8016ce0:	429a      	cmp	r2, r3
 8016ce2:	d2f6      	bcs.n	8016cd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	685a      	ldr	r2, [r3, #4]
 8016ce8:	683b      	ldr	r3, [r7, #0]
 8016cea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016cec:	683b      	ldr	r3, [r7, #0]
 8016cee:	685b      	ldr	r3, [r3, #4]
 8016cf0:	683a      	ldr	r2, [r7, #0]
 8016cf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016cf4:	683b      	ldr	r3, [r7, #0]
 8016cf6:	68fa      	ldr	r2, [r7, #12]
 8016cf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	683a      	ldr	r2, [r7, #0]
 8016cfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016d00:	683b      	ldr	r3, [r7, #0]
 8016d02:	687a      	ldr	r2, [r7, #4]
 8016d04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	1c5a      	adds	r2, r3, #1
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	601a      	str	r2, [r3, #0]
}
 8016d10:	bf00      	nop
 8016d12:	3714      	adds	r7, #20
 8016d14:	46bd      	mov	sp, r7
 8016d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d1a:	4770      	bx	lr

08016d1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016d1c:	b480      	push	{r7}
 8016d1e:	b085      	sub	sp, #20
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	691b      	ldr	r3, [r3, #16]
 8016d28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	685b      	ldr	r3, [r3, #4]
 8016d2e:	687a      	ldr	r2, [r7, #4]
 8016d30:	6892      	ldr	r2, [r2, #8]
 8016d32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	689b      	ldr	r3, [r3, #8]
 8016d38:	687a      	ldr	r2, [r7, #4]
 8016d3a:	6852      	ldr	r2, [r2, #4]
 8016d3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	685b      	ldr	r3, [r3, #4]
 8016d42:	687a      	ldr	r2, [r7, #4]
 8016d44:	429a      	cmp	r2, r3
 8016d46:	d103      	bne.n	8016d50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	689a      	ldr	r2, [r3, #8]
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	2200      	movs	r2, #0
 8016d54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	1e5a      	subs	r2, r3, #1
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	681b      	ldr	r3, [r3, #0]
}
 8016d64:	4618      	mov	r0, r3
 8016d66:	3714      	adds	r7, #20
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d6e:	4770      	bx	lr

08016d70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b084      	sub	sp, #16
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
 8016d78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d10b      	bne.n	8016d9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d88:	f383 8811 	msr	BASEPRI, r3
 8016d8c:	f3bf 8f6f 	isb	sy
 8016d90:	f3bf 8f4f 	dsb	sy
 8016d94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016d96:	bf00      	nop
 8016d98:	bf00      	nop
 8016d9a:	e7fd      	b.n	8016d98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8016d9c:	f002 f9b4 	bl	8019108 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	681a      	ldr	r2, [r3, #0]
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016da8:	68f9      	ldr	r1, [r7, #12]
 8016daa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016dac:	fb01 f303 	mul.w	r3, r1, r3
 8016db0:	441a      	add	r2, r3
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	2200      	movs	r2, #0
 8016dba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	681a      	ldr	r2, [r3, #0]
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	681a      	ldr	r2, [r3, #0]
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016dcc:	3b01      	subs	r3, #1
 8016dce:	68f9      	ldr	r1, [r7, #12]
 8016dd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016dd2:	fb01 f303 	mul.w	r3, r1, r3
 8016dd6:	441a      	add	r2, r3
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	22ff      	movs	r2, #255	@ 0xff
 8016de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	22ff      	movs	r2, #255	@ 0xff
 8016de8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8016dec:	683b      	ldr	r3, [r7, #0]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d114      	bne.n	8016e1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	691b      	ldr	r3, [r3, #16]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d01a      	beq.n	8016e30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	3310      	adds	r3, #16
 8016dfe:	4618      	mov	r0, r3
 8016e00:	f001 fa4c 	bl	801829c <xTaskRemoveFromEventList>
 8016e04:	4603      	mov	r3, r0
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d012      	beq.n	8016e30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8016e40 <xQueueGenericReset+0xd0>)
 8016e0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016e10:	601a      	str	r2, [r3, #0]
 8016e12:	f3bf 8f4f 	dsb	sy
 8016e16:	f3bf 8f6f 	isb	sy
 8016e1a:	e009      	b.n	8016e30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	3310      	adds	r3, #16
 8016e20:	4618      	mov	r0, r3
 8016e22:	f7ff fef1 	bl	8016c08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	3324      	adds	r3, #36	@ 0x24
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f7ff feec 	bl	8016c08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016e30:	f002 f99c 	bl	801916c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016e34:	2301      	movs	r3, #1
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3710      	adds	r7, #16
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}
 8016e3e:	bf00      	nop
 8016e40:	e000ed04 	.word	0xe000ed04

08016e44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b08e      	sub	sp, #56	@ 0x38
 8016e48:	af02      	add	r7, sp, #8
 8016e4a:	60f8      	str	r0, [r7, #12]
 8016e4c:	60b9      	str	r1, [r7, #8]
 8016e4e:	607a      	str	r2, [r7, #4]
 8016e50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d10b      	bne.n	8016e70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8016e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e5c:	f383 8811 	msr	BASEPRI, r3
 8016e60:	f3bf 8f6f 	isb	sy
 8016e64:	f3bf 8f4f 	dsb	sy
 8016e68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8016e6a:	bf00      	nop
 8016e6c:	bf00      	nop
 8016e6e:	e7fd      	b.n	8016e6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016e70:	683b      	ldr	r3, [r7, #0]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d10b      	bne.n	8016e8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8016e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e7a:	f383 8811 	msr	BASEPRI, r3
 8016e7e:	f3bf 8f6f 	isb	sy
 8016e82:	f3bf 8f4f 	dsb	sy
 8016e86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016e88:	bf00      	nop
 8016e8a:	bf00      	nop
 8016e8c:	e7fd      	b.n	8016e8a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d002      	beq.n	8016e9a <xQueueGenericCreateStatic+0x56>
 8016e94:	68bb      	ldr	r3, [r7, #8]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d001      	beq.n	8016e9e <xQueueGenericCreateStatic+0x5a>
 8016e9a:	2301      	movs	r3, #1
 8016e9c:	e000      	b.n	8016ea0 <xQueueGenericCreateStatic+0x5c>
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d10b      	bne.n	8016ebc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8016ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ea8:	f383 8811 	msr	BASEPRI, r3
 8016eac:	f3bf 8f6f 	isb	sy
 8016eb0:	f3bf 8f4f 	dsb	sy
 8016eb4:	623b      	str	r3, [r7, #32]
}
 8016eb6:	bf00      	nop
 8016eb8:	bf00      	nop
 8016eba:	e7fd      	b.n	8016eb8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d102      	bne.n	8016ec8 <xQueueGenericCreateStatic+0x84>
 8016ec2:	68bb      	ldr	r3, [r7, #8]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d101      	bne.n	8016ecc <xQueueGenericCreateStatic+0x88>
 8016ec8:	2301      	movs	r3, #1
 8016eca:	e000      	b.n	8016ece <xQueueGenericCreateStatic+0x8a>
 8016ecc:	2300      	movs	r3, #0
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d10b      	bne.n	8016eea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8016ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ed6:	f383 8811 	msr	BASEPRI, r3
 8016eda:	f3bf 8f6f 	isb	sy
 8016ede:	f3bf 8f4f 	dsb	sy
 8016ee2:	61fb      	str	r3, [r7, #28]
}
 8016ee4:	bf00      	nop
 8016ee6:	bf00      	nop
 8016ee8:	e7fd      	b.n	8016ee6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016eea:	2350      	movs	r3, #80	@ 0x50
 8016eec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016eee:	697b      	ldr	r3, [r7, #20]
 8016ef0:	2b50      	cmp	r3, #80	@ 0x50
 8016ef2:	d00b      	beq.n	8016f0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8016ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ef8:	f383 8811 	msr	BASEPRI, r3
 8016efc:	f3bf 8f6f 	isb	sy
 8016f00:	f3bf 8f4f 	dsb	sy
 8016f04:	61bb      	str	r3, [r7, #24]
}
 8016f06:	bf00      	nop
 8016f08:	bf00      	nop
 8016f0a:	e7fd      	b.n	8016f08 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016f0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016f0e:	683b      	ldr	r3, [r7, #0]
 8016f10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8016f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d00d      	beq.n	8016f34 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f1a:	2201      	movs	r2, #1
 8016f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016f20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8016f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f26:	9300      	str	r3, [sp, #0]
 8016f28:	4613      	mov	r3, r2
 8016f2a:	687a      	ldr	r2, [r7, #4]
 8016f2c:	68b9      	ldr	r1, [r7, #8]
 8016f2e:	68f8      	ldr	r0, [r7, #12]
 8016f30:	f000 f840 	bl	8016fb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8016f36:	4618      	mov	r0, r3
 8016f38:	3730      	adds	r7, #48	@ 0x30
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bd80      	pop	{r7, pc}

08016f3e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016f3e:	b580      	push	{r7, lr}
 8016f40:	b08a      	sub	sp, #40	@ 0x28
 8016f42:	af02      	add	r7, sp, #8
 8016f44:	60f8      	str	r0, [r7, #12]
 8016f46:	60b9      	str	r1, [r7, #8]
 8016f48:	4613      	mov	r3, r2
 8016f4a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d10b      	bne.n	8016f6a <xQueueGenericCreate+0x2c>
	__asm volatile
 8016f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f56:	f383 8811 	msr	BASEPRI, r3
 8016f5a:	f3bf 8f6f 	isb	sy
 8016f5e:	f3bf 8f4f 	dsb	sy
 8016f62:	613b      	str	r3, [r7, #16]
}
 8016f64:	bf00      	nop
 8016f66:	bf00      	nop
 8016f68:	e7fd      	b.n	8016f66 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	68ba      	ldr	r2, [r7, #8]
 8016f6e:	fb02 f303 	mul.w	r3, r2, r3
 8016f72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016f74:	69fb      	ldr	r3, [r7, #28]
 8016f76:	3350      	adds	r3, #80	@ 0x50
 8016f78:	4618      	mov	r0, r3
 8016f7a:	f002 f9e7 	bl	801934c <pvPortMalloc>
 8016f7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016f80:	69bb      	ldr	r3, [r7, #24]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d011      	beq.n	8016faa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016f86:	69bb      	ldr	r3, [r7, #24]
 8016f88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016f8a:	697b      	ldr	r3, [r7, #20]
 8016f8c:	3350      	adds	r3, #80	@ 0x50
 8016f8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016f90:	69bb      	ldr	r3, [r7, #24]
 8016f92:	2200      	movs	r2, #0
 8016f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016f98:	79fa      	ldrb	r2, [r7, #7]
 8016f9a:	69bb      	ldr	r3, [r7, #24]
 8016f9c:	9300      	str	r3, [sp, #0]
 8016f9e:	4613      	mov	r3, r2
 8016fa0:	697a      	ldr	r2, [r7, #20]
 8016fa2:	68b9      	ldr	r1, [r7, #8]
 8016fa4:	68f8      	ldr	r0, [r7, #12]
 8016fa6:	f000 f805 	bl	8016fb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016faa:	69bb      	ldr	r3, [r7, #24]
	}
 8016fac:	4618      	mov	r0, r3
 8016fae:	3720      	adds	r7, #32
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	bd80      	pop	{r7, pc}

08016fb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016fb4:	b580      	push	{r7, lr}
 8016fb6:	b084      	sub	sp, #16
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	60f8      	str	r0, [r7, #12]
 8016fbc:	60b9      	str	r1, [r7, #8]
 8016fbe:	607a      	str	r2, [r7, #4]
 8016fc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016fc2:	68bb      	ldr	r3, [r7, #8]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d103      	bne.n	8016fd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016fc8:	69bb      	ldr	r3, [r7, #24]
 8016fca:	69ba      	ldr	r2, [r7, #24]
 8016fcc:	601a      	str	r2, [r3, #0]
 8016fce:	e002      	b.n	8016fd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016fd0:	69bb      	ldr	r3, [r7, #24]
 8016fd2:	687a      	ldr	r2, [r7, #4]
 8016fd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016fd6:	69bb      	ldr	r3, [r7, #24]
 8016fd8:	68fa      	ldr	r2, [r7, #12]
 8016fda:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016fdc:	69bb      	ldr	r3, [r7, #24]
 8016fde:	68ba      	ldr	r2, [r7, #8]
 8016fe0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016fe2:	2101      	movs	r1, #1
 8016fe4:	69b8      	ldr	r0, [r7, #24]
 8016fe6:	f7ff fec3 	bl	8016d70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016fea:	69bb      	ldr	r3, [r7, #24]
 8016fec:	78fa      	ldrb	r2, [r7, #3]
 8016fee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016ff2:	bf00      	nop
 8016ff4:	3710      	adds	r7, #16
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	bd80      	pop	{r7, pc}

08016ffa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016ffa:	b580      	push	{r7, lr}
 8016ffc:	b082      	sub	sp, #8
 8016ffe:	af00      	add	r7, sp, #0
 8017000:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d00e      	beq.n	8017026 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	2200      	movs	r2, #0
 801700c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	2200      	movs	r2, #0
 8017012:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	2200      	movs	r2, #0
 8017018:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801701a:	2300      	movs	r3, #0
 801701c:	2200      	movs	r2, #0
 801701e:	2100      	movs	r1, #0
 8017020:	6878      	ldr	r0, [r7, #4]
 8017022:	f000 f837 	bl	8017094 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8017026:	bf00      	nop
 8017028:	3708      	adds	r7, #8
 801702a:	46bd      	mov	sp, r7
 801702c:	bd80      	pop	{r7, pc}

0801702e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801702e:	b580      	push	{r7, lr}
 8017030:	b086      	sub	sp, #24
 8017032:	af00      	add	r7, sp, #0
 8017034:	4603      	mov	r3, r0
 8017036:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8017038:	2301      	movs	r3, #1
 801703a:	617b      	str	r3, [r7, #20]
 801703c:	2300      	movs	r3, #0
 801703e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8017040:	79fb      	ldrb	r3, [r7, #7]
 8017042:	461a      	mov	r2, r3
 8017044:	6939      	ldr	r1, [r7, #16]
 8017046:	6978      	ldr	r0, [r7, #20]
 8017048:	f7ff ff79 	bl	8016f3e <xQueueGenericCreate>
 801704c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801704e:	68f8      	ldr	r0, [r7, #12]
 8017050:	f7ff ffd3 	bl	8016ffa <prvInitialiseMutex>

		return xNewQueue;
 8017054:	68fb      	ldr	r3, [r7, #12]
	}
 8017056:	4618      	mov	r0, r3
 8017058:	3718      	adds	r7, #24
 801705a:	46bd      	mov	sp, r7
 801705c:	bd80      	pop	{r7, pc}

0801705e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801705e:	b580      	push	{r7, lr}
 8017060:	b088      	sub	sp, #32
 8017062:	af02      	add	r7, sp, #8
 8017064:	4603      	mov	r3, r0
 8017066:	6039      	str	r1, [r7, #0]
 8017068:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801706a:	2301      	movs	r3, #1
 801706c:	617b      	str	r3, [r7, #20]
 801706e:	2300      	movs	r3, #0
 8017070:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8017072:	79fb      	ldrb	r3, [r7, #7]
 8017074:	9300      	str	r3, [sp, #0]
 8017076:	683b      	ldr	r3, [r7, #0]
 8017078:	2200      	movs	r2, #0
 801707a:	6939      	ldr	r1, [r7, #16]
 801707c:	6978      	ldr	r0, [r7, #20]
 801707e:	f7ff fee1 	bl	8016e44 <xQueueGenericCreateStatic>
 8017082:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8017084:	68f8      	ldr	r0, [r7, #12]
 8017086:	f7ff ffb8 	bl	8016ffa <prvInitialiseMutex>

		return xNewQueue;
 801708a:	68fb      	ldr	r3, [r7, #12]
	}
 801708c:	4618      	mov	r0, r3
 801708e:	3718      	adds	r7, #24
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}

08017094 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017094:	b580      	push	{r7, lr}
 8017096:	b08e      	sub	sp, #56	@ 0x38
 8017098:	af00      	add	r7, sp, #0
 801709a:	60f8      	str	r0, [r7, #12]
 801709c:	60b9      	str	r1, [r7, #8]
 801709e:	607a      	str	r2, [r7, #4]
 80170a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80170a2:	2300      	movs	r3, #0
 80170a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80170aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d10b      	bne.n	80170c8 <xQueueGenericSend+0x34>
	__asm volatile
 80170b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170b4:	f383 8811 	msr	BASEPRI, r3
 80170b8:	f3bf 8f6f 	isb	sy
 80170bc:	f3bf 8f4f 	dsb	sy
 80170c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80170c2:	bf00      	nop
 80170c4:	bf00      	nop
 80170c6:	e7fd      	b.n	80170c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80170c8:	68bb      	ldr	r3, [r7, #8]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d103      	bne.n	80170d6 <xQueueGenericSend+0x42>
 80170ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d101      	bne.n	80170da <xQueueGenericSend+0x46>
 80170d6:	2301      	movs	r3, #1
 80170d8:	e000      	b.n	80170dc <xQueueGenericSend+0x48>
 80170da:	2300      	movs	r3, #0
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d10b      	bne.n	80170f8 <xQueueGenericSend+0x64>
	__asm volatile
 80170e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170e4:	f383 8811 	msr	BASEPRI, r3
 80170e8:	f3bf 8f6f 	isb	sy
 80170ec:	f3bf 8f4f 	dsb	sy
 80170f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80170f2:	bf00      	nop
 80170f4:	bf00      	nop
 80170f6:	e7fd      	b.n	80170f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	2b02      	cmp	r3, #2
 80170fc:	d103      	bne.n	8017106 <xQueueGenericSend+0x72>
 80170fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017102:	2b01      	cmp	r3, #1
 8017104:	d101      	bne.n	801710a <xQueueGenericSend+0x76>
 8017106:	2301      	movs	r3, #1
 8017108:	e000      	b.n	801710c <xQueueGenericSend+0x78>
 801710a:	2300      	movs	r3, #0
 801710c:	2b00      	cmp	r3, #0
 801710e:	d10b      	bne.n	8017128 <xQueueGenericSend+0x94>
	__asm volatile
 8017110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017114:	f383 8811 	msr	BASEPRI, r3
 8017118:	f3bf 8f6f 	isb	sy
 801711c:	f3bf 8f4f 	dsb	sy
 8017120:	623b      	str	r3, [r7, #32]
}
 8017122:	bf00      	nop
 8017124:	bf00      	nop
 8017126:	e7fd      	b.n	8017124 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017128:	f001 fa7e 	bl	8018628 <xTaskGetSchedulerState>
 801712c:	4603      	mov	r3, r0
 801712e:	2b00      	cmp	r3, #0
 8017130:	d102      	bne.n	8017138 <xQueueGenericSend+0xa4>
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	2b00      	cmp	r3, #0
 8017136:	d101      	bne.n	801713c <xQueueGenericSend+0xa8>
 8017138:	2301      	movs	r3, #1
 801713a:	e000      	b.n	801713e <xQueueGenericSend+0xaa>
 801713c:	2300      	movs	r3, #0
 801713e:	2b00      	cmp	r3, #0
 8017140:	d10b      	bne.n	801715a <xQueueGenericSend+0xc6>
	__asm volatile
 8017142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017146:	f383 8811 	msr	BASEPRI, r3
 801714a:	f3bf 8f6f 	isb	sy
 801714e:	f3bf 8f4f 	dsb	sy
 8017152:	61fb      	str	r3, [r7, #28]
}
 8017154:	bf00      	nop
 8017156:	bf00      	nop
 8017158:	e7fd      	b.n	8017156 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801715a:	f001 ffd5 	bl	8019108 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801715e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017160:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017166:	429a      	cmp	r2, r3
 8017168:	d302      	bcc.n	8017170 <xQueueGenericSend+0xdc>
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	2b02      	cmp	r3, #2
 801716e:	d129      	bne.n	80171c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017170:	683a      	ldr	r2, [r7, #0]
 8017172:	68b9      	ldr	r1, [r7, #8]
 8017174:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017176:	f000 fa91 	bl	801769c <prvCopyDataToQueue>
 801717a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801717c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801717e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017180:	2b00      	cmp	r3, #0
 8017182:	d010      	beq.n	80171a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017186:	3324      	adds	r3, #36	@ 0x24
 8017188:	4618      	mov	r0, r3
 801718a:	f001 f887 	bl	801829c <xTaskRemoveFromEventList>
 801718e:	4603      	mov	r3, r0
 8017190:	2b00      	cmp	r3, #0
 8017192:	d013      	beq.n	80171bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017194:	4b3f      	ldr	r3, [pc, #252]	@ (8017294 <xQueueGenericSend+0x200>)
 8017196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801719a:	601a      	str	r2, [r3, #0]
 801719c:	f3bf 8f4f 	dsb	sy
 80171a0:	f3bf 8f6f 	isb	sy
 80171a4:	e00a      	b.n	80171bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80171a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d007      	beq.n	80171bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80171ac:	4b39      	ldr	r3, [pc, #228]	@ (8017294 <xQueueGenericSend+0x200>)
 80171ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80171b2:	601a      	str	r2, [r3, #0]
 80171b4:	f3bf 8f4f 	dsb	sy
 80171b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80171bc:	f001 ffd6 	bl	801916c <vPortExitCritical>
				return pdPASS;
 80171c0:	2301      	movs	r3, #1
 80171c2:	e063      	b.n	801728c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d103      	bne.n	80171d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80171ca:	f001 ffcf 	bl	801916c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80171ce:	2300      	movs	r3, #0
 80171d0:	e05c      	b.n	801728c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80171d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d106      	bne.n	80171e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80171d8:	f107 0314 	add.w	r3, r7, #20
 80171dc:	4618      	mov	r0, r3
 80171de:	f001 f8c1 	bl	8018364 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80171e2:	2301      	movs	r3, #1
 80171e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80171e6:	f001 ffc1 	bl	801916c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80171ea:	f000 fe29 	bl	8017e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80171ee:	f001 ff8b 	bl	8019108 <vPortEnterCritical>
 80171f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80171f8:	b25b      	sxtb	r3, r3
 80171fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171fe:	d103      	bne.n	8017208 <xQueueGenericSend+0x174>
 8017200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017202:	2200      	movs	r2, #0
 8017204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801720a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801720e:	b25b      	sxtb	r3, r3
 8017210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017214:	d103      	bne.n	801721e <xQueueGenericSend+0x18a>
 8017216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017218:	2200      	movs	r2, #0
 801721a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801721e:	f001 ffa5 	bl	801916c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017222:	1d3a      	adds	r2, r7, #4
 8017224:	f107 0314 	add.w	r3, r7, #20
 8017228:	4611      	mov	r1, r2
 801722a:	4618      	mov	r0, r3
 801722c:	f001 f8b0 	bl	8018390 <xTaskCheckForTimeOut>
 8017230:	4603      	mov	r3, r0
 8017232:	2b00      	cmp	r3, #0
 8017234:	d124      	bne.n	8017280 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017236:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017238:	f000 fb28 	bl	801788c <prvIsQueueFull>
 801723c:	4603      	mov	r3, r0
 801723e:	2b00      	cmp	r3, #0
 8017240:	d018      	beq.n	8017274 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017244:	3310      	adds	r3, #16
 8017246:	687a      	ldr	r2, [r7, #4]
 8017248:	4611      	mov	r1, r2
 801724a:	4618      	mov	r0, r3
 801724c:	f000 ffd4 	bl	80181f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017252:	f000 fab3 	bl	80177bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017256:	f000 fe01 	bl	8017e5c <xTaskResumeAll>
 801725a:	4603      	mov	r3, r0
 801725c:	2b00      	cmp	r3, #0
 801725e:	f47f af7c 	bne.w	801715a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8017262:	4b0c      	ldr	r3, [pc, #48]	@ (8017294 <xQueueGenericSend+0x200>)
 8017264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017268:	601a      	str	r2, [r3, #0]
 801726a:	f3bf 8f4f 	dsb	sy
 801726e:	f3bf 8f6f 	isb	sy
 8017272:	e772      	b.n	801715a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017274:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017276:	f000 faa1 	bl	80177bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801727a:	f000 fdef 	bl	8017e5c <xTaskResumeAll>
 801727e:	e76c      	b.n	801715a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017280:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017282:	f000 fa9b 	bl	80177bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017286:	f000 fde9 	bl	8017e5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801728a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801728c:	4618      	mov	r0, r3
 801728e:	3738      	adds	r7, #56	@ 0x38
 8017290:	46bd      	mov	sp, r7
 8017292:	bd80      	pop	{r7, pc}
 8017294:	e000ed04 	.word	0xe000ed04

08017298 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b090      	sub	sp, #64	@ 0x40
 801729c:	af00      	add	r7, sp, #0
 801729e:	60f8      	str	r0, [r7, #12]
 80172a0:	60b9      	str	r1, [r7, #8]
 80172a2:	607a      	str	r2, [r7, #4]
 80172a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80172aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d10b      	bne.n	80172c8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80172b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172b4:	f383 8811 	msr	BASEPRI, r3
 80172b8:	f3bf 8f6f 	isb	sy
 80172bc:	f3bf 8f4f 	dsb	sy
 80172c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80172c2:	bf00      	nop
 80172c4:	bf00      	nop
 80172c6:	e7fd      	b.n	80172c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80172c8:	68bb      	ldr	r3, [r7, #8]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d103      	bne.n	80172d6 <xQueueGenericSendFromISR+0x3e>
 80172ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d101      	bne.n	80172da <xQueueGenericSendFromISR+0x42>
 80172d6:	2301      	movs	r3, #1
 80172d8:	e000      	b.n	80172dc <xQueueGenericSendFromISR+0x44>
 80172da:	2300      	movs	r3, #0
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d10b      	bne.n	80172f8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80172e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172e4:	f383 8811 	msr	BASEPRI, r3
 80172e8:	f3bf 8f6f 	isb	sy
 80172ec:	f3bf 8f4f 	dsb	sy
 80172f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80172f2:	bf00      	nop
 80172f4:	bf00      	nop
 80172f6:	e7fd      	b.n	80172f4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80172f8:	683b      	ldr	r3, [r7, #0]
 80172fa:	2b02      	cmp	r3, #2
 80172fc:	d103      	bne.n	8017306 <xQueueGenericSendFromISR+0x6e>
 80172fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017302:	2b01      	cmp	r3, #1
 8017304:	d101      	bne.n	801730a <xQueueGenericSendFromISR+0x72>
 8017306:	2301      	movs	r3, #1
 8017308:	e000      	b.n	801730c <xQueueGenericSendFromISR+0x74>
 801730a:	2300      	movs	r3, #0
 801730c:	2b00      	cmp	r3, #0
 801730e:	d10b      	bne.n	8017328 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8017310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017314:	f383 8811 	msr	BASEPRI, r3
 8017318:	f3bf 8f6f 	isb	sy
 801731c:	f3bf 8f4f 	dsb	sy
 8017320:	623b      	str	r3, [r7, #32]
}
 8017322:	bf00      	nop
 8017324:	bf00      	nop
 8017326:	e7fd      	b.n	8017324 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017328:	f001 ffce 	bl	80192c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801732c:	f3ef 8211 	mrs	r2, BASEPRI
 8017330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017334:	f383 8811 	msr	BASEPRI, r3
 8017338:	f3bf 8f6f 	isb	sy
 801733c:	f3bf 8f4f 	dsb	sy
 8017340:	61fa      	str	r2, [r7, #28]
 8017342:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017344:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017346:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801734a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801734c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801734e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017350:	429a      	cmp	r2, r3
 8017352:	d302      	bcc.n	801735a <xQueueGenericSendFromISR+0xc2>
 8017354:	683b      	ldr	r3, [r7, #0]
 8017356:	2b02      	cmp	r3, #2
 8017358:	d12f      	bne.n	80173ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801735a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801735c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017360:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017368:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801736a:	683a      	ldr	r2, [r7, #0]
 801736c:	68b9      	ldr	r1, [r7, #8]
 801736e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017370:	f000 f994 	bl	801769c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017374:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8017378:	f1b3 3fff 	cmp.w	r3, #4294967295
 801737c:	d112      	bne.n	80173a4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801737e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017382:	2b00      	cmp	r3, #0
 8017384:	d016      	beq.n	80173b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017388:	3324      	adds	r3, #36	@ 0x24
 801738a:	4618      	mov	r0, r3
 801738c:	f000 ff86 	bl	801829c <xTaskRemoveFromEventList>
 8017390:	4603      	mov	r3, r0
 8017392:	2b00      	cmp	r3, #0
 8017394:	d00e      	beq.n	80173b4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d00b      	beq.n	80173b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	2201      	movs	r2, #1
 80173a0:	601a      	str	r2, [r3, #0]
 80173a2:	e007      	b.n	80173b4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80173a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80173a8:	3301      	adds	r3, #1
 80173aa:	b2db      	uxtb	r3, r3
 80173ac:	b25a      	sxtb	r2, r3
 80173ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80173b4:	2301      	movs	r3, #1
 80173b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80173b8:	e001      	b.n	80173be <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80173ba:	2300      	movs	r3, #0
 80173bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80173be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173c0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80173c2:	697b      	ldr	r3, [r7, #20]
 80173c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80173c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80173ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80173cc:	4618      	mov	r0, r3
 80173ce:	3740      	adds	r7, #64	@ 0x40
 80173d0:	46bd      	mov	sp, r7
 80173d2:	bd80      	pop	{r7, pc}

080173d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80173d4:	b580      	push	{r7, lr}
 80173d6:	b08c      	sub	sp, #48	@ 0x30
 80173d8:	af00      	add	r7, sp, #0
 80173da:	60f8      	str	r0, [r7, #12]
 80173dc:	60b9      	str	r1, [r7, #8]
 80173de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80173e0:	2300      	movs	r3, #0
 80173e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80173e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d10b      	bne.n	8017406 <xQueueReceive+0x32>
	__asm volatile
 80173ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173f2:	f383 8811 	msr	BASEPRI, r3
 80173f6:	f3bf 8f6f 	isb	sy
 80173fa:	f3bf 8f4f 	dsb	sy
 80173fe:	623b      	str	r3, [r7, #32]
}
 8017400:	bf00      	nop
 8017402:	bf00      	nop
 8017404:	e7fd      	b.n	8017402 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017406:	68bb      	ldr	r3, [r7, #8]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d103      	bne.n	8017414 <xQueueReceive+0x40>
 801740c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801740e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017410:	2b00      	cmp	r3, #0
 8017412:	d101      	bne.n	8017418 <xQueueReceive+0x44>
 8017414:	2301      	movs	r3, #1
 8017416:	e000      	b.n	801741a <xQueueReceive+0x46>
 8017418:	2300      	movs	r3, #0
 801741a:	2b00      	cmp	r3, #0
 801741c:	d10b      	bne.n	8017436 <xQueueReceive+0x62>
	__asm volatile
 801741e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017422:	f383 8811 	msr	BASEPRI, r3
 8017426:	f3bf 8f6f 	isb	sy
 801742a:	f3bf 8f4f 	dsb	sy
 801742e:	61fb      	str	r3, [r7, #28]
}
 8017430:	bf00      	nop
 8017432:	bf00      	nop
 8017434:	e7fd      	b.n	8017432 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017436:	f001 f8f7 	bl	8018628 <xTaskGetSchedulerState>
 801743a:	4603      	mov	r3, r0
 801743c:	2b00      	cmp	r3, #0
 801743e:	d102      	bne.n	8017446 <xQueueReceive+0x72>
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d101      	bne.n	801744a <xQueueReceive+0x76>
 8017446:	2301      	movs	r3, #1
 8017448:	e000      	b.n	801744c <xQueueReceive+0x78>
 801744a:	2300      	movs	r3, #0
 801744c:	2b00      	cmp	r3, #0
 801744e:	d10b      	bne.n	8017468 <xQueueReceive+0x94>
	__asm volatile
 8017450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017454:	f383 8811 	msr	BASEPRI, r3
 8017458:	f3bf 8f6f 	isb	sy
 801745c:	f3bf 8f4f 	dsb	sy
 8017460:	61bb      	str	r3, [r7, #24]
}
 8017462:	bf00      	nop
 8017464:	bf00      	nop
 8017466:	e7fd      	b.n	8017464 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017468:	f001 fe4e 	bl	8019108 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801746c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801746e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017470:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017474:	2b00      	cmp	r3, #0
 8017476:	d01f      	beq.n	80174b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017478:	68b9      	ldr	r1, [r7, #8]
 801747a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801747c:	f000 f978 	bl	8017770 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017482:	1e5a      	subs	r2, r3, #1
 8017484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017486:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801748a:	691b      	ldr	r3, [r3, #16]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d00f      	beq.n	80174b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017492:	3310      	adds	r3, #16
 8017494:	4618      	mov	r0, r3
 8017496:	f000 ff01 	bl	801829c <xTaskRemoveFromEventList>
 801749a:	4603      	mov	r3, r0
 801749c:	2b00      	cmp	r3, #0
 801749e:	d007      	beq.n	80174b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80174a0:	4b3c      	ldr	r3, [pc, #240]	@ (8017594 <xQueueReceive+0x1c0>)
 80174a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80174a6:	601a      	str	r2, [r3, #0]
 80174a8:	f3bf 8f4f 	dsb	sy
 80174ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80174b0:	f001 fe5c 	bl	801916c <vPortExitCritical>
				return pdPASS;
 80174b4:	2301      	movs	r3, #1
 80174b6:	e069      	b.n	801758c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d103      	bne.n	80174c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80174be:	f001 fe55 	bl	801916c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80174c2:	2300      	movs	r3, #0
 80174c4:	e062      	b.n	801758c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80174c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d106      	bne.n	80174da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80174cc:	f107 0310 	add.w	r3, r7, #16
 80174d0:	4618      	mov	r0, r3
 80174d2:	f000 ff47 	bl	8018364 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80174d6:	2301      	movs	r3, #1
 80174d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80174da:	f001 fe47 	bl	801916c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80174de:	f000 fcaf 	bl	8017e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80174e2:	f001 fe11 	bl	8019108 <vPortEnterCritical>
 80174e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80174ec:	b25b      	sxtb	r3, r3
 80174ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174f2:	d103      	bne.n	80174fc <xQueueReceive+0x128>
 80174f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174f6:	2200      	movs	r2, #0
 80174f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80174fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017502:	b25b      	sxtb	r3, r3
 8017504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017508:	d103      	bne.n	8017512 <xQueueReceive+0x13e>
 801750a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801750c:	2200      	movs	r2, #0
 801750e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017512:	f001 fe2b 	bl	801916c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017516:	1d3a      	adds	r2, r7, #4
 8017518:	f107 0310 	add.w	r3, r7, #16
 801751c:	4611      	mov	r1, r2
 801751e:	4618      	mov	r0, r3
 8017520:	f000 ff36 	bl	8018390 <xTaskCheckForTimeOut>
 8017524:	4603      	mov	r3, r0
 8017526:	2b00      	cmp	r3, #0
 8017528:	d123      	bne.n	8017572 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801752a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801752c:	f000 f998 	bl	8017860 <prvIsQueueEmpty>
 8017530:	4603      	mov	r3, r0
 8017532:	2b00      	cmp	r3, #0
 8017534:	d017      	beq.n	8017566 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017538:	3324      	adds	r3, #36	@ 0x24
 801753a:	687a      	ldr	r2, [r7, #4]
 801753c:	4611      	mov	r1, r2
 801753e:	4618      	mov	r0, r3
 8017540:	f000 fe5a 	bl	80181f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017544:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017546:	f000 f939 	bl	80177bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801754a:	f000 fc87 	bl	8017e5c <xTaskResumeAll>
 801754e:	4603      	mov	r3, r0
 8017550:	2b00      	cmp	r3, #0
 8017552:	d189      	bne.n	8017468 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8017554:	4b0f      	ldr	r3, [pc, #60]	@ (8017594 <xQueueReceive+0x1c0>)
 8017556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801755a:	601a      	str	r2, [r3, #0]
 801755c:	f3bf 8f4f 	dsb	sy
 8017560:	f3bf 8f6f 	isb	sy
 8017564:	e780      	b.n	8017468 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017568:	f000 f928 	bl	80177bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801756c:	f000 fc76 	bl	8017e5c <xTaskResumeAll>
 8017570:	e77a      	b.n	8017468 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017574:	f000 f922 	bl	80177bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017578:	f000 fc70 	bl	8017e5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801757c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801757e:	f000 f96f 	bl	8017860 <prvIsQueueEmpty>
 8017582:	4603      	mov	r3, r0
 8017584:	2b00      	cmp	r3, #0
 8017586:	f43f af6f 	beq.w	8017468 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801758a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801758c:	4618      	mov	r0, r3
 801758e:	3730      	adds	r7, #48	@ 0x30
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}
 8017594:	e000ed04 	.word	0xe000ed04

08017598 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b08e      	sub	sp, #56	@ 0x38
 801759c:	af00      	add	r7, sp, #0
 801759e:	60f8      	str	r0, [r7, #12]
 80175a0:	60b9      	str	r1, [r7, #8]
 80175a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80175a4:	68fb      	ldr	r3, [r7, #12]
 80175a6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80175a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d10b      	bne.n	80175c6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80175ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175b2:	f383 8811 	msr	BASEPRI, r3
 80175b6:	f3bf 8f6f 	isb	sy
 80175ba:	f3bf 8f4f 	dsb	sy
 80175be:	623b      	str	r3, [r7, #32]
}
 80175c0:	bf00      	nop
 80175c2:	bf00      	nop
 80175c4:	e7fd      	b.n	80175c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80175c6:	68bb      	ldr	r3, [r7, #8]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d103      	bne.n	80175d4 <xQueueReceiveFromISR+0x3c>
 80175cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d101      	bne.n	80175d8 <xQueueReceiveFromISR+0x40>
 80175d4:	2301      	movs	r3, #1
 80175d6:	e000      	b.n	80175da <xQueueReceiveFromISR+0x42>
 80175d8:	2300      	movs	r3, #0
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d10b      	bne.n	80175f6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80175de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175e2:	f383 8811 	msr	BASEPRI, r3
 80175e6:	f3bf 8f6f 	isb	sy
 80175ea:	f3bf 8f4f 	dsb	sy
 80175ee:	61fb      	str	r3, [r7, #28]
}
 80175f0:	bf00      	nop
 80175f2:	bf00      	nop
 80175f4:	e7fd      	b.n	80175f2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80175f6:	f001 fe67 	bl	80192c8 <vPortValidateInterruptPriority>
	__asm volatile
 80175fa:	f3ef 8211 	mrs	r2, BASEPRI
 80175fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017602:	f383 8811 	msr	BASEPRI, r3
 8017606:	f3bf 8f6f 	isb	sy
 801760a:	f3bf 8f4f 	dsb	sy
 801760e:	61ba      	str	r2, [r7, #24]
 8017610:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017612:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017614:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801761a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801761c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801761e:	2b00      	cmp	r3, #0
 8017620:	d02f      	beq.n	8017682 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8017622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017624:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801762c:	68b9      	ldr	r1, [r7, #8]
 801762e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017630:	f000 f89e 	bl	8017770 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017636:	1e5a      	subs	r2, r3, #1
 8017638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801763a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801763c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8017640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017644:	d112      	bne.n	801766c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017648:	691b      	ldr	r3, [r3, #16]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d016      	beq.n	801767c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017650:	3310      	adds	r3, #16
 8017652:	4618      	mov	r0, r3
 8017654:	f000 fe22 	bl	801829c <xTaskRemoveFromEventList>
 8017658:	4603      	mov	r3, r0
 801765a:	2b00      	cmp	r3, #0
 801765c:	d00e      	beq.n	801767c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d00b      	beq.n	801767c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	2201      	movs	r2, #1
 8017668:	601a      	str	r2, [r3, #0]
 801766a:	e007      	b.n	801767c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801766c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017670:	3301      	adds	r3, #1
 8017672:	b2db      	uxtb	r3, r3
 8017674:	b25a      	sxtb	r2, r3
 8017676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801767c:	2301      	movs	r3, #1
 801767e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017680:	e001      	b.n	8017686 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8017682:	2300      	movs	r3, #0
 8017684:	637b      	str	r3, [r7, #52]	@ 0x34
 8017686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017688:	613b      	str	r3, [r7, #16]
	__asm volatile
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	f383 8811 	msr	BASEPRI, r3
}
 8017690:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8017694:	4618      	mov	r0, r3
 8017696:	3738      	adds	r7, #56	@ 0x38
 8017698:	46bd      	mov	sp, r7
 801769a:	bd80      	pop	{r7, pc}

0801769c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b086      	sub	sp, #24
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	60f8      	str	r0, [r7, #12]
 80176a4:	60b9      	str	r1, [r7, #8]
 80176a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80176a8:	2300      	movs	r3, #0
 80176aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80176b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d10d      	bne.n	80176d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d14d      	bne.n	801775e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	689b      	ldr	r3, [r3, #8]
 80176c6:	4618      	mov	r0, r3
 80176c8:	f000 ffcc 	bl	8018664 <xTaskPriorityDisinherit>
 80176cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	2200      	movs	r2, #0
 80176d2:	609a      	str	r2, [r3, #8]
 80176d4:	e043      	b.n	801775e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d119      	bne.n	8017710 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	6858      	ldr	r0, [r3, #4]
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80176e4:	461a      	mov	r2, r3
 80176e6:	68b9      	ldr	r1, [r7, #8]
 80176e8:	f002 fb15 	bl	8019d16 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	685a      	ldr	r2, [r3, #4]
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80176f4:	441a      	add	r2, r3
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	685a      	ldr	r2, [r3, #4]
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	689b      	ldr	r3, [r3, #8]
 8017702:	429a      	cmp	r2, r3
 8017704:	d32b      	bcc.n	801775e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	681a      	ldr	r2, [r3, #0]
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	605a      	str	r2, [r3, #4]
 801770e:	e026      	b.n	801775e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	68d8      	ldr	r0, [r3, #12]
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017718:	461a      	mov	r2, r3
 801771a:	68b9      	ldr	r1, [r7, #8]
 801771c:	f002 fafb 	bl	8019d16 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	68da      	ldr	r2, [r3, #12]
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017728:	425b      	negs	r3, r3
 801772a:	441a      	add	r2, r3
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	68da      	ldr	r2, [r3, #12]
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	429a      	cmp	r2, r3
 801773a:	d207      	bcs.n	801774c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	689a      	ldr	r2, [r3, #8]
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017744:	425b      	negs	r3, r3
 8017746:	441a      	add	r2, r3
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	2b02      	cmp	r3, #2
 8017750:	d105      	bne.n	801775e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017752:	693b      	ldr	r3, [r7, #16]
 8017754:	2b00      	cmp	r3, #0
 8017756:	d002      	beq.n	801775e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017758:	693b      	ldr	r3, [r7, #16]
 801775a:	3b01      	subs	r3, #1
 801775c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801775e:	693b      	ldr	r3, [r7, #16]
 8017760:	1c5a      	adds	r2, r3, #1
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8017766:	697b      	ldr	r3, [r7, #20]
}
 8017768:	4618      	mov	r0, r3
 801776a:	3718      	adds	r7, #24
 801776c:	46bd      	mov	sp, r7
 801776e:	bd80      	pop	{r7, pc}

08017770 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017770:	b580      	push	{r7, lr}
 8017772:	b082      	sub	sp, #8
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
 8017778:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801777e:	2b00      	cmp	r3, #0
 8017780:	d018      	beq.n	80177b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	68da      	ldr	r2, [r3, #12]
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801778a:	441a      	add	r2, r3
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	68da      	ldr	r2, [r3, #12]
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	689b      	ldr	r3, [r3, #8]
 8017798:	429a      	cmp	r2, r3
 801779a:	d303      	bcc.n	80177a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	681a      	ldr	r2, [r3, #0]
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	68d9      	ldr	r1, [r3, #12]
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80177ac:	461a      	mov	r2, r3
 80177ae:	6838      	ldr	r0, [r7, #0]
 80177b0:	f002 fab1 	bl	8019d16 <memcpy>
	}
}
 80177b4:	bf00      	nop
 80177b6:	3708      	adds	r7, #8
 80177b8:	46bd      	mov	sp, r7
 80177ba:	bd80      	pop	{r7, pc}

080177bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80177bc:	b580      	push	{r7, lr}
 80177be:	b084      	sub	sp, #16
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80177c4:	f001 fca0 	bl	8019108 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80177ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80177d0:	e011      	b.n	80177f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d012      	beq.n	8017800 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	3324      	adds	r3, #36	@ 0x24
 80177de:	4618      	mov	r0, r3
 80177e0:	f000 fd5c 	bl	801829c <xTaskRemoveFromEventList>
 80177e4:	4603      	mov	r3, r0
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d001      	beq.n	80177ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80177ea:	f000 fe35 	bl	8018458 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80177ee:	7bfb      	ldrb	r3, [r7, #15]
 80177f0:	3b01      	subs	r3, #1
 80177f2:	b2db      	uxtb	r3, r3
 80177f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80177f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	dce9      	bgt.n	80177d2 <prvUnlockQueue+0x16>
 80177fe:	e000      	b.n	8017802 <prvUnlockQueue+0x46>
					break;
 8017800:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	22ff      	movs	r2, #255	@ 0xff
 8017806:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801780a:	f001 fcaf 	bl	801916c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801780e:	f001 fc7b 	bl	8019108 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017818:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801781a:	e011      	b.n	8017840 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	691b      	ldr	r3, [r3, #16]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d012      	beq.n	801784a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	3310      	adds	r3, #16
 8017828:	4618      	mov	r0, r3
 801782a:	f000 fd37 	bl	801829c <xTaskRemoveFromEventList>
 801782e:	4603      	mov	r3, r0
 8017830:	2b00      	cmp	r3, #0
 8017832:	d001      	beq.n	8017838 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017834:	f000 fe10 	bl	8018458 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017838:	7bbb      	ldrb	r3, [r7, #14]
 801783a:	3b01      	subs	r3, #1
 801783c:	b2db      	uxtb	r3, r3
 801783e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017840:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017844:	2b00      	cmp	r3, #0
 8017846:	dce9      	bgt.n	801781c <prvUnlockQueue+0x60>
 8017848:	e000      	b.n	801784c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801784a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	22ff      	movs	r2, #255	@ 0xff
 8017850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8017854:	f001 fc8a 	bl	801916c <vPortExitCritical>
}
 8017858:	bf00      	nop
 801785a:	3710      	adds	r7, #16
 801785c:	46bd      	mov	sp, r7
 801785e:	bd80      	pop	{r7, pc}

08017860 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b084      	sub	sp, #16
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017868:	f001 fc4e 	bl	8019108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017870:	2b00      	cmp	r3, #0
 8017872:	d102      	bne.n	801787a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017874:	2301      	movs	r3, #1
 8017876:	60fb      	str	r3, [r7, #12]
 8017878:	e001      	b.n	801787e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801787a:	2300      	movs	r3, #0
 801787c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801787e:	f001 fc75 	bl	801916c <vPortExitCritical>

	return xReturn;
 8017882:	68fb      	ldr	r3, [r7, #12]
}
 8017884:	4618      	mov	r0, r3
 8017886:	3710      	adds	r7, #16
 8017888:	46bd      	mov	sp, r7
 801788a:	bd80      	pop	{r7, pc}

0801788c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b084      	sub	sp, #16
 8017890:	af00      	add	r7, sp, #0
 8017892:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017894:	f001 fc38 	bl	8019108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80178a0:	429a      	cmp	r2, r3
 80178a2:	d102      	bne.n	80178aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80178a4:	2301      	movs	r3, #1
 80178a6:	60fb      	str	r3, [r7, #12]
 80178a8:	e001      	b.n	80178ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80178aa:	2300      	movs	r3, #0
 80178ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80178ae:	f001 fc5d 	bl	801916c <vPortExitCritical>

	return xReturn;
 80178b2:	68fb      	ldr	r3, [r7, #12]
}
 80178b4:	4618      	mov	r0, r3
 80178b6:	3710      	adds	r7, #16
 80178b8:	46bd      	mov	sp, r7
 80178ba:	bd80      	pop	{r7, pc}

080178bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80178bc:	b480      	push	{r7}
 80178be:	b085      	sub	sp, #20
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	6078      	str	r0, [r7, #4]
 80178c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80178c6:	2300      	movs	r3, #0
 80178c8:	60fb      	str	r3, [r7, #12]
 80178ca:	e014      	b.n	80178f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80178cc:	4a0f      	ldr	r2, [pc, #60]	@ (801790c <vQueueAddToRegistry+0x50>)
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d10b      	bne.n	80178f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80178d8:	490c      	ldr	r1, [pc, #48]	@ (801790c <vQueueAddToRegistry+0x50>)
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	683a      	ldr	r2, [r7, #0]
 80178de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80178e2:	4a0a      	ldr	r2, [pc, #40]	@ (801790c <vQueueAddToRegistry+0x50>)
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	00db      	lsls	r3, r3, #3
 80178e8:	4413      	add	r3, r2
 80178ea:	687a      	ldr	r2, [r7, #4]
 80178ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80178ee:	e006      	b.n	80178fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	3301      	adds	r3, #1
 80178f4:	60fb      	str	r3, [r7, #12]
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	2b07      	cmp	r3, #7
 80178fa:	d9e7      	bls.n	80178cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80178fc:	bf00      	nop
 80178fe:	bf00      	nop
 8017900:	3714      	adds	r7, #20
 8017902:	46bd      	mov	sp, r7
 8017904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017908:	4770      	bx	lr
 801790a:	bf00      	nop
 801790c:	2000823c 	.word	0x2000823c

08017910 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017910:	b580      	push	{r7, lr}
 8017912:	b086      	sub	sp, #24
 8017914:	af00      	add	r7, sp, #0
 8017916:	60f8      	str	r0, [r7, #12]
 8017918:	60b9      	str	r1, [r7, #8]
 801791a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017920:	f001 fbf2 	bl	8019108 <vPortEnterCritical>
 8017924:	697b      	ldr	r3, [r7, #20]
 8017926:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801792a:	b25b      	sxtb	r3, r3
 801792c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017930:	d103      	bne.n	801793a <vQueueWaitForMessageRestricted+0x2a>
 8017932:	697b      	ldr	r3, [r7, #20]
 8017934:	2200      	movs	r2, #0
 8017936:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801793a:	697b      	ldr	r3, [r7, #20]
 801793c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017940:	b25b      	sxtb	r3, r3
 8017942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017946:	d103      	bne.n	8017950 <vQueueWaitForMessageRestricted+0x40>
 8017948:	697b      	ldr	r3, [r7, #20]
 801794a:	2200      	movs	r2, #0
 801794c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017950:	f001 fc0c 	bl	801916c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017954:	697b      	ldr	r3, [r7, #20]
 8017956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017958:	2b00      	cmp	r3, #0
 801795a:	d106      	bne.n	801796a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801795c:	697b      	ldr	r3, [r7, #20]
 801795e:	3324      	adds	r3, #36	@ 0x24
 8017960:	687a      	ldr	r2, [r7, #4]
 8017962:	68b9      	ldr	r1, [r7, #8]
 8017964:	4618      	mov	r0, r3
 8017966:	f000 fc6d 	bl	8018244 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801796a:	6978      	ldr	r0, [r7, #20]
 801796c:	f7ff ff26 	bl	80177bc <prvUnlockQueue>
	}
 8017970:	bf00      	nop
 8017972:	3718      	adds	r7, #24
 8017974:	46bd      	mov	sp, r7
 8017976:	bd80      	pop	{r7, pc}

08017978 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017978:	b580      	push	{r7, lr}
 801797a:	b08e      	sub	sp, #56	@ 0x38
 801797c:	af04      	add	r7, sp, #16
 801797e:	60f8      	str	r0, [r7, #12]
 8017980:	60b9      	str	r1, [r7, #8]
 8017982:	607a      	str	r2, [r7, #4]
 8017984:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017988:	2b00      	cmp	r3, #0
 801798a:	d10b      	bne.n	80179a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 801798c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017990:	f383 8811 	msr	BASEPRI, r3
 8017994:	f3bf 8f6f 	isb	sy
 8017998:	f3bf 8f4f 	dsb	sy
 801799c:	623b      	str	r3, [r7, #32]
}
 801799e:	bf00      	nop
 80179a0:	bf00      	nop
 80179a2:	e7fd      	b.n	80179a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80179a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d10b      	bne.n	80179c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80179aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80179ae:	f383 8811 	msr	BASEPRI, r3
 80179b2:	f3bf 8f6f 	isb	sy
 80179b6:	f3bf 8f4f 	dsb	sy
 80179ba:	61fb      	str	r3, [r7, #28]
}
 80179bc:	bf00      	nop
 80179be:	bf00      	nop
 80179c0:	e7fd      	b.n	80179be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80179c2:	23a8      	movs	r3, #168	@ 0xa8
 80179c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80179c6:	693b      	ldr	r3, [r7, #16]
 80179c8:	2ba8      	cmp	r3, #168	@ 0xa8
 80179ca:	d00b      	beq.n	80179e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80179cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80179d0:	f383 8811 	msr	BASEPRI, r3
 80179d4:	f3bf 8f6f 	isb	sy
 80179d8:	f3bf 8f4f 	dsb	sy
 80179dc:	61bb      	str	r3, [r7, #24]
}
 80179de:	bf00      	nop
 80179e0:	bf00      	nop
 80179e2:	e7fd      	b.n	80179e0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80179e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80179e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d01e      	beq.n	8017a2a <xTaskCreateStatic+0xb2>
 80179ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d01b      	beq.n	8017a2a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80179f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80179f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80179f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80179fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80179fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179fe:	2202      	movs	r2, #2
 8017a00:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017a04:	2300      	movs	r3, #0
 8017a06:	9303      	str	r3, [sp, #12]
 8017a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a0a:	9302      	str	r3, [sp, #8]
 8017a0c:	f107 0314 	add.w	r3, r7, #20
 8017a10:	9301      	str	r3, [sp, #4]
 8017a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a14:	9300      	str	r3, [sp, #0]
 8017a16:	683b      	ldr	r3, [r7, #0]
 8017a18:	687a      	ldr	r2, [r7, #4]
 8017a1a:	68b9      	ldr	r1, [r7, #8]
 8017a1c:	68f8      	ldr	r0, [r7, #12]
 8017a1e:	f000 f851 	bl	8017ac4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017a22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017a24:	f000 f8f6 	bl	8017c14 <prvAddNewTaskToReadyList>
 8017a28:	e001      	b.n	8017a2e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017a2e:	697b      	ldr	r3, [r7, #20]
	}
 8017a30:	4618      	mov	r0, r3
 8017a32:	3728      	adds	r7, #40	@ 0x28
 8017a34:	46bd      	mov	sp, r7
 8017a36:	bd80      	pop	{r7, pc}

08017a38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b08c      	sub	sp, #48	@ 0x30
 8017a3c:	af04      	add	r7, sp, #16
 8017a3e:	60f8      	str	r0, [r7, #12]
 8017a40:	60b9      	str	r1, [r7, #8]
 8017a42:	603b      	str	r3, [r7, #0]
 8017a44:	4613      	mov	r3, r2
 8017a46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017a48:	88fb      	ldrh	r3, [r7, #6]
 8017a4a:	009b      	lsls	r3, r3, #2
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	f001 fc7d 	bl	801934c <pvPortMalloc>
 8017a52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017a54:	697b      	ldr	r3, [r7, #20]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d00e      	beq.n	8017a78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017a5a:	20a8      	movs	r0, #168	@ 0xa8
 8017a5c:	f001 fc76 	bl	801934c <pvPortMalloc>
 8017a60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017a62:	69fb      	ldr	r3, [r7, #28]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d003      	beq.n	8017a70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017a68:	69fb      	ldr	r3, [r7, #28]
 8017a6a:	697a      	ldr	r2, [r7, #20]
 8017a6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8017a6e:	e005      	b.n	8017a7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017a70:	6978      	ldr	r0, [r7, #20]
 8017a72:	f001 fd39 	bl	80194e8 <vPortFree>
 8017a76:	e001      	b.n	8017a7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017a78:	2300      	movs	r3, #0
 8017a7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017a7c:	69fb      	ldr	r3, [r7, #28]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d017      	beq.n	8017ab2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017a82:	69fb      	ldr	r3, [r7, #28]
 8017a84:	2200      	movs	r2, #0
 8017a86:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017a8a:	88fa      	ldrh	r2, [r7, #6]
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	9303      	str	r3, [sp, #12]
 8017a90:	69fb      	ldr	r3, [r7, #28]
 8017a92:	9302      	str	r3, [sp, #8]
 8017a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a96:	9301      	str	r3, [sp, #4]
 8017a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a9a:	9300      	str	r3, [sp, #0]
 8017a9c:	683b      	ldr	r3, [r7, #0]
 8017a9e:	68b9      	ldr	r1, [r7, #8]
 8017aa0:	68f8      	ldr	r0, [r7, #12]
 8017aa2:	f000 f80f 	bl	8017ac4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017aa6:	69f8      	ldr	r0, [r7, #28]
 8017aa8:	f000 f8b4 	bl	8017c14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017aac:	2301      	movs	r3, #1
 8017aae:	61bb      	str	r3, [r7, #24]
 8017ab0:	e002      	b.n	8017ab8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8017ab6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017ab8:	69bb      	ldr	r3, [r7, #24]
	}
 8017aba:	4618      	mov	r0, r3
 8017abc:	3720      	adds	r7, #32
 8017abe:	46bd      	mov	sp, r7
 8017ac0:	bd80      	pop	{r7, pc}
	...

08017ac4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b088      	sub	sp, #32
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	60f8      	str	r0, [r7, #12]
 8017acc:	60b9      	str	r1, [r7, #8]
 8017ace:	607a      	str	r2, [r7, #4]
 8017ad0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ad4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	009b      	lsls	r3, r3, #2
 8017ada:	461a      	mov	r2, r3
 8017adc:	21a5      	movs	r1, #165	@ 0xa5
 8017ade:	f002 f835 	bl	8019b4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8017aec:	3b01      	subs	r3, #1
 8017aee:	009b      	lsls	r3, r3, #2
 8017af0:	4413      	add	r3, r2
 8017af2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017af4:	69bb      	ldr	r3, [r7, #24]
 8017af6:	f023 0307 	bic.w	r3, r3, #7
 8017afa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017afc:	69bb      	ldr	r3, [r7, #24]
 8017afe:	f003 0307 	and.w	r3, r3, #7
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d00b      	beq.n	8017b1e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8017b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b0a:	f383 8811 	msr	BASEPRI, r3
 8017b0e:	f3bf 8f6f 	isb	sy
 8017b12:	f3bf 8f4f 	dsb	sy
 8017b16:	617b      	str	r3, [r7, #20]
}
 8017b18:	bf00      	nop
 8017b1a:	bf00      	nop
 8017b1c:	e7fd      	b.n	8017b1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017b1e:	68bb      	ldr	r3, [r7, #8]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d01f      	beq.n	8017b64 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017b24:	2300      	movs	r3, #0
 8017b26:	61fb      	str	r3, [r7, #28]
 8017b28:	e012      	b.n	8017b50 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017b2a:	68ba      	ldr	r2, [r7, #8]
 8017b2c:	69fb      	ldr	r3, [r7, #28]
 8017b2e:	4413      	add	r3, r2
 8017b30:	7819      	ldrb	r1, [r3, #0]
 8017b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017b34:	69fb      	ldr	r3, [r7, #28]
 8017b36:	4413      	add	r3, r2
 8017b38:	3334      	adds	r3, #52	@ 0x34
 8017b3a:	460a      	mov	r2, r1
 8017b3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017b3e:	68ba      	ldr	r2, [r7, #8]
 8017b40:	69fb      	ldr	r3, [r7, #28]
 8017b42:	4413      	add	r3, r2
 8017b44:	781b      	ldrb	r3, [r3, #0]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d006      	beq.n	8017b58 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017b4a:	69fb      	ldr	r3, [r7, #28]
 8017b4c:	3301      	adds	r3, #1
 8017b4e:	61fb      	str	r3, [r7, #28]
 8017b50:	69fb      	ldr	r3, [r7, #28]
 8017b52:	2b0f      	cmp	r3, #15
 8017b54:	d9e9      	bls.n	8017b2a <prvInitialiseNewTask+0x66>
 8017b56:	e000      	b.n	8017b5a <prvInitialiseNewTask+0x96>
			{
				break;
 8017b58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b5c:	2200      	movs	r2, #0
 8017b5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8017b62:	e003      	b.n	8017b6c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b66:	2200      	movs	r2, #0
 8017b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b6e:	2b37      	cmp	r3, #55	@ 0x37
 8017b70:	d901      	bls.n	8017b76 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017b72:	2337      	movs	r3, #55	@ 0x37
 8017b74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017b80:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b84:	2200      	movs	r2, #0
 8017b86:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b8a:	3304      	adds	r3, #4
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	f7ff f85b 	bl	8016c48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b94:	3318      	adds	r3, #24
 8017b96:	4618      	mov	r0, r3
 8017b98:	f7ff f856 	bl	8016c48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017ba0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ba4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8017ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017baa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017bb0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bc4:	3354      	adds	r3, #84	@ 0x54
 8017bc6:	224c      	movs	r2, #76	@ 0x4c
 8017bc8:	2100      	movs	r1, #0
 8017bca:	4618      	mov	r0, r3
 8017bcc:	f001 ffbe 	bl	8019b4c <memset>
 8017bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bd2:	4a0d      	ldr	r2, [pc, #52]	@ (8017c08 <prvInitialiseNewTask+0x144>)
 8017bd4:	659a      	str	r2, [r3, #88]	@ 0x58
 8017bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8017c0c <prvInitialiseNewTask+0x148>)
 8017bda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8017bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bde:	4a0c      	ldr	r2, [pc, #48]	@ (8017c10 <prvInitialiseNewTask+0x14c>)
 8017be0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017be2:	683a      	ldr	r2, [r7, #0]
 8017be4:	68f9      	ldr	r1, [r7, #12]
 8017be6:	69b8      	ldr	r0, [r7, #24]
 8017be8:	f001 f95a 	bl	8018ea0 <pxPortInitialiseStack>
 8017bec:	4602      	mov	r2, r0
 8017bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bf0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d002      	beq.n	8017bfe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017bfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017bfe:	bf00      	nop
 8017c00:	3720      	adds	r7, #32
 8017c02:	46bd      	mov	sp, r7
 8017c04:	bd80      	pop	{r7, pc}
 8017c06:	bf00      	nop
 8017c08:	2000a0d0 	.word	0x2000a0d0
 8017c0c:	2000a138 	.word	0x2000a138
 8017c10:	2000a1a0 	.word	0x2000a1a0

08017c14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b082      	sub	sp, #8
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017c1c:	f001 fa74 	bl	8019108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017c20:	4b2d      	ldr	r3, [pc, #180]	@ (8017cd8 <prvAddNewTaskToReadyList+0xc4>)
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	3301      	adds	r3, #1
 8017c26:	4a2c      	ldr	r2, [pc, #176]	@ (8017cd8 <prvAddNewTaskToReadyList+0xc4>)
 8017c28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8017cdc <prvAddNewTaskToReadyList+0xc8>)
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d109      	bne.n	8017c46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017c32:	4a2a      	ldr	r2, [pc, #168]	@ (8017cdc <prvAddNewTaskToReadyList+0xc8>)
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017c38:	4b27      	ldr	r3, [pc, #156]	@ (8017cd8 <prvAddNewTaskToReadyList+0xc4>)
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	2b01      	cmp	r3, #1
 8017c3e:	d110      	bne.n	8017c62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017c40:	f000 fc2e 	bl	80184a0 <prvInitialiseTaskLists>
 8017c44:	e00d      	b.n	8017c62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017c46:	4b26      	ldr	r3, [pc, #152]	@ (8017ce0 <prvAddNewTaskToReadyList+0xcc>)
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d109      	bne.n	8017c62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017c4e:	4b23      	ldr	r3, [pc, #140]	@ (8017cdc <prvAddNewTaskToReadyList+0xc8>)
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	d802      	bhi.n	8017c62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8017cdc <prvAddNewTaskToReadyList+0xc8>)
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017c62:	4b20      	ldr	r3, [pc, #128]	@ (8017ce4 <prvAddNewTaskToReadyList+0xd0>)
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	3301      	adds	r3, #1
 8017c68:	4a1e      	ldr	r2, [pc, #120]	@ (8017ce4 <prvAddNewTaskToReadyList+0xd0>)
 8017c6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8017ce4 <prvAddNewTaskToReadyList+0xd0>)
 8017c6e:	681a      	ldr	r2, [r3, #0]
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017c78:	4b1b      	ldr	r3, [pc, #108]	@ (8017ce8 <prvAddNewTaskToReadyList+0xd4>)
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	429a      	cmp	r2, r3
 8017c7e:	d903      	bls.n	8017c88 <prvAddNewTaskToReadyList+0x74>
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c84:	4a18      	ldr	r2, [pc, #96]	@ (8017ce8 <prvAddNewTaskToReadyList+0xd4>)
 8017c86:	6013      	str	r3, [r2, #0]
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017c8c:	4613      	mov	r3, r2
 8017c8e:	009b      	lsls	r3, r3, #2
 8017c90:	4413      	add	r3, r2
 8017c92:	009b      	lsls	r3, r3, #2
 8017c94:	4a15      	ldr	r2, [pc, #84]	@ (8017cec <prvAddNewTaskToReadyList+0xd8>)
 8017c96:	441a      	add	r2, r3
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	3304      	adds	r3, #4
 8017c9c:	4619      	mov	r1, r3
 8017c9e:	4610      	mov	r0, r2
 8017ca0:	f7fe ffdf 	bl	8016c62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017ca4:	f001 fa62 	bl	801916c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8017ce0 <prvAddNewTaskToReadyList+0xcc>)
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d00e      	beq.n	8017cce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8017cdc <prvAddNewTaskToReadyList+0xc8>)
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017cba:	429a      	cmp	r2, r3
 8017cbc:	d207      	bcs.n	8017cce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8017cf0 <prvAddNewTaskToReadyList+0xdc>)
 8017cc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017cc4:	601a      	str	r2, [r3, #0]
 8017cc6:	f3bf 8f4f 	dsb	sy
 8017cca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017cce:	bf00      	nop
 8017cd0:	3708      	adds	r7, #8
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	bd80      	pop	{r7, pc}
 8017cd6:	bf00      	nop
 8017cd8:	20008750 	.word	0x20008750
 8017cdc:	2000827c 	.word	0x2000827c
 8017ce0:	2000875c 	.word	0x2000875c
 8017ce4:	2000876c 	.word	0x2000876c
 8017ce8:	20008758 	.word	0x20008758
 8017cec:	20008280 	.word	0x20008280
 8017cf0:	e000ed04 	.word	0xe000ed04

08017cf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b084      	sub	sp, #16
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d018      	beq.n	8017d38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017d06:	4b14      	ldr	r3, [pc, #80]	@ (8017d58 <vTaskDelay+0x64>)
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d00b      	beq.n	8017d26 <vTaskDelay+0x32>
	__asm volatile
 8017d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d12:	f383 8811 	msr	BASEPRI, r3
 8017d16:	f3bf 8f6f 	isb	sy
 8017d1a:	f3bf 8f4f 	dsb	sy
 8017d1e:	60bb      	str	r3, [r7, #8]
}
 8017d20:	bf00      	nop
 8017d22:	bf00      	nop
 8017d24:	e7fd      	b.n	8017d22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017d26:	f000 f88b 	bl	8017e40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017d2a:	2100      	movs	r1, #0
 8017d2c:	6878      	ldr	r0, [r7, #4]
 8017d2e:	f000 fd09 	bl	8018744 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017d32:	f000 f893 	bl	8017e5c <xTaskResumeAll>
 8017d36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d107      	bne.n	8017d4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8017d3e:	4b07      	ldr	r3, [pc, #28]	@ (8017d5c <vTaskDelay+0x68>)
 8017d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017d44:	601a      	str	r2, [r3, #0]
 8017d46:	f3bf 8f4f 	dsb	sy
 8017d4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017d4e:	bf00      	nop
 8017d50:	3710      	adds	r7, #16
 8017d52:	46bd      	mov	sp, r7
 8017d54:	bd80      	pop	{r7, pc}
 8017d56:	bf00      	nop
 8017d58:	20008778 	.word	0x20008778
 8017d5c:	e000ed04 	.word	0xe000ed04

08017d60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b08a      	sub	sp, #40	@ 0x28
 8017d64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017d66:	2300      	movs	r3, #0
 8017d68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017d6e:	463a      	mov	r2, r7
 8017d70:	1d39      	adds	r1, r7, #4
 8017d72:	f107 0308 	add.w	r3, r7, #8
 8017d76:	4618      	mov	r0, r3
 8017d78:	f7fe ff12 	bl	8016ba0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017d7c:	6839      	ldr	r1, [r7, #0]
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	68ba      	ldr	r2, [r7, #8]
 8017d82:	9202      	str	r2, [sp, #8]
 8017d84:	9301      	str	r3, [sp, #4]
 8017d86:	2300      	movs	r3, #0
 8017d88:	9300      	str	r3, [sp, #0]
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	460a      	mov	r2, r1
 8017d8e:	4924      	ldr	r1, [pc, #144]	@ (8017e20 <vTaskStartScheduler+0xc0>)
 8017d90:	4824      	ldr	r0, [pc, #144]	@ (8017e24 <vTaskStartScheduler+0xc4>)
 8017d92:	f7ff fdf1 	bl	8017978 <xTaskCreateStatic>
 8017d96:	4603      	mov	r3, r0
 8017d98:	4a23      	ldr	r2, [pc, #140]	@ (8017e28 <vTaskStartScheduler+0xc8>)
 8017d9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017d9c:	4b22      	ldr	r3, [pc, #136]	@ (8017e28 <vTaskStartScheduler+0xc8>)
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d002      	beq.n	8017daa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017da4:	2301      	movs	r3, #1
 8017da6:	617b      	str	r3, [r7, #20]
 8017da8:	e001      	b.n	8017dae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017daa:	2300      	movs	r3, #0
 8017dac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017dae:	697b      	ldr	r3, [r7, #20]
 8017db0:	2b01      	cmp	r3, #1
 8017db2:	d102      	bne.n	8017dba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017db4:	f000 fd1a 	bl	80187ec <xTimerCreateTimerTask>
 8017db8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017dba:	697b      	ldr	r3, [r7, #20]
 8017dbc:	2b01      	cmp	r3, #1
 8017dbe:	d11b      	bne.n	8017df8 <vTaskStartScheduler+0x98>
	__asm volatile
 8017dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017dc4:	f383 8811 	msr	BASEPRI, r3
 8017dc8:	f3bf 8f6f 	isb	sy
 8017dcc:	f3bf 8f4f 	dsb	sy
 8017dd0:	613b      	str	r3, [r7, #16]
}
 8017dd2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017dd4:	4b15      	ldr	r3, [pc, #84]	@ (8017e2c <vTaskStartScheduler+0xcc>)
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	3354      	adds	r3, #84	@ 0x54
 8017dda:	4a15      	ldr	r2, [pc, #84]	@ (8017e30 <vTaskStartScheduler+0xd0>)
 8017ddc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017dde:	4b15      	ldr	r3, [pc, #84]	@ (8017e34 <vTaskStartScheduler+0xd4>)
 8017de0:	f04f 32ff 	mov.w	r2, #4294967295
 8017de4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017de6:	4b14      	ldr	r3, [pc, #80]	@ (8017e38 <vTaskStartScheduler+0xd8>)
 8017de8:	2201      	movs	r2, #1
 8017dea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017dec:	4b13      	ldr	r3, [pc, #76]	@ (8017e3c <vTaskStartScheduler+0xdc>)
 8017dee:	2200      	movs	r2, #0
 8017df0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017df2:	f001 f8e5 	bl	8018fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017df6:	e00f      	b.n	8017e18 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017df8:	697b      	ldr	r3, [r7, #20]
 8017dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dfe:	d10b      	bne.n	8017e18 <vTaskStartScheduler+0xb8>
	__asm volatile
 8017e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e04:	f383 8811 	msr	BASEPRI, r3
 8017e08:	f3bf 8f6f 	isb	sy
 8017e0c:	f3bf 8f4f 	dsb	sy
 8017e10:	60fb      	str	r3, [r7, #12]
}
 8017e12:	bf00      	nop
 8017e14:	bf00      	nop
 8017e16:	e7fd      	b.n	8017e14 <vTaskStartScheduler+0xb4>
}
 8017e18:	bf00      	nop
 8017e1a:	3718      	adds	r7, #24
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	bd80      	pop	{r7, pc}
 8017e20:	0801a97c 	.word	0x0801a97c
 8017e24:	08018471 	.word	0x08018471
 8017e28:	20008774 	.word	0x20008774
 8017e2c:	2000827c 	.word	0x2000827c
 8017e30:	20000088 	.word	0x20000088
 8017e34:	20008770 	.word	0x20008770
 8017e38:	2000875c 	.word	0x2000875c
 8017e3c:	20008754 	.word	0x20008754

08017e40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017e40:	b480      	push	{r7}
 8017e42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017e44:	4b04      	ldr	r3, [pc, #16]	@ (8017e58 <vTaskSuspendAll+0x18>)
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	3301      	adds	r3, #1
 8017e4a:	4a03      	ldr	r2, [pc, #12]	@ (8017e58 <vTaskSuspendAll+0x18>)
 8017e4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017e4e:	bf00      	nop
 8017e50:	46bd      	mov	sp, r7
 8017e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e56:	4770      	bx	lr
 8017e58:	20008778 	.word	0x20008778

08017e5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b084      	sub	sp, #16
 8017e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017e62:	2300      	movs	r3, #0
 8017e64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017e66:	2300      	movs	r3, #0
 8017e68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017e6a:	4b42      	ldr	r3, [pc, #264]	@ (8017f74 <xTaskResumeAll+0x118>)
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d10b      	bne.n	8017e8a <xTaskResumeAll+0x2e>
	__asm volatile
 8017e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e76:	f383 8811 	msr	BASEPRI, r3
 8017e7a:	f3bf 8f6f 	isb	sy
 8017e7e:	f3bf 8f4f 	dsb	sy
 8017e82:	603b      	str	r3, [r7, #0]
}
 8017e84:	bf00      	nop
 8017e86:	bf00      	nop
 8017e88:	e7fd      	b.n	8017e86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017e8a:	f001 f93d 	bl	8019108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017e8e:	4b39      	ldr	r3, [pc, #228]	@ (8017f74 <xTaskResumeAll+0x118>)
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	3b01      	subs	r3, #1
 8017e94:	4a37      	ldr	r2, [pc, #220]	@ (8017f74 <xTaskResumeAll+0x118>)
 8017e96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017e98:	4b36      	ldr	r3, [pc, #216]	@ (8017f74 <xTaskResumeAll+0x118>)
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d162      	bne.n	8017f66 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017ea0:	4b35      	ldr	r3, [pc, #212]	@ (8017f78 <xTaskResumeAll+0x11c>)
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d05e      	beq.n	8017f66 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017ea8:	e02f      	b.n	8017f0a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017eaa:	4b34      	ldr	r3, [pc, #208]	@ (8017f7c <xTaskResumeAll+0x120>)
 8017eac:	68db      	ldr	r3, [r3, #12]
 8017eae:	68db      	ldr	r3, [r3, #12]
 8017eb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	3318      	adds	r3, #24
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f7fe ff30 	bl	8016d1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	3304      	adds	r3, #4
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f7fe ff2b 	bl	8016d1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017eca:	4b2d      	ldr	r3, [pc, #180]	@ (8017f80 <xTaskResumeAll+0x124>)
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	429a      	cmp	r2, r3
 8017ed0:	d903      	bls.n	8017eda <xTaskResumeAll+0x7e>
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8017f80 <xTaskResumeAll+0x124>)
 8017ed8:	6013      	str	r3, [r2, #0]
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017ede:	4613      	mov	r3, r2
 8017ee0:	009b      	lsls	r3, r3, #2
 8017ee2:	4413      	add	r3, r2
 8017ee4:	009b      	lsls	r3, r3, #2
 8017ee6:	4a27      	ldr	r2, [pc, #156]	@ (8017f84 <xTaskResumeAll+0x128>)
 8017ee8:	441a      	add	r2, r3
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	3304      	adds	r3, #4
 8017eee:	4619      	mov	r1, r3
 8017ef0:	4610      	mov	r0, r2
 8017ef2:	f7fe feb6 	bl	8016c62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017efa:	4b23      	ldr	r3, [pc, #140]	@ (8017f88 <xTaskResumeAll+0x12c>)
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f00:	429a      	cmp	r2, r3
 8017f02:	d302      	bcc.n	8017f0a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8017f04:	4b21      	ldr	r3, [pc, #132]	@ (8017f8c <xTaskResumeAll+0x130>)
 8017f06:	2201      	movs	r2, #1
 8017f08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8017f7c <xTaskResumeAll+0x120>)
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d1cb      	bne.n	8017eaa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d001      	beq.n	8017f1c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017f18:	f000 fb66 	bl	80185e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8017f90 <xTaskResumeAll+0x134>)
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d010      	beq.n	8017f4a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017f28:	f000 f846 	bl	8017fb8 <xTaskIncrementTick>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d002      	beq.n	8017f38 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8017f32:	4b16      	ldr	r3, [pc, #88]	@ (8017f8c <xTaskResumeAll+0x130>)
 8017f34:	2201      	movs	r2, #1
 8017f36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	3b01      	subs	r3, #1
 8017f3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d1f1      	bne.n	8017f28 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8017f44:	4b12      	ldr	r3, [pc, #72]	@ (8017f90 <xTaskResumeAll+0x134>)
 8017f46:	2200      	movs	r2, #0
 8017f48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017f4a:	4b10      	ldr	r3, [pc, #64]	@ (8017f8c <xTaskResumeAll+0x130>)
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d009      	beq.n	8017f66 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017f52:	2301      	movs	r3, #1
 8017f54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017f56:	4b0f      	ldr	r3, [pc, #60]	@ (8017f94 <xTaskResumeAll+0x138>)
 8017f58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017f5c:	601a      	str	r2, [r3, #0]
 8017f5e:	f3bf 8f4f 	dsb	sy
 8017f62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017f66:	f001 f901 	bl	801916c <vPortExitCritical>

	return xAlreadyYielded;
 8017f6a:	68bb      	ldr	r3, [r7, #8]
}
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	3710      	adds	r7, #16
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bd80      	pop	{r7, pc}
 8017f74:	20008778 	.word	0x20008778
 8017f78:	20008750 	.word	0x20008750
 8017f7c:	20008710 	.word	0x20008710
 8017f80:	20008758 	.word	0x20008758
 8017f84:	20008280 	.word	0x20008280
 8017f88:	2000827c 	.word	0x2000827c
 8017f8c:	20008764 	.word	0x20008764
 8017f90:	20008760 	.word	0x20008760
 8017f94:	e000ed04 	.word	0xe000ed04

08017f98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017f98:	b480      	push	{r7}
 8017f9a:	b083      	sub	sp, #12
 8017f9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017f9e:	4b05      	ldr	r3, [pc, #20]	@ (8017fb4 <xTaskGetTickCount+0x1c>)
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017fa4:	687b      	ldr	r3, [r7, #4]
}
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	370c      	adds	r7, #12
 8017faa:	46bd      	mov	sp, r7
 8017fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb0:	4770      	bx	lr
 8017fb2:	bf00      	nop
 8017fb4:	20008754 	.word	0x20008754

08017fb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b086      	sub	sp, #24
 8017fbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017fc2:	4b4f      	ldr	r3, [pc, #316]	@ (8018100 <xTaskIncrementTick+0x148>)
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	f040 8090 	bne.w	80180ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8018104 <xTaskIncrementTick+0x14c>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	3301      	adds	r3, #1
 8017fd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8018104 <xTaskIncrementTick+0x14c>)
 8017fd6:	693b      	ldr	r3, [r7, #16]
 8017fd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017fda:	693b      	ldr	r3, [r7, #16]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d121      	bne.n	8018024 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8017fe0:	4b49      	ldr	r3, [pc, #292]	@ (8018108 <xTaskIncrementTick+0x150>)
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d00b      	beq.n	8018002 <xTaskIncrementTick+0x4a>
	__asm volatile
 8017fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017fee:	f383 8811 	msr	BASEPRI, r3
 8017ff2:	f3bf 8f6f 	isb	sy
 8017ff6:	f3bf 8f4f 	dsb	sy
 8017ffa:	603b      	str	r3, [r7, #0]
}
 8017ffc:	bf00      	nop
 8017ffe:	bf00      	nop
 8018000:	e7fd      	b.n	8017ffe <xTaskIncrementTick+0x46>
 8018002:	4b41      	ldr	r3, [pc, #260]	@ (8018108 <xTaskIncrementTick+0x150>)
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	60fb      	str	r3, [r7, #12]
 8018008:	4b40      	ldr	r3, [pc, #256]	@ (801810c <xTaskIncrementTick+0x154>)
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	4a3e      	ldr	r2, [pc, #248]	@ (8018108 <xTaskIncrementTick+0x150>)
 801800e:	6013      	str	r3, [r2, #0]
 8018010:	4a3e      	ldr	r2, [pc, #248]	@ (801810c <xTaskIncrementTick+0x154>)
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	6013      	str	r3, [r2, #0]
 8018016:	4b3e      	ldr	r3, [pc, #248]	@ (8018110 <xTaskIncrementTick+0x158>)
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	3301      	adds	r3, #1
 801801c:	4a3c      	ldr	r2, [pc, #240]	@ (8018110 <xTaskIncrementTick+0x158>)
 801801e:	6013      	str	r3, [r2, #0]
 8018020:	f000 fae2 	bl	80185e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018024:	4b3b      	ldr	r3, [pc, #236]	@ (8018114 <xTaskIncrementTick+0x15c>)
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	693a      	ldr	r2, [r7, #16]
 801802a:	429a      	cmp	r2, r3
 801802c:	d349      	bcc.n	80180c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801802e:	4b36      	ldr	r3, [pc, #216]	@ (8018108 <xTaskIncrementTick+0x150>)
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d104      	bne.n	8018042 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018038:	4b36      	ldr	r3, [pc, #216]	@ (8018114 <xTaskIncrementTick+0x15c>)
 801803a:	f04f 32ff 	mov.w	r2, #4294967295
 801803e:	601a      	str	r2, [r3, #0]
					break;
 8018040:	e03f      	b.n	80180c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018042:	4b31      	ldr	r3, [pc, #196]	@ (8018108 <xTaskIncrementTick+0x150>)
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	68db      	ldr	r3, [r3, #12]
 8018048:	68db      	ldr	r3, [r3, #12]
 801804a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801804c:	68bb      	ldr	r3, [r7, #8]
 801804e:	685b      	ldr	r3, [r3, #4]
 8018050:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018052:	693a      	ldr	r2, [r7, #16]
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	429a      	cmp	r2, r3
 8018058:	d203      	bcs.n	8018062 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801805a:	4a2e      	ldr	r2, [pc, #184]	@ (8018114 <xTaskIncrementTick+0x15c>)
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018060:	e02f      	b.n	80180c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018062:	68bb      	ldr	r3, [r7, #8]
 8018064:	3304      	adds	r3, #4
 8018066:	4618      	mov	r0, r3
 8018068:	f7fe fe58 	bl	8016d1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801806c:	68bb      	ldr	r3, [r7, #8]
 801806e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018070:	2b00      	cmp	r3, #0
 8018072:	d004      	beq.n	801807e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018074:	68bb      	ldr	r3, [r7, #8]
 8018076:	3318      	adds	r3, #24
 8018078:	4618      	mov	r0, r3
 801807a:	f7fe fe4f 	bl	8016d1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801807e:	68bb      	ldr	r3, [r7, #8]
 8018080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018082:	4b25      	ldr	r3, [pc, #148]	@ (8018118 <xTaskIncrementTick+0x160>)
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	429a      	cmp	r2, r3
 8018088:	d903      	bls.n	8018092 <xTaskIncrementTick+0xda>
 801808a:	68bb      	ldr	r3, [r7, #8]
 801808c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801808e:	4a22      	ldr	r2, [pc, #136]	@ (8018118 <xTaskIncrementTick+0x160>)
 8018090:	6013      	str	r3, [r2, #0]
 8018092:	68bb      	ldr	r3, [r7, #8]
 8018094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018096:	4613      	mov	r3, r2
 8018098:	009b      	lsls	r3, r3, #2
 801809a:	4413      	add	r3, r2
 801809c:	009b      	lsls	r3, r3, #2
 801809e:	4a1f      	ldr	r2, [pc, #124]	@ (801811c <xTaskIncrementTick+0x164>)
 80180a0:	441a      	add	r2, r3
 80180a2:	68bb      	ldr	r3, [r7, #8]
 80180a4:	3304      	adds	r3, #4
 80180a6:	4619      	mov	r1, r3
 80180a8:	4610      	mov	r0, r2
 80180aa:	f7fe fdda 	bl	8016c62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80180ae:	68bb      	ldr	r3, [r7, #8]
 80180b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80180b2:	4b1b      	ldr	r3, [pc, #108]	@ (8018120 <xTaskIncrementTick+0x168>)
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80180b8:	429a      	cmp	r2, r3
 80180ba:	d3b8      	bcc.n	801802e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80180bc:	2301      	movs	r3, #1
 80180be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80180c0:	e7b5      	b.n	801802e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80180c2:	4b17      	ldr	r3, [pc, #92]	@ (8018120 <xTaskIncrementTick+0x168>)
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80180c8:	4914      	ldr	r1, [pc, #80]	@ (801811c <xTaskIncrementTick+0x164>)
 80180ca:	4613      	mov	r3, r2
 80180cc:	009b      	lsls	r3, r3, #2
 80180ce:	4413      	add	r3, r2
 80180d0:	009b      	lsls	r3, r3, #2
 80180d2:	440b      	add	r3, r1
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	2b01      	cmp	r3, #1
 80180d8:	d901      	bls.n	80180de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80180da:	2301      	movs	r3, #1
 80180dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80180de:	4b11      	ldr	r3, [pc, #68]	@ (8018124 <xTaskIncrementTick+0x16c>)
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d007      	beq.n	80180f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80180e6:	2301      	movs	r3, #1
 80180e8:	617b      	str	r3, [r7, #20]
 80180ea:	e004      	b.n	80180f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80180ec:	4b0e      	ldr	r3, [pc, #56]	@ (8018128 <xTaskIncrementTick+0x170>)
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	3301      	adds	r3, #1
 80180f2:	4a0d      	ldr	r2, [pc, #52]	@ (8018128 <xTaskIncrementTick+0x170>)
 80180f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80180f6:	697b      	ldr	r3, [r7, #20]
}
 80180f8:	4618      	mov	r0, r3
 80180fa:	3718      	adds	r7, #24
 80180fc:	46bd      	mov	sp, r7
 80180fe:	bd80      	pop	{r7, pc}
 8018100:	20008778 	.word	0x20008778
 8018104:	20008754 	.word	0x20008754
 8018108:	20008708 	.word	0x20008708
 801810c:	2000870c 	.word	0x2000870c
 8018110:	20008768 	.word	0x20008768
 8018114:	20008770 	.word	0x20008770
 8018118:	20008758 	.word	0x20008758
 801811c:	20008280 	.word	0x20008280
 8018120:	2000827c 	.word	0x2000827c
 8018124:	20008764 	.word	0x20008764
 8018128:	20008760 	.word	0x20008760

0801812c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801812c:	b480      	push	{r7}
 801812e:	b085      	sub	sp, #20
 8018130:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018132:	4b2b      	ldr	r3, [pc, #172]	@ (80181e0 <vTaskSwitchContext+0xb4>)
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d003      	beq.n	8018142 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801813a:	4b2a      	ldr	r3, [pc, #168]	@ (80181e4 <vTaskSwitchContext+0xb8>)
 801813c:	2201      	movs	r2, #1
 801813e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018140:	e047      	b.n	80181d2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8018142:	4b28      	ldr	r3, [pc, #160]	@ (80181e4 <vTaskSwitchContext+0xb8>)
 8018144:	2200      	movs	r2, #0
 8018146:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018148:	4b27      	ldr	r3, [pc, #156]	@ (80181e8 <vTaskSwitchContext+0xbc>)
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	60fb      	str	r3, [r7, #12]
 801814e:	e011      	b.n	8018174 <vTaskSwitchContext+0x48>
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d10b      	bne.n	801816e <vTaskSwitchContext+0x42>
	__asm volatile
 8018156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801815a:	f383 8811 	msr	BASEPRI, r3
 801815e:	f3bf 8f6f 	isb	sy
 8018162:	f3bf 8f4f 	dsb	sy
 8018166:	607b      	str	r3, [r7, #4]
}
 8018168:	bf00      	nop
 801816a:	bf00      	nop
 801816c:	e7fd      	b.n	801816a <vTaskSwitchContext+0x3e>
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	3b01      	subs	r3, #1
 8018172:	60fb      	str	r3, [r7, #12]
 8018174:	491d      	ldr	r1, [pc, #116]	@ (80181ec <vTaskSwitchContext+0xc0>)
 8018176:	68fa      	ldr	r2, [r7, #12]
 8018178:	4613      	mov	r3, r2
 801817a:	009b      	lsls	r3, r3, #2
 801817c:	4413      	add	r3, r2
 801817e:	009b      	lsls	r3, r3, #2
 8018180:	440b      	add	r3, r1
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d0e3      	beq.n	8018150 <vTaskSwitchContext+0x24>
 8018188:	68fa      	ldr	r2, [r7, #12]
 801818a:	4613      	mov	r3, r2
 801818c:	009b      	lsls	r3, r3, #2
 801818e:	4413      	add	r3, r2
 8018190:	009b      	lsls	r3, r3, #2
 8018192:	4a16      	ldr	r2, [pc, #88]	@ (80181ec <vTaskSwitchContext+0xc0>)
 8018194:	4413      	add	r3, r2
 8018196:	60bb      	str	r3, [r7, #8]
 8018198:	68bb      	ldr	r3, [r7, #8]
 801819a:	685b      	ldr	r3, [r3, #4]
 801819c:	685a      	ldr	r2, [r3, #4]
 801819e:	68bb      	ldr	r3, [r7, #8]
 80181a0:	605a      	str	r2, [r3, #4]
 80181a2:	68bb      	ldr	r3, [r7, #8]
 80181a4:	685a      	ldr	r2, [r3, #4]
 80181a6:	68bb      	ldr	r3, [r7, #8]
 80181a8:	3308      	adds	r3, #8
 80181aa:	429a      	cmp	r2, r3
 80181ac:	d104      	bne.n	80181b8 <vTaskSwitchContext+0x8c>
 80181ae:	68bb      	ldr	r3, [r7, #8]
 80181b0:	685b      	ldr	r3, [r3, #4]
 80181b2:	685a      	ldr	r2, [r3, #4]
 80181b4:	68bb      	ldr	r3, [r7, #8]
 80181b6:	605a      	str	r2, [r3, #4]
 80181b8:	68bb      	ldr	r3, [r7, #8]
 80181ba:	685b      	ldr	r3, [r3, #4]
 80181bc:	68db      	ldr	r3, [r3, #12]
 80181be:	4a0c      	ldr	r2, [pc, #48]	@ (80181f0 <vTaskSwitchContext+0xc4>)
 80181c0:	6013      	str	r3, [r2, #0]
 80181c2:	4a09      	ldr	r2, [pc, #36]	@ (80181e8 <vTaskSwitchContext+0xbc>)
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80181c8:	4b09      	ldr	r3, [pc, #36]	@ (80181f0 <vTaskSwitchContext+0xc4>)
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	3354      	adds	r3, #84	@ 0x54
 80181ce:	4a09      	ldr	r2, [pc, #36]	@ (80181f4 <vTaskSwitchContext+0xc8>)
 80181d0:	6013      	str	r3, [r2, #0]
}
 80181d2:	bf00      	nop
 80181d4:	3714      	adds	r7, #20
 80181d6:	46bd      	mov	sp, r7
 80181d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181dc:	4770      	bx	lr
 80181de:	bf00      	nop
 80181e0:	20008778 	.word	0x20008778
 80181e4:	20008764 	.word	0x20008764
 80181e8:	20008758 	.word	0x20008758
 80181ec:	20008280 	.word	0x20008280
 80181f0:	2000827c 	.word	0x2000827c
 80181f4:	20000088 	.word	0x20000088

080181f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80181f8:	b580      	push	{r7, lr}
 80181fa:	b084      	sub	sp, #16
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
 8018200:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d10b      	bne.n	8018220 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8018208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801820c:	f383 8811 	msr	BASEPRI, r3
 8018210:	f3bf 8f6f 	isb	sy
 8018214:	f3bf 8f4f 	dsb	sy
 8018218:	60fb      	str	r3, [r7, #12]
}
 801821a:	bf00      	nop
 801821c:	bf00      	nop
 801821e:	e7fd      	b.n	801821c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018220:	4b07      	ldr	r3, [pc, #28]	@ (8018240 <vTaskPlaceOnEventList+0x48>)
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	3318      	adds	r3, #24
 8018226:	4619      	mov	r1, r3
 8018228:	6878      	ldr	r0, [r7, #4]
 801822a:	f7fe fd3e 	bl	8016caa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801822e:	2101      	movs	r1, #1
 8018230:	6838      	ldr	r0, [r7, #0]
 8018232:	f000 fa87 	bl	8018744 <prvAddCurrentTaskToDelayedList>
}
 8018236:	bf00      	nop
 8018238:	3710      	adds	r7, #16
 801823a:	46bd      	mov	sp, r7
 801823c:	bd80      	pop	{r7, pc}
 801823e:	bf00      	nop
 8018240:	2000827c 	.word	0x2000827c

08018244 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018244:	b580      	push	{r7, lr}
 8018246:	b086      	sub	sp, #24
 8018248:	af00      	add	r7, sp, #0
 801824a:	60f8      	str	r0, [r7, #12]
 801824c:	60b9      	str	r1, [r7, #8]
 801824e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d10b      	bne.n	801826e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8018256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801825a:	f383 8811 	msr	BASEPRI, r3
 801825e:	f3bf 8f6f 	isb	sy
 8018262:	f3bf 8f4f 	dsb	sy
 8018266:	617b      	str	r3, [r7, #20]
}
 8018268:	bf00      	nop
 801826a:	bf00      	nop
 801826c:	e7fd      	b.n	801826a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801826e:	4b0a      	ldr	r3, [pc, #40]	@ (8018298 <vTaskPlaceOnEventListRestricted+0x54>)
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	3318      	adds	r3, #24
 8018274:	4619      	mov	r1, r3
 8018276:	68f8      	ldr	r0, [r7, #12]
 8018278:	f7fe fcf3 	bl	8016c62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d002      	beq.n	8018288 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8018282:	f04f 33ff 	mov.w	r3, #4294967295
 8018286:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018288:	6879      	ldr	r1, [r7, #4]
 801828a:	68b8      	ldr	r0, [r7, #8]
 801828c:	f000 fa5a 	bl	8018744 <prvAddCurrentTaskToDelayedList>
	}
 8018290:	bf00      	nop
 8018292:	3718      	adds	r7, #24
 8018294:	46bd      	mov	sp, r7
 8018296:	bd80      	pop	{r7, pc}
 8018298:	2000827c 	.word	0x2000827c

0801829c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801829c:	b580      	push	{r7, lr}
 801829e:	b086      	sub	sp, #24
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	68db      	ldr	r3, [r3, #12]
 80182a8:	68db      	ldr	r3, [r3, #12]
 80182aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80182ac:	693b      	ldr	r3, [r7, #16]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d10b      	bne.n	80182ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80182b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80182b6:	f383 8811 	msr	BASEPRI, r3
 80182ba:	f3bf 8f6f 	isb	sy
 80182be:	f3bf 8f4f 	dsb	sy
 80182c2:	60fb      	str	r3, [r7, #12]
}
 80182c4:	bf00      	nop
 80182c6:	bf00      	nop
 80182c8:	e7fd      	b.n	80182c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80182ca:	693b      	ldr	r3, [r7, #16]
 80182cc:	3318      	adds	r3, #24
 80182ce:	4618      	mov	r0, r3
 80182d0:	f7fe fd24 	bl	8016d1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80182d4:	4b1d      	ldr	r3, [pc, #116]	@ (801834c <xTaskRemoveFromEventList+0xb0>)
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d11d      	bne.n	8018318 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80182dc:	693b      	ldr	r3, [r7, #16]
 80182de:	3304      	adds	r3, #4
 80182e0:	4618      	mov	r0, r3
 80182e2:	f7fe fd1b 	bl	8016d1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80182e6:	693b      	ldr	r3, [r7, #16]
 80182e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80182ea:	4b19      	ldr	r3, [pc, #100]	@ (8018350 <xTaskRemoveFromEventList+0xb4>)
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	429a      	cmp	r2, r3
 80182f0:	d903      	bls.n	80182fa <xTaskRemoveFromEventList+0x5e>
 80182f2:	693b      	ldr	r3, [r7, #16]
 80182f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80182f6:	4a16      	ldr	r2, [pc, #88]	@ (8018350 <xTaskRemoveFromEventList+0xb4>)
 80182f8:	6013      	str	r3, [r2, #0]
 80182fa:	693b      	ldr	r3, [r7, #16]
 80182fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80182fe:	4613      	mov	r3, r2
 8018300:	009b      	lsls	r3, r3, #2
 8018302:	4413      	add	r3, r2
 8018304:	009b      	lsls	r3, r3, #2
 8018306:	4a13      	ldr	r2, [pc, #76]	@ (8018354 <xTaskRemoveFromEventList+0xb8>)
 8018308:	441a      	add	r2, r3
 801830a:	693b      	ldr	r3, [r7, #16]
 801830c:	3304      	adds	r3, #4
 801830e:	4619      	mov	r1, r3
 8018310:	4610      	mov	r0, r2
 8018312:	f7fe fca6 	bl	8016c62 <vListInsertEnd>
 8018316:	e005      	b.n	8018324 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018318:	693b      	ldr	r3, [r7, #16]
 801831a:	3318      	adds	r3, #24
 801831c:	4619      	mov	r1, r3
 801831e:	480e      	ldr	r0, [pc, #56]	@ (8018358 <xTaskRemoveFromEventList+0xbc>)
 8018320:	f7fe fc9f 	bl	8016c62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018324:	693b      	ldr	r3, [r7, #16]
 8018326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018328:	4b0c      	ldr	r3, [pc, #48]	@ (801835c <xTaskRemoveFromEventList+0xc0>)
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801832e:	429a      	cmp	r2, r3
 8018330:	d905      	bls.n	801833e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018332:	2301      	movs	r3, #1
 8018334:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018336:	4b0a      	ldr	r3, [pc, #40]	@ (8018360 <xTaskRemoveFromEventList+0xc4>)
 8018338:	2201      	movs	r2, #1
 801833a:	601a      	str	r2, [r3, #0]
 801833c:	e001      	b.n	8018342 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801833e:	2300      	movs	r3, #0
 8018340:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018342:	697b      	ldr	r3, [r7, #20]
}
 8018344:	4618      	mov	r0, r3
 8018346:	3718      	adds	r7, #24
 8018348:	46bd      	mov	sp, r7
 801834a:	bd80      	pop	{r7, pc}
 801834c:	20008778 	.word	0x20008778
 8018350:	20008758 	.word	0x20008758
 8018354:	20008280 	.word	0x20008280
 8018358:	20008710 	.word	0x20008710
 801835c:	2000827c 	.word	0x2000827c
 8018360:	20008764 	.word	0x20008764

08018364 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018364:	b480      	push	{r7}
 8018366:	b083      	sub	sp, #12
 8018368:	af00      	add	r7, sp, #0
 801836a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801836c:	4b06      	ldr	r3, [pc, #24]	@ (8018388 <vTaskInternalSetTimeOutState+0x24>)
 801836e:	681a      	ldr	r2, [r3, #0]
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018374:	4b05      	ldr	r3, [pc, #20]	@ (801838c <vTaskInternalSetTimeOutState+0x28>)
 8018376:	681a      	ldr	r2, [r3, #0]
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	605a      	str	r2, [r3, #4]
}
 801837c:	bf00      	nop
 801837e:	370c      	adds	r7, #12
 8018380:	46bd      	mov	sp, r7
 8018382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018386:	4770      	bx	lr
 8018388:	20008768 	.word	0x20008768
 801838c:	20008754 	.word	0x20008754

08018390 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018390:	b580      	push	{r7, lr}
 8018392:	b088      	sub	sp, #32
 8018394:	af00      	add	r7, sp, #0
 8018396:	6078      	str	r0, [r7, #4]
 8018398:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d10b      	bne.n	80183b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80183a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183a4:	f383 8811 	msr	BASEPRI, r3
 80183a8:	f3bf 8f6f 	isb	sy
 80183ac:	f3bf 8f4f 	dsb	sy
 80183b0:	613b      	str	r3, [r7, #16]
}
 80183b2:	bf00      	nop
 80183b4:	bf00      	nop
 80183b6:	e7fd      	b.n	80183b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80183b8:	683b      	ldr	r3, [r7, #0]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d10b      	bne.n	80183d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80183be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183c2:	f383 8811 	msr	BASEPRI, r3
 80183c6:	f3bf 8f6f 	isb	sy
 80183ca:	f3bf 8f4f 	dsb	sy
 80183ce:	60fb      	str	r3, [r7, #12]
}
 80183d0:	bf00      	nop
 80183d2:	bf00      	nop
 80183d4:	e7fd      	b.n	80183d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80183d6:	f000 fe97 	bl	8019108 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80183da:	4b1d      	ldr	r3, [pc, #116]	@ (8018450 <xTaskCheckForTimeOut+0xc0>)
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	685b      	ldr	r3, [r3, #4]
 80183e4:	69ba      	ldr	r2, [r7, #24]
 80183e6:	1ad3      	subs	r3, r2, r3
 80183e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80183ea:	683b      	ldr	r3, [r7, #0]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183f2:	d102      	bne.n	80183fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80183f4:	2300      	movs	r3, #0
 80183f6:	61fb      	str	r3, [r7, #28]
 80183f8:	e023      	b.n	8018442 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	681a      	ldr	r2, [r3, #0]
 80183fe:	4b15      	ldr	r3, [pc, #84]	@ (8018454 <xTaskCheckForTimeOut+0xc4>)
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	429a      	cmp	r2, r3
 8018404:	d007      	beq.n	8018416 <xTaskCheckForTimeOut+0x86>
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	685b      	ldr	r3, [r3, #4]
 801840a:	69ba      	ldr	r2, [r7, #24]
 801840c:	429a      	cmp	r2, r3
 801840e:	d302      	bcc.n	8018416 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018410:	2301      	movs	r3, #1
 8018412:	61fb      	str	r3, [r7, #28]
 8018414:	e015      	b.n	8018442 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018416:	683b      	ldr	r3, [r7, #0]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	697a      	ldr	r2, [r7, #20]
 801841c:	429a      	cmp	r2, r3
 801841e:	d20b      	bcs.n	8018438 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018420:	683b      	ldr	r3, [r7, #0]
 8018422:	681a      	ldr	r2, [r3, #0]
 8018424:	697b      	ldr	r3, [r7, #20]
 8018426:	1ad2      	subs	r2, r2, r3
 8018428:	683b      	ldr	r3, [r7, #0]
 801842a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801842c:	6878      	ldr	r0, [r7, #4]
 801842e:	f7ff ff99 	bl	8018364 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018432:	2300      	movs	r3, #0
 8018434:	61fb      	str	r3, [r7, #28]
 8018436:	e004      	b.n	8018442 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8018438:	683b      	ldr	r3, [r7, #0]
 801843a:	2200      	movs	r2, #0
 801843c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801843e:	2301      	movs	r3, #1
 8018440:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018442:	f000 fe93 	bl	801916c <vPortExitCritical>

	return xReturn;
 8018446:	69fb      	ldr	r3, [r7, #28]
}
 8018448:	4618      	mov	r0, r3
 801844a:	3720      	adds	r7, #32
 801844c:	46bd      	mov	sp, r7
 801844e:	bd80      	pop	{r7, pc}
 8018450:	20008754 	.word	0x20008754
 8018454:	20008768 	.word	0x20008768

08018458 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018458:	b480      	push	{r7}
 801845a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801845c:	4b03      	ldr	r3, [pc, #12]	@ (801846c <vTaskMissedYield+0x14>)
 801845e:	2201      	movs	r2, #1
 8018460:	601a      	str	r2, [r3, #0]
}
 8018462:	bf00      	nop
 8018464:	46bd      	mov	sp, r7
 8018466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801846a:	4770      	bx	lr
 801846c:	20008764 	.word	0x20008764

08018470 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018470:	b580      	push	{r7, lr}
 8018472:	b082      	sub	sp, #8
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018478:	f000 f852 	bl	8018520 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801847c:	4b06      	ldr	r3, [pc, #24]	@ (8018498 <prvIdleTask+0x28>)
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	2b01      	cmp	r3, #1
 8018482:	d9f9      	bls.n	8018478 <prvIdleTask+0x8>
			{
				taskYIELD();
 8018484:	4b05      	ldr	r3, [pc, #20]	@ (801849c <prvIdleTask+0x2c>)
 8018486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801848a:	601a      	str	r2, [r3, #0]
 801848c:	f3bf 8f4f 	dsb	sy
 8018490:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018494:	e7f0      	b.n	8018478 <prvIdleTask+0x8>
 8018496:	bf00      	nop
 8018498:	20008280 	.word	0x20008280
 801849c:	e000ed04 	.word	0xe000ed04

080184a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80184a0:	b580      	push	{r7, lr}
 80184a2:	b082      	sub	sp, #8
 80184a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80184a6:	2300      	movs	r3, #0
 80184a8:	607b      	str	r3, [r7, #4]
 80184aa:	e00c      	b.n	80184c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80184ac:	687a      	ldr	r2, [r7, #4]
 80184ae:	4613      	mov	r3, r2
 80184b0:	009b      	lsls	r3, r3, #2
 80184b2:	4413      	add	r3, r2
 80184b4:	009b      	lsls	r3, r3, #2
 80184b6:	4a12      	ldr	r2, [pc, #72]	@ (8018500 <prvInitialiseTaskLists+0x60>)
 80184b8:	4413      	add	r3, r2
 80184ba:	4618      	mov	r0, r3
 80184bc:	f7fe fba4 	bl	8016c08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	3301      	adds	r3, #1
 80184c4:	607b      	str	r3, [r7, #4]
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	2b37      	cmp	r3, #55	@ 0x37
 80184ca:	d9ef      	bls.n	80184ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80184cc:	480d      	ldr	r0, [pc, #52]	@ (8018504 <prvInitialiseTaskLists+0x64>)
 80184ce:	f7fe fb9b 	bl	8016c08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80184d2:	480d      	ldr	r0, [pc, #52]	@ (8018508 <prvInitialiseTaskLists+0x68>)
 80184d4:	f7fe fb98 	bl	8016c08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80184d8:	480c      	ldr	r0, [pc, #48]	@ (801850c <prvInitialiseTaskLists+0x6c>)
 80184da:	f7fe fb95 	bl	8016c08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80184de:	480c      	ldr	r0, [pc, #48]	@ (8018510 <prvInitialiseTaskLists+0x70>)
 80184e0:	f7fe fb92 	bl	8016c08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80184e4:	480b      	ldr	r0, [pc, #44]	@ (8018514 <prvInitialiseTaskLists+0x74>)
 80184e6:	f7fe fb8f 	bl	8016c08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80184ea:	4b0b      	ldr	r3, [pc, #44]	@ (8018518 <prvInitialiseTaskLists+0x78>)
 80184ec:	4a05      	ldr	r2, [pc, #20]	@ (8018504 <prvInitialiseTaskLists+0x64>)
 80184ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80184f0:	4b0a      	ldr	r3, [pc, #40]	@ (801851c <prvInitialiseTaskLists+0x7c>)
 80184f2:	4a05      	ldr	r2, [pc, #20]	@ (8018508 <prvInitialiseTaskLists+0x68>)
 80184f4:	601a      	str	r2, [r3, #0]
}
 80184f6:	bf00      	nop
 80184f8:	3708      	adds	r7, #8
 80184fa:	46bd      	mov	sp, r7
 80184fc:	bd80      	pop	{r7, pc}
 80184fe:	bf00      	nop
 8018500:	20008280 	.word	0x20008280
 8018504:	200086e0 	.word	0x200086e0
 8018508:	200086f4 	.word	0x200086f4
 801850c:	20008710 	.word	0x20008710
 8018510:	20008724 	.word	0x20008724
 8018514:	2000873c 	.word	0x2000873c
 8018518:	20008708 	.word	0x20008708
 801851c:	2000870c 	.word	0x2000870c

08018520 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018520:	b580      	push	{r7, lr}
 8018522:	b082      	sub	sp, #8
 8018524:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018526:	e019      	b.n	801855c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018528:	f000 fdee 	bl	8019108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801852c:	4b10      	ldr	r3, [pc, #64]	@ (8018570 <prvCheckTasksWaitingTermination+0x50>)
 801852e:	68db      	ldr	r3, [r3, #12]
 8018530:	68db      	ldr	r3, [r3, #12]
 8018532:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	3304      	adds	r3, #4
 8018538:	4618      	mov	r0, r3
 801853a:	f7fe fbef 	bl	8016d1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801853e:	4b0d      	ldr	r3, [pc, #52]	@ (8018574 <prvCheckTasksWaitingTermination+0x54>)
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	3b01      	subs	r3, #1
 8018544:	4a0b      	ldr	r2, [pc, #44]	@ (8018574 <prvCheckTasksWaitingTermination+0x54>)
 8018546:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018548:	4b0b      	ldr	r3, [pc, #44]	@ (8018578 <prvCheckTasksWaitingTermination+0x58>)
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	3b01      	subs	r3, #1
 801854e:	4a0a      	ldr	r2, [pc, #40]	@ (8018578 <prvCheckTasksWaitingTermination+0x58>)
 8018550:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018552:	f000 fe0b 	bl	801916c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018556:	6878      	ldr	r0, [r7, #4]
 8018558:	f000 f810 	bl	801857c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801855c:	4b06      	ldr	r3, [pc, #24]	@ (8018578 <prvCheckTasksWaitingTermination+0x58>)
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d1e1      	bne.n	8018528 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018564:	bf00      	nop
 8018566:	bf00      	nop
 8018568:	3708      	adds	r7, #8
 801856a:	46bd      	mov	sp, r7
 801856c:	bd80      	pop	{r7, pc}
 801856e:	bf00      	nop
 8018570:	20008724 	.word	0x20008724
 8018574:	20008750 	.word	0x20008750
 8018578:	20008738 	.word	0x20008738

0801857c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801857c:	b580      	push	{r7, lr}
 801857e:	b084      	sub	sp, #16
 8018580:	af00      	add	r7, sp, #0
 8018582:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	3354      	adds	r3, #84	@ 0x54
 8018588:	4618      	mov	r0, r3
 801858a:	f001 fb0b 	bl	8019ba4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8018594:	2b00      	cmp	r3, #0
 8018596:	d108      	bne.n	80185aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801859c:	4618      	mov	r0, r3
 801859e:	f000 ffa3 	bl	80194e8 <vPortFree>
				vPortFree( pxTCB );
 80185a2:	6878      	ldr	r0, [r7, #4]
 80185a4:	f000 ffa0 	bl	80194e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80185a8:	e019      	b.n	80185de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80185b0:	2b01      	cmp	r3, #1
 80185b2:	d103      	bne.n	80185bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80185b4:	6878      	ldr	r0, [r7, #4]
 80185b6:	f000 ff97 	bl	80194e8 <vPortFree>
	}
 80185ba:	e010      	b.n	80185de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80185c2:	2b02      	cmp	r3, #2
 80185c4:	d00b      	beq.n	80185de <prvDeleteTCB+0x62>
	__asm volatile
 80185c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185ca:	f383 8811 	msr	BASEPRI, r3
 80185ce:	f3bf 8f6f 	isb	sy
 80185d2:	f3bf 8f4f 	dsb	sy
 80185d6:	60fb      	str	r3, [r7, #12]
}
 80185d8:	bf00      	nop
 80185da:	bf00      	nop
 80185dc:	e7fd      	b.n	80185da <prvDeleteTCB+0x5e>
	}
 80185de:	bf00      	nop
 80185e0:	3710      	adds	r7, #16
 80185e2:	46bd      	mov	sp, r7
 80185e4:	bd80      	pop	{r7, pc}
	...

080185e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80185e8:	b480      	push	{r7}
 80185ea:	b083      	sub	sp, #12
 80185ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80185ee:	4b0c      	ldr	r3, [pc, #48]	@ (8018620 <prvResetNextTaskUnblockTime+0x38>)
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d104      	bne.n	8018602 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80185f8:	4b0a      	ldr	r3, [pc, #40]	@ (8018624 <prvResetNextTaskUnblockTime+0x3c>)
 80185fa:	f04f 32ff 	mov.w	r2, #4294967295
 80185fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018600:	e008      	b.n	8018614 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018602:	4b07      	ldr	r3, [pc, #28]	@ (8018620 <prvResetNextTaskUnblockTime+0x38>)
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	68db      	ldr	r3, [r3, #12]
 8018608:	68db      	ldr	r3, [r3, #12]
 801860a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	685b      	ldr	r3, [r3, #4]
 8018610:	4a04      	ldr	r2, [pc, #16]	@ (8018624 <prvResetNextTaskUnblockTime+0x3c>)
 8018612:	6013      	str	r3, [r2, #0]
}
 8018614:	bf00      	nop
 8018616:	370c      	adds	r7, #12
 8018618:	46bd      	mov	sp, r7
 801861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801861e:	4770      	bx	lr
 8018620:	20008708 	.word	0x20008708
 8018624:	20008770 	.word	0x20008770

08018628 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018628:	b480      	push	{r7}
 801862a:	b083      	sub	sp, #12
 801862c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801862e:	4b0b      	ldr	r3, [pc, #44]	@ (801865c <xTaskGetSchedulerState+0x34>)
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d102      	bne.n	801863c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018636:	2301      	movs	r3, #1
 8018638:	607b      	str	r3, [r7, #4]
 801863a:	e008      	b.n	801864e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801863c:	4b08      	ldr	r3, [pc, #32]	@ (8018660 <xTaskGetSchedulerState+0x38>)
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	2b00      	cmp	r3, #0
 8018642:	d102      	bne.n	801864a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018644:	2302      	movs	r3, #2
 8018646:	607b      	str	r3, [r7, #4]
 8018648:	e001      	b.n	801864e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801864a:	2300      	movs	r3, #0
 801864c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801864e:	687b      	ldr	r3, [r7, #4]
	}
 8018650:	4618      	mov	r0, r3
 8018652:	370c      	adds	r7, #12
 8018654:	46bd      	mov	sp, r7
 8018656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865a:	4770      	bx	lr
 801865c:	2000875c 	.word	0x2000875c
 8018660:	20008778 	.word	0x20008778

08018664 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018664:	b580      	push	{r7, lr}
 8018666:	b086      	sub	sp, #24
 8018668:	af00      	add	r7, sp, #0
 801866a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018670:	2300      	movs	r3, #0
 8018672:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d058      	beq.n	801872c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801867a:	4b2f      	ldr	r3, [pc, #188]	@ (8018738 <xTaskPriorityDisinherit+0xd4>)
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	693a      	ldr	r2, [r7, #16]
 8018680:	429a      	cmp	r2, r3
 8018682:	d00b      	beq.n	801869c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8018684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018688:	f383 8811 	msr	BASEPRI, r3
 801868c:	f3bf 8f6f 	isb	sy
 8018690:	f3bf 8f4f 	dsb	sy
 8018694:	60fb      	str	r3, [r7, #12]
}
 8018696:	bf00      	nop
 8018698:	bf00      	nop
 801869a:	e7fd      	b.n	8018698 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801869c:	693b      	ldr	r3, [r7, #16]
 801869e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d10b      	bne.n	80186bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80186a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80186a8:	f383 8811 	msr	BASEPRI, r3
 80186ac:	f3bf 8f6f 	isb	sy
 80186b0:	f3bf 8f4f 	dsb	sy
 80186b4:	60bb      	str	r3, [r7, #8]
}
 80186b6:	bf00      	nop
 80186b8:	bf00      	nop
 80186ba:	e7fd      	b.n	80186b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80186bc:	693b      	ldr	r3, [r7, #16]
 80186be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80186c0:	1e5a      	subs	r2, r3, #1
 80186c2:	693b      	ldr	r3, [r7, #16]
 80186c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80186c6:	693b      	ldr	r3, [r7, #16]
 80186c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80186ca:	693b      	ldr	r3, [r7, #16]
 80186cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80186ce:	429a      	cmp	r2, r3
 80186d0:	d02c      	beq.n	801872c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80186d2:	693b      	ldr	r3, [r7, #16]
 80186d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d128      	bne.n	801872c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80186da:	693b      	ldr	r3, [r7, #16]
 80186dc:	3304      	adds	r3, #4
 80186de:	4618      	mov	r0, r3
 80186e0:	f7fe fb1c 	bl	8016d1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80186e4:	693b      	ldr	r3, [r7, #16]
 80186e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80186e8:	693b      	ldr	r3, [r7, #16]
 80186ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80186ec:	693b      	ldr	r3, [r7, #16]
 80186ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80186f4:	693b      	ldr	r3, [r7, #16]
 80186f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80186f8:	693b      	ldr	r3, [r7, #16]
 80186fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80186fc:	4b0f      	ldr	r3, [pc, #60]	@ (801873c <xTaskPriorityDisinherit+0xd8>)
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	429a      	cmp	r2, r3
 8018702:	d903      	bls.n	801870c <xTaskPriorityDisinherit+0xa8>
 8018704:	693b      	ldr	r3, [r7, #16]
 8018706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018708:	4a0c      	ldr	r2, [pc, #48]	@ (801873c <xTaskPriorityDisinherit+0xd8>)
 801870a:	6013      	str	r3, [r2, #0]
 801870c:	693b      	ldr	r3, [r7, #16]
 801870e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018710:	4613      	mov	r3, r2
 8018712:	009b      	lsls	r3, r3, #2
 8018714:	4413      	add	r3, r2
 8018716:	009b      	lsls	r3, r3, #2
 8018718:	4a09      	ldr	r2, [pc, #36]	@ (8018740 <xTaskPriorityDisinherit+0xdc>)
 801871a:	441a      	add	r2, r3
 801871c:	693b      	ldr	r3, [r7, #16]
 801871e:	3304      	adds	r3, #4
 8018720:	4619      	mov	r1, r3
 8018722:	4610      	mov	r0, r2
 8018724:	f7fe fa9d 	bl	8016c62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018728:	2301      	movs	r3, #1
 801872a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801872c:	697b      	ldr	r3, [r7, #20]
	}
 801872e:	4618      	mov	r0, r3
 8018730:	3718      	adds	r7, #24
 8018732:	46bd      	mov	sp, r7
 8018734:	bd80      	pop	{r7, pc}
 8018736:	bf00      	nop
 8018738:	2000827c 	.word	0x2000827c
 801873c:	20008758 	.word	0x20008758
 8018740:	20008280 	.word	0x20008280

08018744 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018744:	b580      	push	{r7, lr}
 8018746:	b084      	sub	sp, #16
 8018748:	af00      	add	r7, sp, #0
 801874a:	6078      	str	r0, [r7, #4]
 801874c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801874e:	4b21      	ldr	r3, [pc, #132]	@ (80187d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018754:	4b20      	ldr	r3, [pc, #128]	@ (80187d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	3304      	adds	r3, #4
 801875a:	4618      	mov	r0, r3
 801875c:	f7fe fade 	bl	8016d1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018766:	d10a      	bne.n	801877e <prvAddCurrentTaskToDelayedList+0x3a>
 8018768:	683b      	ldr	r3, [r7, #0]
 801876a:	2b00      	cmp	r3, #0
 801876c:	d007      	beq.n	801877e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801876e:	4b1a      	ldr	r3, [pc, #104]	@ (80187d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	3304      	adds	r3, #4
 8018774:	4619      	mov	r1, r3
 8018776:	4819      	ldr	r0, [pc, #100]	@ (80187dc <prvAddCurrentTaskToDelayedList+0x98>)
 8018778:	f7fe fa73 	bl	8016c62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801877c:	e026      	b.n	80187cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801877e:	68fa      	ldr	r2, [r7, #12]
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	4413      	add	r3, r2
 8018784:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018786:	4b14      	ldr	r3, [pc, #80]	@ (80187d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	68ba      	ldr	r2, [r7, #8]
 801878c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801878e:	68ba      	ldr	r2, [r7, #8]
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	429a      	cmp	r2, r3
 8018794:	d209      	bcs.n	80187aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018796:	4b12      	ldr	r3, [pc, #72]	@ (80187e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018798:	681a      	ldr	r2, [r3, #0]
 801879a:	4b0f      	ldr	r3, [pc, #60]	@ (80187d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	3304      	adds	r3, #4
 80187a0:	4619      	mov	r1, r3
 80187a2:	4610      	mov	r0, r2
 80187a4:	f7fe fa81 	bl	8016caa <vListInsert>
}
 80187a8:	e010      	b.n	80187cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80187aa:	4b0e      	ldr	r3, [pc, #56]	@ (80187e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80187ac:	681a      	ldr	r2, [r3, #0]
 80187ae:	4b0a      	ldr	r3, [pc, #40]	@ (80187d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	3304      	adds	r3, #4
 80187b4:	4619      	mov	r1, r3
 80187b6:	4610      	mov	r0, r2
 80187b8:	f7fe fa77 	bl	8016caa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80187bc:	4b0a      	ldr	r3, [pc, #40]	@ (80187e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	68ba      	ldr	r2, [r7, #8]
 80187c2:	429a      	cmp	r2, r3
 80187c4:	d202      	bcs.n	80187cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80187c6:	4a08      	ldr	r2, [pc, #32]	@ (80187e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80187c8:	68bb      	ldr	r3, [r7, #8]
 80187ca:	6013      	str	r3, [r2, #0]
}
 80187cc:	bf00      	nop
 80187ce:	3710      	adds	r7, #16
 80187d0:	46bd      	mov	sp, r7
 80187d2:	bd80      	pop	{r7, pc}
 80187d4:	20008754 	.word	0x20008754
 80187d8:	2000827c 	.word	0x2000827c
 80187dc:	2000873c 	.word	0x2000873c
 80187e0:	2000870c 	.word	0x2000870c
 80187e4:	20008708 	.word	0x20008708
 80187e8:	20008770 	.word	0x20008770

080187ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	b08a      	sub	sp, #40	@ 0x28
 80187f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80187f2:	2300      	movs	r3, #0
 80187f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80187f6:	f000 fb13 	bl	8018e20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80187fa:	4b1d      	ldr	r3, [pc, #116]	@ (8018870 <xTimerCreateTimerTask+0x84>)
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d021      	beq.n	8018846 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018802:	2300      	movs	r3, #0
 8018804:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018806:	2300      	movs	r3, #0
 8018808:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801880a:	1d3a      	adds	r2, r7, #4
 801880c:	f107 0108 	add.w	r1, r7, #8
 8018810:	f107 030c 	add.w	r3, r7, #12
 8018814:	4618      	mov	r0, r3
 8018816:	f7fe f9dd 	bl	8016bd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801881a:	6879      	ldr	r1, [r7, #4]
 801881c:	68bb      	ldr	r3, [r7, #8]
 801881e:	68fa      	ldr	r2, [r7, #12]
 8018820:	9202      	str	r2, [sp, #8]
 8018822:	9301      	str	r3, [sp, #4]
 8018824:	2302      	movs	r3, #2
 8018826:	9300      	str	r3, [sp, #0]
 8018828:	2300      	movs	r3, #0
 801882a:	460a      	mov	r2, r1
 801882c:	4911      	ldr	r1, [pc, #68]	@ (8018874 <xTimerCreateTimerTask+0x88>)
 801882e:	4812      	ldr	r0, [pc, #72]	@ (8018878 <xTimerCreateTimerTask+0x8c>)
 8018830:	f7ff f8a2 	bl	8017978 <xTaskCreateStatic>
 8018834:	4603      	mov	r3, r0
 8018836:	4a11      	ldr	r2, [pc, #68]	@ (801887c <xTimerCreateTimerTask+0x90>)
 8018838:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801883a:	4b10      	ldr	r3, [pc, #64]	@ (801887c <xTimerCreateTimerTask+0x90>)
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d001      	beq.n	8018846 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018842:	2301      	movs	r3, #1
 8018844:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018846:	697b      	ldr	r3, [r7, #20]
 8018848:	2b00      	cmp	r3, #0
 801884a:	d10b      	bne.n	8018864 <xTimerCreateTimerTask+0x78>
	__asm volatile
 801884c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018850:	f383 8811 	msr	BASEPRI, r3
 8018854:	f3bf 8f6f 	isb	sy
 8018858:	f3bf 8f4f 	dsb	sy
 801885c:	613b      	str	r3, [r7, #16]
}
 801885e:	bf00      	nop
 8018860:	bf00      	nop
 8018862:	e7fd      	b.n	8018860 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018864:	697b      	ldr	r3, [r7, #20]
}
 8018866:	4618      	mov	r0, r3
 8018868:	3718      	adds	r7, #24
 801886a:	46bd      	mov	sp, r7
 801886c:	bd80      	pop	{r7, pc}
 801886e:	bf00      	nop
 8018870:	200087ac 	.word	0x200087ac
 8018874:	0801a984 	.word	0x0801a984
 8018878:	080189b9 	.word	0x080189b9
 801887c:	200087b0 	.word	0x200087b0

08018880 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018880:	b580      	push	{r7, lr}
 8018882:	b08a      	sub	sp, #40	@ 0x28
 8018884:	af00      	add	r7, sp, #0
 8018886:	60f8      	str	r0, [r7, #12]
 8018888:	60b9      	str	r1, [r7, #8]
 801888a:	607a      	str	r2, [r7, #4]
 801888c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801888e:	2300      	movs	r3, #0
 8018890:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d10b      	bne.n	80188b0 <xTimerGenericCommand+0x30>
	__asm volatile
 8018898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801889c:	f383 8811 	msr	BASEPRI, r3
 80188a0:	f3bf 8f6f 	isb	sy
 80188a4:	f3bf 8f4f 	dsb	sy
 80188a8:	623b      	str	r3, [r7, #32]
}
 80188aa:	bf00      	nop
 80188ac:	bf00      	nop
 80188ae:	e7fd      	b.n	80188ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80188b0:	4b19      	ldr	r3, [pc, #100]	@ (8018918 <xTimerGenericCommand+0x98>)
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d02a      	beq.n	801890e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80188b8:	68bb      	ldr	r3, [r7, #8]
 80188ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80188c4:	68bb      	ldr	r3, [r7, #8]
 80188c6:	2b05      	cmp	r3, #5
 80188c8:	dc18      	bgt.n	80188fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80188ca:	f7ff fead 	bl	8018628 <xTaskGetSchedulerState>
 80188ce:	4603      	mov	r3, r0
 80188d0:	2b02      	cmp	r3, #2
 80188d2:	d109      	bne.n	80188e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80188d4:	4b10      	ldr	r3, [pc, #64]	@ (8018918 <xTimerGenericCommand+0x98>)
 80188d6:	6818      	ldr	r0, [r3, #0]
 80188d8:	f107 0110 	add.w	r1, r7, #16
 80188dc:	2300      	movs	r3, #0
 80188de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80188e0:	f7fe fbd8 	bl	8017094 <xQueueGenericSend>
 80188e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80188e6:	e012      	b.n	801890e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80188e8:	4b0b      	ldr	r3, [pc, #44]	@ (8018918 <xTimerGenericCommand+0x98>)
 80188ea:	6818      	ldr	r0, [r3, #0]
 80188ec:	f107 0110 	add.w	r1, r7, #16
 80188f0:	2300      	movs	r3, #0
 80188f2:	2200      	movs	r2, #0
 80188f4:	f7fe fbce 	bl	8017094 <xQueueGenericSend>
 80188f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80188fa:	e008      	b.n	801890e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80188fc:	4b06      	ldr	r3, [pc, #24]	@ (8018918 <xTimerGenericCommand+0x98>)
 80188fe:	6818      	ldr	r0, [r3, #0]
 8018900:	f107 0110 	add.w	r1, r7, #16
 8018904:	2300      	movs	r3, #0
 8018906:	683a      	ldr	r2, [r7, #0]
 8018908:	f7fe fcc6 	bl	8017298 <xQueueGenericSendFromISR>
 801890c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8018910:	4618      	mov	r0, r3
 8018912:	3728      	adds	r7, #40	@ 0x28
 8018914:	46bd      	mov	sp, r7
 8018916:	bd80      	pop	{r7, pc}
 8018918:	200087ac 	.word	0x200087ac

0801891c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801891c:	b580      	push	{r7, lr}
 801891e:	b088      	sub	sp, #32
 8018920:	af02      	add	r7, sp, #8
 8018922:	6078      	str	r0, [r7, #4]
 8018924:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018926:	4b23      	ldr	r3, [pc, #140]	@ (80189b4 <prvProcessExpiredTimer+0x98>)
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	68db      	ldr	r3, [r3, #12]
 801892c:	68db      	ldr	r3, [r3, #12]
 801892e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018930:	697b      	ldr	r3, [r7, #20]
 8018932:	3304      	adds	r3, #4
 8018934:	4618      	mov	r0, r3
 8018936:	f7fe f9f1 	bl	8016d1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801893a:	697b      	ldr	r3, [r7, #20]
 801893c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018940:	f003 0304 	and.w	r3, r3, #4
 8018944:	2b00      	cmp	r3, #0
 8018946:	d023      	beq.n	8018990 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018948:	697b      	ldr	r3, [r7, #20]
 801894a:	699a      	ldr	r2, [r3, #24]
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	18d1      	adds	r1, r2, r3
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	683a      	ldr	r2, [r7, #0]
 8018954:	6978      	ldr	r0, [r7, #20]
 8018956:	f000 f8d5 	bl	8018b04 <prvInsertTimerInActiveList>
 801895a:	4603      	mov	r3, r0
 801895c:	2b00      	cmp	r3, #0
 801895e:	d020      	beq.n	80189a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018960:	2300      	movs	r3, #0
 8018962:	9300      	str	r3, [sp, #0]
 8018964:	2300      	movs	r3, #0
 8018966:	687a      	ldr	r2, [r7, #4]
 8018968:	2100      	movs	r1, #0
 801896a:	6978      	ldr	r0, [r7, #20]
 801896c:	f7ff ff88 	bl	8018880 <xTimerGenericCommand>
 8018970:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018972:	693b      	ldr	r3, [r7, #16]
 8018974:	2b00      	cmp	r3, #0
 8018976:	d114      	bne.n	80189a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8018978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801897c:	f383 8811 	msr	BASEPRI, r3
 8018980:	f3bf 8f6f 	isb	sy
 8018984:	f3bf 8f4f 	dsb	sy
 8018988:	60fb      	str	r3, [r7, #12]
}
 801898a:	bf00      	nop
 801898c:	bf00      	nop
 801898e:	e7fd      	b.n	801898c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018990:	697b      	ldr	r3, [r7, #20]
 8018992:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018996:	f023 0301 	bic.w	r3, r3, #1
 801899a:	b2da      	uxtb	r2, r3
 801899c:	697b      	ldr	r3, [r7, #20]
 801899e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80189a2:	697b      	ldr	r3, [r7, #20]
 80189a4:	6a1b      	ldr	r3, [r3, #32]
 80189a6:	6978      	ldr	r0, [r7, #20]
 80189a8:	4798      	blx	r3
}
 80189aa:	bf00      	nop
 80189ac:	3718      	adds	r7, #24
 80189ae:	46bd      	mov	sp, r7
 80189b0:	bd80      	pop	{r7, pc}
 80189b2:	bf00      	nop
 80189b4:	200087a4 	.word	0x200087a4

080189b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b084      	sub	sp, #16
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80189c0:	f107 0308 	add.w	r3, r7, #8
 80189c4:	4618      	mov	r0, r3
 80189c6:	f000 f859 	bl	8018a7c <prvGetNextExpireTime>
 80189ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80189cc:	68bb      	ldr	r3, [r7, #8]
 80189ce:	4619      	mov	r1, r3
 80189d0:	68f8      	ldr	r0, [r7, #12]
 80189d2:	f000 f805 	bl	80189e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80189d6:	f000 f8d7 	bl	8018b88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80189da:	bf00      	nop
 80189dc:	e7f0      	b.n	80189c0 <prvTimerTask+0x8>
	...

080189e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b084      	sub	sp, #16
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	6078      	str	r0, [r7, #4]
 80189e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80189ea:	f7ff fa29 	bl	8017e40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80189ee:	f107 0308 	add.w	r3, r7, #8
 80189f2:	4618      	mov	r0, r3
 80189f4:	f000 f866 	bl	8018ac4 <prvSampleTimeNow>
 80189f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80189fa:	68bb      	ldr	r3, [r7, #8]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d130      	bne.n	8018a62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018a00:	683b      	ldr	r3, [r7, #0]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d10a      	bne.n	8018a1c <prvProcessTimerOrBlockTask+0x3c>
 8018a06:	687a      	ldr	r2, [r7, #4]
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	429a      	cmp	r2, r3
 8018a0c:	d806      	bhi.n	8018a1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018a0e:	f7ff fa25 	bl	8017e5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018a12:	68f9      	ldr	r1, [r7, #12]
 8018a14:	6878      	ldr	r0, [r7, #4]
 8018a16:	f7ff ff81 	bl	801891c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018a1a:	e024      	b.n	8018a66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018a1c:	683b      	ldr	r3, [r7, #0]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d008      	beq.n	8018a34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018a22:	4b13      	ldr	r3, [pc, #76]	@ (8018a70 <prvProcessTimerOrBlockTask+0x90>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d101      	bne.n	8018a30 <prvProcessTimerOrBlockTask+0x50>
 8018a2c:	2301      	movs	r3, #1
 8018a2e:	e000      	b.n	8018a32 <prvProcessTimerOrBlockTask+0x52>
 8018a30:	2300      	movs	r3, #0
 8018a32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018a34:	4b0f      	ldr	r3, [pc, #60]	@ (8018a74 <prvProcessTimerOrBlockTask+0x94>)
 8018a36:	6818      	ldr	r0, [r3, #0]
 8018a38:	687a      	ldr	r2, [r7, #4]
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	1ad3      	subs	r3, r2, r3
 8018a3e:	683a      	ldr	r2, [r7, #0]
 8018a40:	4619      	mov	r1, r3
 8018a42:	f7fe ff65 	bl	8017910 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018a46:	f7ff fa09 	bl	8017e5c <xTaskResumeAll>
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d10a      	bne.n	8018a66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018a50:	4b09      	ldr	r3, [pc, #36]	@ (8018a78 <prvProcessTimerOrBlockTask+0x98>)
 8018a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018a56:	601a      	str	r2, [r3, #0]
 8018a58:	f3bf 8f4f 	dsb	sy
 8018a5c:	f3bf 8f6f 	isb	sy
}
 8018a60:	e001      	b.n	8018a66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018a62:	f7ff f9fb 	bl	8017e5c <xTaskResumeAll>
}
 8018a66:	bf00      	nop
 8018a68:	3710      	adds	r7, #16
 8018a6a:	46bd      	mov	sp, r7
 8018a6c:	bd80      	pop	{r7, pc}
 8018a6e:	bf00      	nop
 8018a70:	200087a8 	.word	0x200087a8
 8018a74:	200087ac 	.word	0x200087ac
 8018a78:	e000ed04 	.word	0xe000ed04

08018a7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018a7c:	b480      	push	{r7}
 8018a7e:	b085      	sub	sp, #20
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018a84:	4b0e      	ldr	r3, [pc, #56]	@ (8018ac0 <prvGetNextExpireTime+0x44>)
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d101      	bne.n	8018a92 <prvGetNextExpireTime+0x16>
 8018a8e:	2201      	movs	r2, #1
 8018a90:	e000      	b.n	8018a94 <prvGetNextExpireTime+0x18>
 8018a92:	2200      	movs	r2, #0
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d105      	bne.n	8018aac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018aa0:	4b07      	ldr	r3, [pc, #28]	@ (8018ac0 <prvGetNextExpireTime+0x44>)
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	68db      	ldr	r3, [r3, #12]
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	60fb      	str	r3, [r7, #12]
 8018aaa:	e001      	b.n	8018ab0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018aac:	2300      	movs	r3, #0
 8018aae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018ab0:	68fb      	ldr	r3, [r7, #12]
}
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	3714      	adds	r7, #20
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018abc:	4770      	bx	lr
 8018abe:	bf00      	nop
 8018ac0:	200087a4 	.word	0x200087a4

08018ac4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018ac4:	b580      	push	{r7, lr}
 8018ac6:	b084      	sub	sp, #16
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018acc:	f7ff fa64 	bl	8017f98 <xTaskGetTickCount>
 8018ad0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8018b00 <prvSampleTimeNow+0x3c>)
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	68fa      	ldr	r2, [r7, #12]
 8018ad8:	429a      	cmp	r2, r3
 8018ada:	d205      	bcs.n	8018ae8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018adc:	f000 f93a 	bl	8018d54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	2201      	movs	r2, #1
 8018ae4:	601a      	str	r2, [r3, #0]
 8018ae6:	e002      	b.n	8018aee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	2200      	movs	r2, #0
 8018aec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018aee:	4a04      	ldr	r2, [pc, #16]	@ (8018b00 <prvSampleTimeNow+0x3c>)
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018af4:	68fb      	ldr	r3, [r7, #12]
}
 8018af6:	4618      	mov	r0, r3
 8018af8:	3710      	adds	r7, #16
 8018afa:	46bd      	mov	sp, r7
 8018afc:	bd80      	pop	{r7, pc}
 8018afe:	bf00      	nop
 8018b00:	200087b4 	.word	0x200087b4

08018b04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018b04:	b580      	push	{r7, lr}
 8018b06:	b086      	sub	sp, #24
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	60f8      	str	r0, [r7, #12]
 8018b0c:	60b9      	str	r1, [r7, #8]
 8018b0e:	607a      	str	r2, [r7, #4]
 8018b10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018b12:	2300      	movs	r3, #0
 8018b14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	68ba      	ldr	r2, [r7, #8]
 8018b1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	68fa      	ldr	r2, [r7, #12]
 8018b20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018b22:	68ba      	ldr	r2, [r7, #8]
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	429a      	cmp	r2, r3
 8018b28:	d812      	bhi.n	8018b50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018b2a:	687a      	ldr	r2, [r7, #4]
 8018b2c:	683b      	ldr	r3, [r7, #0]
 8018b2e:	1ad2      	subs	r2, r2, r3
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	699b      	ldr	r3, [r3, #24]
 8018b34:	429a      	cmp	r2, r3
 8018b36:	d302      	bcc.n	8018b3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018b38:	2301      	movs	r3, #1
 8018b3a:	617b      	str	r3, [r7, #20]
 8018b3c:	e01b      	b.n	8018b76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018b3e:	4b10      	ldr	r3, [pc, #64]	@ (8018b80 <prvInsertTimerInActiveList+0x7c>)
 8018b40:	681a      	ldr	r2, [r3, #0]
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	3304      	adds	r3, #4
 8018b46:	4619      	mov	r1, r3
 8018b48:	4610      	mov	r0, r2
 8018b4a:	f7fe f8ae 	bl	8016caa <vListInsert>
 8018b4e:	e012      	b.n	8018b76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018b50:	687a      	ldr	r2, [r7, #4]
 8018b52:	683b      	ldr	r3, [r7, #0]
 8018b54:	429a      	cmp	r2, r3
 8018b56:	d206      	bcs.n	8018b66 <prvInsertTimerInActiveList+0x62>
 8018b58:	68ba      	ldr	r2, [r7, #8]
 8018b5a:	683b      	ldr	r3, [r7, #0]
 8018b5c:	429a      	cmp	r2, r3
 8018b5e:	d302      	bcc.n	8018b66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018b60:	2301      	movs	r3, #1
 8018b62:	617b      	str	r3, [r7, #20]
 8018b64:	e007      	b.n	8018b76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018b66:	4b07      	ldr	r3, [pc, #28]	@ (8018b84 <prvInsertTimerInActiveList+0x80>)
 8018b68:	681a      	ldr	r2, [r3, #0]
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	3304      	adds	r3, #4
 8018b6e:	4619      	mov	r1, r3
 8018b70:	4610      	mov	r0, r2
 8018b72:	f7fe f89a 	bl	8016caa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018b76:	697b      	ldr	r3, [r7, #20]
}
 8018b78:	4618      	mov	r0, r3
 8018b7a:	3718      	adds	r7, #24
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	bd80      	pop	{r7, pc}
 8018b80:	200087a8 	.word	0x200087a8
 8018b84:	200087a4 	.word	0x200087a4

08018b88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018b88:	b580      	push	{r7, lr}
 8018b8a:	b08e      	sub	sp, #56	@ 0x38
 8018b8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018b8e:	e0ce      	b.n	8018d2e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	da19      	bge.n	8018bca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018b96:	1d3b      	adds	r3, r7, #4
 8018b98:	3304      	adds	r3, #4
 8018b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d10b      	bne.n	8018bba <prvProcessReceivedCommands+0x32>
	__asm volatile
 8018ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ba6:	f383 8811 	msr	BASEPRI, r3
 8018baa:	f3bf 8f6f 	isb	sy
 8018bae:	f3bf 8f4f 	dsb	sy
 8018bb2:	61fb      	str	r3, [r7, #28]
}
 8018bb4:	bf00      	nop
 8018bb6:	bf00      	nop
 8018bb8:	e7fd      	b.n	8018bb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018bc0:	6850      	ldr	r0, [r2, #4]
 8018bc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018bc4:	6892      	ldr	r2, [r2, #8]
 8018bc6:	4611      	mov	r1, r2
 8018bc8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	f2c0 80ae 	blt.w	8018d2e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bd8:	695b      	ldr	r3, [r3, #20]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d004      	beq.n	8018be8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018be0:	3304      	adds	r3, #4
 8018be2:	4618      	mov	r0, r3
 8018be4:	f7fe f89a 	bl	8016d1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018be8:	463b      	mov	r3, r7
 8018bea:	4618      	mov	r0, r3
 8018bec:	f7ff ff6a 	bl	8018ac4 <prvSampleTimeNow>
 8018bf0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	2b09      	cmp	r3, #9
 8018bf6:	f200 8097 	bhi.w	8018d28 <prvProcessReceivedCommands+0x1a0>
 8018bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8018c00 <prvProcessReceivedCommands+0x78>)
 8018bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c00:	08018c29 	.word	0x08018c29
 8018c04:	08018c29 	.word	0x08018c29
 8018c08:	08018c29 	.word	0x08018c29
 8018c0c:	08018c9f 	.word	0x08018c9f
 8018c10:	08018cb3 	.word	0x08018cb3
 8018c14:	08018cff 	.word	0x08018cff
 8018c18:	08018c29 	.word	0x08018c29
 8018c1c:	08018c29 	.word	0x08018c29
 8018c20:	08018c9f 	.word	0x08018c9f
 8018c24:	08018cb3 	.word	0x08018cb3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018c2e:	f043 0301 	orr.w	r3, r3, #1
 8018c32:	b2da      	uxtb	r2, r3
 8018c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018c3a:	68ba      	ldr	r2, [r7, #8]
 8018c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c3e:	699b      	ldr	r3, [r3, #24]
 8018c40:	18d1      	adds	r1, r2, r3
 8018c42:	68bb      	ldr	r3, [r7, #8]
 8018c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018c46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c48:	f7ff ff5c 	bl	8018b04 <prvInsertTimerInActiveList>
 8018c4c:	4603      	mov	r3, r0
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d06c      	beq.n	8018d2c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c54:	6a1b      	ldr	r3, [r3, #32]
 8018c56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018c60:	f003 0304 	and.w	r3, r3, #4
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d061      	beq.n	8018d2c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018c68:	68ba      	ldr	r2, [r7, #8]
 8018c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c6c:	699b      	ldr	r3, [r3, #24]
 8018c6e:	441a      	add	r2, r3
 8018c70:	2300      	movs	r3, #0
 8018c72:	9300      	str	r3, [sp, #0]
 8018c74:	2300      	movs	r3, #0
 8018c76:	2100      	movs	r1, #0
 8018c78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c7a:	f7ff fe01 	bl	8018880 <xTimerGenericCommand>
 8018c7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018c80:	6a3b      	ldr	r3, [r7, #32]
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d152      	bne.n	8018d2c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8018c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c8a:	f383 8811 	msr	BASEPRI, r3
 8018c8e:	f3bf 8f6f 	isb	sy
 8018c92:	f3bf 8f4f 	dsb	sy
 8018c96:	61bb      	str	r3, [r7, #24]
}
 8018c98:	bf00      	nop
 8018c9a:	bf00      	nop
 8018c9c:	e7fd      	b.n	8018c9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018ca4:	f023 0301 	bic.w	r3, r3, #1
 8018ca8:	b2da      	uxtb	r2, r3
 8018caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8018cb0:	e03d      	b.n	8018d2e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018cb8:	f043 0301 	orr.w	r3, r3, #1
 8018cbc:	b2da      	uxtb	r2, r3
 8018cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018cc4:	68ba      	ldr	r2, [r7, #8]
 8018cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cc8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ccc:	699b      	ldr	r3, [r3, #24]
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d10b      	bne.n	8018cea <prvProcessReceivedCommands+0x162>
	__asm volatile
 8018cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018cd6:	f383 8811 	msr	BASEPRI, r3
 8018cda:	f3bf 8f6f 	isb	sy
 8018cde:	f3bf 8f4f 	dsb	sy
 8018ce2:	617b      	str	r3, [r7, #20]
}
 8018ce4:	bf00      	nop
 8018ce6:	bf00      	nop
 8018ce8:	e7fd      	b.n	8018ce6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cec:	699a      	ldr	r2, [r3, #24]
 8018cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cf0:	18d1      	adds	r1, r2, r3
 8018cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018cf8:	f7ff ff04 	bl	8018b04 <prvInsertTimerInActiveList>
					break;
 8018cfc:	e017      	b.n	8018d2e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018d04:	f003 0302 	and.w	r3, r3, #2
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d103      	bne.n	8018d14 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8018d0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018d0e:	f000 fbeb 	bl	80194e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018d12:	e00c      	b.n	8018d2e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018d1a:	f023 0301 	bic.w	r3, r3, #1
 8018d1e:	b2da      	uxtb	r2, r3
 8018d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8018d26:	e002      	b.n	8018d2e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8018d28:	bf00      	nop
 8018d2a:	e000      	b.n	8018d2e <prvProcessReceivedCommands+0x1a6>
					break;
 8018d2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018d2e:	4b08      	ldr	r3, [pc, #32]	@ (8018d50 <prvProcessReceivedCommands+0x1c8>)
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	1d39      	adds	r1, r7, #4
 8018d34:	2200      	movs	r2, #0
 8018d36:	4618      	mov	r0, r3
 8018d38:	f7fe fb4c 	bl	80173d4 <xQueueReceive>
 8018d3c:	4603      	mov	r3, r0
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	f47f af26 	bne.w	8018b90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8018d44:	bf00      	nop
 8018d46:	bf00      	nop
 8018d48:	3730      	adds	r7, #48	@ 0x30
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	bd80      	pop	{r7, pc}
 8018d4e:	bf00      	nop
 8018d50:	200087ac 	.word	0x200087ac

08018d54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b088      	sub	sp, #32
 8018d58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018d5a:	e049      	b.n	8018df0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8018e18 <prvSwitchTimerLists+0xc4>)
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	68db      	ldr	r3, [r3, #12]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018d66:	4b2c      	ldr	r3, [pc, #176]	@ (8018e18 <prvSwitchTimerLists+0xc4>)
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	68db      	ldr	r3, [r3, #12]
 8018d6c:	68db      	ldr	r3, [r3, #12]
 8018d6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	3304      	adds	r3, #4
 8018d74:	4618      	mov	r0, r3
 8018d76:	f7fd ffd1 	bl	8016d1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	6a1b      	ldr	r3, [r3, #32]
 8018d7e:	68f8      	ldr	r0, [r7, #12]
 8018d80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018d88:	f003 0304 	and.w	r3, r3, #4
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d02f      	beq.n	8018df0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	699b      	ldr	r3, [r3, #24]
 8018d94:	693a      	ldr	r2, [r7, #16]
 8018d96:	4413      	add	r3, r2
 8018d98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018d9a:	68ba      	ldr	r2, [r7, #8]
 8018d9c:	693b      	ldr	r3, [r7, #16]
 8018d9e:	429a      	cmp	r2, r3
 8018da0:	d90e      	bls.n	8018dc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	68ba      	ldr	r2, [r7, #8]
 8018da6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	68fa      	ldr	r2, [r7, #12]
 8018dac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018dae:	4b1a      	ldr	r3, [pc, #104]	@ (8018e18 <prvSwitchTimerLists+0xc4>)
 8018db0:	681a      	ldr	r2, [r3, #0]
 8018db2:	68fb      	ldr	r3, [r7, #12]
 8018db4:	3304      	adds	r3, #4
 8018db6:	4619      	mov	r1, r3
 8018db8:	4610      	mov	r0, r2
 8018dba:	f7fd ff76 	bl	8016caa <vListInsert>
 8018dbe:	e017      	b.n	8018df0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018dc0:	2300      	movs	r3, #0
 8018dc2:	9300      	str	r3, [sp, #0]
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	693a      	ldr	r2, [r7, #16]
 8018dc8:	2100      	movs	r1, #0
 8018dca:	68f8      	ldr	r0, [r7, #12]
 8018dcc:	f7ff fd58 	bl	8018880 <xTimerGenericCommand>
 8018dd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d10b      	bne.n	8018df0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8018dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ddc:	f383 8811 	msr	BASEPRI, r3
 8018de0:	f3bf 8f6f 	isb	sy
 8018de4:	f3bf 8f4f 	dsb	sy
 8018de8:	603b      	str	r3, [r7, #0]
}
 8018dea:	bf00      	nop
 8018dec:	bf00      	nop
 8018dee:	e7fd      	b.n	8018dec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018df0:	4b09      	ldr	r3, [pc, #36]	@ (8018e18 <prvSwitchTimerLists+0xc4>)
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d1b0      	bne.n	8018d5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018dfa:	4b07      	ldr	r3, [pc, #28]	@ (8018e18 <prvSwitchTimerLists+0xc4>)
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018e00:	4b06      	ldr	r3, [pc, #24]	@ (8018e1c <prvSwitchTimerLists+0xc8>)
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	4a04      	ldr	r2, [pc, #16]	@ (8018e18 <prvSwitchTimerLists+0xc4>)
 8018e06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018e08:	4a04      	ldr	r2, [pc, #16]	@ (8018e1c <prvSwitchTimerLists+0xc8>)
 8018e0a:	697b      	ldr	r3, [r7, #20]
 8018e0c:	6013      	str	r3, [r2, #0]
}
 8018e0e:	bf00      	nop
 8018e10:	3718      	adds	r7, #24
 8018e12:	46bd      	mov	sp, r7
 8018e14:	bd80      	pop	{r7, pc}
 8018e16:	bf00      	nop
 8018e18:	200087a4 	.word	0x200087a4
 8018e1c:	200087a8 	.word	0x200087a8

08018e20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b082      	sub	sp, #8
 8018e24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018e26:	f000 f96f 	bl	8019108 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018e2a:	4b15      	ldr	r3, [pc, #84]	@ (8018e80 <prvCheckForValidListAndQueue+0x60>)
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d120      	bne.n	8018e74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018e32:	4814      	ldr	r0, [pc, #80]	@ (8018e84 <prvCheckForValidListAndQueue+0x64>)
 8018e34:	f7fd fee8 	bl	8016c08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018e38:	4813      	ldr	r0, [pc, #76]	@ (8018e88 <prvCheckForValidListAndQueue+0x68>)
 8018e3a:	f7fd fee5 	bl	8016c08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018e3e:	4b13      	ldr	r3, [pc, #76]	@ (8018e8c <prvCheckForValidListAndQueue+0x6c>)
 8018e40:	4a10      	ldr	r2, [pc, #64]	@ (8018e84 <prvCheckForValidListAndQueue+0x64>)
 8018e42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018e44:	4b12      	ldr	r3, [pc, #72]	@ (8018e90 <prvCheckForValidListAndQueue+0x70>)
 8018e46:	4a10      	ldr	r2, [pc, #64]	@ (8018e88 <prvCheckForValidListAndQueue+0x68>)
 8018e48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018e4a:	2300      	movs	r3, #0
 8018e4c:	9300      	str	r3, [sp, #0]
 8018e4e:	4b11      	ldr	r3, [pc, #68]	@ (8018e94 <prvCheckForValidListAndQueue+0x74>)
 8018e50:	4a11      	ldr	r2, [pc, #68]	@ (8018e98 <prvCheckForValidListAndQueue+0x78>)
 8018e52:	2110      	movs	r1, #16
 8018e54:	200a      	movs	r0, #10
 8018e56:	f7fd fff5 	bl	8016e44 <xQueueGenericCreateStatic>
 8018e5a:	4603      	mov	r3, r0
 8018e5c:	4a08      	ldr	r2, [pc, #32]	@ (8018e80 <prvCheckForValidListAndQueue+0x60>)
 8018e5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018e60:	4b07      	ldr	r3, [pc, #28]	@ (8018e80 <prvCheckForValidListAndQueue+0x60>)
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d005      	beq.n	8018e74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018e68:	4b05      	ldr	r3, [pc, #20]	@ (8018e80 <prvCheckForValidListAndQueue+0x60>)
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	490b      	ldr	r1, [pc, #44]	@ (8018e9c <prvCheckForValidListAndQueue+0x7c>)
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f7fe fd24 	bl	80178bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018e74:	f000 f97a 	bl	801916c <vPortExitCritical>
}
 8018e78:	bf00      	nop
 8018e7a:	46bd      	mov	sp, r7
 8018e7c:	bd80      	pop	{r7, pc}
 8018e7e:	bf00      	nop
 8018e80:	200087ac 	.word	0x200087ac
 8018e84:	2000877c 	.word	0x2000877c
 8018e88:	20008790 	.word	0x20008790
 8018e8c:	200087a4 	.word	0x200087a4
 8018e90:	200087a8 	.word	0x200087a8
 8018e94:	20008858 	.word	0x20008858
 8018e98:	200087b8 	.word	0x200087b8
 8018e9c:	0801a98c 	.word	0x0801a98c

08018ea0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018ea0:	b480      	push	{r7}
 8018ea2:	b085      	sub	sp, #20
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	60f8      	str	r0, [r7, #12]
 8018ea8:	60b9      	str	r1, [r7, #8]
 8018eaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	3b04      	subs	r3, #4
 8018eb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8018eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	3b04      	subs	r3, #4
 8018ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018ec0:	68bb      	ldr	r3, [r7, #8]
 8018ec2:	f023 0201 	bic.w	r2, r3, #1
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	3b04      	subs	r3, #4
 8018ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8018f04 <pxPortInitialiseStack+0x64>)
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	3b14      	subs	r3, #20
 8018eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018edc:	687a      	ldr	r2, [r7, #4]
 8018ede:	68fb      	ldr	r3, [r7, #12]
 8018ee0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018ee2:	68fb      	ldr	r3, [r7, #12]
 8018ee4:	3b04      	subs	r3, #4
 8018ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018ee8:	68fb      	ldr	r3, [r7, #12]
 8018eea:	f06f 0202 	mvn.w	r2, #2
 8018eee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	3b20      	subs	r3, #32
 8018ef4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018ef6:	68fb      	ldr	r3, [r7, #12]
}
 8018ef8:	4618      	mov	r0, r3
 8018efa:	3714      	adds	r7, #20
 8018efc:	46bd      	mov	sp, r7
 8018efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f02:	4770      	bx	lr
 8018f04:	08018f09 	.word	0x08018f09

08018f08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018f08:	b480      	push	{r7}
 8018f0a:	b085      	sub	sp, #20
 8018f0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018f0e:	2300      	movs	r3, #0
 8018f10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018f12:	4b13      	ldr	r3, [pc, #76]	@ (8018f60 <prvTaskExitError+0x58>)
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f1a:	d00b      	beq.n	8018f34 <prvTaskExitError+0x2c>
	__asm volatile
 8018f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f20:	f383 8811 	msr	BASEPRI, r3
 8018f24:	f3bf 8f6f 	isb	sy
 8018f28:	f3bf 8f4f 	dsb	sy
 8018f2c:	60fb      	str	r3, [r7, #12]
}
 8018f2e:	bf00      	nop
 8018f30:	bf00      	nop
 8018f32:	e7fd      	b.n	8018f30 <prvTaskExitError+0x28>
	__asm volatile
 8018f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f38:	f383 8811 	msr	BASEPRI, r3
 8018f3c:	f3bf 8f6f 	isb	sy
 8018f40:	f3bf 8f4f 	dsb	sy
 8018f44:	60bb      	str	r3, [r7, #8]
}
 8018f46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018f48:	bf00      	nop
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d0fc      	beq.n	8018f4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018f50:	bf00      	nop
 8018f52:	bf00      	nop
 8018f54:	3714      	adds	r7, #20
 8018f56:	46bd      	mov	sp, r7
 8018f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f5c:	4770      	bx	lr
 8018f5e:	bf00      	nop
 8018f60:	20000078 	.word	0x20000078
	...

08018f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018f70:	4b07      	ldr	r3, [pc, #28]	@ (8018f90 <pxCurrentTCBConst2>)
 8018f72:	6819      	ldr	r1, [r3, #0]
 8018f74:	6808      	ldr	r0, [r1, #0]
 8018f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f7a:	f380 8809 	msr	PSP, r0
 8018f7e:	f3bf 8f6f 	isb	sy
 8018f82:	f04f 0000 	mov.w	r0, #0
 8018f86:	f380 8811 	msr	BASEPRI, r0
 8018f8a:	4770      	bx	lr
 8018f8c:	f3af 8000 	nop.w

08018f90 <pxCurrentTCBConst2>:
 8018f90:	2000827c 	.word	0x2000827c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018f94:	bf00      	nop
 8018f96:	bf00      	nop

08018f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018f98:	4808      	ldr	r0, [pc, #32]	@ (8018fbc <prvPortStartFirstTask+0x24>)
 8018f9a:	6800      	ldr	r0, [r0, #0]
 8018f9c:	6800      	ldr	r0, [r0, #0]
 8018f9e:	f380 8808 	msr	MSP, r0
 8018fa2:	f04f 0000 	mov.w	r0, #0
 8018fa6:	f380 8814 	msr	CONTROL, r0
 8018faa:	b662      	cpsie	i
 8018fac:	b661      	cpsie	f
 8018fae:	f3bf 8f4f 	dsb	sy
 8018fb2:	f3bf 8f6f 	isb	sy
 8018fb6:	df00      	svc	0
 8018fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018fba:	bf00      	nop
 8018fbc:	e000ed08 	.word	0xe000ed08

08018fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b086      	sub	sp, #24
 8018fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018fc6:	4b47      	ldr	r3, [pc, #284]	@ (80190e4 <xPortStartScheduler+0x124>)
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	4a47      	ldr	r2, [pc, #284]	@ (80190e8 <xPortStartScheduler+0x128>)
 8018fcc:	4293      	cmp	r3, r2
 8018fce:	d10b      	bne.n	8018fe8 <xPortStartScheduler+0x28>
	__asm volatile
 8018fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018fd4:	f383 8811 	msr	BASEPRI, r3
 8018fd8:	f3bf 8f6f 	isb	sy
 8018fdc:	f3bf 8f4f 	dsb	sy
 8018fe0:	613b      	str	r3, [r7, #16]
}
 8018fe2:	bf00      	nop
 8018fe4:	bf00      	nop
 8018fe6:	e7fd      	b.n	8018fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80190e4 <xPortStartScheduler+0x124>)
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	4a3f      	ldr	r2, [pc, #252]	@ (80190ec <xPortStartScheduler+0x12c>)
 8018fee:	4293      	cmp	r3, r2
 8018ff0:	d10b      	bne.n	801900a <xPortStartScheduler+0x4a>
	__asm volatile
 8018ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ff6:	f383 8811 	msr	BASEPRI, r3
 8018ffa:	f3bf 8f6f 	isb	sy
 8018ffe:	f3bf 8f4f 	dsb	sy
 8019002:	60fb      	str	r3, [r7, #12]
}
 8019004:	bf00      	nop
 8019006:	bf00      	nop
 8019008:	e7fd      	b.n	8019006 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801900a:	4b39      	ldr	r3, [pc, #228]	@ (80190f0 <xPortStartScheduler+0x130>)
 801900c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801900e:	697b      	ldr	r3, [r7, #20]
 8019010:	781b      	ldrb	r3, [r3, #0]
 8019012:	b2db      	uxtb	r3, r3
 8019014:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019016:	697b      	ldr	r3, [r7, #20]
 8019018:	22ff      	movs	r2, #255	@ 0xff
 801901a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801901c:	697b      	ldr	r3, [r7, #20]
 801901e:	781b      	ldrb	r3, [r3, #0]
 8019020:	b2db      	uxtb	r3, r3
 8019022:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019024:	78fb      	ldrb	r3, [r7, #3]
 8019026:	b2db      	uxtb	r3, r3
 8019028:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801902c:	b2da      	uxtb	r2, r3
 801902e:	4b31      	ldr	r3, [pc, #196]	@ (80190f4 <xPortStartScheduler+0x134>)
 8019030:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019032:	4b31      	ldr	r3, [pc, #196]	@ (80190f8 <xPortStartScheduler+0x138>)
 8019034:	2207      	movs	r2, #7
 8019036:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019038:	e009      	b.n	801904e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801903a:	4b2f      	ldr	r3, [pc, #188]	@ (80190f8 <xPortStartScheduler+0x138>)
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	3b01      	subs	r3, #1
 8019040:	4a2d      	ldr	r2, [pc, #180]	@ (80190f8 <xPortStartScheduler+0x138>)
 8019042:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019044:	78fb      	ldrb	r3, [r7, #3]
 8019046:	b2db      	uxtb	r3, r3
 8019048:	005b      	lsls	r3, r3, #1
 801904a:	b2db      	uxtb	r3, r3
 801904c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801904e:	78fb      	ldrb	r3, [r7, #3]
 8019050:	b2db      	uxtb	r3, r3
 8019052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019056:	2b80      	cmp	r3, #128	@ 0x80
 8019058:	d0ef      	beq.n	801903a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801905a:	4b27      	ldr	r3, [pc, #156]	@ (80190f8 <xPortStartScheduler+0x138>)
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	f1c3 0307 	rsb	r3, r3, #7
 8019062:	2b04      	cmp	r3, #4
 8019064:	d00b      	beq.n	801907e <xPortStartScheduler+0xbe>
	__asm volatile
 8019066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801906a:	f383 8811 	msr	BASEPRI, r3
 801906e:	f3bf 8f6f 	isb	sy
 8019072:	f3bf 8f4f 	dsb	sy
 8019076:	60bb      	str	r3, [r7, #8]
}
 8019078:	bf00      	nop
 801907a:	bf00      	nop
 801907c:	e7fd      	b.n	801907a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801907e:	4b1e      	ldr	r3, [pc, #120]	@ (80190f8 <xPortStartScheduler+0x138>)
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	021b      	lsls	r3, r3, #8
 8019084:	4a1c      	ldr	r2, [pc, #112]	@ (80190f8 <xPortStartScheduler+0x138>)
 8019086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019088:	4b1b      	ldr	r3, [pc, #108]	@ (80190f8 <xPortStartScheduler+0x138>)
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8019090:	4a19      	ldr	r2, [pc, #100]	@ (80190f8 <xPortStartScheduler+0x138>)
 8019092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	b2da      	uxtb	r2, r3
 8019098:	697b      	ldr	r3, [r7, #20]
 801909a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801909c:	4b17      	ldr	r3, [pc, #92]	@ (80190fc <xPortStartScheduler+0x13c>)
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	4a16      	ldr	r2, [pc, #88]	@ (80190fc <xPortStartScheduler+0x13c>)
 80190a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80190a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80190a8:	4b14      	ldr	r3, [pc, #80]	@ (80190fc <xPortStartScheduler+0x13c>)
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	4a13      	ldr	r2, [pc, #76]	@ (80190fc <xPortStartScheduler+0x13c>)
 80190ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80190b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80190b4:	f000 f8da 	bl	801926c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80190b8:	4b11      	ldr	r3, [pc, #68]	@ (8019100 <xPortStartScheduler+0x140>)
 80190ba:	2200      	movs	r2, #0
 80190bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80190be:	f000 f8f9 	bl	80192b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80190c2:	4b10      	ldr	r3, [pc, #64]	@ (8019104 <xPortStartScheduler+0x144>)
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	4a0f      	ldr	r2, [pc, #60]	@ (8019104 <xPortStartScheduler+0x144>)
 80190c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80190cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80190ce:	f7ff ff63 	bl	8018f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80190d2:	f7ff f82b 	bl	801812c <vTaskSwitchContext>
	prvTaskExitError();
 80190d6:	f7ff ff17 	bl	8018f08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80190da:	2300      	movs	r3, #0
}
 80190dc:	4618      	mov	r0, r3
 80190de:	3718      	adds	r7, #24
 80190e0:	46bd      	mov	sp, r7
 80190e2:	bd80      	pop	{r7, pc}
 80190e4:	e000ed00 	.word	0xe000ed00
 80190e8:	410fc271 	.word	0x410fc271
 80190ec:	410fc270 	.word	0x410fc270
 80190f0:	e000e400 	.word	0xe000e400
 80190f4:	200088a8 	.word	0x200088a8
 80190f8:	200088ac 	.word	0x200088ac
 80190fc:	e000ed20 	.word	0xe000ed20
 8019100:	20000078 	.word	0x20000078
 8019104:	e000ef34 	.word	0xe000ef34

08019108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019108:	b480      	push	{r7}
 801910a:	b083      	sub	sp, #12
 801910c:	af00      	add	r7, sp, #0
	__asm volatile
 801910e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019112:	f383 8811 	msr	BASEPRI, r3
 8019116:	f3bf 8f6f 	isb	sy
 801911a:	f3bf 8f4f 	dsb	sy
 801911e:	607b      	str	r3, [r7, #4]
}
 8019120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019122:	4b10      	ldr	r3, [pc, #64]	@ (8019164 <vPortEnterCritical+0x5c>)
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	3301      	adds	r3, #1
 8019128:	4a0e      	ldr	r2, [pc, #56]	@ (8019164 <vPortEnterCritical+0x5c>)
 801912a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801912c:	4b0d      	ldr	r3, [pc, #52]	@ (8019164 <vPortEnterCritical+0x5c>)
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	2b01      	cmp	r3, #1
 8019132:	d110      	bne.n	8019156 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019134:	4b0c      	ldr	r3, [pc, #48]	@ (8019168 <vPortEnterCritical+0x60>)
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	b2db      	uxtb	r3, r3
 801913a:	2b00      	cmp	r3, #0
 801913c:	d00b      	beq.n	8019156 <vPortEnterCritical+0x4e>
	__asm volatile
 801913e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019142:	f383 8811 	msr	BASEPRI, r3
 8019146:	f3bf 8f6f 	isb	sy
 801914a:	f3bf 8f4f 	dsb	sy
 801914e:	603b      	str	r3, [r7, #0]
}
 8019150:	bf00      	nop
 8019152:	bf00      	nop
 8019154:	e7fd      	b.n	8019152 <vPortEnterCritical+0x4a>
	}
}
 8019156:	bf00      	nop
 8019158:	370c      	adds	r7, #12
 801915a:	46bd      	mov	sp, r7
 801915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019160:	4770      	bx	lr
 8019162:	bf00      	nop
 8019164:	20000078 	.word	0x20000078
 8019168:	e000ed04 	.word	0xe000ed04

0801916c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801916c:	b480      	push	{r7}
 801916e:	b083      	sub	sp, #12
 8019170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019172:	4b12      	ldr	r3, [pc, #72]	@ (80191bc <vPortExitCritical+0x50>)
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d10b      	bne.n	8019192 <vPortExitCritical+0x26>
	__asm volatile
 801917a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801917e:	f383 8811 	msr	BASEPRI, r3
 8019182:	f3bf 8f6f 	isb	sy
 8019186:	f3bf 8f4f 	dsb	sy
 801918a:	607b      	str	r3, [r7, #4]
}
 801918c:	bf00      	nop
 801918e:	bf00      	nop
 8019190:	e7fd      	b.n	801918e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019192:	4b0a      	ldr	r3, [pc, #40]	@ (80191bc <vPortExitCritical+0x50>)
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	3b01      	subs	r3, #1
 8019198:	4a08      	ldr	r2, [pc, #32]	@ (80191bc <vPortExitCritical+0x50>)
 801919a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801919c:	4b07      	ldr	r3, [pc, #28]	@ (80191bc <vPortExitCritical+0x50>)
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d105      	bne.n	80191b0 <vPortExitCritical+0x44>
 80191a4:	2300      	movs	r3, #0
 80191a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80191a8:	683b      	ldr	r3, [r7, #0]
 80191aa:	f383 8811 	msr	BASEPRI, r3
}
 80191ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80191b0:	bf00      	nop
 80191b2:	370c      	adds	r7, #12
 80191b4:	46bd      	mov	sp, r7
 80191b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ba:	4770      	bx	lr
 80191bc:	20000078 	.word	0x20000078

080191c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80191c0:	f3ef 8009 	mrs	r0, PSP
 80191c4:	f3bf 8f6f 	isb	sy
 80191c8:	4b15      	ldr	r3, [pc, #84]	@ (8019220 <pxCurrentTCBConst>)
 80191ca:	681a      	ldr	r2, [r3, #0]
 80191cc:	f01e 0f10 	tst.w	lr, #16
 80191d0:	bf08      	it	eq
 80191d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80191d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191da:	6010      	str	r0, [r2, #0]
 80191dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80191e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80191e4:	f380 8811 	msr	BASEPRI, r0
 80191e8:	f3bf 8f4f 	dsb	sy
 80191ec:	f3bf 8f6f 	isb	sy
 80191f0:	f7fe ff9c 	bl	801812c <vTaskSwitchContext>
 80191f4:	f04f 0000 	mov.w	r0, #0
 80191f8:	f380 8811 	msr	BASEPRI, r0
 80191fc:	bc09      	pop	{r0, r3}
 80191fe:	6819      	ldr	r1, [r3, #0]
 8019200:	6808      	ldr	r0, [r1, #0]
 8019202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019206:	f01e 0f10 	tst.w	lr, #16
 801920a:	bf08      	it	eq
 801920c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019210:	f380 8809 	msr	PSP, r0
 8019214:	f3bf 8f6f 	isb	sy
 8019218:	4770      	bx	lr
 801921a:	bf00      	nop
 801921c:	f3af 8000 	nop.w

08019220 <pxCurrentTCBConst>:
 8019220:	2000827c 	.word	0x2000827c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019224:	bf00      	nop
 8019226:	bf00      	nop

08019228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019228:	b580      	push	{r7, lr}
 801922a:	b082      	sub	sp, #8
 801922c:	af00      	add	r7, sp, #0
	__asm volatile
 801922e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019232:	f383 8811 	msr	BASEPRI, r3
 8019236:	f3bf 8f6f 	isb	sy
 801923a:	f3bf 8f4f 	dsb	sy
 801923e:	607b      	str	r3, [r7, #4]
}
 8019240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019242:	f7fe feb9 	bl	8017fb8 <xTaskIncrementTick>
 8019246:	4603      	mov	r3, r0
 8019248:	2b00      	cmp	r3, #0
 801924a:	d003      	beq.n	8019254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801924c:	4b06      	ldr	r3, [pc, #24]	@ (8019268 <xPortSysTickHandler+0x40>)
 801924e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019252:	601a      	str	r2, [r3, #0]
 8019254:	2300      	movs	r3, #0
 8019256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019258:	683b      	ldr	r3, [r7, #0]
 801925a:	f383 8811 	msr	BASEPRI, r3
}
 801925e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019260:	bf00      	nop
 8019262:	3708      	adds	r7, #8
 8019264:	46bd      	mov	sp, r7
 8019266:	bd80      	pop	{r7, pc}
 8019268:	e000ed04 	.word	0xe000ed04

0801926c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801926c:	b480      	push	{r7}
 801926e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019270:	4b0b      	ldr	r3, [pc, #44]	@ (80192a0 <vPortSetupTimerInterrupt+0x34>)
 8019272:	2200      	movs	r2, #0
 8019274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019276:	4b0b      	ldr	r3, [pc, #44]	@ (80192a4 <vPortSetupTimerInterrupt+0x38>)
 8019278:	2200      	movs	r2, #0
 801927a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801927c:	4b0a      	ldr	r3, [pc, #40]	@ (80192a8 <vPortSetupTimerInterrupt+0x3c>)
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	4a0a      	ldr	r2, [pc, #40]	@ (80192ac <vPortSetupTimerInterrupt+0x40>)
 8019282:	fba2 2303 	umull	r2, r3, r2, r3
 8019286:	099b      	lsrs	r3, r3, #6
 8019288:	4a09      	ldr	r2, [pc, #36]	@ (80192b0 <vPortSetupTimerInterrupt+0x44>)
 801928a:	3b01      	subs	r3, #1
 801928c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801928e:	4b04      	ldr	r3, [pc, #16]	@ (80192a0 <vPortSetupTimerInterrupt+0x34>)
 8019290:	2207      	movs	r2, #7
 8019292:	601a      	str	r2, [r3, #0]
}
 8019294:	bf00      	nop
 8019296:	46bd      	mov	sp, r7
 8019298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801929c:	4770      	bx	lr
 801929e:	bf00      	nop
 80192a0:	e000e010 	.word	0xe000e010
 80192a4:	e000e018 	.word	0xe000e018
 80192a8:	20000008 	.word	0x20000008
 80192ac:	10624dd3 	.word	0x10624dd3
 80192b0:	e000e014 	.word	0xe000e014

080192b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80192b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80192c4 <vPortEnableVFP+0x10>
 80192b8:	6801      	ldr	r1, [r0, #0]
 80192ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80192be:	6001      	str	r1, [r0, #0]
 80192c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80192c2:	bf00      	nop
 80192c4:	e000ed88 	.word	0xe000ed88

080192c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80192c8:	b480      	push	{r7}
 80192ca:	b085      	sub	sp, #20
 80192cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80192ce:	f3ef 8305 	mrs	r3, IPSR
 80192d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80192d4:	68fb      	ldr	r3, [r7, #12]
 80192d6:	2b0f      	cmp	r3, #15
 80192d8:	d915      	bls.n	8019306 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80192da:	4a18      	ldr	r2, [pc, #96]	@ (801933c <vPortValidateInterruptPriority+0x74>)
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	4413      	add	r3, r2
 80192e0:	781b      	ldrb	r3, [r3, #0]
 80192e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80192e4:	4b16      	ldr	r3, [pc, #88]	@ (8019340 <vPortValidateInterruptPriority+0x78>)
 80192e6:	781b      	ldrb	r3, [r3, #0]
 80192e8:	7afa      	ldrb	r2, [r7, #11]
 80192ea:	429a      	cmp	r2, r3
 80192ec:	d20b      	bcs.n	8019306 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80192ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192f2:	f383 8811 	msr	BASEPRI, r3
 80192f6:	f3bf 8f6f 	isb	sy
 80192fa:	f3bf 8f4f 	dsb	sy
 80192fe:	607b      	str	r3, [r7, #4]
}
 8019300:	bf00      	nop
 8019302:	bf00      	nop
 8019304:	e7fd      	b.n	8019302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019306:	4b0f      	ldr	r3, [pc, #60]	@ (8019344 <vPortValidateInterruptPriority+0x7c>)
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801930e:	4b0e      	ldr	r3, [pc, #56]	@ (8019348 <vPortValidateInterruptPriority+0x80>)
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	429a      	cmp	r2, r3
 8019314:	d90b      	bls.n	801932e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8019316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801931a:	f383 8811 	msr	BASEPRI, r3
 801931e:	f3bf 8f6f 	isb	sy
 8019322:	f3bf 8f4f 	dsb	sy
 8019326:	603b      	str	r3, [r7, #0]
}
 8019328:	bf00      	nop
 801932a:	bf00      	nop
 801932c:	e7fd      	b.n	801932a <vPortValidateInterruptPriority+0x62>
	}
 801932e:	bf00      	nop
 8019330:	3714      	adds	r7, #20
 8019332:	46bd      	mov	sp, r7
 8019334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019338:	4770      	bx	lr
 801933a:	bf00      	nop
 801933c:	e000e3f0 	.word	0xe000e3f0
 8019340:	200088a8 	.word	0x200088a8
 8019344:	e000ed0c 	.word	0xe000ed0c
 8019348:	200088ac 	.word	0x200088ac

0801934c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801934c:	b580      	push	{r7, lr}
 801934e:	b08a      	sub	sp, #40	@ 0x28
 8019350:	af00      	add	r7, sp, #0
 8019352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019354:	2300      	movs	r3, #0
 8019356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019358:	f7fe fd72 	bl	8017e40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801935c:	4b5c      	ldr	r3, [pc, #368]	@ (80194d0 <pvPortMalloc+0x184>)
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d101      	bne.n	8019368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019364:	f000 f924 	bl	80195b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019368:	4b5a      	ldr	r3, [pc, #360]	@ (80194d4 <pvPortMalloc+0x188>)
 801936a:	681a      	ldr	r2, [r3, #0]
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	4013      	ands	r3, r2
 8019370:	2b00      	cmp	r3, #0
 8019372:	f040 8095 	bne.w	80194a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	2b00      	cmp	r3, #0
 801937a:	d01e      	beq.n	80193ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801937c:	2208      	movs	r2, #8
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	4413      	add	r3, r2
 8019382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	f003 0307 	and.w	r3, r3, #7
 801938a:	2b00      	cmp	r3, #0
 801938c:	d015      	beq.n	80193ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	f023 0307 	bic.w	r3, r3, #7
 8019394:	3308      	adds	r3, #8
 8019396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	f003 0307 	and.w	r3, r3, #7
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d00b      	beq.n	80193ba <pvPortMalloc+0x6e>
	__asm volatile
 80193a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193a6:	f383 8811 	msr	BASEPRI, r3
 80193aa:	f3bf 8f6f 	isb	sy
 80193ae:	f3bf 8f4f 	dsb	sy
 80193b2:	617b      	str	r3, [r7, #20]
}
 80193b4:	bf00      	nop
 80193b6:	bf00      	nop
 80193b8:	e7fd      	b.n	80193b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d06f      	beq.n	80194a0 <pvPortMalloc+0x154>
 80193c0:	4b45      	ldr	r3, [pc, #276]	@ (80194d8 <pvPortMalloc+0x18c>)
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	687a      	ldr	r2, [r7, #4]
 80193c6:	429a      	cmp	r2, r3
 80193c8:	d86a      	bhi.n	80194a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80193ca:	4b44      	ldr	r3, [pc, #272]	@ (80194dc <pvPortMalloc+0x190>)
 80193cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80193ce:	4b43      	ldr	r3, [pc, #268]	@ (80194dc <pvPortMalloc+0x190>)
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80193d4:	e004      	b.n	80193e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80193d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80193da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80193e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193e2:	685b      	ldr	r3, [r3, #4]
 80193e4:	687a      	ldr	r2, [r7, #4]
 80193e6:	429a      	cmp	r2, r3
 80193e8:	d903      	bls.n	80193f2 <pvPortMalloc+0xa6>
 80193ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d1f1      	bne.n	80193d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80193f2:	4b37      	ldr	r3, [pc, #220]	@ (80194d0 <pvPortMalloc+0x184>)
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80193f8:	429a      	cmp	r2, r3
 80193fa:	d051      	beq.n	80194a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80193fc:	6a3b      	ldr	r3, [r7, #32]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	2208      	movs	r2, #8
 8019402:	4413      	add	r3, r2
 8019404:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019408:	681a      	ldr	r2, [r3, #0]
 801940a:	6a3b      	ldr	r3, [r7, #32]
 801940c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801940e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019410:	685a      	ldr	r2, [r3, #4]
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	1ad2      	subs	r2, r2, r3
 8019416:	2308      	movs	r3, #8
 8019418:	005b      	lsls	r3, r3, #1
 801941a:	429a      	cmp	r2, r3
 801941c:	d920      	bls.n	8019460 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801941e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	4413      	add	r3, r2
 8019424:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019426:	69bb      	ldr	r3, [r7, #24]
 8019428:	f003 0307 	and.w	r3, r3, #7
 801942c:	2b00      	cmp	r3, #0
 801942e:	d00b      	beq.n	8019448 <pvPortMalloc+0xfc>
	__asm volatile
 8019430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019434:	f383 8811 	msr	BASEPRI, r3
 8019438:	f3bf 8f6f 	isb	sy
 801943c:	f3bf 8f4f 	dsb	sy
 8019440:	613b      	str	r3, [r7, #16]
}
 8019442:	bf00      	nop
 8019444:	bf00      	nop
 8019446:	e7fd      	b.n	8019444 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801944a:	685a      	ldr	r2, [r3, #4]
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	1ad2      	subs	r2, r2, r3
 8019450:	69bb      	ldr	r3, [r7, #24]
 8019452:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019456:	687a      	ldr	r2, [r7, #4]
 8019458:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801945a:	69b8      	ldr	r0, [r7, #24]
 801945c:	f000 f90a 	bl	8019674 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019460:	4b1d      	ldr	r3, [pc, #116]	@ (80194d8 <pvPortMalloc+0x18c>)
 8019462:	681a      	ldr	r2, [r3, #0]
 8019464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019466:	685b      	ldr	r3, [r3, #4]
 8019468:	1ad3      	subs	r3, r2, r3
 801946a:	4a1b      	ldr	r2, [pc, #108]	@ (80194d8 <pvPortMalloc+0x18c>)
 801946c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801946e:	4b1a      	ldr	r3, [pc, #104]	@ (80194d8 <pvPortMalloc+0x18c>)
 8019470:	681a      	ldr	r2, [r3, #0]
 8019472:	4b1b      	ldr	r3, [pc, #108]	@ (80194e0 <pvPortMalloc+0x194>)
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	429a      	cmp	r2, r3
 8019478:	d203      	bcs.n	8019482 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801947a:	4b17      	ldr	r3, [pc, #92]	@ (80194d8 <pvPortMalloc+0x18c>)
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	4a18      	ldr	r2, [pc, #96]	@ (80194e0 <pvPortMalloc+0x194>)
 8019480:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019484:	685a      	ldr	r2, [r3, #4]
 8019486:	4b13      	ldr	r3, [pc, #76]	@ (80194d4 <pvPortMalloc+0x188>)
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	431a      	orrs	r2, r3
 801948c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801948e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019492:	2200      	movs	r2, #0
 8019494:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019496:	4b13      	ldr	r3, [pc, #76]	@ (80194e4 <pvPortMalloc+0x198>)
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	3301      	adds	r3, #1
 801949c:	4a11      	ldr	r2, [pc, #68]	@ (80194e4 <pvPortMalloc+0x198>)
 801949e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80194a0:	f7fe fcdc 	bl	8017e5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80194a4:	69fb      	ldr	r3, [r7, #28]
 80194a6:	f003 0307 	and.w	r3, r3, #7
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d00b      	beq.n	80194c6 <pvPortMalloc+0x17a>
	__asm volatile
 80194ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194b2:	f383 8811 	msr	BASEPRI, r3
 80194b6:	f3bf 8f6f 	isb	sy
 80194ba:	f3bf 8f4f 	dsb	sy
 80194be:	60fb      	str	r3, [r7, #12]
}
 80194c0:	bf00      	nop
 80194c2:	bf00      	nop
 80194c4:	e7fd      	b.n	80194c2 <pvPortMalloc+0x176>
	return pvReturn;
 80194c6:	69fb      	ldr	r3, [r7, #28]
}
 80194c8:	4618      	mov	r0, r3
 80194ca:	3728      	adds	r7, #40	@ 0x28
 80194cc:	46bd      	mov	sp, r7
 80194ce:	bd80      	pop	{r7, pc}
 80194d0:	2000a0b8 	.word	0x2000a0b8
 80194d4:	2000a0cc 	.word	0x2000a0cc
 80194d8:	2000a0bc 	.word	0x2000a0bc
 80194dc:	2000a0b0 	.word	0x2000a0b0
 80194e0:	2000a0c0 	.word	0x2000a0c0
 80194e4:	2000a0c4 	.word	0x2000a0c4

080194e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b086      	sub	sp, #24
 80194ec:	af00      	add	r7, sp, #0
 80194ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d04f      	beq.n	801959a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80194fa:	2308      	movs	r3, #8
 80194fc:	425b      	negs	r3, r3
 80194fe:	697a      	ldr	r2, [r7, #20]
 8019500:	4413      	add	r3, r2
 8019502:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019504:	697b      	ldr	r3, [r7, #20]
 8019506:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019508:	693b      	ldr	r3, [r7, #16]
 801950a:	685a      	ldr	r2, [r3, #4]
 801950c:	4b25      	ldr	r3, [pc, #148]	@ (80195a4 <vPortFree+0xbc>)
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	4013      	ands	r3, r2
 8019512:	2b00      	cmp	r3, #0
 8019514:	d10b      	bne.n	801952e <vPortFree+0x46>
	__asm volatile
 8019516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801951a:	f383 8811 	msr	BASEPRI, r3
 801951e:	f3bf 8f6f 	isb	sy
 8019522:	f3bf 8f4f 	dsb	sy
 8019526:	60fb      	str	r3, [r7, #12]
}
 8019528:	bf00      	nop
 801952a:	bf00      	nop
 801952c:	e7fd      	b.n	801952a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801952e:	693b      	ldr	r3, [r7, #16]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	2b00      	cmp	r3, #0
 8019534:	d00b      	beq.n	801954e <vPortFree+0x66>
	__asm volatile
 8019536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801953a:	f383 8811 	msr	BASEPRI, r3
 801953e:	f3bf 8f6f 	isb	sy
 8019542:	f3bf 8f4f 	dsb	sy
 8019546:	60bb      	str	r3, [r7, #8]
}
 8019548:	bf00      	nop
 801954a:	bf00      	nop
 801954c:	e7fd      	b.n	801954a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801954e:	693b      	ldr	r3, [r7, #16]
 8019550:	685a      	ldr	r2, [r3, #4]
 8019552:	4b14      	ldr	r3, [pc, #80]	@ (80195a4 <vPortFree+0xbc>)
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	4013      	ands	r3, r2
 8019558:	2b00      	cmp	r3, #0
 801955a:	d01e      	beq.n	801959a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801955c:	693b      	ldr	r3, [r7, #16]
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d11a      	bne.n	801959a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019564:	693b      	ldr	r3, [r7, #16]
 8019566:	685a      	ldr	r2, [r3, #4]
 8019568:	4b0e      	ldr	r3, [pc, #56]	@ (80195a4 <vPortFree+0xbc>)
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	43db      	mvns	r3, r3
 801956e:	401a      	ands	r2, r3
 8019570:	693b      	ldr	r3, [r7, #16]
 8019572:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019574:	f7fe fc64 	bl	8017e40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019578:	693b      	ldr	r3, [r7, #16]
 801957a:	685a      	ldr	r2, [r3, #4]
 801957c:	4b0a      	ldr	r3, [pc, #40]	@ (80195a8 <vPortFree+0xc0>)
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	4413      	add	r3, r2
 8019582:	4a09      	ldr	r2, [pc, #36]	@ (80195a8 <vPortFree+0xc0>)
 8019584:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019586:	6938      	ldr	r0, [r7, #16]
 8019588:	f000 f874 	bl	8019674 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801958c:	4b07      	ldr	r3, [pc, #28]	@ (80195ac <vPortFree+0xc4>)
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	3301      	adds	r3, #1
 8019592:	4a06      	ldr	r2, [pc, #24]	@ (80195ac <vPortFree+0xc4>)
 8019594:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019596:	f7fe fc61 	bl	8017e5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801959a:	bf00      	nop
 801959c:	3718      	adds	r7, #24
 801959e:	46bd      	mov	sp, r7
 80195a0:	bd80      	pop	{r7, pc}
 80195a2:	bf00      	nop
 80195a4:	2000a0cc 	.word	0x2000a0cc
 80195a8:	2000a0bc 	.word	0x2000a0bc
 80195ac:	2000a0c8 	.word	0x2000a0c8

080195b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80195b0:	b480      	push	{r7}
 80195b2:	b085      	sub	sp, #20
 80195b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80195b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80195ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80195bc:	4b27      	ldr	r3, [pc, #156]	@ (801965c <prvHeapInit+0xac>)
 80195be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	f003 0307 	and.w	r3, r3, #7
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d00c      	beq.n	80195e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	3307      	adds	r3, #7
 80195ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	f023 0307 	bic.w	r3, r3, #7
 80195d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80195d8:	68ba      	ldr	r2, [r7, #8]
 80195da:	68fb      	ldr	r3, [r7, #12]
 80195dc:	1ad3      	subs	r3, r2, r3
 80195de:	4a1f      	ldr	r2, [pc, #124]	@ (801965c <prvHeapInit+0xac>)
 80195e0:	4413      	add	r3, r2
 80195e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80195e4:	68fb      	ldr	r3, [r7, #12]
 80195e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80195e8:	4a1d      	ldr	r2, [pc, #116]	@ (8019660 <prvHeapInit+0xb0>)
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80195ee:	4b1c      	ldr	r3, [pc, #112]	@ (8019660 <prvHeapInit+0xb0>)
 80195f0:	2200      	movs	r2, #0
 80195f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	68ba      	ldr	r2, [r7, #8]
 80195f8:	4413      	add	r3, r2
 80195fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80195fc:	2208      	movs	r2, #8
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	1a9b      	subs	r3, r3, r2
 8019602:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	f023 0307 	bic.w	r3, r3, #7
 801960a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	4a15      	ldr	r2, [pc, #84]	@ (8019664 <prvHeapInit+0xb4>)
 8019610:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019612:	4b14      	ldr	r3, [pc, #80]	@ (8019664 <prvHeapInit+0xb4>)
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	2200      	movs	r2, #0
 8019618:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801961a:	4b12      	ldr	r3, [pc, #72]	@ (8019664 <prvHeapInit+0xb4>)
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	2200      	movs	r2, #0
 8019620:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019626:	683b      	ldr	r3, [r7, #0]
 8019628:	68fa      	ldr	r2, [r7, #12]
 801962a:	1ad2      	subs	r2, r2, r3
 801962c:	683b      	ldr	r3, [r7, #0]
 801962e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019630:	4b0c      	ldr	r3, [pc, #48]	@ (8019664 <prvHeapInit+0xb4>)
 8019632:	681a      	ldr	r2, [r3, #0]
 8019634:	683b      	ldr	r3, [r7, #0]
 8019636:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019638:	683b      	ldr	r3, [r7, #0]
 801963a:	685b      	ldr	r3, [r3, #4]
 801963c:	4a0a      	ldr	r2, [pc, #40]	@ (8019668 <prvHeapInit+0xb8>)
 801963e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019640:	683b      	ldr	r3, [r7, #0]
 8019642:	685b      	ldr	r3, [r3, #4]
 8019644:	4a09      	ldr	r2, [pc, #36]	@ (801966c <prvHeapInit+0xbc>)
 8019646:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019648:	4b09      	ldr	r3, [pc, #36]	@ (8019670 <prvHeapInit+0xc0>)
 801964a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801964e:	601a      	str	r2, [r3, #0]
}
 8019650:	bf00      	nop
 8019652:	3714      	adds	r7, #20
 8019654:	46bd      	mov	sp, r7
 8019656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801965a:	4770      	bx	lr
 801965c:	200088b0 	.word	0x200088b0
 8019660:	2000a0b0 	.word	0x2000a0b0
 8019664:	2000a0b8 	.word	0x2000a0b8
 8019668:	2000a0c0 	.word	0x2000a0c0
 801966c:	2000a0bc 	.word	0x2000a0bc
 8019670:	2000a0cc 	.word	0x2000a0cc

08019674 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019674:	b480      	push	{r7}
 8019676:	b085      	sub	sp, #20
 8019678:	af00      	add	r7, sp, #0
 801967a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801967c:	4b28      	ldr	r3, [pc, #160]	@ (8019720 <prvInsertBlockIntoFreeList+0xac>)
 801967e:	60fb      	str	r3, [r7, #12]
 8019680:	e002      	b.n	8019688 <prvInsertBlockIntoFreeList+0x14>
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	60fb      	str	r3, [r7, #12]
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	687a      	ldr	r2, [r7, #4]
 801968e:	429a      	cmp	r2, r3
 8019690:	d8f7      	bhi.n	8019682 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019696:	68fb      	ldr	r3, [r7, #12]
 8019698:	685b      	ldr	r3, [r3, #4]
 801969a:	68ba      	ldr	r2, [r7, #8]
 801969c:	4413      	add	r3, r2
 801969e:	687a      	ldr	r2, [r7, #4]
 80196a0:	429a      	cmp	r2, r3
 80196a2:	d108      	bne.n	80196b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	685a      	ldr	r2, [r3, #4]
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	685b      	ldr	r3, [r3, #4]
 80196ac:	441a      	add	r2, r3
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	685b      	ldr	r3, [r3, #4]
 80196be:	68ba      	ldr	r2, [r7, #8]
 80196c0:	441a      	add	r2, r3
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	429a      	cmp	r2, r3
 80196c8:	d118      	bne.n	80196fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	681a      	ldr	r2, [r3, #0]
 80196ce:	4b15      	ldr	r3, [pc, #84]	@ (8019724 <prvInsertBlockIntoFreeList+0xb0>)
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	429a      	cmp	r2, r3
 80196d4:	d00d      	beq.n	80196f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	685a      	ldr	r2, [r3, #4]
 80196da:	68fb      	ldr	r3, [r7, #12]
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	685b      	ldr	r3, [r3, #4]
 80196e0:	441a      	add	r2, r3
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	681a      	ldr	r2, [r3, #0]
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	601a      	str	r2, [r3, #0]
 80196f0:	e008      	b.n	8019704 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80196f2:	4b0c      	ldr	r3, [pc, #48]	@ (8019724 <prvInsertBlockIntoFreeList+0xb0>)
 80196f4:	681a      	ldr	r2, [r3, #0]
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	601a      	str	r2, [r3, #0]
 80196fa:	e003      	b.n	8019704 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	681a      	ldr	r2, [r3, #0]
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019704:	68fa      	ldr	r2, [r7, #12]
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	429a      	cmp	r2, r3
 801970a:	d002      	beq.n	8019712 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	687a      	ldr	r2, [r7, #4]
 8019710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019712:	bf00      	nop
 8019714:	3714      	adds	r7, #20
 8019716:	46bd      	mov	sp, r7
 8019718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801971c:	4770      	bx	lr
 801971e:	bf00      	nop
 8019720:	2000a0b0 	.word	0x2000a0b0
 8019724:	2000a0b8 	.word	0x2000a0b8

08019728 <std>:
 8019728:	2300      	movs	r3, #0
 801972a:	b510      	push	{r4, lr}
 801972c:	4604      	mov	r4, r0
 801972e:	e9c0 3300 	strd	r3, r3, [r0]
 8019732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019736:	6083      	str	r3, [r0, #8]
 8019738:	8181      	strh	r1, [r0, #12]
 801973a:	6643      	str	r3, [r0, #100]	@ 0x64
 801973c:	81c2      	strh	r2, [r0, #14]
 801973e:	6183      	str	r3, [r0, #24]
 8019740:	4619      	mov	r1, r3
 8019742:	2208      	movs	r2, #8
 8019744:	305c      	adds	r0, #92	@ 0x5c
 8019746:	f000 fa01 	bl	8019b4c <memset>
 801974a:	4b0d      	ldr	r3, [pc, #52]	@ (8019780 <std+0x58>)
 801974c:	6263      	str	r3, [r4, #36]	@ 0x24
 801974e:	4b0d      	ldr	r3, [pc, #52]	@ (8019784 <std+0x5c>)
 8019750:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019752:	4b0d      	ldr	r3, [pc, #52]	@ (8019788 <std+0x60>)
 8019754:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019756:	4b0d      	ldr	r3, [pc, #52]	@ (801978c <std+0x64>)
 8019758:	6323      	str	r3, [r4, #48]	@ 0x30
 801975a:	4b0d      	ldr	r3, [pc, #52]	@ (8019790 <std+0x68>)
 801975c:	6224      	str	r4, [r4, #32]
 801975e:	429c      	cmp	r4, r3
 8019760:	d006      	beq.n	8019770 <std+0x48>
 8019762:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019766:	4294      	cmp	r4, r2
 8019768:	d002      	beq.n	8019770 <std+0x48>
 801976a:	33d0      	adds	r3, #208	@ 0xd0
 801976c:	429c      	cmp	r4, r3
 801976e:	d105      	bne.n	801977c <std+0x54>
 8019770:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019778:	f000 baca 	b.w	8019d10 <__retarget_lock_init_recursive>
 801977c:	bd10      	pop	{r4, pc}
 801977e:	bf00      	nop
 8019780:	0801999d 	.word	0x0801999d
 8019784:	080199bf 	.word	0x080199bf
 8019788:	080199f7 	.word	0x080199f7
 801978c:	08019a1b 	.word	0x08019a1b
 8019790:	2000a0d0 	.word	0x2000a0d0

08019794 <stdio_exit_handler>:
 8019794:	4a02      	ldr	r2, [pc, #8]	@ (80197a0 <stdio_exit_handler+0xc>)
 8019796:	4903      	ldr	r1, [pc, #12]	@ (80197a4 <stdio_exit_handler+0x10>)
 8019798:	4803      	ldr	r0, [pc, #12]	@ (80197a8 <stdio_exit_handler+0x14>)
 801979a:	f000 b869 	b.w	8019870 <_fwalk_sglue>
 801979e:	bf00      	nop
 80197a0:	2000007c 	.word	0x2000007c
 80197a4:	0801a5cd 	.word	0x0801a5cd
 80197a8:	2000008c 	.word	0x2000008c

080197ac <cleanup_stdio>:
 80197ac:	6841      	ldr	r1, [r0, #4]
 80197ae:	4b0c      	ldr	r3, [pc, #48]	@ (80197e0 <cleanup_stdio+0x34>)
 80197b0:	4299      	cmp	r1, r3
 80197b2:	b510      	push	{r4, lr}
 80197b4:	4604      	mov	r4, r0
 80197b6:	d001      	beq.n	80197bc <cleanup_stdio+0x10>
 80197b8:	f000 ff08 	bl	801a5cc <_fflush_r>
 80197bc:	68a1      	ldr	r1, [r4, #8]
 80197be:	4b09      	ldr	r3, [pc, #36]	@ (80197e4 <cleanup_stdio+0x38>)
 80197c0:	4299      	cmp	r1, r3
 80197c2:	d002      	beq.n	80197ca <cleanup_stdio+0x1e>
 80197c4:	4620      	mov	r0, r4
 80197c6:	f000 ff01 	bl	801a5cc <_fflush_r>
 80197ca:	68e1      	ldr	r1, [r4, #12]
 80197cc:	4b06      	ldr	r3, [pc, #24]	@ (80197e8 <cleanup_stdio+0x3c>)
 80197ce:	4299      	cmp	r1, r3
 80197d0:	d004      	beq.n	80197dc <cleanup_stdio+0x30>
 80197d2:	4620      	mov	r0, r4
 80197d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197d8:	f000 bef8 	b.w	801a5cc <_fflush_r>
 80197dc:	bd10      	pop	{r4, pc}
 80197de:	bf00      	nop
 80197e0:	2000a0d0 	.word	0x2000a0d0
 80197e4:	2000a138 	.word	0x2000a138
 80197e8:	2000a1a0 	.word	0x2000a1a0

080197ec <global_stdio_init.part.0>:
 80197ec:	b510      	push	{r4, lr}
 80197ee:	4b0b      	ldr	r3, [pc, #44]	@ (801981c <global_stdio_init.part.0+0x30>)
 80197f0:	4c0b      	ldr	r4, [pc, #44]	@ (8019820 <global_stdio_init.part.0+0x34>)
 80197f2:	4a0c      	ldr	r2, [pc, #48]	@ (8019824 <global_stdio_init.part.0+0x38>)
 80197f4:	601a      	str	r2, [r3, #0]
 80197f6:	4620      	mov	r0, r4
 80197f8:	2200      	movs	r2, #0
 80197fa:	2104      	movs	r1, #4
 80197fc:	f7ff ff94 	bl	8019728 <std>
 8019800:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019804:	2201      	movs	r2, #1
 8019806:	2109      	movs	r1, #9
 8019808:	f7ff ff8e 	bl	8019728 <std>
 801980c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019810:	2202      	movs	r2, #2
 8019812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019816:	2112      	movs	r1, #18
 8019818:	f7ff bf86 	b.w	8019728 <std>
 801981c:	2000a208 	.word	0x2000a208
 8019820:	2000a0d0 	.word	0x2000a0d0
 8019824:	08019795 	.word	0x08019795

08019828 <__sfp_lock_acquire>:
 8019828:	4801      	ldr	r0, [pc, #4]	@ (8019830 <__sfp_lock_acquire+0x8>)
 801982a:	f000 ba72 	b.w	8019d12 <__retarget_lock_acquire_recursive>
 801982e:	bf00      	nop
 8019830:	2000a211 	.word	0x2000a211

08019834 <__sfp_lock_release>:
 8019834:	4801      	ldr	r0, [pc, #4]	@ (801983c <__sfp_lock_release+0x8>)
 8019836:	f000 ba6d 	b.w	8019d14 <__retarget_lock_release_recursive>
 801983a:	bf00      	nop
 801983c:	2000a211 	.word	0x2000a211

08019840 <__sinit>:
 8019840:	b510      	push	{r4, lr}
 8019842:	4604      	mov	r4, r0
 8019844:	f7ff fff0 	bl	8019828 <__sfp_lock_acquire>
 8019848:	6a23      	ldr	r3, [r4, #32]
 801984a:	b11b      	cbz	r3, 8019854 <__sinit+0x14>
 801984c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019850:	f7ff bff0 	b.w	8019834 <__sfp_lock_release>
 8019854:	4b04      	ldr	r3, [pc, #16]	@ (8019868 <__sinit+0x28>)
 8019856:	6223      	str	r3, [r4, #32]
 8019858:	4b04      	ldr	r3, [pc, #16]	@ (801986c <__sinit+0x2c>)
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	2b00      	cmp	r3, #0
 801985e:	d1f5      	bne.n	801984c <__sinit+0xc>
 8019860:	f7ff ffc4 	bl	80197ec <global_stdio_init.part.0>
 8019864:	e7f2      	b.n	801984c <__sinit+0xc>
 8019866:	bf00      	nop
 8019868:	080197ad 	.word	0x080197ad
 801986c:	2000a208 	.word	0x2000a208

08019870 <_fwalk_sglue>:
 8019870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019874:	4607      	mov	r7, r0
 8019876:	4688      	mov	r8, r1
 8019878:	4614      	mov	r4, r2
 801987a:	2600      	movs	r6, #0
 801987c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019880:	f1b9 0901 	subs.w	r9, r9, #1
 8019884:	d505      	bpl.n	8019892 <_fwalk_sglue+0x22>
 8019886:	6824      	ldr	r4, [r4, #0]
 8019888:	2c00      	cmp	r4, #0
 801988a:	d1f7      	bne.n	801987c <_fwalk_sglue+0xc>
 801988c:	4630      	mov	r0, r6
 801988e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019892:	89ab      	ldrh	r3, [r5, #12]
 8019894:	2b01      	cmp	r3, #1
 8019896:	d907      	bls.n	80198a8 <_fwalk_sglue+0x38>
 8019898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801989c:	3301      	adds	r3, #1
 801989e:	d003      	beq.n	80198a8 <_fwalk_sglue+0x38>
 80198a0:	4629      	mov	r1, r5
 80198a2:	4638      	mov	r0, r7
 80198a4:	47c0      	blx	r8
 80198a6:	4306      	orrs	r6, r0
 80198a8:	3568      	adds	r5, #104	@ 0x68
 80198aa:	e7e9      	b.n	8019880 <_fwalk_sglue+0x10>

080198ac <iprintf>:
 80198ac:	b40f      	push	{r0, r1, r2, r3}
 80198ae:	b507      	push	{r0, r1, r2, lr}
 80198b0:	4906      	ldr	r1, [pc, #24]	@ (80198cc <iprintf+0x20>)
 80198b2:	ab04      	add	r3, sp, #16
 80198b4:	6808      	ldr	r0, [r1, #0]
 80198b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80198ba:	6881      	ldr	r1, [r0, #8]
 80198bc:	9301      	str	r3, [sp, #4]
 80198be:	f000 fb5b 	bl	8019f78 <_vfiprintf_r>
 80198c2:	b003      	add	sp, #12
 80198c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80198c8:	b004      	add	sp, #16
 80198ca:	4770      	bx	lr
 80198cc:	20000088 	.word	0x20000088

080198d0 <putchar>:
 80198d0:	4b02      	ldr	r3, [pc, #8]	@ (80198dc <putchar+0xc>)
 80198d2:	4601      	mov	r1, r0
 80198d4:	6818      	ldr	r0, [r3, #0]
 80198d6:	6882      	ldr	r2, [r0, #8]
 80198d8:	f000 bf02 	b.w	801a6e0 <_putc_r>
 80198dc:	20000088 	.word	0x20000088

080198e0 <_puts_r>:
 80198e0:	6a03      	ldr	r3, [r0, #32]
 80198e2:	b570      	push	{r4, r5, r6, lr}
 80198e4:	6884      	ldr	r4, [r0, #8]
 80198e6:	4605      	mov	r5, r0
 80198e8:	460e      	mov	r6, r1
 80198ea:	b90b      	cbnz	r3, 80198f0 <_puts_r+0x10>
 80198ec:	f7ff ffa8 	bl	8019840 <__sinit>
 80198f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80198f2:	07db      	lsls	r3, r3, #31
 80198f4:	d405      	bmi.n	8019902 <_puts_r+0x22>
 80198f6:	89a3      	ldrh	r3, [r4, #12]
 80198f8:	0598      	lsls	r0, r3, #22
 80198fa:	d402      	bmi.n	8019902 <_puts_r+0x22>
 80198fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80198fe:	f000 fa08 	bl	8019d12 <__retarget_lock_acquire_recursive>
 8019902:	89a3      	ldrh	r3, [r4, #12]
 8019904:	0719      	lsls	r1, r3, #28
 8019906:	d502      	bpl.n	801990e <_puts_r+0x2e>
 8019908:	6923      	ldr	r3, [r4, #16]
 801990a:	2b00      	cmp	r3, #0
 801990c:	d135      	bne.n	801997a <_puts_r+0x9a>
 801990e:	4621      	mov	r1, r4
 8019910:	4628      	mov	r0, r5
 8019912:	f000 f8c5 	bl	8019aa0 <__swsetup_r>
 8019916:	b380      	cbz	r0, 801997a <_puts_r+0x9a>
 8019918:	f04f 35ff 	mov.w	r5, #4294967295
 801991c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801991e:	07da      	lsls	r2, r3, #31
 8019920:	d405      	bmi.n	801992e <_puts_r+0x4e>
 8019922:	89a3      	ldrh	r3, [r4, #12]
 8019924:	059b      	lsls	r3, r3, #22
 8019926:	d402      	bmi.n	801992e <_puts_r+0x4e>
 8019928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801992a:	f000 f9f3 	bl	8019d14 <__retarget_lock_release_recursive>
 801992e:	4628      	mov	r0, r5
 8019930:	bd70      	pop	{r4, r5, r6, pc}
 8019932:	2b00      	cmp	r3, #0
 8019934:	da04      	bge.n	8019940 <_puts_r+0x60>
 8019936:	69a2      	ldr	r2, [r4, #24]
 8019938:	429a      	cmp	r2, r3
 801993a:	dc17      	bgt.n	801996c <_puts_r+0x8c>
 801993c:	290a      	cmp	r1, #10
 801993e:	d015      	beq.n	801996c <_puts_r+0x8c>
 8019940:	6823      	ldr	r3, [r4, #0]
 8019942:	1c5a      	adds	r2, r3, #1
 8019944:	6022      	str	r2, [r4, #0]
 8019946:	7019      	strb	r1, [r3, #0]
 8019948:	68a3      	ldr	r3, [r4, #8]
 801994a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801994e:	3b01      	subs	r3, #1
 8019950:	60a3      	str	r3, [r4, #8]
 8019952:	2900      	cmp	r1, #0
 8019954:	d1ed      	bne.n	8019932 <_puts_r+0x52>
 8019956:	2b00      	cmp	r3, #0
 8019958:	da11      	bge.n	801997e <_puts_r+0x9e>
 801995a:	4622      	mov	r2, r4
 801995c:	210a      	movs	r1, #10
 801995e:	4628      	mov	r0, r5
 8019960:	f000 f85f 	bl	8019a22 <__swbuf_r>
 8019964:	3001      	adds	r0, #1
 8019966:	d0d7      	beq.n	8019918 <_puts_r+0x38>
 8019968:	250a      	movs	r5, #10
 801996a:	e7d7      	b.n	801991c <_puts_r+0x3c>
 801996c:	4622      	mov	r2, r4
 801996e:	4628      	mov	r0, r5
 8019970:	f000 f857 	bl	8019a22 <__swbuf_r>
 8019974:	3001      	adds	r0, #1
 8019976:	d1e7      	bne.n	8019948 <_puts_r+0x68>
 8019978:	e7ce      	b.n	8019918 <_puts_r+0x38>
 801997a:	3e01      	subs	r6, #1
 801997c:	e7e4      	b.n	8019948 <_puts_r+0x68>
 801997e:	6823      	ldr	r3, [r4, #0]
 8019980:	1c5a      	adds	r2, r3, #1
 8019982:	6022      	str	r2, [r4, #0]
 8019984:	220a      	movs	r2, #10
 8019986:	701a      	strb	r2, [r3, #0]
 8019988:	e7ee      	b.n	8019968 <_puts_r+0x88>
	...

0801998c <puts>:
 801998c:	4b02      	ldr	r3, [pc, #8]	@ (8019998 <puts+0xc>)
 801998e:	4601      	mov	r1, r0
 8019990:	6818      	ldr	r0, [r3, #0]
 8019992:	f7ff bfa5 	b.w	80198e0 <_puts_r>
 8019996:	bf00      	nop
 8019998:	20000088 	.word	0x20000088

0801999c <__sread>:
 801999c:	b510      	push	{r4, lr}
 801999e:	460c      	mov	r4, r1
 80199a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199a4:	f000 f966 	bl	8019c74 <_read_r>
 80199a8:	2800      	cmp	r0, #0
 80199aa:	bfab      	itete	ge
 80199ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80199ae:	89a3      	ldrhlt	r3, [r4, #12]
 80199b0:	181b      	addge	r3, r3, r0
 80199b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80199b6:	bfac      	ite	ge
 80199b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80199ba:	81a3      	strhlt	r3, [r4, #12]
 80199bc:	bd10      	pop	{r4, pc}

080199be <__swrite>:
 80199be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199c2:	461f      	mov	r7, r3
 80199c4:	898b      	ldrh	r3, [r1, #12]
 80199c6:	05db      	lsls	r3, r3, #23
 80199c8:	4605      	mov	r5, r0
 80199ca:	460c      	mov	r4, r1
 80199cc:	4616      	mov	r6, r2
 80199ce:	d505      	bpl.n	80199dc <__swrite+0x1e>
 80199d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199d4:	2302      	movs	r3, #2
 80199d6:	2200      	movs	r2, #0
 80199d8:	f000 f93a 	bl	8019c50 <_lseek_r>
 80199dc:	89a3      	ldrh	r3, [r4, #12]
 80199de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80199e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80199e6:	81a3      	strh	r3, [r4, #12]
 80199e8:	4632      	mov	r2, r6
 80199ea:	463b      	mov	r3, r7
 80199ec:	4628      	mov	r0, r5
 80199ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80199f2:	f000 b951 	b.w	8019c98 <_write_r>

080199f6 <__sseek>:
 80199f6:	b510      	push	{r4, lr}
 80199f8:	460c      	mov	r4, r1
 80199fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199fe:	f000 f927 	bl	8019c50 <_lseek_r>
 8019a02:	1c43      	adds	r3, r0, #1
 8019a04:	89a3      	ldrh	r3, [r4, #12]
 8019a06:	bf15      	itete	ne
 8019a08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019a0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019a0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019a12:	81a3      	strheq	r3, [r4, #12]
 8019a14:	bf18      	it	ne
 8019a16:	81a3      	strhne	r3, [r4, #12]
 8019a18:	bd10      	pop	{r4, pc}

08019a1a <__sclose>:
 8019a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a1e:	f000 b8b1 	b.w	8019b84 <_close_r>

08019a22 <__swbuf_r>:
 8019a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a24:	460e      	mov	r6, r1
 8019a26:	4614      	mov	r4, r2
 8019a28:	4605      	mov	r5, r0
 8019a2a:	b118      	cbz	r0, 8019a34 <__swbuf_r+0x12>
 8019a2c:	6a03      	ldr	r3, [r0, #32]
 8019a2e:	b90b      	cbnz	r3, 8019a34 <__swbuf_r+0x12>
 8019a30:	f7ff ff06 	bl	8019840 <__sinit>
 8019a34:	69a3      	ldr	r3, [r4, #24]
 8019a36:	60a3      	str	r3, [r4, #8]
 8019a38:	89a3      	ldrh	r3, [r4, #12]
 8019a3a:	071a      	lsls	r2, r3, #28
 8019a3c:	d501      	bpl.n	8019a42 <__swbuf_r+0x20>
 8019a3e:	6923      	ldr	r3, [r4, #16]
 8019a40:	b943      	cbnz	r3, 8019a54 <__swbuf_r+0x32>
 8019a42:	4621      	mov	r1, r4
 8019a44:	4628      	mov	r0, r5
 8019a46:	f000 f82b 	bl	8019aa0 <__swsetup_r>
 8019a4a:	b118      	cbz	r0, 8019a54 <__swbuf_r+0x32>
 8019a4c:	f04f 37ff 	mov.w	r7, #4294967295
 8019a50:	4638      	mov	r0, r7
 8019a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a54:	6823      	ldr	r3, [r4, #0]
 8019a56:	6922      	ldr	r2, [r4, #16]
 8019a58:	1a98      	subs	r0, r3, r2
 8019a5a:	6963      	ldr	r3, [r4, #20]
 8019a5c:	b2f6      	uxtb	r6, r6
 8019a5e:	4283      	cmp	r3, r0
 8019a60:	4637      	mov	r7, r6
 8019a62:	dc05      	bgt.n	8019a70 <__swbuf_r+0x4e>
 8019a64:	4621      	mov	r1, r4
 8019a66:	4628      	mov	r0, r5
 8019a68:	f000 fdb0 	bl	801a5cc <_fflush_r>
 8019a6c:	2800      	cmp	r0, #0
 8019a6e:	d1ed      	bne.n	8019a4c <__swbuf_r+0x2a>
 8019a70:	68a3      	ldr	r3, [r4, #8]
 8019a72:	3b01      	subs	r3, #1
 8019a74:	60a3      	str	r3, [r4, #8]
 8019a76:	6823      	ldr	r3, [r4, #0]
 8019a78:	1c5a      	adds	r2, r3, #1
 8019a7a:	6022      	str	r2, [r4, #0]
 8019a7c:	701e      	strb	r6, [r3, #0]
 8019a7e:	6962      	ldr	r2, [r4, #20]
 8019a80:	1c43      	adds	r3, r0, #1
 8019a82:	429a      	cmp	r2, r3
 8019a84:	d004      	beq.n	8019a90 <__swbuf_r+0x6e>
 8019a86:	89a3      	ldrh	r3, [r4, #12]
 8019a88:	07db      	lsls	r3, r3, #31
 8019a8a:	d5e1      	bpl.n	8019a50 <__swbuf_r+0x2e>
 8019a8c:	2e0a      	cmp	r6, #10
 8019a8e:	d1df      	bne.n	8019a50 <__swbuf_r+0x2e>
 8019a90:	4621      	mov	r1, r4
 8019a92:	4628      	mov	r0, r5
 8019a94:	f000 fd9a 	bl	801a5cc <_fflush_r>
 8019a98:	2800      	cmp	r0, #0
 8019a9a:	d0d9      	beq.n	8019a50 <__swbuf_r+0x2e>
 8019a9c:	e7d6      	b.n	8019a4c <__swbuf_r+0x2a>
	...

08019aa0 <__swsetup_r>:
 8019aa0:	b538      	push	{r3, r4, r5, lr}
 8019aa2:	4b29      	ldr	r3, [pc, #164]	@ (8019b48 <__swsetup_r+0xa8>)
 8019aa4:	4605      	mov	r5, r0
 8019aa6:	6818      	ldr	r0, [r3, #0]
 8019aa8:	460c      	mov	r4, r1
 8019aaa:	b118      	cbz	r0, 8019ab4 <__swsetup_r+0x14>
 8019aac:	6a03      	ldr	r3, [r0, #32]
 8019aae:	b90b      	cbnz	r3, 8019ab4 <__swsetup_r+0x14>
 8019ab0:	f7ff fec6 	bl	8019840 <__sinit>
 8019ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ab8:	0719      	lsls	r1, r3, #28
 8019aba:	d422      	bmi.n	8019b02 <__swsetup_r+0x62>
 8019abc:	06da      	lsls	r2, r3, #27
 8019abe:	d407      	bmi.n	8019ad0 <__swsetup_r+0x30>
 8019ac0:	2209      	movs	r2, #9
 8019ac2:	602a      	str	r2, [r5, #0]
 8019ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ac8:	81a3      	strh	r3, [r4, #12]
 8019aca:	f04f 30ff 	mov.w	r0, #4294967295
 8019ace:	e033      	b.n	8019b38 <__swsetup_r+0x98>
 8019ad0:	0758      	lsls	r0, r3, #29
 8019ad2:	d512      	bpl.n	8019afa <__swsetup_r+0x5a>
 8019ad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019ad6:	b141      	cbz	r1, 8019aea <__swsetup_r+0x4a>
 8019ad8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019adc:	4299      	cmp	r1, r3
 8019ade:	d002      	beq.n	8019ae6 <__swsetup_r+0x46>
 8019ae0:	4628      	mov	r0, r5
 8019ae2:	f000 f927 	bl	8019d34 <_free_r>
 8019ae6:	2300      	movs	r3, #0
 8019ae8:	6363      	str	r3, [r4, #52]	@ 0x34
 8019aea:	89a3      	ldrh	r3, [r4, #12]
 8019aec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019af0:	81a3      	strh	r3, [r4, #12]
 8019af2:	2300      	movs	r3, #0
 8019af4:	6063      	str	r3, [r4, #4]
 8019af6:	6923      	ldr	r3, [r4, #16]
 8019af8:	6023      	str	r3, [r4, #0]
 8019afa:	89a3      	ldrh	r3, [r4, #12]
 8019afc:	f043 0308 	orr.w	r3, r3, #8
 8019b00:	81a3      	strh	r3, [r4, #12]
 8019b02:	6923      	ldr	r3, [r4, #16]
 8019b04:	b94b      	cbnz	r3, 8019b1a <__swsetup_r+0x7a>
 8019b06:	89a3      	ldrh	r3, [r4, #12]
 8019b08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019b10:	d003      	beq.n	8019b1a <__swsetup_r+0x7a>
 8019b12:	4621      	mov	r1, r4
 8019b14:	4628      	mov	r0, r5
 8019b16:	f000 fda7 	bl	801a668 <__smakebuf_r>
 8019b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b1e:	f013 0201 	ands.w	r2, r3, #1
 8019b22:	d00a      	beq.n	8019b3a <__swsetup_r+0x9a>
 8019b24:	2200      	movs	r2, #0
 8019b26:	60a2      	str	r2, [r4, #8]
 8019b28:	6962      	ldr	r2, [r4, #20]
 8019b2a:	4252      	negs	r2, r2
 8019b2c:	61a2      	str	r2, [r4, #24]
 8019b2e:	6922      	ldr	r2, [r4, #16]
 8019b30:	b942      	cbnz	r2, 8019b44 <__swsetup_r+0xa4>
 8019b32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019b36:	d1c5      	bne.n	8019ac4 <__swsetup_r+0x24>
 8019b38:	bd38      	pop	{r3, r4, r5, pc}
 8019b3a:	0799      	lsls	r1, r3, #30
 8019b3c:	bf58      	it	pl
 8019b3e:	6962      	ldrpl	r2, [r4, #20]
 8019b40:	60a2      	str	r2, [r4, #8]
 8019b42:	e7f4      	b.n	8019b2e <__swsetup_r+0x8e>
 8019b44:	2000      	movs	r0, #0
 8019b46:	e7f7      	b.n	8019b38 <__swsetup_r+0x98>
 8019b48:	20000088 	.word	0x20000088

08019b4c <memset>:
 8019b4c:	4402      	add	r2, r0
 8019b4e:	4603      	mov	r3, r0
 8019b50:	4293      	cmp	r3, r2
 8019b52:	d100      	bne.n	8019b56 <memset+0xa>
 8019b54:	4770      	bx	lr
 8019b56:	f803 1b01 	strb.w	r1, [r3], #1
 8019b5a:	e7f9      	b.n	8019b50 <memset+0x4>

08019b5c <strncpy>:
 8019b5c:	b510      	push	{r4, lr}
 8019b5e:	3901      	subs	r1, #1
 8019b60:	4603      	mov	r3, r0
 8019b62:	b132      	cbz	r2, 8019b72 <strncpy+0x16>
 8019b64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019b68:	f803 4b01 	strb.w	r4, [r3], #1
 8019b6c:	3a01      	subs	r2, #1
 8019b6e:	2c00      	cmp	r4, #0
 8019b70:	d1f7      	bne.n	8019b62 <strncpy+0x6>
 8019b72:	441a      	add	r2, r3
 8019b74:	2100      	movs	r1, #0
 8019b76:	4293      	cmp	r3, r2
 8019b78:	d100      	bne.n	8019b7c <strncpy+0x20>
 8019b7a:	bd10      	pop	{r4, pc}
 8019b7c:	f803 1b01 	strb.w	r1, [r3], #1
 8019b80:	e7f9      	b.n	8019b76 <strncpy+0x1a>
	...

08019b84 <_close_r>:
 8019b84:	b538      	push	{r3, r4, r5, lr}
 8019b86:	4d06      	ldr	r5, [pc, #24]	@ (8019ba0 <_close_r+0x1c>)
 8019b88:	2300      	movs	r3, #0
 8019b8a:	4604      	mov	r4, r0
 8019b8c:	4608      	mov	r0, r1
 8019b8e:	602b      	str	r3, [r5, #0]
 8019b90:	f7e7 fc23 	bl	80013da <_close>
 8019b94:	1c43      	adds	r3, r0, #1
 8019b96:	d102      	bne.n	8019b9e <_close_r+0x1a>
 8019b98:	682b      	ldr	r3, [r5, #0]
 8019b9a:	b103      	cbz	r3, 8019b9e <_close_r+0x1a>
 8019b9c:	6023      	str	r3, [r4, #0]
 8019b9e:	bd38      	pop	{r3, r4, r5, pc}
 8019ba0:	2000a20c 	.word	0x2000a20c

08019ba4 <_reclaim_reent>:
 8019ba4:	4b29      	ldr	r3, [pc, #164]	@ (8019c4c <_reclaim_reent+0xa8>)
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	4283      	cmp	r3, r0
 8019baa:	b570      	push	{r4, r5, r6, lr}
 8019bac:	4604      	mov	r4, r0
 8019bae:	d04b      	beq.n	8019c48 <_reclaim_reent+0xa4>
 8019bb0:	69c3      	ldr	r3, [r0, #28]
 8019bb2:	b1ab      	cbz	r3, 8019be0 <_reclaim_reent+0x3c>
 8019bb4:	68db      	ldr	r3, [r3, #12]
 8019bb6:	b16b      	cbz	r3, 8019bd4 <_reclaim_reent+0x30>
 8019bb8:	2500      	movs	r5, #0
 8019bba:	69e3      	ldr	r3, [r4, #28]
 8019bbc:	68db      	ldr	r3, [r3, #12]
 8019bbe:	5959      	ldr	r1, [r3, r5]
 8019bc0:	2900      	cmp	r1, #0
 8019bc2:	d13b      	bne.n	8019c3c <_reclaim_reent+0x98>
 8019bc4:	3504      	adds	r5, #4
 8019bc6:	2d80      	cmp	r5, #128	@ 0x80
 8019bc8:	d1f7      	bne.n	8019bba <_reclaim_reent+0x16>
 8019bca:	69e3      	ldr	r3, [r4, #28]
 8019bcc:	4620      	mov	r0, r4
 8019bce:	68d9      	ldr	r1, [r3, #12]
 8019bd0:	f000 f8b0 	bl	8019d34 <_free_r>
 8019bd4:	69e3      	ldr	r3, [r4, #28]
 8019bd6:	6819      	ldr	r1, [r3, #0]
 8019bd8:	b111      	cbz	r1, 8019be0 <_reclaim_reent+0x3c>
 8019bda:	4620      	mov	r0, r4
 8019bdc:	f000 f8aa 	bl	8019d34 <_free_r>
 8019be0:	6961      	ldr	r1, [r4, #20]
 8019be2:	b111      	cbz	r1, 8019bea <_reclaim_reent+0x46>
 8019be4:	4620      	mov	r0, r4
 8019be6:	f000 f8a5 	bl	8019d34 <_free_r>
 8019bea:	69e1      	ldr	r1, [r4, #28]
 8019bec:	b111      	cbz	r1, 8019bf4 <_reclaim_reent+0x50>
 8019bee:	4620      	mov	r0, r4
 8019bf0:	f000 f8a0 	bl	8019d34 <_free_r>
 8019bf4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019bf6:	b111      	cbz	r1, 8019bfe <_reclaim_reent+0x5a>
 8019bf8:	4620      	mov	r0, r4
 8019bfa:	f000 f89b 	bl	8019d34 <_free_r>
 8019bfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019c00:	b111      	cbz	r1, 8019c08 <_reclaim_reent+0x64>
 8019c02:	4620      	mov	r0, r4
 8019c04:	f000 f896 	bl	8019d34 <_free_r>
 8019c08:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8019c0a:	b111      	cbz	r1, 8019c12 <_reclaim_reent+0x6e>
 8019c0c:	4620      	mov	r0, r4
 8019c0e:	f000 f891 	bl	8019d34 <_free_r>
 8019c12:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8019c14:	b111      	cbz	r1, 8019c1c <_reclaim_reent+0x78>
 8019c16:	4620      	mov	r0, r4
 8019c18:	f000 f88c 	bl	8019d34 <_free_r>
 8019c1c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8019c1e:	b111      	cbz	r1, 8019c26 <_reclaim_reent+0x82>
 8019c20:	4620      	mov	r0, r4
 8019c22:	f000 f887 	bl	8019d34 <_free_r>
 8019c26:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8019c28:	b111      	cbz	r1, 8019c30 <_reclaim_reent+0x8c>
 8019c2a:	4620      	mov	r0, r4
 8019c2c:	f000 f882 	bl	8019d34 <_free_r>
 8019c30:	6a23      	ldr	r3, [r4, #32]
 8019c32:	b14b      	cbz	r3, 8019c48 <_reclaim_reent+0xa4>
 8019c34:	4620      	mov	r0, r4
 8019c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c3a:	4718      	bx	r3
 8019c3c:	680e      	ldr	r6, [r1, #0]
 8019c3e:	4620      	mov	r0, r4
 8019c40:	f000 f878 	bl	8019d34 <_free_r>
 8019c44:	4631      	mov	r1, r6
 8019c46:	e7bb      	b.n	8019bc0 <_reclaim_reent+0x1c>
 8019c48:	bd70      	pop	{r4, r5, r6, pc}
 8019c4a:	bf00      	nop
 8019c4c:	20000088 	.word	0x20000088

08019c50 <_lseek_r>:
 8019c50:	b538      	push	{r3, r4, r5, lr}
 8019c52:	4d07      	ldr	r5, [pc, #28]	@ (8019c70 <_lseek_r+0x20>)
 8019c54:	4604      	mov	r4, r0
 8019c56:	4608      	mov	r0, r1
 8019c58:	4611      	mov	r1, r2
 8019c5a:	2200      	movs	r2, #0
 8019c5c:	602a      	str	r2, [r5, #0]
 8019c5e:	461a      	mov	r2, r3
 8019c60:	f7e7 fbe2 	bl	8001428 <_lseek>
 8019c64:	1c43      	adds	r3, r0, #1
 8019c66:	d102      	bne.n	8019c6e <_lseek_r+0x1e>
 8019c68:	682b      	ldr	r3, [r5, #0]
 8019c6a:	b103      	cbz	r3, 8019c6e <_lseek_r+0x1e>
 8019c6c:	6023      	str	r3, [r4, #0]
 8019c6e:	bd38      	pop	{r3, r4, r5, pc}
 8019c70:	2000a20c 	.word	0x2000a20c

08019c74 <_read_r>:
 8019c74:	b538      	push	{r3, r4, r5, lr}
 8019c76:	4d07      	ldr	r5, [pc, #28]	@ (8019c94 <_read_r+0x20>)
 8019c78:	4604      	mov	r4, r0
 8019c7a:	4608      	mov	r0, r1
 8019c7c:	4611      	mov	r1, r2
 8019c7e:	2200      	movs	r2, #0
 8019c80:	602a      	str	r2, [r5, #0]
 8019c82:	461a      	mov	r2, r3
 8019c84:	f7e7 fb8c 	bl	80013a0 <_read>
 8019c88:	1c43      	adds	r3, r0, #1
 8019c8a:	d102      	bne.n	8019c92 <_read_r+0x1e>
 8019c8c:	682b      	ldr	r3, [r5, #0]
 8019c8e:	b103      	cbz	r3, 8019c92 <_read_r+0x1e>
 8019c90:	6023      	str	r3, [r4, #0]
 8019c92:	bd38      	pop	{r3, r4, r5, pc}
 8019c94:	2000a20c 	.word	0x2000a20c

08019c98 <_write_r>:
 8019c98:	b538      	push	{r3, r4, r5, lr}
 8019c9a:	4d07      	ldr	r5, [pc, #28]	@ (8019cb8 <_write_r+0x20>)
 8019c9c:	4604      	mov	r4, r0
 8019c9e:	4608      	mov	r0, r1
 8019ca0:	4611      	mov	r1, r2
 8019ca2:	2200      	movs	r2, #0
 8019ca4:	602a      	str	r2, [r5, #0]
 8019ca6:	461a      	mov	r2, r3
 8019ca8:	f7e6 fcd8 	bl	800065c <_write>
 8019cac:	1c43      	adds	r3, r0, #1
 8019cae:	d102      	bne.n	8019cb6 <_write_r+0x1e>
 8019cb0:	682b      	ldr	r3, [r5, #0]
 8019cb2:	b103      	cbz	r3, 8019cb6 <_write_r+0x1e>
 8019cb4:	6023      	str	r3, [r4, #0]
 8019cb6:	bd38      	pop	{r3, r4, r5, pc}
 8019cb8:	2000a20c 	.word	0x2000a20c

08019cbc <__errno>:
 8019cbc:	4b01      	ldr	r3, [pc, #4]	@ (8019cc4 <__errno+0x8>)
 8019cbe:	6818      	ldr	r0, [r3, #0]
 8019cc0:	4770      	bx	lr
 8019cc2:	bf00      	nop
 8019cc4:	20000088 	.word	0x20000088

08019cc8 <__libc_init_array>:
 8019cc8:	b570      	push	{r4, r5, r6, lr}
 8019cca:	4d0d      	ldr	r5, [pc, #52]	@ (8019d00 <__libc_init_array+0x38>)
 8019ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8019d04 <__libc_init_array+0x3c>)
 8019cce:	1b64      	subs	r4, r4, r5
 8019cd0:	10a4      	asrs	r4, r4, #2
 8019cd2:	2600      	movs	r6, #0
 8019cd4:	42a6      	cmp	r6, r4
 8019cd6:	d109      	bne.n	8019cec <__libc_init_array+0x24>
 8019cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8019d08 <__libc_init_array+0x40>)
 8019cda:	4c0c      	ldr	r4, [pc, #48]	@ (8019d0c <__libc_init_array+0x44>)
 8019cdc:	f000 fd66 	bl	801a7ac <_init>
 8019ce0:	1b64      	subs	r4, r4, r5
 8019ce2:	10a4      	asrs	r4, r4, #2
 8019ce4:	2600      	movs	r6, #0
 8019ce6:	42a6      	cmp	r6, r4
 8019ce8:	d105      	bne.n	8019cf6 <__libc_init_array+0x2e>
 8019cea:	bd70      	pop	{r4, r5, r6, pc}
 8019cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cf0:	4798      	blx	r3
 8019cf2:	3601      	adds	r6, #1
 8019cf4:	e7ee      	b.n	8019cd4 <__libc_init_array+0xc>
 8019cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cfa:	4798      	blx	r3
 8019cfc:	3601      	adds	r6, #1
 8019cfe:	e7f2      	b.n	8019ce6 <__libc_init_array+0x1e>
 8019d00:	0801ab2c 	.word	0x0801ab2c
 8019d04:	0801ab2c 	.word	0x0801ab2c
 8019d08:	0801ab2c 	.word	0x0801ab2c
 8019d0c:	0801ab30 	.word	0x0801ab30

08019d10 <__retarget_lock_init_recursive>:
 8019d10:	4770      	bx	lr

08019d12 <__retarget_lock_acquire_recursive>:
 8019d12:	4770      	bx	lr

08019d14 <__retarget_lock_release_recursive>:
 8019d14:	4770      	bx	lr

08019d16 <memcpy>:
 8019d16:	440a      	add	r2, r1
 8019d18:	4291      	cmp	r1, r2
 8019d1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8019d1e:	d100      	bne.n	8019d22 <memcpy+0xc>
 8019d20:	4770      	bx	lr
 8019d22:	b510      	push	{r4, lr}
 8019d24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019d2c:	4291      	cmp	r1, r2
 8019d2e:	d1f9      	bne.n	8019d24 <memcpy+0xe>
 8019d30:	bd10      	pop	{r4, pc}
	...

08019d34 <_free_r>:
 8019d34:	b538      	push	{r3, r4, r5, lr}
 8019d36:	4605      	mov	r5, r0
 8019d38:	2900      	cmp	r1, #0
 8019d3a:	d041      	beq.n	8019dc0 <_free_r+0x8c>
 8019d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d40:	1f0c      	subs	r4, r1, #4
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	bfb8      	it	lt
 8019d46:	18e4      	addlt	r4, r4, r3
 8019d48:	f000 f8e0 	bl	8019f0c <__malloc_lock>
 8019d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8019dc4 <_free_r+0x90>)
 8019d4e:	6813      	ldr	r3, [r2, #0]
 8019d50:	b933      	cbnz	r3, 8019d60 <_free_r+0x2c>
 8019d52:	6063      	str	r3, [r4, #4]
 8019d54:	6014      	str	r4, [r2, #0]
 8019d56:	4628      	mov	r0, r5
 8019d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d5c:	f000 b8dc 	b.w	8019f18 <__malloc_unlock>
 8019d60:	42a3      	cmp	r3, r4
 8019d62:	d908      	bls.n	8019d76 <_free_r+0x42>
 8019d64:	6820      	ldr	r0, [r4, #0]
 8019d66:	1821      	adds	r1, r4, r0
 8019d68:	428b      	cmp	r3, r1
 8019d6a:	bf01      	itttt	eq
 8019d6c:	6819      	ldreq	r1, [r3, #0]
 8019d6e:	685b      	ldreq	r3, [r3, #4]
 8019d70:	1809      	addeq	r1, r1, r0
 8019d72:	6021      	streq	r1, [r4, #0]
 8019d74:	e7ed      	b.n	8019d52 <_free_r+0x1e>
 8019d76:	461a      	mov	r2, r3
 8019d78:	685b      	ldr	r3, [r3, #4]
 8019d7a:	b10b      	cbz	r3, 8019d80 <_free_r+0x4c>
 8019d7c:	42a3      	cmp	r3, r4
 8019d7e:	d9fa      	bls.n	8019d76 <_free_r+0x42>
 8019d80:	6811      	ldr	r1, [r2, #0]
 8019d82:	1850      	adds	r0, r2, r1
 8019d84:	42a0      	cmp	r0, r4
 8019d86:	d10b      	bne.n	8019da0 <_free_r+0x6c>
 8019d88:	6820      	ldr	r0, [r4, #0]
 8019d8a:	4401      	add	r1, r0
 8019d8c:	1850      	adds	r0, r2, r1
 8019d8e:	4283      	cmp	r3, r0
 8019d90:	6011      	str	r1, [r2, #0]
 8019d92:	d1e0      	bne.n	8019d56 <_free_r+0x22>
 8019d94:	6818      	ldr	r0, [r3, #0]
 8019d96:	685b      	ldr	r3, [r3, #4]
 8019d98:	6053      	str	r3, [r2, #4]
 8019d9a:	4408      	add	r0, r1
 8019d9c:	6010      	str	r0, [r2, #0]
 8019d9e:	e7da      	b.n	8019d56 <_free_r+0x22>
 8019da0:	d902      	bls.n	8019da8 <_free_r+0x74>
 8019da2:	230c      	movs	r3, #12
 8019da4:	602b      	str	r3, [r5, #0]
 8019da6:	e7d6      	b.n	8019d56 <_free_r+0x22>
 8019da8:	6820      	ldr	r0, [r4, #0]
 8019daa:	1821      	adds	r1, r4, r0
 8019dac:	428b      	cmp	r3, r1
 8019dae:	bf04      	itt	eq
 8019db0:	6819      	ldreq	r1, [r3, #0]
 8019db2:	685b      	ldreq	r3, [r3, #4]
 8019db4:	6063      	str	r3, [r4, #4]
 8019db6:	bf04      	itt	eq
 8019db8:	1809      	addeq	r1, r1, r0
 8019dba:	6021      	streq	r1, [r4, #0]
 8019dbc:	6054      	str	r4, [r2, #4]
 8019dbe:	e7ca      	b.n	8019d56 <_free_r+0x22>
 8019dc0:	bd38      	pop	{r3, r4, r5, pc}
 8019dc2:	bf00      	nop
 8019dc4:	2000a218 	.word	0x2000a218

08019dc8 <sbrk_aligned>:
 8019dc8:	b570      	push	{r4, r5, r6, lr}
 8019dca:	4e0f      	ldr	r6, [pc, #60]	@ (8019e08 <sbrk_aligned+0x40>)
 8019dcc:	460c      	mov	r4, r1
 8019dce:	6831      	ldr	r1, [r6, #0]
 8019dd0:	4605      	mov	r5, r0
 8019dd2:	b911      	cbnz	r1, 8019dda <sbrk_aligned+0x12>
 8019dd4:	f000 fcda 	bl	801a78c <_sbrk_r>
 8019dd8:	6030      	str	r0, [r6, #0]
 8019dda:	4621      	mov	r1, r4
 8019ddc:	4628      	mov	r0, r5
 8019dde:	f000 fcd5 	bl	801a78c <_sbrk_r>
 8019de2:	1c43      	adds	r3, r0, #1
 8019de4:	d103      	bne.n	8019dee <sbrk_aligned+0x26>
 8019de6:	f04f 34ff 	mov.w	r4, #4294967295
 8019dea:	4620      	mov	r0, r4
 8019dec:	bd70      	pop	{r4, r5, r6, pc}
 8019dee:	1cc4      	adds	r4, r0, #3
 8019df0:	f024 0403 	bic.w	r4, r4, #3
 8019df4:	42a0      	cmp	r0, r4
 8019df6:	d0f8      	beq.n	8019dea <sbrk_aligned+0x22>
 8019df8:	1a21      	subs	r1, r4, r0
 8019dfa:	4628      	mov	r0, r5
 8019dfc:	f000 fcc6 	bl	801a78c <_sbrk_r>
 8019e00:	3001      	adds	r0, #1
 8019e02:	d1f2      	bne.n	8019dea <sbrk_aligned+0x22>
 8019e04:	e7ef      	b.n	8019de6 <sbrk_aligned+0x1e>
 8019e06:	bf00      	nop
 8019e08:	2000a214 	.word	0x2000a214

08019e0c <_malloc_r>:
 8019e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e10:	1ccd      	adds	r5, r1, #3
 8019e12:	f025 0503 	bic.w	r5, r5, #3
 8019e16:	3508      	adds	r5, #8
 8019e18:	2d0c      	cmp	r5, #12
 8019e1a:	bf38      	it	cc
 8019e1c:	250c      	movcc	r5, #12
 8019e1e:	2d00      	cmp	r5, #0
 8019e20:	4606      	mov	r6, r0
 8019e22:	db01      	blt.n	8019e28 <_malloc_r+0x1c>
 8019e24:	42a9      	cmp	r1, r5
 8019e26:	d904      	bls.n	8019e32 <_malloc_r+0x26>
 8019e28:	230c      	movs	r3, #12
 8019e2a:	6033      	str	r3, [r6, #0]
 8019e2c:	2000      	movs	r0, #0
 8019e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019f08 <_malloc_r+0xfc>
 8019e36:	f000 f869 	bl	8019f0c <__malloc_lock>
 8019e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8019e3e:	461c      	mov	r4, r3
 8019e40:	bb44      	cbnz	r4, 8019e94 <_malloc_r+0x88>
 8019e42:	4629      	mov	r1, r5
 8019e44:	4630      	mov	r0, r6
 8019e46:	f7ff ffbf 	bl	8019dc8 <sbrk_aligned>
 8019e4a:	1c43      	adds	r3, r0, #1
 8019e4c:	4604      	mov	r4, r0
 8019e4e:	d158      	bne.n	8019f02 <_malloc_r+0xf6>
 8019e50:	f8d8 4000 	ldr.w	r4, [r8]
 8019e54:	4627      	mov	r7, r4
 8019e56:	2f00      	cmp	r7, #0
 8019e58:	d143      	bne.n	8019ee2 <_malloc_r+0xd6>
 8019e5a:	2c00      	cmp	r4, #0
 8019e5c:	d04b      	beq.n	8019ef6 <_malloc_r+0xea>
 8019e5e:	6823      	ldr	r3, [r4, #0]
 8019e60:	4639      	mov	r1, r7
 8019e62:	4630      	mov	r0, r6
 8019e64:	eb04 0903 	add.w	r9, r4, r3
 8019e68:	f000 fc90 	bl	801a78c <_sbrk_r>
 8019e6c:	4581      	cmp	r9, r0
 8019e6e:	d142      	bne.n	8019ef6 <_malloc_r+0xea>
 8019e70:	6821      	ldr	r1, [r4, #0]
 8019e72:	1a6d      	subs	r5, r5, r1
 8019e74:	4629      	mov	r1, r5
 8019e76:	4630      	mov	r0, r6
 8019e78:	f7ff ffa6 	bl	8019dc8 <sbrk_aligned>
 8019e7c:	3001      	adds	r0, #1
 8019e7e:	d03a      	beq.n	8019ef6 <_malloc_r+0xea>
 8019e80:	6823      	ldr	r3, [r4, #0]
 8019e82:	442b      	add	r3, r5
 8019e84:	6023      	str	r3, [r4, #0]
 8019e86:	f8d8 3000 	ldr.w	r3, [r8]
 8019e8a:	685a      	ldr	r2, [r3, #4]
 8019e8c:	bb62      	cbnz	r2, 8019ee8 <_malloc_r+0xdc>
 8019e8e:	f8c8 7000 	str.w	r7, [r8]
 8019e92:	e00f      	b.n	8019eb4 <_malloc_r+0xa8>
 8019e94:	6822      	ldr	r2, [r4, #0]
 8019e96:	1b52      	subs	r2, r2, r5
 8019e98:	d420      	bmi.n	8019edc <_malloc_r+0xd0>
 8019e9a:	2a0b      	cmp	r2, #11
 8019e9c:	d917      	bls.n	8019ece <_malloc_r+0xc2>
 8019e9e:	1961      	adds	r1, r4, r5
 8019ea0:	42a3      	cmp	r3, r4
 8019ea2:	6025      	str	r5, [r4, #0]
 8019ea4:	bf18      	it	ne
 8019ea6:	6059      	strne	r1, [r3, #4]
 8019ea8:	6863      	ldr	r3, [r4, #4]
 8019eaa:	bf08      	it	eq
 8019eac:	f8c8 1000 	streq.w	r1, [r8]
 8019eb0:	5162      	str	r2, [r4, r5]
 8019eb2:	604b      	str	r3, [r1, #4]
 8019eb4:	4630      	mov	r0, r6
 8019eb6:	f000 f82f 	bl	8019f18 <__malloc_unlock>
 8019eba:	f104 000b 	add.w	r0, r4, #11
 8019ebe:	1d23      	adds	r3, r4, #4
 8019ec0:	f020 0007 	bic.w	r0, r0, #7
 8019ec4:	1ac2      	subs	r2, r0, r3
 8019ec6:	bf1c      	itt	ne
 8019ec8:	1a1b      	subne	r3, r3, r0
 8019eca:	50a3      	strne	r3, [r4, r2]
 8019ecc:	e7af      	b.n	8019e2e <_malloc_r+0x22>
 8019ece:	6862      	ldr	r2, [r4, #4]
 8019ed0:	42a3      	cmp	r3, r4
 8019ed2:	bf0c      	ite	eq
 8019ed4:	f8c8 2000 	streq.w	r2, [r8]
 8019ed8:	605a      	strne	r2, [r3, #4]
 8019eda:	e7eb      	b.n	8019eb4 <_malloc_r+0xa8>
 8019edc:	4623      	mov	r3, r4
 8019ede:	6864      	ldr	r4, [r4, #4]
 8019ee0:	e7ae      	b.n	8019e40 <_malloc_r+0x34>
 8019ee2:	463c      	mov	r4, r7
 8019ee4:	687f      	ldr	r7, [r7, #4]
 8019ee6:	e7b6      	b.n	8019e56 <_malloc_r+0x4a>
 8019ee8:	461a      	mov	r2, r3
 8019eea:	685b      	ldr	r3, [r3, #4]
 8019eec:	42a3      	cmp	r3, r4
 8019eee:	d1fb      	bne.n	8019ee8 <_malloc_r+0xdc>
 8019ef0:	2300      	movs	r3, #0
 8019ef2:	6053      	str	r3, [r2, #4]
 8019ef4:	e7de      	b.n	8019eb4 <_malloc_r+0xa8>
 8019ef6:	230c      	movs	r3, #12
 8019ef8:	6033      	str	r3, [r6, #0]
 8019efa:	4630      	mov	r0, r6
 8019efc:	f000 f80c 	bl	8019f18 <__malloc_unlock>
 8019f00:	e794      	b.n	8019e2c <_malloc_r+0x20>
 8019f02:	6005      	str	r5, [r0, #0]
 8019f04:	e7d6      	b.n	8019eb4 <_malloc_r+0xa8>
 8019f06:	bf00      	nop
 8019f08:	2000a218 	.word	0x2000a218

08019f0c <__malloc_lock>:
 8019f0c:	4801      	ldr	r0, [pc, #4]	@ (8019f14 <__malloc_lock+0x8>)
 8019f0e:	f7ff bf00 	b.w	8019d12 <__retarget_lock_acquire_recursive>
 8019f12:	bf00      	nop
 8019f14:	2000a210 	.word	0x2000a210

08019f18 <__malloc_unlock>:
 8019f18:	4801      	ldr	r0, [pc, #4]	@ (8019f20 <__malloc_unlock+0x8>)
 8019f1a:	f7ff befb 	b.w	8019d14 <__retarget_lock_release_recursive>
 8019f1e:	bf00      	nop
 8019f20:	2000a210 	.word	0x2000a210

08019f24 <__sfputc_r>:
 8019f24:	6893      	ldr	r3, [r2, #8]
 8019f26:	3b01      	subs	r3, #1
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	b410      	push	{r4}
 8019f2c:	6093      	str	r3, [r2, #8]
 8019f2e:	da08      	bge.n	8019f42 <__sfputc_r+0x1e>
 8019f30:	6994      	ldr	r4, [r2, #24]
 8019f32:	42a3      	cmp	r3, r4
 8019f34:	db01      	blt.n	8019f3a <__sfputc_r+0x16>
 8019f36:	290a      	cmp	r1, #10
 8019f38:	d103      	bne.n	8019f42 <__sfputc_r+0x1e>
 8019f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f3e:	f7ff bd70 	b.w	8019a22 <__swbuf_r>
 8019f42:	6813      	ldr	r3, [r2, #0]
 8019f44:	1c58      	adds	r0, r3, #1
 8019f46:	6010      	str	r0, [r2, #0]
 8019f48:	7019      	strb	r1, [r3, #0]
 8019f4a:	4608      	mov	r0, r1
 8019f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f50:	4770      	bx	lr

08019f52 <__sfputs_r>:
 8019f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f54:	4606      	mov	r6, r0
 8019f56:	460f      	mov	r7, r1
 8019f58:	4614      	mov	r4, r2
 8019f5a:	18d5      	adds	r5, r2, r3
 8019f5c:	42ac      	cmp	r4, r5
 8019f5e:	d101      	bne.n	8019f64 <__sfputs_r+0x12>
 8019f60:	2000      	movs	r0, #0
 8019f62:	e007      	b.n	8019f74 <__sfputs_r+0x22>
 8019f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f68:	463a      	mov	r2, r7
 8019f6a:	4630      	mov	r0, r6
 8019f6c:	f7ff ffda 	bl	8019f24 <__sfputc_r>
 8019f70:	1c43      	adds	r3, r0, #1
 8019f72:	d1f3      	bne.n	8019f5c <__sfputs_r+0xa>
 8019f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019f78 <_vfiprintf_r>:
 8019f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f7c:	460d      	mov	r5, r1
 8019f7e:	b09d      	sub	sp, #116	@ 0x74
 8019f80:	4614      	mov	r4, r2
 8019f82:	4698      	mov	r8, r3
 8019f84:	4606      	mov	r6, r0
 8019f86:	b118      	cbz	r0, 8019f90 <_vfiprintf_r+0x18>
 8019f88:	6a03      	ldr	r3, [r0, #32]
 8019f8a:	b90b      	cbnz	r3, 8019f90 <_vfiprintf_r+0x18>
 8019f8c:	f7ff fc58 	bl	8019840 <__sinit>
 8019f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019f92:	07d9      	lsls	r1, r3, #31
 8019f94:	d405      	bmi.n	8019fa2 <_vfiprintf_r+0x2a>
 8019f96:	89ab      	ldrh	r3, [r5, #12]
 8019f98:	059a      	lsls	r2, r3, #22
 8019f9a:	d402      	bmi.n	8019fa2 <_vfiprintf_r+0x2a>
 8019f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019f9e:	f7ff feb8 	bl	8019d12 <__retarget_lock_acquire_recursive>
 8019fa2:	89ab      	ldrh	r3, [r5, #12]
 8019fa4:	071b      	lsls	r3, r3, #28
 8019fa6:	d501      	bpl.n	8019fac <_vfiprintf_r+0x34>
 8019fa8:	692b      	ldr	r3, [r5, #16]
 8019faa:	b99b      	cbnz	r3, 8019fd4 <_vfiprintf_r+0x5c>
 8019fac:	4629      	mov	r1, r5
 8019fae:	4630      	mov	r0, r6
 8019fb0:	f7ff fd76 	bl	8019aa0 <__swsetup_r>
 8019fb4:	b170      	cbz	r0, 8019fd4 <_vfiprintf_r+0x5c>
 8019fb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019fb8:	07dc      	lsls	r4, r3, #31
 8019fba:	d504      	bpl.n	8019fc6 <_vfiprintf_r+0x4e>
 8019fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8019fc0:	b01d      	add	sp, #116	@ 0x74
 8019fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fc6:	89ab      	ldrh	r3, [r5, #12]
 8019fc8:	0598      	lsls	r0, r3, #22
 8019fca:	d4f7      	bmi.n	8019fbc <_vfiprintf_r+0x44>
 8019fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019fce:	f7ff fea1 	bl	8019d14 <__retarget_lock_release_recursive>
 8019fd2:	e7f3      	b.n	8019fbc <_vfiprintf_r+0x44>
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8019fd8:	2320      	movs	r3, #32
 8019fda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8019fe2:	2330      	movs	r3, #48	@ 0x30
 8019fe4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a194 <_vfiprintf_r+0x21c>
 8019fe8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019fec:	f04f 0901 	mov.w	r9, #1
 8019ff0:	4623      	mov	r3, r4
 8019ff2:	469a      	mov	sl, r3
 8019ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ff8:	b10a      	cbz	r2, 8019ffe <_vfiprintf_r+0x86>
 8019ffa:	2a25      	cmp	r2, #37	@ 0x25
 8019ffc:	d1f9      	bne.n	8019ff2 <_vfiprintf_r+0x7a>
 8019ffe:	ebba 0b04 	subs.w	fp, sl, r4
 801a002:	d00b      	beq.n	801a01c <_vfiprintf_r+0xa4>
 801a004:	465b      	mov	r3, fp
 801a006:	4622      	mov	r2, r4
 801a008:	4629      	mov	r1, r5
 801a00a:	4630      	mov	r0, r6
 801a00c:	f7ff ffa1 	bl	8019f52 <__sfputs_r>
 801a010:	3001      	adds	r0, #1
 801a012:	f000 80a7 	beq.w	801a164 <_vfiprintf_r+0x1ec>
 801a016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a018:	445a      	add	r2, fp
 801a01a:	9209      	str	r2, [sp, #36]	@ 0x24
 801a01c:	f89a 3000 	ldrb.w	r3, [sl]
 801a020:	2b00      	cmp	r3, #0
 801a022:	f000 809f 	beq.w	801a164 <_vfiprintf_r+0x1ec>
 801a026:	2300      	movs	r3, #0
 801a028:	f04f 32ff 	mov.w	r2, #4294967295
 801a02c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a030:	f10a 0a01 	add.w	sl, sl, #1
 801a034:	9304      	str	r3, [sp, #16]
 801a036:	9307      	str	r3, [sp, #28]
 801a038:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a03c:	931a      	str	r3, [sp, #104]	@ 0x68
 801a03e:	4654      	mov	r4, sl
 801a040:	2205      	movs	r2, #5
 801a042:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a046:	4853      	ldr	r0, [pc, #332]	@ (801a194 <_vfiprintf_r+0x21c>)
 801a048:	f7e6 f89a 	bl	8000180 <memchr>
 801a04c:	9a04      	ldr	r2, [sp, #16]
 801a04e:	b9d8      	cbnz	r0, 801a088 <_vfiprintf_r+0x110>
 801a050:	06d1      	lsls	r1, r2, #27
 801a052:	bf44      	itt	mi
 801a054:	2320      	movmi	r3, #32
 801a056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a05a:	0713      	lsls	r3, r2, #28
 801a05c:	bf44      	itt	mi
 801a05e:	232b      	movmi	r3, #43	@ 0x2b
 801a060:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a064:	f89a 3000 	ldrb.w	r3, [sl]
 801a068:	2b2a      	cmp	r3, #42	@ 0x2a
 801a06a:	d015      	beq.n	801a098 <_vfiprintf_r+0x120>
 801a06c:	9a07      	ldr	r2, [sp, #28]
 801a06e:	4654      	mov	r4, sl
 801a070:	2000      	movs	r0, #0
 801a072:	f04f 0c0a 	mov.w	ip, #10
 801a076:	4621      	mov	r1, r4
 801a078:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a07c:	3b30      	subs	r3, #48	@ 0x30
 801a07e:	2b09      	cmp	r3, #9
 801a080:	d94b      	bls.n	801a11a <_vfiprintf_r+0x1a2>
 801a082:	b1b0      	cbz	r0, 801a0b2 <_vfiprintf_r+0x13a>
 801a084:	9207      	str	r2, [sp, #28]
 801a086:	e014      	b.n	801a0b2 <_vfiprintf_r+0x13a>
 801a088:	eba0 0308 	sub.w	r3, r0, r8
 801a08c:	fa09 f303 	lsl.w	r3, r9, r3
 801a090:	4313      	orrs	r3, r2
 801a092:	9304      	str	r3, [sp, #16]
 801a094:	46a2      	mov	sl, r4
 801a096:	e7d2      	b.n	801a03e <_vfiprintf_r+0xc6>
 801a098:	9b03      	ldr	r3, [sp, #12]
 801a09a:	1d19      	adds	r1, r3, #4
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	9103      	str	r1, [sp, #12]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	bfbb      	ittet	lt
 801a0a4:	425b      	neglt	r3, r3
 801a0a6:	f042 0202 	orrlt.w	r2, r2, #2
 801a0aa:	9307      	strge	r3, [sp, #28]
 801a0ac:	9307      	strlt	r3, [sp, #28]
 801a0ae:	bfb8      	it	lt
 801a0b0:	9204      	strlt	r2, [sp, #16]
 801a0b2:	7823      	ldrb	r3, [r4, #0]
 801a0b4:	2b2e      	cmp	r3, #46	@ 0x2e
 801a0b6:	d10a      	bne.n	801a0ce <_vfiprintf_r+0x156>
 801a0b8:	7863      	ldrb	r3, [r4, #1]
 801a0ba:	2b2a      	cmp	r3, #42	@ 0x2a
 801a0bc:	d132      	bne.n	801a124 <_vfiprintf_r+0x1ac>
 801a0be:	9b03      	ldr	r3, [sp, #12]
 801a0c0:	1d1a      	adds	r2, r3, #4
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	9203      	str	r2, [sp, #12]
 801a0c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a0ca:	3402      	adds	r4, #2
 801a0cc:	9305      	str	r3, [sp, #20]
 801a0ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a1a4 <_vfiprintf_r+0x22c>
 801a0d2:	7821      	ldrb	r1, [r4, #0]
 801a0d4:	2203      	movs	r2, #3
 801a0d6:	4650      	mov	r0, sl
 801a0d8:	f7e6 f852 	bl	8000180 <memchr>
 801a0dc:	b138      	cbz	r0, 801a0ee <_vfiprintf_r+0x176>
 801a0de:	9b04      	ldr	r3, [sp, #16]
 801a0e0:	eba0 000a 	sub.w	r0, r0, sl
 801a0e4:	2240      	movs	r2, #64	@ 0x40
 801a0e6:	4082      	lsls	r2, r0
 801a0e8:	4313      	orrs	r3, r2
 801a0ea:	3401      	adds	r4, #1
 801a0ec:	9304      	str	r3, [sp, #16]
 801a0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0f2:	4829      	ldr	r0, [pc, #164]	@ (801a198 <_vfiprintf_r+0x220>)
 801a0f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a0f8:	2206      	movs	r2, #6
 801a0fa:	f7e6 f841 	bl	8000180 <memchr>
 801a0fe:	2800      	cmp	r0, #0
 801a100:	d03f      	beq.n	801a182 <_vfiprintf_r+0x20a>
 801a102:	4b26      	ldr	r3, [pc, #152]	@ (801a19c <_vfiprintf_r+0x224>)
 801a104:	bb1b      	cbnz	r3, 801a14e <_vfiprintf_r+0x1d6>
 801a106:	9b03      	ldr	r3, [sp, #12]
 801a108:	3307      	adds	r3, #7
 801a10a:	f023 0307 	bic.w	r3, r3, #7
 801a10e:	3308      	adds	r3, #8
 801a110:	9303      	str	r3, [sp, #12]
 801a112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a114:	443b      	add	r3, r7
 801a116:	9309      	str	r3, [sp, #36]	@ 0x24
 801a118:	e76a      	b.n	8019ff0 <_vfiprintf_r+0x78>
 801a11a:	fb0c 3202 	mla	r2, ip, r2, r3
 801a11e:	460c      	mov	r4, r1
 801a120:	2001      	movs	r0, #1
 801a122:	e7a8      	b.n	801a076 <_vfiprintf_r+0xfe>
 801a124:	2300      	movs	r3, #0
 801a126:	3401      	adds	r4, #1
 801a128:	9305      	str	r3, [sp, #20]
 801a12a:	4619      	mov	r1, r3
 801a12c:	f04f 0c0a 	mov.w	ip, #10
 801a130:	4620      	mov	r0, r4
 801a132:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a136:	3a30      	subs	r2, #48	@ 0x30
 801a138:	2a09      	cmp	r2, #9
 801a13a:	d903      	bls.n	801a144 <_vfiprintf_r+0x1cc>
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d0c6      	beq.n	801a0ce <_vfiprintf_r+0x156>
 801a140:	9105      	str	r1, [sp, #20]
 801a142:	e7c4      	b.n	801a0ce <_vfiprintf_r+0x156>
 801a144:	fb0c 2101 	mla	r1, ip, r1, r2
 801a148:	4604      	mov	r4, r0
 801a14a:	2301      	movs	r3, #1
 801a14c:	e7f0      	b.n	801a130 <_vfiprintf_r+0x1b8>
 801a14e:	ab03      	add	r3, sp, #12
 801a150:	9300      	str	r3, [sp, #0]
 801a152:	462a      	mov	r2, r5
 801a154:	4b12      	ldr	r3, [pc, #72]	@ (801a1a0 <_vfiprintf_r+0x228>)
 801a156:	a904      	add	r1, sp, #16
 801a158:	4630      	mov	r0, r6
 801a15a:	f3af 8000 	nop.w
 801a15e:	4607      	mov	r7, r0
 801a160:	1c78      	adds	r0, r7, #1
 801a162:	d1d6      	bne.n	801a112 <_vfiprintf_r+0x19a>
 801a164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a166:	07d9      	lsls	r1, r3, #31
 801a168:	d405      	bmi.n	801a176 <_vfiprintf_r+0x1fe>
 801a16a:	89ab      	ldrh	r3, [r5, #12]
 801a16c:	059a      	lsls	r2, r3, #22
 801a16e:	d402      	bmi.n	801a176 <_vfiprintf_r+0x1fe>
 801a170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a172:	f7ff fdcf 	bl	8019d14 <__retarget_lock_release_recursive>
 801a176:	89ab      	ldrh	r3, [r5, #12]
 801a178:	065b      	lsls	r3, r3, #25
 801a17a:	f53f af1f 	bmi.w	8019fbc <_vfiprintf_r+0x44>
 801a17e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a180:	e71e      	b.n	8019fc0 <_vfiprintf_r+0x48>
 801a182:	ab03      	add	r3, sp, #12
 801a184:	9300      	str	r3, [sp, #0]
 801a186:	462a      	mov	r2, r5
 801a188:	4b05      	ldr	r3, [pc, #20]	@ (801a1a0 <_vfiprintf_r+0x228>)
 801a18a:	a904      	add	r1, sp, #16
 801a18c:	4630      	mov	r0, r6
 801a18e:	f000 f879 	bl	801a284 <_printf_i>
 801a192:	e7e4      	b.n	801a15e <_vfiprintf_r+0x1e6>
 801a194:	0801aaf0 	.word	0x0801aaf0
 801a198:	0801aafa 	.word	0x0801aafa
 801a19c:	00000000 	.word	0x00000000
 801a1a0:	08019f53 	.word	0x08019f53
 801a1a4:	0801aaf6 	.word	0x0801aaf6

0801a1a8 <_printf_common>:
 801a1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1ac:	4616      	mov	r6, r2
 801a1ae:	4698      	mov	r8, r3
 801a1b0:	688a      	ldr	r2, [r1, #8]
 801a1b2:	690b      	ldr	r3, [r1, #16]
 801a1b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a1b8:	4293      	cmp	r3, r2
 801a1ba:	bfb8      	it	lt
 801a1bc:	4613      	movlt	r3, r2
 801a1be:	6033      	str	r3, [r6, #0]
 801a1c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a1c4:	4607      	mov	r7, r0
 801a1c6:	460c      	mov	r4, r1
 801a1c8:	b10a      	cbz	r2, 801a1ce <_printf_common+0x26>
 801a1ca:	3301      	adds	r3, #1
 801a1cc:	6033      	str	r3, [r6, #0]
 801a1ce:	6823      	ldr	r3, [r4, #0]
 801a1d0:	0699      	lsls	r1, r3, #26
 801a1d2:	bf42      	ittt	mi
 801a1d4:	6833      	ldrmi	r3, [r6, #0]
 801a1d6:	3302      	addmi	r3, #2
 801a1d8:	6033      	strmi	r3, [r6, #0]
 801a1da:	6825      	ldr	r5, [r4, #0]
 801a1dc:	f015 0506 	ands.w	r5, r5, #6
 801a1e0:	d106      	bne.n	801a1f0 <_printf_common+0x48>
 801a1e2:	f104 0a19 	add.w	sl, r4, #25
 801a1e6:	68e3      	ldr	r3, [r4, #12]
 801a1e8:	6832      	ldr	r2, [r6, #0]
 801a1ea:	1a9b      	subs	r3, r3, r2
 801a1ec:	42ab      	cmp	r3, r5
 801a1ee:	dc26      	bgt.n	801a23e <_printf_common+0x96>
 801a1f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a1f4:	6822      	ldr	r2, [r4, #0]
 801a1f6:	3b00      	subs	r3, #0
 801a1f8:	bf18      	it	ne
 801a1fa:	2301      	movne	r3, #1
 801a1fc:	0692      	lsls	r2, r2, #26
 801a1fe:	d42b      	bmi.n	801a258 <_printf_common+0xb0>
 801a200:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a204:	4641      	mov	r1, r8
 801a206:	4638      	mov	r0, r7
 801a208:	47c8      	blx	r9
 801a20a:	3001      	adds	r0, #1
 801a20c:	d01e      	beq.n	801a24c <_printf_common+0xa4>
 801a20e:	6823      	ldr	r3, [r4, #0]
 801a210:	6922      	ldr	r2, [r4, #16]
 801a212:	f003 0306 	and.w	r3, r3, #6
 801a216:	2b04      	cmp	r3, #4
 801a218:	bf02      	ittt	eq
 801a21a:	68e5      	ldreq	r5, [r4, #12]
 801a21c:	6833      	ldreq	r3, [r6, #0]
 801a21e:	1aed      	subeq	r5, r5, r3
 801a220:	68a3      	ldr	r3, [r4, #8]
 801a222:	bf0c      	ite	eq
 801a224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a228:	2500      	movne	r5, #0
 801a22a:	4293      	cmp	r3, r2
 801a22c:	bfc4      	itt	gt
 801a22e:	1a9b      	subgt	r3, r3, r2
 801a230:	18ed      	addgt	r5, r5, r3
 801a232:	2600      	movs	r6, #0
 801a234:	341a      	adds	r4, #26
 801a236:	42b5      	cmp	r5, r6
 801a238:	d11a      	bne.n	801a270 <_printf_common+0xc8>
 801a23a:	2000      	movs	r0, #0
 801a23c:	e008      	b.n	801a250 <_printf_common+0xa8>
 801a23e:	2301      	movs	r3, #1
 801a240:	4652      	mov	r2, sl
 801a242:	4641      	mov	r1, r8
 801a244:	4638      	mov	r0, r7
 801a246:	47c8      	blx	r9
 801a248:	3001      	adds	r0, #1
 801a24a:	d103      	bne.n	801a254 <_printf_common+0xac>
 801a24c:	f04f 30ff 	mov.w	r0, #4294967295
 801a250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a254:	3501      	adds	r5, #1
 801a256:	e7c6      	b.n	801a1e6 <_printf_common+0x3e>
 801a258:	18e1      	adds	r1, r4, r3
 801a25a:	1c5a      	adds	r2, r3, #1
 801a25c:	2030      	movs	r0, #48	@ 0x30
 801a25e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a262:	4422      	add	r2, r4
 801a264:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a268:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a26c:	3302      	adds	r3, #2
 801a26e:	e7c7      	b.n	801a200 <_printf_common+0x58>
 801a270:	2301      	movs	r3, #1
 801a272:	4622      	mov	r2, r4
 801a274:	4641      	mov	r1, r8
 801a276:	4638      	mov	r0, r7
 801a278:	47c8      	blx	r9
 801a27a:	3001      	adds	r0, #1
 801a27c:	d0e6      	beq.n	801a24c <_printf_common+0xa4>
 801a27e:	3601      	adds	r6, #1
 801a280:	e7d9      	b.n	801a236 <_printf_common+0x8e>
	...

0801a284 <_printf_i>:
 801a284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a288:	7e0f      	ldrb	r7, [r1, #24]
 801a28a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a28c:	2f78      	cmp	r7, #120	@ 0x78
 801a28e:	4691      	mov	r9, r2
 801a290:	4680      	mov	r8, r0
 801a292:	460c      	mov	r4, r1
 801a294:	469a      	mov	sl, r3
 801a296:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a29a:	d807      	bhi.n	801a2ac <_printf_i+0x28>
 801a29c:	2f62      	cmp	r7, #98	@ 0x62
 801a29e:	d80a      	bhi.n	801a2b6 <_printf_i+0x32>
 801a2a0:	2f00      	cmp	r7, #0
 801a2a2:	f000 80d2 	beq.w	801a44a <_printf_i+0x1c6>
 801a2a6:	2f58      	cmp	r7, #88	@ 0x58
 801a2a8:	f000 80b9 	beq.w	801a41e <_printf_i+0x19a>
 801a2ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a2b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a2b4:	e03a      	b.n	801a32c <_printf_i+0xa8>
 801a2b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a2ba:	2b15      	cmp	r3, #21
 801a2bc:	d8f6      	bhi.n	801a2ac <_printf_i+0x28>
 801a2be:	a101      	add	r1, pc, #4	@ (adr r1, 801a2c4 <_printf_i+0x40>)
 801a2c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a2c4:	0801a31d 	.word	0x0801a31d
 801a2c8:	0801a331 	.word	0x0801a331
 801a2cc:	0801a2ad 	.word	0x0801a2ad
 801a2d0:	0801a2ad 	.word	0x0801a2ad
 801a2d4:	0801a2ad 	.word	0x0801a2ad
 801a2d8:	0801a2ad 	.word	0x0801a2ad
 801a2dc:	0801a331 	.word	0x0801a331
 801a2e0:	0801a2ad 	.word	0x0801a2ad
 801a2e4:	0801a2ad 	.word	0x0801a2ad
 801a2e8:	0801a2ad 	.word	0x0801a2ad
 801a2ec:	0801a2ad 	.word	0x0801a2ad
 801a2f0:	0801a431 	.word	0x0801a431
 801a2f4:	0801a35b 	.word	0x0801a35b
 801a2f8:	0801a3eb 	.word	0x0801a3eb
 801a2fc:	0801a2ad 	.word	0x0801a2ad
 801a300:	0801a2ad 	.word	0x0801a2ad
 801a304:	0801a453 	.word	0x0801a453
 801a308:	0801a2ad 	.word	0x0801a2ad
 801a30c:	0801a35b 	.word	0x0801a35b
 801a310:	0801a2ad 	.word	0x0801a2ad
 801a314:	0801a2ad 	.word	0x0801a2ad
 801a318:	0801a3f3 	.word	0x0801a3f3
 801a31c:	6833      	ldr	r3, [r6, #0]
 801a31e:	1d1a      	adds	r2, r3, #4
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	6032      	str	r2, [r6, #0]
 801a324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a328:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a32c:	2301      	movs	r3, #1
 801a32e:	e09d      	b.n	801a46c <_printf_i+0x1e8>
 801a330:	6833      	ldr	r3, [r6, #0]
 801a332:	6820      	ldr	r0, [r4, #0]
 801a334:	1d19      	adds	r1, r3, #4
 801a336:	6031      	str	r1, [r6, #0]
 801a338:	0606      	lsls	r6, r0, #24
 801a33a:	d501      	bpl.n	801a340 <_printf_i+0xbc>
 801a33c:	681d      	ldr	r5, [r3, #0]
 801a33e:	e003      	b.n	801a348 <_printf_i+0xc4>
 801a340:	0645      	lsls	r5, r0, #25
 801a342:	d5fb      	bpl.n	801a33c <_printf_i+0xb8>
 801a344:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a348:	2d00      	cmp	r5, #0
 801a34a:	da03      	bge.n	801a354 <_printf_i+0xd0>
 801a34c:	232d      	movs	r3, #45	@ 0x2d
 801a34e:	426d      	negs	r5, r5
 801a350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a354:	4859      	ldr	r0, [pc, #356]	@ (801a4bc <_printf_i+0x238>)
 801a356:	230a      	movs	r3, #10
 801a358:	e011      	b.n	801a37e <_printf_i+0xfa>
 801a35a:	6821      	ldr	r1, [r4, #0]
 801a35c:	6833      	ldr	r3, [r6, #0]
 801a35e:	0608      	lsls	r0, r1, #24
 801a360:	f853 5b04 	ldr.w	r5, [r3], #4
 801a364:	d402      	bmi.n	801a36c <_printf_i+0xe8>
 801a366:	0649      	lsls	r1, r1, #25
 801a368:	bf48      	it	mi
 801a36a:	b2ad      	uxthmi	r5, r5
 801a36c:	2f6f      	cmp	r7, #111	@ 0x6f
 801a36e:	4853      	ldr	r0, [pc, #332]	@ (801a4bc <_printf_i+0x238>)
 801a370:	6033      	str	r3, [r6, #0]
 801a372:	bf14      	ite	ne
 801a374:	230a      	movne	r3, #10
 801a376:	2308      	moveq	r3, #8
 801a378:	2100      	movs	r1, #0
 801a37a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a37e:	6866      	ldr	r6, [r4, #4]
 801a380:	60a6      	str	r6, [r4, #8]
 801a382:	2e00      	cmp	r6, #0
 801a384:	bfa2      	ittt	ge
 801a386:	6821      	ldrge	r1, [r4, #0]
 801a388:	f021 0104 	bicge.w	r1, r1, #4
 801a38c:	6021      	strge	r1, [r4, #0]
 801a38e:	b90d      	cbnz	r5, 801a394 <_printf_i+0x110>
 801a390:	2e00      	cmp	r6, #0
 801a392:	d04b      	beq.n	801a42c <_printf_i+0x1a8>
 801a394:	4616      	mov	r6, r2
 801a396:	fbb5 f1f3 	udiv	r1, r5, r3
 801a39a:	fb03 5711 	mls	r7, r3, r1, r5
 801a39e:	5dc7      	ldrb	r7, [r0, r7]
 801a3a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a3a4:	462f      	mov	r7, r5
 801a3a6:	42bb      	cmp	r3, r7
 801a3a8:	460d      	mov	r5, r1
 801a3aa:	d9f4      	bls.n	801a396 <_printf_i+0x112>
 801a3ac:	2b08      	cmp	r3, #8
 801a3ae:	d10b      	bne.n	801a3c8 <_printf_i+0x144>
 801a3b0:	6823      	ldr	r3, [r4, #0]
 801a3b2:	07df      	lsls	r7, r3, #31
 801a3b4:	d508      	bpl.n	801a3c8 <_printf_i+0x144>
 801a3b6:	6923      	ldr	r3, [r4, #16]
 801a3b8:	6861      	ldr	r1, [r4, #4]
 801a3ba:	4299      	cmp	r1, r3
 801a3bc:	bfde      	ittt	le
 801a3be:	2330      	movle	r3, #48	@ 0x30
 801a3c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a3c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a3c8:	1b92      	subs	r2, r2, r6
 801a3ca:	6122      	str	r2, [r4, #16]
 801a3cc:	f8cd a000 	str.w	sl, [sp]
 801a3d0:	464b      	mov	r3, r9
 801a3d2:	aa03      	add	r2, sp, #12
 801a3d4:	4621      	mov	r1, r4
 801a3d6:	4640      	mov	r0, r8
 801a3d8:	f7ff fee6 	bl	801a1a8 <_printf_common>
 801a3dc:	3001      	adds	r0, #1
 801a3de:	d14a      	bne.n	801a476 <_printf_i+0x1f2>
 801a3e0:	f04f 30ff 	mov.w	r0, #4294967295
 801a3e4:	b004      	add	sp, #16
 801a3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3ea:	6823      	ldr	r3, [r4, #0]
 801a3ec:	f043 0320 	orr.w	r3, r3, #32
 801a3f0:	6023      	str	r3, [r4, #0]
 801a3f2:	4833      	ldr	r0, [pc, #204]	@ (801a4c0 <_printf_i+0x23c>)
 801a3f4:	2778      	movs	r7, #120	@ 0x78
 801a3f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a3fa:	6823      	ldr	r3, [r4, #0]
 801a3fc:	6831      	ldr	r1, [r6, #0]
 801a3fe:	061f      	lsls	r7, r3, #24
 801a400:	f851 5b04 	ldr.w	r5, [r1], #4
 801a404:	d402      	bmi.n	801a40c <_printf_i+0x188>
 801a406:	065f      	lsls	r7, r3, #25
 801a408:	bf48      	it	mi
 801a40a:	b2ad      	uxthmi	r5, r5
 801a40c:	6031      	str	r1, [r6, #0]
 801a40e:	07d9      	lsls	r1, r3, #31
 801a410:	bf44      	itt	mi
 801a412:	f043 0320 	orrmi.w	r3, r3, #32
 801a416:	6023      	strmi	r3, [r4, #0]
 801a418:	b11d      	cbz	r5, 801a422 <_printf_i+0x19e>
 801a41a:	2310      	movs	r3, #16
 801a41c:	e7ac      	b.n	801a378 <_printf_i+0xf4>
 801a41e:	4827      	ldr	r0, [pc, #156]	@ (801a4bc <_printf_i+0x238>)
 801a420:	e7e9      	b.n	801a3f6 <_printf_i+0x172>
 801a422:	6823      	ldr	r3, [r4, #0]
 801a424:	f023 0320 	bic.w	r3, r3, #32
 801a428:	6023      	str	r3, [r4, #0]
 801a42a:	e7f6      	b.n	801a41a <_printf_i+0x196>
 801a42c:	4616      	mov	r6, r2
 801a42e:	e7bd      	b.n	801a3ac <_printf_i+0x128>
 801a430:	6833      	ldr	r3, [r6, #0]
 801a432:	6825      	ldr	r5, [r4, #0]
 801a434:	6961      	ldr	r1, [r4, #20]
 801a436:	1d18      	adds	r0, r3, #4
 801a438:	6030      	str	r0, [r6, #0]
 801a43a:	062e      	lsls	r6, r5, #24
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	d501      	bpl.n	801a444 <_printf_i+0x1c0>
 801a440:	6019      	str	r1, [r3, #0]
 801a442:	e002      	b.n	801a44a <_printf_i+0x1c6>
 801a444:	0668      	lsls	r0, r5, #25
 801a446:	d5fb      	bpl.n	801a440 <_printf_i+0x1bc>
 801a448:	8019      	strh	r1, [r3, #0]
 801a44a:	2300      	movs	r3, #0
 801a44c:	6123      	str	r3, [r4, #16]
 801a44e:	4616      	mov	r6, r2
 801a450:	e7bc      	b.n	801a3cc <_printf_i+0x148>
 801a452:	6833      	ldr	r3, [r6, #0]
 801a454:	1d1a      	adds	r2, r3, #4
 801a456:	6032      	str	r2, [r6, #0]
 801a458:	681e      	ldr	r6, [r3, #0]
 801a45a:	6862      	ldr	r2, [r4, #4]
 801a45c:	2100      	movs	r1, #0
 801a45e:	4630      	mov	r0, r6
 801a460:	f7e5 fe8e 	bl	8000180 <memchr>
 801a464:	b108      	cbz	r0, 801a46a <_printf_i+0x1e6>
 801a466:	1b80      	subs	r0, r0, r6
 801a468:	6060      	str	r0, [r4, #4]
 801a46a:	6863      	ldr	r3, [r4, #4]
 801a46c:	6123      	str	r3, [r4, #16]
 801a46e:	2300      	movs	r3, #0
 801a470:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a474:	e7aa      	b.n	801a3cc <_printf_i+0x148>
 801a476:	6923      	ldr	r3, [r4, #16]
 801a478:	4632      	mov	r2, r6
 801a47a:	4649      	mov	r1, r9
 801a47c:	4640      	mov	r0, r8
 801a47e:	47d0      	blx	sl
 801a480:	3001      	adds	r0, #1
 801a482:	d0ad      	beq.n	801a3e0 <_printf_i+0x15c>
 801a484:	6823      	ldr	r3, [r4, #0]
 801a486:	079b      	lsls	r3, r3, #30
 801a488:	d413      	bmi.n	801a4b2 <_printf_i+0x22e>
 801a48a:	68e0      	ldr	r0, [r4, #12]
 801a48c:	9b03      	ldr	r3, [sp, #12]
 801a48e:	4298      	cmp	r0, r3
 801a490:	bfb8      	it	lt
 801a492:	4618      	movlt	r0, r3
 801a494:	e7a6      	b.n	801a3e4 <_printf_i+0x160>
 801a496:	2301      	movs	r3, #1
 801a498:	4632      	mov	r2, r6
 801a49a:	4649      	mov	r1, r9
 801a49c:	4640      	mov	r0, r8
 801a49e:	47d0      	blx	sl
 801a4a0:	3001      	adds	r0, #1
 801a4a2:	d09d      	beq.n	801a3e0 <_printf_i+0x15c>
 801a4a4:	3501      	adds	r5, #1
 801a4a6:	68e3      	ldr	r3, [r4, #12]
 801a4a8:	9903      	ldr	r1, [sp, #12]
 801a4aa:	1a5b      	subs	r3, r3, r1
 801a4ac:	42ab      	cmp	r3, r5
 801a4ae:	dcf2      	bgt.n	801a496 <_printf_i+0x212>
 801a4b0:	e7eb      	b.n	801a48a <_printf_i+0x206>
 801a4b2:	2500      	movs	r5, #0
 801a4b4:	f104 0619 	add.w	r6, r4, #25
 801a4b8:	e7f5      	b.n	801a4a6 <_printf_i+0x222>
 801a4ba:	bf00      	nop
 801a4bc:	0801ab01 	.word	0x0801ab01
 801a4c0:	0801ab12 	.word	0x0801ab12

0801a4c4 <__sflush_r>:
 801a4c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4cc:	0716      	lsls	r6, r2, #28
 801a4ce:	4605      	mov	r5, r0
 801a4d0:	460c      	mov	r4, r1
 801a4d2:	d454      	bmi.n	801a57e <__sflush_r+0xba>
 801a4d4:	684b      	ldr	r3, [r1, #4]
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	dc02      	bgt.n	801a4e0 <__sflush_r+0x1c>
 801a4da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	dd48      	ble.n	801a572 <__sflush_r+0xae>
 801a4e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a4e2:	2e00      	cmp	r6, #0
 801a4e4:	d045      	beq.n	801a572 <__sflush_r+0xae>
 801a4e6:	2300      	movs	r3, #0
 801a4e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a4ec:	682f      	ldr	r7, [r5, #0]
 801a4ee:	6a21      	ldr	r1, [r4, #32]
 801a4f0:	602b      	str	r3, [r5, #0]
 801a4f2:	d030      	beq.n	801a556 <__sflush_r+0x92>
 801a4f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a4f6:	89a3      	ldrh	r3, [r4, #12]
 801a4f8:	0759      	lsls	r1, r3, #29
 801a4fa:	d505      	bpl.n	801a508 <__sflush_r+0x44>
 801a4fc:	6863      	ldr	r3, [r4, #4]
 801a4fe:	1ad2      	subs	r2, r2, r3
 801a500:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a502:	b10b      	cbz	r3, 801a508 <__sflush_r+0x44>
 801a504:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a506:	1ad2      	subs	r2, r2, r3
 801a508:	2300      	movs	r3, #0
 801a50a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a50c:	6a21      	ldr	r1, [r4, #32]
 801a50e:	4628      	mov	r0, r5
 801a510:	47b0      	blx	r6
 801a512:	1c43      	adds	r3, r0, #1
 801a514:	89a3      	ldrh	r3, [r4, #12]
 801a516:	d106      	bne.n	801a526 <__sflush_r+0x62>
 801a518:	6829      	ldr	r1, [r5, #0]
 801a51a:	291d      	cmp	r1, #29
 801a51c:	d82b      	bhi.n	801a576 <__sflush_r+0xb2>
 801a51e:	4a2a      	ldr	r2, [pc, #168]	@ (801a5c8 <__sflush_r+0x104>)
 801a520:	410a      	asrs	r2, r1
 801a522:	07d6      	lsls	r6, r2, #31
 801a524:	d427      	bmi.n	801a576 <__sflush_r+0xb2>
 801a526:	2200      	movs	r2, #0
 801a528:	6062      	str	r2, [r4, #4]
 801a52a:	04d9      	lsls	r1, r3, #19
 801a52c:	6922      	ldr	r2, [r4, #16]
 801a52e:	6022      	str	r2, [r4, #0]
 801a530:	d504      	bpl.n	801a53c <__sflush_r+0x78>
 801a532:	1c42      	adds	r2, r0, #1
 801a534:	d101      	bne.n	801a53a <__sflush_r+0x76>
 801a536:	682b      	ldr	r3, [r5, #0]
 801a538:	b903      	cbnz	r3, 801a53c <__sflush_r+0x78>
 801a53a:	6560      	str	r0, [r4, #84]	@ 0x54
 801a53c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a53e:	602f      	str	r7, [r5, #0]
 801a540:	b1b9      	cbz	r1, 801a572 <__sflush_r+0xae>
 801a542:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a546:	4299      	cmp	r1, r3
 801a548:	d002      	beq.n	801a550 <__sflush_r+0x8c>
 801a54a:	4628      	mov	r0, r5
 801a54c:	f7ff fbf2 	bl	8019d34 <_free_r>
 801a550:	2300      	movs	r3, #0
 801a552:	6363      	str	r3, [r4, #52]	@ 0x34
 801a554:	e00d      	b.n	801a572 <__sflush_r+0xae>
 801a556:	2301      	movs	r3, #1
 801a558:	4628      	mov	r0, r5
 801a55a:	47b0      	blx	r6
 801a55c:	4602      	mov	r2, r0
 801a55e:	1c50      	adds	r0, r2, #1
 801a560:	d1c9      	bne.n	801a4f6 <__sflush_r+0x32>
 801a562:	682b      	ldr	r3, [r5, #0]
 801a564:	2b00      	cmp	r3, #0
 801a566:	d0c6      	beq.n	801a4f6 <__sflush_r+0x32>
 801a568:	2b1d      	cmp	r3, #29
 801a56a:	d001      	beq.n	801a570 <__sflush_r+0xac>
 801a56c:	2b16      	cmp	r3, #22
 801a56e:	d11e      	bne.n	801a5ae <__sflush_r+0xea>
 801a570:	602f      	str	r7, [r5, #0]
 801a572:	2000      	movs	r0, #0
 801a574:	e022      	b.n	801a5bc <__sflush_r+0xf8>
 801a576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a57a:	b21b      	sxth	r3, r3
 801a57c:	e01b      	b.n	801a5b6 <__sflush_r+0xf2>
 801a57e:	690f      	ldr	r7, [r1, #16]
 801a580:	2f00      	cmp	r7, #0
 801a582:	d0f6      	beq.n	801a572 <__sflush_r+0xae>
 801a584:	0793      	lsls	r3, r2, #30
 801a586:	680e      	ldr	r6, [r1, #0]
 801a588:	bf08      	it	eq
 801a58a:	694b      	ldreq	r3, [r1, #20]
 801a58c:	600f      	str	r7, [r1, #0]
 801a58e:	bf18      	it	ne
 801a590:	2300      	movne	r3, #0
 801a592:	eba6 0807 	sub.w	r8, r6, r7
 801a596:	608b      	str	r3, [r1, #8]
 801a598:	f1b8 0f00 	cmp.w	r8, #0
 801a59c:	dde9      	ble.n	801a572 <__sflush_r+0xae>
 801a59e:	6a21      	ldr	r1, [r4, #32]
 801a5a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a5a2:	4643      	mov	r3, r8
 801a5a4:	463a      	mov	r2, r7
 801a5a6:	4628      	mov	r0, r5
 801a5a8:	47b0      	blx	r6
 801a5aa:	2800      	cmp	r0, #0
 801a5ac:	dc08      	bgt.n	801a5c0 <__sflush_r+0xfc>
 801a5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a5b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a5b6:	81a3      	strh	r3, [r4, #12]
 801a5b8:	f04f 30ff 	mov.w	r0, #4294967295
 801a5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5c0:	4407      	add	r7, r0
 801a5c2:	eba8 0800 	sub.w	r8, r8, r0
 801a5c6:	e7e7      	b.n	801a598 <__sflush_r+0xd4>
 801a5c8:	dfbffffe 	.word	0xdfbffffe

0801a5cc <_fflush_r>:
 801a5cc:	b538      	push	{r3, r4, r5, lr}
 801a5ce:	690b      	ldr	r3, [r1, #16]
 801a5d0:	4605      	mov	r5, r0
 801a5d2:	460c      	mov	r4, r1
 801a5d4:	b913      	cbnz	r3, 801a5dc <_fflush_r+0x10>
 801a5d6:	2500      	movs	r5, #0
 801a5d8:	4628      	mov	r0, r5
 801a5da:	bd38      	pop	{r3, r4, r5, pc}
 801a5dc:	b118      	cbz	r0, 801a5e6 <_fflush_r+0x1a>
 801a5de:	6a03      	ldr	r3, [r0, #32]
 801a5e0:	b90b      	cbnz	r3, 801a5e6 <_fflush_r+0x1a>
 801a5e2:	f7ff f92d 	bl	8019840 <__sinit>
 801a5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d0f3      	beq.n	801a5d6 <_fflush_r+0xa>
 801a5ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a5f0:	07d0      	lsls	r0, r2, #31
 801a5f2:	d404      	bmi.n	801a5fe <_fflush_r+0x32>
 801a5f4:	0599      	lsls	r1, r3, #22
 801a5f6:	d402      	bmi.n	801a5fe <_fflush_r+0x32>
 801a5f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a5fa:	f7ff fb8a 	bl	8019d12 <__retarget_lock_acquire_recursive>
 801a5fe:	4628      	mov	r0, r5
 801a600:	4621      	mov	r1, r4
 801a602:	f7ff ff5f 	bl	801a4c4 <__sflush_r>
 801a606:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a608:	07da      	lsls	r2, r3, #31
 801a60a:	4605      	mov	r5, r0
 801a60c:	d4e4      	bmi.n	801a5d8 <_fflush_r+0xc>
 801a60e:	89a3      	ldrh	r3, [r4, #12]
 801a610:	059b      	lsls	r3, r3, #22
 801a612:	d4e1      	bmi.n	801a5d8 <_fflush_r+0xc>
 801a614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a616:	f7ff fb7d 	bl	8019d14 <__retarget_lock_release_recursive>
 801a61a:	e7dd      	b.n	801a5d8 <_fflush_r+0xc>

0801a61c <__swhatbuf_r>:
 801a61c:	b570      	push	{r4, r5, r6, lr}
 801a61e:	460c      	mov	r4, r1
 801a620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a624:	2900      	cmp	r1, #0
 801a626:	b096      	sub	sp, #88	@ 0x58
 801a628:	4615      	mov	r5, r2
 801a62a:	461e      	mov	r6, r3
 801a62c:	da0d      	bge.n	801a64a <__swhatbuf_r+0x2e>
 801a62e:	89a3      	ldrh	r3, [r4, #12]
 801a630:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a634:	f04f 0100 	mov.w	r1, #0
 801a638:	bf14      	ite	ne
 801a63a:	2340      	movne	r3, #64	@ 0x40
 801a63c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a640:	2000      	movs	r0, #0
 801a642:	6031      	str	r1, [r6, #0]
 801a644:	602b      	str	r3, [r5, #0]
 801a646:	b016      	add	sp, #88	@ 0x58
 801a648:	bd70      	pop	{r4, r5, r6, pc}
 801a64a:	466a      	mov	r2, sp
 801a64c:	f000 f87c 	bl	801a748 <_fstat_r>
 801a650:	2800      	cmp	r0, #0
 801a652:	dbec      	blt.n	801a62e <__swhatbuf_r+0x12>
 801a654:	9901      	ldr	r1, [sp, #4]
 801a656:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a65a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a65e:	4259      	negs	r1, r3
 801a660:	4159      	adcs	r1, r3
 801a662:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a666:	e7eb      	b.n	801a640 <__swhatbuf_r+0x24>

0801a668 <__smakebuf_r>:
 801a668:	898b      	ldrh	r3, [r1, #12]
 801a66a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a66c:	079d      	lsls	r5, r3, #30
 801a66e:	4606      	mov	r6, r0
 801a670:	460c      	mov	r4, r1
 801a672:	d507      	bpl.n	801a684 <__smakebuf_r+0x1c>
 801a674:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a678:	6023      	str	r3, [r4, #0]
 801a67a:	6123      	str	r3, [r4, #16]
 801a67c:	2301      	movs	r3, #1
 801a67e:	6163      	str	r3, [r4, #20]
 801a680:	b003      	add	sp, #12
 801a682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a684:	ab01      	add	r3, sp, #4
 801a686:	466a      	mov	r2, sp
 801a688:	f7ff ffc8 	bl	801a61c <__swhatbuf_r>
 801a68c:	9f00      	ldr	r7, [sp, #0]
 801a68e:	4605      	mov	r5, r0
 801a690:	4639      	mov	r1, r7
 801a692:	4630      	mov	r0, r6
 801a694:	f7ff fbba 	bl	8019e0c <_malloc_r>
 801a698:	b948      	cbnz	r0, 801a6ae <__smakebuf_r+0x46>
 801a69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a69e:	059a      	lsls	r2, r3, #22
 801a6a0:	d4ee      	bmi.n	801a680 <__smakebuf_r+0x18>
 801a6a2:	f023 0303 	bic.w	r3, r3, #3
 801a6a6:	f043 0302 	orr.w	r3, r3, #2
 801a6aa:	81a3      	strh	r3, [r4, #12]
 801a6ac:	e7e2      	b.n	801a674 <__smakebuf_r+0xc>
 801a6ae:	89a3      	ldrh	r3, [r4, #12]
 801a6b0:	6020      	str	r0, [r4, #0]
 801a6b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a6b6:	81a3      	strh	r3, [r4, #12]
 801a6b8:	9b01      	ldr	r3, [sp, #4]
 801a6ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a6be:	b15b      	cbz	r3, 801a6d8 <__smakebuf_r+0x70>
 801a6c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a6c4:	4630      	mov	r0, r6
 801a6c6:	f000 f851 	bl	801a76c <_isatty_r>
 801a6ca:	b128      	cbz	r0, 801a6d8 <__smakebuf_r+0x70>
 801a6cc:	89a3      	ldrh	r3, [r4, #12]
 801a6ce:	f023 0303 	bic.w	r3, r3, #3
 801a6d2:	f043 0301 	orr.w	r3, r3, #1
 801a6d6:	81a3      	strh	r3, [r4, #12]
 801a6d8:	89a3      	ldrh	r3, [r4, #12]
 801a6da:	431d      	orrs	r5, r3
 801a6dc:	81a5      	strh	r5, [r4, #12]
 801a6de:	e7cf      	b.n	801a680 <__smakebuf_r+0x18>

0801a6e0 <_putc_r>:
 801a6e0:	b570      	push	{r4, r5, r6, lr}
 801a6e2:	460d      	mov	r5, r1
 801a6e4:	4614      	mov	r4, r2
 801a6e6:	4606      	mov	r6, r0
 801a6e8:	b118      	cbz	r0, 801a6f2 <_putc_r+0x12>
 801a6ea:	6a03      	ldr	r3, [r0, #32]
 801a6ec:	b90b      	cbnz	r3, 801a6f2 <_putc_r+0x12>
 801a6ee:	f7ff f8a7 	bl	8019840 <__sinit>
 801a6f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a6f4:	07d8      	lsls	r0, r3, #31
 801a6f6:	d405      	bmi.n	801a704 <_putc_r+0x24>
 801a6f8:	89a3      	ldrh	r3, [r4, #12]
 801a6fa:	0599      	lsls	r1, r3, #22
 801a6fc:	d402      	bmi.n	801a704 <_putc_r+0x24>
 801a6fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a700:	f7ff fb07 	bl	8019d12 <__retarget_lock_acquire_recursive>
 801a704:	68a3      	ldr	r3, [r4, #8]
 801a706:	3b01      	subs	r3, #1
 801a708:	2b00      	cmp	r3, #0
 801a70a:	60a3      	str	r3, [r4, #8]
 801a70c:	da05      	bge.n	801a71a <_putc_r+0x3a>
 801a70e:	69a2      	ldr	r2, [r4, #24]
 801a710:	4293      	cmp	r3, r2
 801a712:	db12      	blt.n	801a73a <_putc_r+0x5a>
 801a714:	b2eb      	uxtb	r3, r5
 801a716:	2b0a      	cmp	r3, #10
 801a718:	d00f      	beq.n	801a73a <_putc_r+0x5a>
 801a71a:	6823      	ldr	r3, [r4, #0]
 801a71c:	1c5a      	adds	r2, r3, #1
 801a71e:	6022      	str	r2, [r4, #0]
 801a720:	701d      	strb	r5, [r3, #0]
 801a722:	b2ed      	uxtb	r5, r5
 801a724:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a726:	07da      	lsls	r2, r3, #31
 801a728:	d405      	bmi.n	801a736 <_putc_r+0x56>
 801a72a:	89a3      	ldrh	r3, [r4, #12]
 801a72c:	059b      	lsls	r3, r3, #22
 801a72e:	d402      	bmi.n	801a736 <_putc_r+0x56>
 801a730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a732:	f7ff faef 	bl	8019d14 <__retarget_lock_release_recursive>
 801a736:	4628      	mov	r0, r5
 801a738:	bd70      	pop	{r4, r5, r6, pc}
 801a73a:	4629      	mov	r1, r5
 801a73c:	4622      	mov	r2, r4
 801a73e:	4630      	mov	r0, r6
 801a740:	f7ff f96f 	bl	8019a22 <__swbuf_r>
 801a744:	4605      	mov	r5, r0
 801a746:	e7ed      	b.n	801a724 <_putc_r+0x44>

0801a748 <_fstat_r>:
 801a748:	b538      	push	{r3, r4, r5, lr}
 801a74a:	4d07      	ldr	r5, [pc, #28]	@ (801a768 <_fstat_r+0x20>)
 801a74c:	2300      	movs	r3, #0
 801a74e:	4604      	mov	r4, r0
 801a750:	4608      	mov	r0, r1
 801a752:	4611      	mov	r1, r2
 801a754:	602b      	str	r3, [r5, #0]
 801a756:	f7e6 fe4c 	bl	80013f2 <_fstat>
 801a75a:	1c43      	adds	r3, r0, #1
 801a75c:	d102      	bne.n	801a764 <_fstat_r+0x1c>
 801a75e:	682b      	ldr	r3, [r5, #0]
 801a760:	b103      	cbz	r3, 801a764 <_fstat_r+0x1c>
 801a762:	6023      	str	r3, [r4, #0]
 801a764:	bd38      	pop	{r3, r4, r5, pc}
 801a766:	bf00      	nop
 801a768:	2000a20c 	.word	0x2000a20c

0801a76c <_isatty_r>:
 801a76c:	b538      	push	{r3, r4, r5, lr}
 801a76e:	4d06      	ldr	r5, [pc, #24]	@ (801a788 <_isatty_r+0x1c>)
 801a770:	2300      	movs	r3, #0
 801a772:	4604      	mov	r4, r0
 801a774:	4608      	mov	r0, r1
 801a776:	602b      	str	r3, [r5, #0]
 801a778:	f7e6 fe4b 	bl	8001412 <_isatty>
 801a77c:	1c43      	adds	r3, r0, #1
 801a77e:	d102      	bne.n	801a786 <_isatty_r+0x1a>
 801a780:	682b      	ldr	r3, [r5, #0]
 801a782:	b103      	cbz	r3, 801a786 <_isatty_r+0x1a>
 801a784:	6023      	str	r3, [r4, #0]
 801a786:	bd38      	pop	{r3, r4, r5, pc}
 801a788:	2000a20c 	.word	0x2000a20c

0801a78c <_sbrk_r>:
 801a78c:	b538      	push	{r3, r4, r5, lr}
 801a78e:	4d06      	ldr	r5, [pc, #24]	@ (801a7a8 <_sbrk_r+0x1c>)
 801a790:	2300      	movs	r3, #0
 801a792:	4604      	mov	r4, r0
 801a794:	4608      	mov	r0, r1
 801a796:	602b      	str	r3, [r5, #0]
 801a798:	f7e6 fe54 	bl	8001444 <_sbrk>
 801a79c:	1c43      	adds	r3, r0, #1
 801a79e:	d102      	bne.n	801a7a6 <_sbrk_r+0x1a>
 801a7a0:	682b      	ldr	r3, [r5, #0]
 801a7a2:	b103      	cbz	r3, 801a7a6 <_sbrk_r+0x1a>
 801a7a4:	6023      	str	r3, [r4, #0]
 801a7a6:	bd38      	pop	{r3, r4, r5, pc}
 801a7a8:	2000a20c 	.word	0x2000a20c

0801a7ac <_init>:
 801a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7ae:	bf00      	nop
 801a7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7b2:	bc08      	pop	{r3}
 801a7b4:	469e      	mov	lr, r3
 801a7b6:	4770      	bx	lr

0801a7b8 <_fini>:
 801a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7ba:	bf00      	nop
 801a7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7be:	bc08      	pop	{r3}
 801a7c0:	469e      	mov	lr, r3
 801a7c2:	4770      	bx	lr
