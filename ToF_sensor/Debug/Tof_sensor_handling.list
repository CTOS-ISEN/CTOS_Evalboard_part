
Tof_sensor_handling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b4dc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0801b61c  0801b61c  0001c61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801bae4  0801bae4  0001cae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801baec  0801baec  0001caec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801baf0  0801baf0  0001caf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000dc  20000008  0801baf4  0001d008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a150  200000e8  0801bbd0  0001d0e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000a238  0801bbd0  0001d238  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001d0e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00066f02  00000000  00000000  0001d114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008318  00000000  00000000  00084016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003710  00000000  00000000  0008c330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002a79  00000000  00000000  0008fa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000f989  00000000  00000000  000924b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00043be0  00000000  00000000  000a1e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00121da6  00000000  00000000  000e5a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002077c8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000f3b0  00000000  00000000  0020780c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  00216bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e8 	.word	0x200000e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0801b604 	.word	0x0801b604

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000ec 	.word	0x200000ec
 800017c:	0801b604 	.word	0x0801b604

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_ldivmod>:
 8000220:	b97b      	cbnz	r3, 8000242 <__aeabi_ldivmod+0x22>
 8000222:	b972      	cbnz	r2, 8000242 <__aeabi_ldivmod+0x22>
 8000224:	2900      	cmp	r1, #0
 8000226:	bfbe      	ittt	lt
 8000228:	2000      	movlt	r0, #0
 800022a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800022e:	e006      	blt.n	800023e <__aeabi_ldivmod+0x1e>
 8000230:	bf08      	it	eq
 8000232:	2800      	cmpeq	r0, #0
 8000234:	bf1c      	itt	ne
 8000236:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800023a:	f04f 30ff 	movne.w	r0, #4294967295
 800023e:	f000 b9b5 	b.w	80005ac <__aeabi_idiv0>
 8000242:	f1ad 0c08 	sub.w	ip, sp, #8
 8000246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024a:	2900      	cmp	r1, #0
 800024c:	db09      	blt.n	8000262 <__aeabi_ldivmod+0x42>
 800024e:	2b00      	cmp	r3, #0
 8000250:	db1a      	blt.n	8000288 <__aeabi_ldivmod+0x68>
 8000252:	f000 f84d 	bl	80002f0 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	db1b      	blt.n	80002a4 <__aeabi_ldivmod+0x84>
 800026c:	f000 f840 	bl	80002f0 <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	4770      	bx	lr
 8000288:	4252      	negs	r2, r2
 800028a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028e:	f000 f82f 	bl	80002f0 <__udivmoddi4>
 8000292:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029a:	b004      	add	sp, #16
 800029c:	4240      	negs	r0, r0
 800029e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a2:	4770      	bx	lr
 80002a4:	4252      	negs	r2, r2
 80002a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002aa:	f000 f821 	bl	80002f0 <__udivmoddi4>
 80002ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b6:	b004      	add	sp, #16
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d013      	beq.n	80005f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	e000      	b.n	80005dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800060a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800060e:	f023 0218 	bic.w	r2, r3, #24
 8000612:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4313      	orrs	r3, r2
 800061a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800062a:	b480      	push	{r7}
 800062c:	b085      	sub	sp, #20
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000636:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000638:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4313      	orrs	r3, r2
 8000640:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000646:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4013      	ands	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	e009      	b.n	8000682 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	60ba      	str	r2, [r7, #8]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff9a 	bl	80005b0 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	3301      	adds	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	697a      	ldr	r2, [r7, #20]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	429a      	cmp	r2, r3
 8000688:	dbf1      	blt.n	800066e <_write+0x12>
}
return len;
 800068a:	687b      	ldr	r3, [r7, #4]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <print_result>:

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	ed2d 8b02 	vpush	{d8}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	e096      	b.n	80007d4 <print_result+0x140>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 80006a6:	7bfa      	ldrb	r2, [r7, #15]
 80006a8:	6879      	ldr	r1, [r7, #4]
 80006aa:	4613      	mov	r3, r2
 80006ac:	011b      	lsls	r3, r3, #4
 80006ae:	4413      	add	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	440b      	add	r3, r1
 80006b4:	3304      	adds	r3, #4
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	484d      	ldr	r0, [pc, #308]	@ (80007f0 <print_result+0x15c>)
 80006bc:	f01a f822 	bl	801a704 <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	73bb      	strb	r3, [r7, #14]
 80006c4:	e076      	b.n	80007b4 <print_result+0x120>
    {
      printf("\n |---> ");
 80006c6:	484b      	ldr	r0, [pc, #300]	@ (80007f4 <print_result+0x160>)
 80006c8:	f01a f81c 	bl	801a704 <iprintf>

      printf("Status = %ld, Distance = %5ld mm ",
             (long)Result->ZoneResult[i].Status[j],
 80006cc:	7bfa      	ldrb	r2, [r7, #15]
 80006ce:	7bb8      	ldrb	r0, [r7, #14]
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	4613      	mov	r3, r2
 80006d4:	011b      	lsls	r3, r3, #4
 80006d6:	4413      	add	r3, r2
 80006d8:	4403      	add	r3, r0
 80006da:	3304      	adds	r3, #4
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	440b      	add	r3, r1
 80006e0:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80006e2:	461c      	mov	r4, r3
             (long)Result->ZoneResult[i].Distance[j]);
 80006e4:	7bfa      	ldrb	r2, [r7, #15]
 80006e6:	7bb8      	ldrb	r0, [r7, #14]
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	4613      	mov	r3, r2
 80006ec:	011b      	lsls	r3, r3, #4
 80006ee:	4413      	add	r3, r2
 80006f0:	4403      	add	r3, r0
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	440b      	add	r3, r1
 80006f6:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80006f8:	461a      	mov	r2, r3
 80006fa:	4621      	mov	r1, r4
 80006fc:	483e      	ldr	r0, [pc, #248]	@ (80007f8 <print_result+0x164>)
 80006fe:	f01a f801 	bl	801a704 <iprintf>

      if (Profile.EnableAmbient)
 8000702:	4b3e      	ldr	r3, [pc, #248]	@ (80007fc <print_result+0x168>)
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d026      	beq.n	8000758 <print_result+0xc4>
        printf(", Ambient = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Ambient[j],
 800070a:	7bfa      	ldrb	r2, [r7, #15]
 800070c:	7bb8      	ldrb	r0, [r7, #14]
 800070e:	6879      	ldr	r1, [r7, #4]
 8000710:	4613      	mov	r3, r2
 8000712:	011b      	lsls	r3, r3, #4
 8000714:	4413      	add	r3, r2
 8000716:	4403      	add	r3, r0
 8000718:	3308      	adds	r3, #8
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	440b      	add	r3, r1
 800071e:	3308      	adds	r3, #8
 8000720:	edd3 7a00 	vldr	s15, [r3]
        printf(", Ambient = %ld.%02ld kcps/spad",
 8000724:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Ambient[j]));
 8000728:	7bfa      	ldrb	r2, [r7, #15]
 800072a:	7bb8      	ldrb	r0, [r7, #14]
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	4413      	add	r3, r2
 8000734:	4403      	add	r3, r0
 8000736:	3308      	adds	r3, #8
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	440b      	add	r3, r1
 800073c:	3308      	adds	r3, #8
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	eeb0 0a67 	vmov.f32	s0, s15
 8000746:	f000 f85f 	bl	8000808 <decimal_part>
 800074a:	4603      	mov	r3, r0
        printf(", Ambient = %ld.%02ld kcps/spad",
 800074c:	461a      	mov	r2, r3
 800074e:	ee18 1a10 	vmov	r1, s16
 8000752:	482b      	ldr	r0, [pc, #172]	@ (8000800 <print_result+0x16c>)
 8000754:	f019 ffd6 	bl	801a704 <iprintf>

      if (Profile.EnableSignal)
 8000758:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <print_result+0x168>)
 800075a:	691b      	ldr	r3, [r3, #16]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d026      	beq.n	80007ae <print_result+0x11a>
        printf(", Signal = %ld.%02ld kcps/spad",
               (long)Result->ZoneResult[i].Signal[j],
 8000760:	7bfa      	ldrb	r2, [r7, #15]
 8000762:	7bb8      	ldrb	r0, [r7, #14]
 8000764:	6879      	ldr	r1, [r7, #4]
 8000766:	4613      	mov	r3, r2
 8000768:	011b      	lsls	r3, r3, #4
 800076a:	4413      	add	r3, r2
 800076c:	4403      	add	r3, r0
 800076e:	330c      	adds	r3, #12
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	440b      	add	r3, r1
 8000774:	3308      	adds	r3, #8
 8000776:	edd3 7a00 	vldr	s15, [r3]
        printf(", Signal = %ld.%02ld kcps/spad",
 800077a:	eebd 8ae7 	vcvt.s32.f32	s16, s15
               (long)decimal_part(Result->ZoneResult[i].Signal[j]));
 800077e:	7bfa      	ldrb	r2, [r7, #15]
 8000780:	7bb8      	ldrb	r0, [r7, #14]
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	4613      	mov	r3, r2
 8000786:	011b      	lsls	r3, r3, #4
 8000788:	4413      	add	r3, r2
 800078a:	4403      	add	r3, r0
 800078c:	330c      	adds	r3, #12
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	440b      	add	r3, r1
 8000792:	3308      	adds	r3, #8
 8000794:	edd3 7a00 	vldr	s15, [r3]
 8000798:	eeb0 0a67 	vmov.f32	s0, s15
 800079c:	f000 f834 	bl	8000808 <decimal_part>
 80007a0:	4603      	mov	r3, r0
        printf(", Signal = %ld.%02ld kcps/spad",
 80007a2:	461a      	mov	r2, r3
 80007a4:	ee18 1a10 	vmov	r1, s16
 80007a8:	4816      	ldr	r0, [pc, #88]	@ (8000804 <print_result+0x170>)
 80007aa:	f019 ffab 	bl	801a704 <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	3301      	adds	r3, #1
 80007b2:	73bb      	strb	r3, [r7, #14]
 80007b4:	7bb9      	ldrb	r1, [r7, #14]
 80007b6:	7bfa      	ldrb	r2, [r7, #15]
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	4413      	add	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4403      	add	r3, r0
 80007c4:	3304      	adds	r3, #4
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4299      	cmp	r1, r3
 80007ca:	f4ff af7c 	bcc.w	80006c6 <print_result+0x32>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	3301      	adds	r3, #1
 80007d2:	73fb      	strb	r3, [r7, #15]
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	f43f af65 	beq.w	80006a6 <print_result+0x12>
    }
  }
  printf("\n");
 80007dc:	200a      	movs	r0, #10
 80007de:	f019 ffa3 	bl	801a728 <putchar>
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	ecbd 8b02 	vpop	{d8}
 80007ec:	bd90      	pop	{r4, r7, pc}
 80007ee:	bf00      	nop
 80007f0:	0801b660 	.word	0x0801b660
 80007f4:	0801b670 	.word	0x0801b670
 80007f8:	0801b67c 	.word	0x0801b67c
 80007fc:	200008c4 	.word	0x200008c4
 8000800:	0801b6a0 	.word	0x0801b6a0
 8000804:	0801b6c0 	.word	0x0801b6c0

08000808 <decimal_part>:
static int32_t decimal_part(float_t x)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t int_part = (int32_t) x;
 8000812:	edd7 7a01 	vldr	s15, [r7, #4]
 8000816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800081a:	ee17 3a90 	vmov	r3, s15
 800081e:	60fb      	str	r3, [r7, #12]
  return (int32_t)((x - int_part) * 100);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	ee07 3a90 	vmov	s15, r3
 8000826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800082a:	ed97 7a01 	vldr	s14, [r7, #4]
 800082e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000832:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000850 <decimal_part+0x48>
 8000836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800083a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800083e:	ee17 3a90 	vmov	r3, s15
}
 8000842:	4618      	mov	r0, r3
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	42c80000 	.word	0x42c80000

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f012 f86b 	bl	8012934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085e:	f000 f8c1 	bl	80009e4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000862:	f000 f935 	bl	8000ad0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000866:	f000 f979 	bl	8000b5c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 800086a:	f000 f94f 	bl	8000b0c <MX_USB_PCD_Init>
  MX_TOF_Init();
 800086e:	f019 fe33 	bl	801a4d8 <MX_TOF_Init>
  /* USER CODE BEGIN 2 */

  Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 8000872:	4b49      	ldr	r3, [pc, #292]	@ (8000998 <main+0x144>)
 8000874:	2202      	movs	r2, #2
 8000876:	601a      	str	r2, [r3, #0]
    Profile.TimingBudget = TIMING_BUDGET;
 8000878:	4b47      	ldr	r3, [pc, #284]	@ (8000998 <main+0x144>)
 800087a:	221e      	movs	r2, #30
 800087c:	605a      	str	r2, [r3, #4]
    Profile.Frequency = 0; /* Induces intermeasurement period, NOT USED for normal ranging */
 800087e:	4b46      	ldr	r3, [pc, #280]	@ (8000998 <main+0x144>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
    Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 8000884:	4b44      	ldr	r3, [pc, #272]	@ (8000998 <main+0x144>)
 8000886:	2201      	movs	r2, #1
 8000888:	60da      	str	r2, [r3, #12]
    Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 800088a:	4b43      	ldr	r3, [pc, #268]	@ (8000998 <main+0x144>)
 800088c:	2201      	movs	r2, #1
 800088e:	611a      	str	r2, [r3, #16]
    status = VL53L4A2_RANGING_SENSOR_ConfigProfile(VL53L4A2_DEV_CENTER, &Profile);
 8000890:	4941      	ldr	r1, [pc, #260]	@ (8000998 <main+0x144>)
 8000892:	2001      	movs	r0, #1
 8000894:	f000 fe20 	bl	80014d8 <VL53L4A2_RANGING_SENSOR_ConfigProfile>
 8000898:	4603      	mov	r3, r0
 800089a:	4a40      	ldr	r2, [pc, #256]	@ (800099c <main+0x148>)
 800089c:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 800089e:	4b3f      	ldr	r3, [pc, #252]	@ (800099c <main+0x148>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d008      	beq.n	80008b8 <main+0x64>
    {
        printf("VL53L4A2_RANGING_SENSOR_ConfigProfile failed with status %ld\n", status);
 80008a6:	4b3d      	ldr	r3, [pc, #244]	@ (800099c <main+0x148>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	483c      	ldr	r0, [pc, #240]	@ (80009a0 <main+0x14c>)
 80008ae:	f019 ff29 	bl	801a704 <iprintf>
        Error_Handler();
 80008b2:	f000 fa0d 	bl	8000cd0 <Error_Handler>
 80008b6:	e002      	b.n	80008be <main+0x6a>
    }
    else
    {
        printf("VL53L4A2_RANGING_SENSOR_ConfigProfile succeeded\n");
 80008b8:	483a      	ldr	r0, [pc, #232]	@ (80009a4 <main+0x150>)
 80008ba:	f019 ff93 	bl	801a7e4 <puts>
    }
    status = VL53L4A2_RANGING_SENSOR_Start(VL53L4A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 80008be:	2101      	movs	r1, #1
 80008c0:	2001      	movs	r0, #1
 80008c2:	f000 fe59 	bl	8001578 <VL53L4A2_RANGING_SENSOR_Start>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4a34      	ldr	r2, [pc, #208]	@ (800099c <main+0x148>)
 80008ca:	6013      	str	r3, [r2, #0]

      if (status != BSP_ERROR_NONE)
 80008cc:	4b33      	ldr	r3, [pc, #204]	@ (800099c <main+0x148>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d004      	beq.n	80008de <main+0x8a>
      {
        printf("VL53L4A2_RANGING_SENSOR_Start failed\n");
 80008d4:	4834      	ldr	r0, [pc, #208]	@ (80009a8 <main+0x154>)
 80008d6:	f019 ff85 	bl	801a7e4 <puts>
        while (1);
 80008da:	bf00      	nop
 80008dc:	e7fd      	b.n	80008da <main+0x86>
      }

      //Calibration at 100mm
      for (int i = 0; i < 10; i++)
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	e013      	b.n	800090c <main+0xb8>
        {
          status = VL53L4A2_RANGING_SENSOR_GetDistance(VL53L4A2_DEV_CENTER, &Result);
 80008e4:	4931      	ldr	r1, [pc, #196]	@ (80009ac <main+0x158>)
 80008e6:	2001      	movs	r0, #1
 80008e8:	f000 fe1e 	bl	8001528 <VL53L4A2_RANGING_SENSOR_GetDistance>
 80008ec:	4603      	mov	r3, r0
 80008ee:	4a2b      	ldr	r2, [pc, #172]	@ (800099c <main+0x148>)
 80008f0:	6013      	str	r3, [r2, #0]

          if (status == BSP_ERROR_NONE)
 80008f2:	4b2a      	ldr	r3, [pc, #168]	@ (800099c <main+0x148>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d102      	bne.n	8000900 <main+0xac>
          {
            print_result(&Result);
 80008fa:	482c      	ldr	r0, [pc, #176]	@ (80009ac <main+0x158>)
 80008fc:	f7ff feca 	bl	8000694 <print_result>
          }

          HAL_Delay(POLLING_PERIOD);
 8000900:	20fa      	movs	r0, #250	@ 0xfa
 8000902:	f012 f863 	bl	80129cc <HAL_Delay>
      for (int i = 0; i < 10; i++)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3301      	adds	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b09      	cmp	r3, #9
 8000910:	dde8      	ble.n	80008e4 <main+0x90>
        }
      VL53L4A2_RANGING_SENSOR_Stop(VL53L4A2_DEV_CENTER);
 8000912:	2001      	movs	r0, #1
 8000914:	f000 fe58 	bl	80015c8 <VL53L4A2_RANGING_SENSOR_Stop>
      VL53L4A2_RANGING_SENSOR_OffsetCalibration(VL53L4A2_DEV_CENTER, 100);
 8000918:	2164      	movs	r1, #100	@ 0x64
 800091a:	2001      	movs	r0, #1
 800091c:	f000 fe7a 	bl	8001614 <VL53L4A2_RANGING_SENSOR_OffsetCalibration>
      status = VL53L4A2_RANGING_SENSOR_Start(VL53L4A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8000920:	2101      	movs	r1, #1
 8000922:	2001      	movs	r0, #1
 8000924:	f000 fe28 	bl	8001578 <VL53L4A2_RANGING_SENSOR_Start>
 8000928:	4603      	mov	r3, r0
 800092a:	4a1c      	ldr	r2, [pc, #112]	@ (800099c <main+0x148>)
 800092c:	6013      	str	r3, [r2, #0]

        if (status != BSP_ERROR_NONE)
 800092e:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <main+0x148>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d004      	beq.n	8000940 <main+0xec>
        {
          printf("VL53L4A2_RANGING_SENSOR_Start failed\n");
 8000936:	481c      	ldr	r0, [pc, #112]	@ (80009a8 <main+0x154>)
 8000938:	f019 ff54 	bl	801a7e4 <puts>
          while (1);
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <main+0xe8>
        }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000940:	f016 fa2e 	bl	8016da0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000944:	481a      	ldr	r0, [pc, #104]	@ (80009b0 <main+0x15c>)
 8000946:	f016 fb22 	bl	8016f8e <osMutexNew>
 800094a:	4603      	mov	r3, r0
 800094c:	4a19      	ldr	r2, [pc, #100]	@ (80009b4 <main+0x160>)
 800094e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ToFData_Queue */
  ToFData_QueueHandle = osMessageQueueNew (16, sizeof(RANGING_SENSOR_Result_t), &ToFData_Queue_attributes);
 8000950:	4a19      	ldr	r2, [pc, #100]	@ (80009b8 <main+0x164>)
 8000952:	2148      	movs	r1, #72	@ 0x48
 8000954:	2010      	movs	r0, #16
 8000956:	f016 fc28 	bl	80171aa <osMessageQueueNew>
 800095a:	4603      	mov	r3, r0
 800095c:	4a17      	ldr	r2, [pc, #92]	@ (80009bc <main+0x168>)
 800095e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000960:	4a17      	ldr	r2, [pc, #92]	@ (80009c0 <main+0x16c>)
 8000962:	2100      	movs	r1, #0
 8000964:	4817      	ldr	r0, [pc, #92]	@ (80009c4 <main+0x170>)
 8000966:	f016 fa65 	bl	8016e34 <osThreadNew>
 800096a:	4603      	mov	r3, r0
 800096c:	4a16      	ldr	r2, [pc, #88]	@ (80009c8 <main+0x174>)
 800096e:	6013      	str	r3, [r2, #0]

  /* creation of Ack_ToF_Data */
  Ack_ToF_DataHandle = osThreadNew(StartAck_ToF_Data, NULL, &Ack_ToF_Data_attributes);
 8000970:	4a16      	ldr	r2, [pc, #88]	@ (80009cc <main+0x178>)
 8000972:	2100      	movs	r1, #0
 8000974:	4816      	ldr	r0, [pc, #88]	@ (80009d0 <main+0x17c>)
 8000976:	f016 fa5d 	bl	8016e34 <osThreadNew>
 800097a:	4603      	mov	r3, r0
 800097c:	4a15      	ldr	r2, [pc, #84]	@ (80009d4 <main+0x180>)
 800097e:	6013      	str	r3, [r2, #0]

  /* creation of SendData */
  SendDataHandle = osThreadNew(StartSendData, NULL, &SendData_attributes);
 8000980:	4a15      	ldr	r2, [pc, #84]	@ (80009d8 <main+0x184>)
 8000982:	2100      	movs	r1, #0
 8000984:	4815      	ldr	r0, [pc, #84]	@ (80009dc <main+0x188>)
 8000986:	f016 fa55 	bl	8016e34 <osThreadNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <main+0x18c>)
 800098e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000990:	f016 fa2a 	bl	8016de8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <main+0x140>
 8000998:	200008c4 	.word	0x200008c4
 800099c:	20000920 	.word	0x20000920
 80009a0:	0801b6e0 	.word	0x0801b6e0
 80009a4:	0801b720 	.word	0x0801b720
 80009a8:	0801b750 	.word	0x0801b750
 80009ac:	200008d8 	.word	0x200008d8
 80009b0:	0801b9c8 	.word	0x0801b9c8
 80009b4:	200008c0 	.word	0x200008c0
 80009b8:	0801b9b0 	.word	0x0801b9b0
 80009bc:	200003ec 	.word	0x200003ec
 80009c0:	0801b944 	.word	0x0801b944
 80009c4:	08000c0d 	.word	0x08000c0d
 80009c8:	200003e0 	.word	0x200003e0
 80009cc:	0801b968 	.word	0x0801b968
 80009d0:	08000c1d 	.word	0x08000c1d
 80009d4:	200003e4 	.word	0x200003e4
 80009d8:	0801b98c 	.word	0x0801b98c
 80009dc:	08000c61 	.word	0x08000c61
 80009e0:	200003e8 	.word	0x200003e8

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b09a      	sub	sp, #104	@ 0x68
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0320 	add.w	r3, r7, #32
 80009ee:	2248      	movs	r2, #72	@ 0x48
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f019 ffd6 	bl	801a9a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
 8000a06:	615a      	str	r2, [r3, #20]
 8000a08:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000a18:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	f023 0303 	bic.w	r3, r3, #3
 8000a24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a2e:	f013 fae9 	bl	8014004 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fde3 	bl	80005fe <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a38:	4b24      	ldr	r3, [pc, #144]	@ (8000acc <SystemClock_Config+0xe8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000a40:	4a22      	ldr	r2, [pc, #136]	@ (8000acc <SystemClock_Config+0xe8>)
 8000a42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	4b20      	ldr	r3, [pc, #128]	@ (8000acc <SystemClock_Config+0xe8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000a54:	2327      	movs	r3, #39	@ 0x27
 8000a56:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6c:	2340      	movs	r3, #64	@ 0x40
 8000a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a74:	2360      	movs	r3, #96	@ 0x60
 8000a76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7c:	f107 0320 	add.w	r3, r7, #32
 8000a80:	4618      	mov	r0, r3
 8000a82:	f013 fe5f 	bl	8014744 <HAL_RCC_OscConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a8c:	f000 f920 	bl	8000cd0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000a90:	236f      	movs	r3, #111	@ 0x6f
 8000a92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a94:	2302      	movs	r3, #2
 8000a96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f014 f9bb 	bl	8014e2c <HAL_RCC_ClockConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000abc:	f000 f908 	bl	8000cd0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ac0:	f014 ffa8 	bl	8015a14 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ac4:	bf00      	nop
 8000ac6:	3768      	adds	r7, #104	@ 0x68
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	58000400 	.word	0x58000400

08000ad0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b094      	sub	sp, #80	@ 0x50
 8000ad4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	2250      	movs	r2, #80	@ 0x50
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f019 ff61 	bl	801a9a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000ae2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af0:	463b      	mov	r3, r7
 8000af2:	4618      	mov	r0, r3
 8000af4:	f014 fe18 	bl	8015728 <HAL_RCCEx_PeriphCLKConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000afe:	f000 f8e7 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000b02:	bf00      	nop
 8000b04:	3750      	adds	r7, #80	@ 0x50
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000b10:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <MX_USB_PCD_Init+0x48>)
 8000b12:	4a11      	ldr	r2, [pc, #68]	@ (8000b58 <MX_USB_PCD_Init+0x4c>)
 8000b14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <MX_USB_PCD_Init+0x48>)
 8000b18:	2208      	movs	r2, #8
 8000b1a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <MX_USB_PCD_Init+0x48>)
 8000b1e:	2202      	movs	r2, #2
 8000b20:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <MX_USB_PCD_Init+0x48>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <MX_USB_PCD_Init+0x48>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_USB_PCD_Init+0x48>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <MX_USB_PCD_Init+0x48>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_USB_PCD_Init+0x48>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <MX_USB_PCD_Init+0x48>)
 8000b42:	f013 f966 	bl	8013e12 <HAL_PCD_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000b4c:	f000 f8c0 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000104 	.word	0x20000104
 8000b58:	40006800 	.word	0x40006800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b70:	2004      	movs	r0, #4
 8000b72:	f7ff fd5a 	bl	800062a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2002      	movs	r0, #2
 8000b78:	f7ff fd57 	bl	800062a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f7ff fd54 	bl	800062a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b82:	2008      	movs	r0, #8
 8000b84:	f7ff fd51 	bl	800062a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2123      	movs	r1, #35	@ 0x23
 8000b8c:	481d      	ldr	r0, [pc, #116]	@ (8000c04 <MX_GPIO_Init+0xa8>)
 8000b8e:	f012 facd 	bl	801312c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000b92:	2323      	movs	r3, #35	@ 0x23
 8000b94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4817      	ldr	r0, [pc, #92]	@ (8000c04 <MX_GPIO_Init+0xa8>)
 8000ba8:	f012 f872 	bl	8012c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000bac:	2301      	movs	r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4812      	ldr	r0, [pc, #72]	@ (8000c08 <MX_GPIO_Init+0xac>)
 8000bc0:	f012 f866 	bl	8012c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <MX_GPIO_Init+0xac>)
 8000bd6:	f012 f85b 	bl	8012c90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2105      	movs	r1, #5
 8000bde:	2006      	movs	r0, #6
 8000be0:	f011 ffd0 	bl	8012b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000be4:	2006      	movs	r0, #6
 8000be6:	f011 ffe7 	bl	8012bb8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2105      	movs	r1, #5
 8000bee:	200a      	movs	r0, #10
 8000bf0:	f011 ffc8 	bl	8012b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000bf4:	200a      	movs	r0, #10
 8000bf6:	f011 ffdf 	bl	8012bb8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	48000400 	.word	0x48000400
 8000c08:	48000c00 	.word	0x48000c00

08000c0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f016 f99f 	bl	8016f58 <osDelay>
 8000c1a:	e7fb      	b.n	8000c14 <StartDefaultTask+0x8>

08000c1c <StartAck_ToF_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAck_ToF_Data */
void StartAck_ToF_Data(void *argument)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAck_ToF_Data */
  /* Infinite loop */
  for(;;)
  {
	  status = VL53L4A2_RANGING_SENSOR_GetDistance(VL53L4A2_DEV_CENTER, &Result);
 8000c24:	490b      	ldr	r1, [pc, #44]	@ (8000c54 <StartAck_ToF_Data+0x38>)
 8000c26:	2001      	movs	r0, #1
 8000c28:	f000 fc7e 	bl	8001528 <VL53L4A2_RANGING_SENSOR_GetDistance>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <StartAck_ToF_Data+0x3c>)
 8000c30:	6013      	str	r3, [r2, #0]
	      if (status == BSP_ERROR_NONE)
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <StartAck_ToF_Data+0x3c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d107      	bne.n	8000c4a <StartAck_ToF_Data+0x2e>
	      {

	    	  //print_result(&Result);
	        osMessageQueuePut(ToFData_QueueHandle, &Result, 1, osWaitForever);
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <StartAck_ToF_Data+0x40>)
 8000c3c:	6818      	ldr	r0, [r3, #0]
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	2201      	movs	r2, #1
 8000c44:	4903      	ldr	r1, [pc, #12]	@ (8000c54 <StartAck_ToF_Data+0x38>)
 8000c46:	f016 fb23 	bl	8017290 <osMessageQueuePut>
	      }
	      osDelay(POLLING_PERIOD);
 8000c4a:	20fa      	movs	r0, #250	@ 0xfa
 8000c4c:	f016 f984 	bl	8016f58 <osDelay>
	  status = VL53L4A2_RANGING_SENSOR_GetDistance(VL53L4A2_DEV_CENTER, &Result);
 8000c50:	e7e8      	b.n	8000c24 <StartAck_ToF_Data+0x8>
 8000c52:	bf00      	nop
 8000c54:	200008d8 	.word	0x200008d8
 8000c58:	20000920 	.word	0x20000920
 8000c5c:	200003ec 	.word	0x200003ec

08000c60 <StartSendData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendData */
void StartSendData(void *argument)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendData */
	static RANGING_SENSOR_Result_t result;
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(myMutex01Handle, osWaitForever);
 8000c68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <StartSendData+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	4618      	mov	r0, r3
 8000c72:	f016 fa12 	bl	801709a <osMutexAcquire>

	  osMessageQueueGet(ToFData_QueueHandle, &result, 1, osWaitForever);
 8000c76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <StartSendData+0x44>)
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4909      	ldr	r1, [pc, #36]	@ (8000ca8 <StartSendData+0x48>)
 8000c82:	f016 fb65 	bl	8017350 <osMessageQueueGet>
	  print_result(&result);
 8000c86:	4808      	ldr	r0, [pc, #32]	@ (8000ca8 <StartSendData+0x48>)
 8000c88:	f7ff fd04 	bl	8000694 <print_result>

	   osMutexRelease(myMutex01Handle);
 8000c8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <StartSendData+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f016 fa4d 	bl	8017130 <osMutexRelease>
    osDelay(1);
 8000c96:	2001      	movs	r0, #1
 8000c98:	f016 f95e 	bl	8016f58 <osDelay>
	  osMutexAcquire(myMutex01Handle, osWaitForever);
 8000c9c:	bf00      	nop
 8000c9e:	e7e3      	b.n	8000c68 <StartSendData+0x8>
 8000ca0:	200008c0 	.word	0x200008c0
 8000ca4:	200003ec 	.word	0x200003ec
 8000ca8:	20000924 	.word	0x20000924

08000cac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a04      	ldr	r2, [pc, #16]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d101      	bne.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cbe:	f011 fe59 	bl	8012974 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40014800 	.word	0x40014800

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <Error_Handler+0x8>

08000cdc <LL_AHB2_GRP1_EnableClock>:
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ce8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000cea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cf8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d00:	68fb      	ldr	r3, [r7, #12]
}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b085      	sub	sp, #20
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d1a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d2a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	210f      	movs	r1, #15
 8000d48:	f06f 0001 	mvn.w	r0, #1
 8000d4c:	f011 ff1a 	bl	8012b84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b09c      	sub	sp, #112	@ 0x70
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	2250      	movs	r2, #80	@ 0x50
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f019 fe15 	bl	801a9a4 <memset>
  if(hpcd->Instance==USB)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dfc <HAL_PCD_MspInit+0xa8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d136      	bne.n	8000df2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d88:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000d8a:	2318      	movs	r3, #24
 8000d8c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000d8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d92:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000d94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000d9a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000da0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000da4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000da6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000daa:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	4618      	mov	r0, r3
 8000db2:	f014 fcb9 	bl	8015728 <HAL_RCCEx_PeriphCLKConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000dbc:	f7ff ff88 	bl	8000cd0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff ff8b 	bl	8000cdc <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dc6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000dca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000dd8:	230a      	movs	r3, #10
 8000dda:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000de0:	4619      	mov	r1, r3
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de6:	f011 ff53 	bl	8012c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000dea:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000dee:	f7ff ff8e 	bl	8000d0e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000df2:	bf00      	nop
 8000df4:	3770      	adds	r7, #112	@ 0x70
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40006800 	.word	0x40006800

08000e00 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e0c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e24:	68fb      	ldr	r3, [r7, #12]
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	@ 0x30
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	201a      	movs	r0, #26
 8000e4a:	f011 fe9b 	bl	8012b84 <HAL_NVIC_SetPriority>
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000e4e:	201a      	movs	r0, #26
 8000e50:	f011 feb2 	bl	8012bb8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000e54:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000e58:	f7ff ffd2 	bl	8000e00 <LL_APB2_GRP1_EnableClock>
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e5c:	f107 0208 	add.w	r2, r7, #8
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f014 f9cc 	bl	8015204 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e6c:	f014 f9b4 	bl	80151d8 <HAL_RCC_GetPCLK2Freq>
 8000e70:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e74:	4a12      	ldr	r2, [pc, #72]	@ (8000ec0 <HAL_InitTick+0x8c>)
 8000e76:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7a:	0c9b      	lsrs	r3, r3, #18
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000e80:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <HAL_InitTick+0x90>)
 8000e82:	4a11      	ldr	r2, [pc, #68]	@ (8000ec8 <HAL_InitTick+0x94>)
 8000e84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <HAL_InitTick+0x90>)
 8000e88:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e8c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <HAL_InitTick+0x90>)
 8000e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e92:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_InitTick+0x90>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_InitTick+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000ea0:	4808      	ldr	r0, [pc, #32]	@ (8000ec4 <HAL_InitTick+0x90>)
 8000ea2:	f014 fece 	bl	8015c42 <HAL_TIM_Base_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d104      	bne.n	8000eb6 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000eac:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <HAL_InitTick+0x90>)
 8000eae:	f014 ff29 	bl	8015d04 <HAL_TIM_Base_Start_IT>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3730      	adds	r7, #48	@ 0x30
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	431bde83 	.word	0x431bde83
 8000ec4:	2000096c 	.word	0x2000096c
 8000ec8:	40014800 	.word	0x40014800

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f012 f928 	bl	801315c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <EXTI4_IRQHandler+0x10>)
 8000f16:	f011 fe8b 	bl	8012c30 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000070 	.word	0x20000070

08000f24 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000f2a:	f014 ff39 	bl	8015da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000096c 	.word	0x2000096c

08000f38 <LL_AHB2_GRP1_EnableClock>:
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <LL_APB1_GRP1_EnableClock>:
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b085      	sub	sp, #20
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000f78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_APB1_GRP1_DisableClock>:
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000fce:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <BSP_I2C1_Init+0x70>)
 8000fd0:	4a19      	ldr	r2, [pc, #100]	@ (8001038 <BSP_I2C1_Init+0x74>)
 8000fd2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000fd4:	4b19      	ldr	r3, [pc, #100]	@ (800103c <BSP_I2C1_Init+0x78>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	4918      	ldr	r1, [pc, #96]	@ (800103c <BSP_I2C1_Init+0x78>)
 8000fdc:	600a      	str	r2, [r1, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d122      	bne.n	8001028 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000fe2:	4814      	ldr	r0, [pc, #80]	@ (8001034 <BSP_I2C1_Init+0x70>)
 8000fe4:	f012 fbbe 	bl	8013764 <HAL_I2C_GetState>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d11c      	bne.n	8001028 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000fee:	4811      	ldr	r0, [pc, #68]	@ (8001034 <BSP_I2C1_Init+0x70>)
 8000ff0:	f000 f8ee 	bl	80011d0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d116      	bne.n	8001028 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000ffa:	480e      	ldr	r0, [pc, #56]	@ (8001034 <BSP_I2C1_Init+0x70>)
 8000ffc:	f000 f8a4 	bl	8001148 <MX_I2C1_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001006:	f06f 0307 	mvn.w	r3, #7
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	e00c      	b.n	8001028 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800100e:	2100      	movs	r1, #0
 8001010:	4808      	ldr	r0, [pc, #32]	@ (8001034 <BSP_I2C1_Init+0x70>)
 8001012:	f012 fe67 	bl	8013ce4 <HAL_I2CEx_ConfigAnalogFilter>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800101c:	f06f 0307 	mvn.w	r3, #7
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	e001      	b.n	8001028 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001028:	687b      	ldr	r3, [r7, #4]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200009b8 	.word	0x200009b8
 8001038:	40005400 	.word	0x40005400
 800103c:	20000a0c 	.word	0x20000a0c

08001040 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800104a:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <BSP_I2C1_DeInit+0x48>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d014      	beq.n	800107c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001052:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <BSP_I2C1_DeInit+0x48>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3b01      	subs	r3, #1
 8001058:	4a0b      	ldr	r2, [pc, #44]	@ (8001088 <BSP_I2C1_DeInit+0x48>)
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <BSP_I2C1_DeInit+0x48>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10b      	bne.n	800107c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001064:	4809      	ldr	r0, [pc, #36]	@ (800108c <BSP_I2C1_DeInit+0x4c>)
 8001066:	f000 f8f7 	bl	8001258 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800106a:	4808      	ldr	r0, [pc, #32]	@ (800108c <BSP_I2C1_DeInit+0x4c>)
 800106c:	f012 f929 	bl	80132c2 <HAL_I2C_DeInit>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001076:	f06f 0307 	mvn.w	r3, #7
 800107a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000a0c 	.word	0x20000a0c
 800108c:	200009b8 	.word	0x200009b8

08001090 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af02      	add	r7, sp, #8
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	80fb      	strh	r3, [r7, #6]
 800109c:	4613      	mov	r3, r2
 800109e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80010a4:	88bb      	ldrh	r3, [r7, #4]
 80010a6:	88f9      	ldrh	r1, [r7, #6]
 80010a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010ac:	9200      	str	r2, [sp, #0]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <BSP_I2C1_Send+0x50>)
 80010b2:	f012 f949 	bl	8013348 <HAL_I2C_Master_Transmit>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00c      	beq.n	80010d6 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80010bc:	4808      	ldr	r0, [pc, #32]	@ (80010e0 <BSP_I2C1_Send+0x50>)
 80010be:	f012 fb5f 	bl	8013780 <HAL_I2C_GetError>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d003      	beq.n	80010d0 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80010c8:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	e002      	b.n	80010d6 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80010d0:	f06f 0303 	mvn.w	r3, #3
 80010d4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200009b8 	.word	0x200009b8

080010e4 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	80fb      	strh	r3, [r7, #6]
 80010f0:	4613      	mov	r3, r2
 80010f2:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80010f8:	88bb      	ldrh	r3, [r7, #4]
 80010fa:	88f9      	ldrh	r1, [r7, #6]
 80010fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	480b      	ldr	r0, [pc, #44]	@ (8001134 <BSP_I2C1_Recv+0x50>)
 8001106:	f012 fa37 	bl	8013578 <HAL_I2C_Master_Receive>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00c      	beq.n	800112a <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001110:	4808      	ldr	r0, [pc, #32]	@ (8001134 <BSP_I2C1_Recv+0x50>)
 8001112:	f012 fb35 	bl	8013780 <HAL_I2C_GetError>
 8001116:	4603      	mov	r3, r0
 8001118:	2b04      	cmp	r3, #4
 800111a:	d003      	beq.n	8001124 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800111c:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	e002      	b.n	800112a <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001124:	f06f 0303 	mvn.w	r3, #3
 8001128:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200009b8 	.word	0x200009b8

08001138 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800113c:	f011 fc2e 	bl	801299c <HAL_GetTick>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a1c      	ldr	r2, [pc, #112]	@ (80011c8 <MX_I2C1_Init+0x80>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00B07CB4;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <MX_I2C1_Init+0x84>)
 800115e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f011 fffe 	bl	801318c <HAL_I2C_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119a:	2100      	movs	r1, #0
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f012 fda1 	bl	8013ce4 <HAL_I2CEx_ConfigAnalogFilter>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f012 fde3 	bl	8013d7a <HAL_I2CEx_ConfigDigitalFilter>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40005400 	.word	0x40005400
 80011cc:	00b07cb4 	.word	0x00b07cb4

080011d0 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b09c      	sub	sp, #112	@ 0x70
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2250      	movs	r2, #80	@ 0x50
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f019 fbdf 	bl	801a9a4 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011e6:	2304      	movs	r3, #4
 80011e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011ea:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80011ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4618      	mov	r0, r3
 80011f6:	f014 fa97 	bl	8015728 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	2002      	movs	r0, #2
 80011fc:	f7ff fe9c 	bl	8000f38 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001200:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001204:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001206:	2312      	movs	r3, #18
 8001208:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001212:	2304      	movs	r3, #4
 8001214:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001216:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800121a:	4619      	mov	r1, r3
 800121c:	480d      	ldr	r0, [pc, #52]	@ (8001254 <I2C1_MspInit+0x84>)
 800121e:	f011 fd37 	bl	8012c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001222:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001226:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001228:	2312      	movs	r3, #18
 800122a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001234:	2304      	movs	r3, #4
 8001236:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001238:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800123c:	4619      	mov	r1, r3
 800123e:	4805      	ldr	r0, [pc, #20]	@ (8001254 <I2C1_MspInit+0x84>)
 8001240:	f011 fd26 	bl	8012c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001244:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001248:	f7ff fe8f 	bl	8000f6a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800124c:	bf00      	nop
 800124e:	3770      	adds	r7, #112	@ 0x70
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	48000400 	.word	0x48000400

08001258 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001260:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001264:	f7ff fe9a 	bl	8000f9c <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001268:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800126c:	4805      	ldr	r0, [pc, #20]	@ (8001284 <I2C1_MspDeInit+0x2c>)
 800126e:	f011 fe7f 	bl	8012f70 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001272:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001276:	4803      	ldr	r0, [pc, #12]	@ (8001284 <I2C1_MspDeInit+0x2c>)
 8001278:	f011 fe7a 	bl	8012f70 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	48000400 	.word	0x48000400

08001288 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e00a      	b.n	80012b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800129a:	f3af 8000 	nop.w
 800129e:	4601      	mov	r1, r0
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	b2ca      	uxtb	r2, r1
 80012a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbf0      	blt.n	800129a <_read+0x12>
  }

  return len;
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012ea:	605a      	str	r2, [r3, #4]
  return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_isatty>:

int _isatty(int file)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001334:	4a14      	ldr	r2, [pc, #80]	@ (8001388 <_sbrk+0x5c>)
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <_sbrk+0x60>)
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <_sbrk+0x64>)
 800134a:	4a12      	ldr	r2, [pc, #72]	@ (8001394 <_sbrk+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	429a      	cmp	r2, r3
 800135a:	d207      	bcs.n	800136c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800135c:	f019 fbda 	bl	801ab14 <__errno>
 8001360:	4603      	mov	r3, r0
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e009      	b.n	8001380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a05      	ldr	r2, [pc, #20]	@ (8001390 <_sbrk+0x64>)
 800137c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20030000 	.word	0x20030000
 800138c:	00000400 	.word	0x00000400
 8001390:	20000a10 	.word	0x20000a10
 8001394:	2000a238 	.word	0x2000a238

08001398 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800139c:	4b24      	ldr	r3, [pc, #144]	@ (8001430 <SystemInit+0x98>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a2:	4a23      	ldr	r2, [pc, #140]	@ (8001430 <SystemInit+0x98>)
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80013ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80013bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013c0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80013c4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80013c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013d0:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <SystemInit+0x9c>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80013d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013e2:	f023 0305 	bic.w	r3, r3, #5
 80013e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80013ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80013f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013f6:	f023 0301 	bic.w	r3, r3, #1
 80013fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80013fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001402:	4a0d      	ldr	r2, [pc, #52]	@ (8001438 <SystemInit+0xa0>)
 8001404:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800140a:	4a0b      	ldr	r2, [pc, #44]	@ (8001438 <SystemInit+0xa0>)
 800140c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800140e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001418:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800141c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800141e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00
 8001434:	faf6fefb 	.word	0xfaf6fefb
 8001438:	22041000 	.word	0x22041000

0800143c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800143c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001440:	3304      	adds	r3, #4

08001442 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001442:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001444:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001446:	d3f9      	bcc.n	800143c <CopyDataInit>
  bx lr
 8001448:	4770      	bx	lr

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800144a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800144c:	3004      	adds	r0, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800144e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>
  bx lr
 8001452:	4770      	bx	lr

08001454 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001454:	480c      	ldr	r0, [pc, #48]	@ (8001488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001456:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001458:	f7ff ff9e 	bl	8001398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800145c:	480b      	ldr	r0, [pc, #44]	@ (800148c <LoopForever+0x6>)
 800145e:	490c      	ldr	r1, [pc, #48]	@ (8001490 <LoopForever+0xa>)
 8001460:	4a0c      	ldr	r2, [pc, #48]	@ (8001494 <LoopForever+0xe>)
 8001462:	2300      	movs	r3, #0
 8001464:	f7ff ffed 	bl	8001442 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001468:	480b      	ldr	r0, [pc, #44]	@ (8001498 <LoopForever+0x12>)
 800146a:	490c      	ldr	r1, [pc, #48]	@ (800149c <LoopForever+0x16>)
 800146c:	4a0c      	ldr	r2, [pc, #48]	@ (80014a0 <LoopForever+0x1a>)
 800146e:	2300      	movs	r3, #0
 8001470:	f7ff ffe7 	bl	8001442 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001474:	480b      	ldr	r0, [pc, #44]	@ (80014a4 <LoopForever+0x1e>)
 8001476:	490c      	ldr	r1, [pc, #48]	@ (80014a8 <LoopForever+0x22>)
 8001478:	2300      	movs	r3, #0
 800147a:	f7ff ffe8 	bl	800144e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800147e:	f019 fb4f 	bl	801ab20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001482:	f7ff f9e7 	bl	8000854 <main>

08001486 <LoopForever>:

LoopForever:
  b LoopForever
 8001486:	e7fe      	b.n	8001486 <LoopForever>
  ldr   r0, =_estack
 8001488:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800148c:	20000008 	.word	0x20000008
 8001490:	200000e4 	.word	0x200000e4
 8001494:	0801baf4 	.word	0x0801baf4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001498:	20030000 	.word	0x20030000
 800149c:	20030000 	.word	0x20030000
 80014a0:	0801bbd0 	.word	0x0801bbd0
  INIT_BSS _sbss, _ebss
 80014a4:	200000e8 	.word	0x200000e8
 80014a8:	2000a238 	.word	0x2000a238

080014ac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC1_IRQHandler>

080014ae <VL53L4A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d903      	bls.n	80014c4 <VL53L4A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014bc:	f06f 0301 	mvn.w	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	e003      	b.n	80014cc <VL53L4A2_RANGING_SENSOR_Init+0x1e>
  }
  else
  {
    ret = VL53L4CX_Probe(Instance);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f8c9 	bl	800165c <VL53L4CX_Probe>
 80014ca:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80014cc:	68fb      	ldr	r3, [r7, #12]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <VL53L4A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d903      	bls.n	80014f0 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014e8:	f06f 0301 	mvn.w	r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	e012      	b.n	8001516 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L4A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 80014f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x48>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	490b      	ldr	r1, [pc, #44]	@ (8001524 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80014fe:	6839      	ldr	r1, [r7, #0]
 8001500:	4610      	mov	r0, r2
 8001502:	4798      	blx	r3
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	da03      	bge.n	8001512 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800150a:	f06f 0304 	mvn.w	r3, #4
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	e001      	b.n	8001516 <VL53L4A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000a20 	.word	0x20000a20
 8001524:	20000a14 	.word	0x20000a14

08001528 <VL53L4A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d903      	bls.n	8001540 <VL53L4A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001538:	f06f 0301 	mvn.w	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e012      	b.n	8001566 <VL53L4A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->GetDistance(VL53L4A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001540:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <VL53L4A2_RANGING_SENSOR_GetDistance+0x48>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	490b      	ldr	r1, [pc, #44]	@ (8001574 <VL53L4A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800154e:	6839      	ldr	r1, [r7, #0]
 8001550:	4610      	mov	r0, r2
 8001552:	4798      	blx	r3
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	da03      	bge.n	8001562 <VL53L4A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800155a:	f06f 0304 	mvn.w	r3, #4
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e001      	b.n	8001566 <VL53L4A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000a20 	.word	0x20000a20
 8001574:	20000a14 	.word	0x20000a14

08001578 <VL53L4A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d903      	bls.n	8001590 <VL53L4A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001588:	f06f 0301 	mvn.w	r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e012      	b.n	80015b6 <VL53L4A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->Start(VL53L4A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001590:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <VL53L4A2_RANGING_SENSOR_Start+0x48>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	490b      	ldr	r1, [pc, #44]	@ (80015c4 <VL53L4A2_RANGING_SENSOR_Start+0x4c>)
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	4610      	mov	r0, r2
 80015a2:	4798      	blx	r3
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da03      	bge.n	80015b2 <VL53L4A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80015aa:	f06f 0304 	mvn.w	r3, #4
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	e001      	b.n	80015b6 <VL53L4A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000a20 	.word	0x20000a20
 80015c4:	20000a14 	.word	0x20000a14

080015c8 <VL53L4A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d903      	bls.n	80015de <VL53L4A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015d6:	f06f 0301 	mvn.w	r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	e011      	b.n	8001602 <VL53L4A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L4A2_RANGING_SENSOR_Drv->Stop(VL53L4A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 80015de:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <VL53L4A2_RANGING_SENSOR_Stop+0x44>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e4:	490a      	ldr	r1, [pc, #40]	@ (8001610 <VL53L4A2_RANGING_SENSOR_Stop+0x48>)
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80015ec:	4610      	mov	r0, r2
 80015ee:	4798      	blx	r3
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da03      	bge.n	80015fe <VL53L4A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80015f6:	f06f 0304 	mvn.w	r3, #4
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e001      	b.n	8001602 <VL53L4A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000a20 	.word	0x20000a20
 8001610:	20000a14 	.word	0x20000a14

08001614 <VL53L4A2_RANGING_SENSOR_OffsetCalibration>:
  * @param Instance    Ranging sensor instance.
  * @param CalDistance   Calibration distance in mm.
  * @retval BSP status
  */
int32_t VL53L4A2_RANGING_SENSOR_OffsetCalibration(uint32_t Instance, uint32_t CalDistance)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d903      	bls.n	800162c <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001624:	f06f 0301 	mvn.w	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	e010      	b.n	800164e <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x3a>
  }
  else if (VL53L4CX_OffsetCalibration(VL53L4A2_RANGING_SENSOR_CompObj[Instance], CalDistance) < 0)
 800162c:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x44>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001634:	6839      	ldr	r1, [r7, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f010 fe7c 	bl	8012334 <VL53L4CX_OffsetCalibration>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	da03      	bge.n	800164a <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001642:	f06f 0304 	mvn.w	r3, #4
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	e001      	b.n	800164e <VL53L4A2_RANGING_SENSOR_OffsetCalibration+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000a14 	.word	0x20000a14

0800165c <VL53L4CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L4CX_Probe(uint32_t Instance)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	@ 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  VL53L4CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L4CX_Object_t   VL53L4CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L4CX_ADDRESS;
 8001664:	2352      	movs	r3, #82	@ 0x52
 8001666:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L4A2_I2C_INIT;
 8001668:	4b38      	ldr	r3, [pc, #224]	@ (800174c <VL53L4CX_Probe+0xf0>)
 800166a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L4A2_I2C_DEINIT;
 800166c:	4b38      	ldr	r3, [pc, #224]	@ (8001750 <VL53L4CX_Probe+0xf4>)
 800166e:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L4A2_I2C_WRITEREG;
 8001670:	4b38      	ldr	r3, [pc, #224]	@ (8001754 <VL53L4CX_Probe+0xf8>)
 8001672:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L4A2_I2C_READREG;
 8001674:	4b38      	ldr	r3, [pc, #224]	@ (8001758 <VL53L4CX_Probe+0xfc>)
 8001676:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L4A2_GETTICK;
 8001678:	4b38      	ldr	r3, [pc, #224]	@ (800175c <VL53L4CX_Probe+0x100>)
 800167a:	623b      	str	r3, [r7, #32]

  if (VL53L4CX_RegisterBusIO(&(VL53L4CXObj[Instance]), &IOCtx) != VL53L4CX_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f242 42f0 	movw	r2, #9456	@ 0x24f0
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	4a36      	ldr	r2, [pc, #216]	@ (8001760 <VL53L4CX_Probe+0x104>)
 8001688:	4413      	add	r3, r2
 800168a:	f107 020c 	add.w	r2, r7, #12
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f010 fb66 	bl	8011d62 <VL53L4CX_RegisterBusIO>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <VL53L4CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800169c:	f06f 0304 	mvn.w	r3, #4
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80016a2:	e04d      	b.n	8001740 <VL53L4CX_Probe+0xe4>
  }
  else
  {
    VL53L4A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L4CX_RANGING_SENSOR_Driver;
 80016a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001764 <VL53L4CX_Probe+0x108>)
 80016a6:	4a30      	ldr	r2, [pc, #192]	@ (8001768 <VL53L4CX_Probe+0x10c>)
 80016a8:	601a      	str	r2, [r3, #0]
    VL53L4A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L4CXObj[Instance]);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f242 42f0 	movw	r2, #9456	@ 0x24f0
 80016b0:	fb02 f303 	mul.w	r3, r2, r3
 80016b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001760 <VL53L4CX_Probe+0x104>)
 80016b6:	441a      	add	r2, r3
 80016b8:	492c      	ldr	r1, [pc, #176]	@ (800176c <VL53L4CX_Probe+0x110>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (VL53L4CX_ReadID(&(VL53L4CXObj[Instance]), &id) != VL53L4CX_OK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f242 42f0 	movw	r2, #9456	@ 0x24f0
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	4a25      	ldr	r2, [pc, #148]	@ (8001760 <VL53L4CX_Probe+0x104>)
 80016cc:	4413      	add	r3, r2
 80016ce:	f107 0208 	add.w	r2, r7, #8
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f010 fbf6 	bl	8011ec6 <VL53L4CX_ReadID>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <VL53L4CX_Probe+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80016e0:	f06f 0304 	mvn.w	r3, #4
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016e6:	e02b      	b.n	8001740 <VL53L4CX_Probe+0xe4>
    }
    else if (id != VL53L4CX_ID)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	f64e 32aa 	movw	r2, #60330	@ 0xebaa
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d003      	beq.n	80016fa <VL53L4CX_Probe+0x9e>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80016f2:	f06f 0306 	mvn.w	r3, #6
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016f8:	e022      	b.n	8001740 <VL53L4CX_Probe+0xe4>
    }
    else if (VL53L4A2_RANGING_SENSOR_Drv->Init(VL53L4A2_RANGING_SENSOR_CompObj[Instance]) != VL53L4CX_OK)
 80016fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <VL53L4CX_Probe+0x108>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	491a      	ldr	r1, [pc, #104]	@ (800176c <VL53L4CX_Probe+0x110>)
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001708:	4610      	mov	r0, r2
 800170a:	4798      	blx	r3
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <VL53L4CX_Probe+0xbe>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001712:	f06f 0304 	mvn.w	r3, #4
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
 8001718:	e012      	b.n	8001740 <VL53L4CX_Probe+0xe4>
    }
    else if (VL53L4A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L4A2_RANGING_SENSOR_CompObj[Instance],
 800171a:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <VL53L4CX_Probe+0x108>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	4912      	ldr	r1, [pc, #72]	@ (800176c <VL53L4CX_Probe+0x110>)
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001728:	4911      	ldr	r1, [pc, #68]	@ (8001770 <VL53L4CX_Probe+0x114>)
 800172a:	4610      	mov	r0, r2
 800172c:	4798      	blx	r3
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <VL53L4CX_Probe+0xe0>
                                                          &VL53L4A2_RANGING_SENSOR_Cap) != VL53L4CX_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001734:	f06f 0304 	mvn.w	r3, #4
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
 800173a:	e001      	b.n	8001740 <VL53L4CX_Probe+0xe4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8001740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001742:	4618      	mov	r0, r3
 8001744:	3728      	adds	r7, #40	@ 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	08000fc5 	.word	0x08000fc5
 8001750:	08001041 	.word	0x08001041
 8001754:	08001091 	.word	0x08001091
 8001758:	080010e5 	.word	0x080010e5
 800175c:	08001139 	.word	0x08001139
 8001760:	20000a38 	.word	0x20000a38
 8001764:	20000a20 	.word	0x20000a20
 8001768:	20000038 	.word	0x20000038
 800176c:	20000a14 	.word	0x20000a14
 8001770:	20000a24 	.word	0x20000a24

08001774 <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001780:	2300      	movs	r3, #0
 8001782:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3318      	adds	r3, #24
 8001788:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8001790:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	085b      	lsrs	r3, r3, #1
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	2101      	movs	r1, #1
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f010 f8e7 	bl	8011970 <VL53LX_WrByte>
 80017a2:	4603      	mov	r3, r0
 80017a4:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	085b      	lsrs	r3, r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80017b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 80017ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d105      	bne.n	80017e2 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 80017d6:	2101      	movs	r1, #1
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f001 fe7a 	bl	80034d2 <VL53LX_data_init>
 80017de:	4603      	mov	r3, r0
 80017e0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 80017e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d107      	bne.n	80017fa <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 80017ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017ee:	2102      	movs	r1, #2
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f885 	bl	8001900 <SetPresetModeL3CX>
 80017f6:	4603      	mov	r3, r0
 80017f8:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 80017fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001802:	f248 2135 	movw	r1, #33333	@ 0x8235
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f980 	bl	8001b0c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 800180c:	4603      	mov	r3, r0
 800180e:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8001810:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10a      	bne.n	800182e <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3318      	adds	r3, #24
 800181c:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8001824:	220c      	movs	r2, #12
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f019 f8bb 	bl	801a9a4 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 800182e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d105      	bne.n	8001842 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 8001836:	2102      	movs	r1, #2
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f004 f86e 	bl	800591a <VL53LX_set_dmax_mode>
 800183e:	4603      	mov	r3, r0
 8001840:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 8001842:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d105      	bne.n	8001856 <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 800184a:	2100      	movs	r1, #0
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 ff57 	bl	8002700 <VL53LX_SmudgeCorrectionEnable>
 8001852:	4603      	mov	r3, r0
 8001854:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001856:	2320      	movs	r3, #32
 8001858:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001866:	2202      	movs	r2, #2
 8001868:	f883 24e0 	strb.w	r2, [r3, #1248]	@ 0x4e0
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 800186c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 8001884:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f00f fc2a 	bl	80110e2 <VL53LX_poll_for_boot_completion>
 800188e:	4603      	mov	r3, r0
 8001890:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001892:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 80018b0:	4a12      	ldr	r2, [pc, #72]	@ (80018fc <ComputeDevicePresetMode+0x5c>)
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	4611      	mov	r1, r2
 80018ba:	8019      	strh	r1, [r3, #0]
 80018bc:	3302      	adds	r3, #2
 80018be:	0c12      	lsrs	r2, r2, #16
 80018c0:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d002      	beq.n	80018ce <ComputeDevicePresetMode+0x2e>
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d003      	beq.n	80018d4 <ComputeDevicePresetMode+0x34>
 80018cc:	e005      	b.n	80018da <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
		break;
 80018d2:	e004      	b.n	80018de <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
		break;
 80018d8:	e001      	b.n	80018de <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 80018da:	2302      	movs	r3, #2
 80018dc:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	3310      	adds	r3, #16
 80018e2:	443b      	add	r3, r7
 80018e4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	701a      	strb	r2, [r3, #0]

	return Status;
 80018ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	0801b778 	.word	0x0801b778

08001900 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001900:	b5b0      	push	{r4, r5, r7, lr}
 8001902:	b08e      	sub	sp, #56	@ 0x38
 8001904:	af04      	add	r7, sp, #16
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	460b      	mov	r3, r1
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800190e:	2300      	movs	r3, #0
 8001910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001924:	2320      	movs	r3, #32
 8001926:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 800192a:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 800192e:	7afb      	ldrb	r3, [r7, #11]
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ffb4 	bl	80018a0 <ComputeDevicePresetMode>
 8001938:	4603      	mov	r3, r0
 800193a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 800193e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001942:	2b00      	cmp	r3, #0
 8001944:	d112      	bne.n	800196c <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 8001946:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800194a:	f107 001c 	add.w	r0, r7, #28
 800194e:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	f107 0318 	add.w	r3, r7, #24
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	4603      	mov	r3, r0
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f002 fa19 	bl	8003d98 <VL53LX_get_preset_mode_timing_cfg>
 8001966:	4603      	mov	r3, r0
 8001968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 800196c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001970:	2b00      	cmp	r3, #0
 8001972:	d112      	bne.n	800199a <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 8001974:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 8001978:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 800197a:	69fd      	ldr	r5, [r7, #28]
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	9102      	str	r1, [sp, #8]
 8001984:	9201      	str	r2, [sp, #4]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	462b      	mov	r3, r5
 800198a:	4622      	mov	r2, r4
 800198c:	4601      	mov	r1, r0
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f002 fa63 	bl	8003e5a <VL53LX_set_preset_mode>
 8001994:	4603      	mov	r3, r0
 8001996:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 800199a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d103      	bne.n	80019aa <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80019a8:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 80019aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3728      	adds	r7, #40	@ 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bdb0      	pop	{r4, r5, r7, pc}

080019b6 <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3318      	adds	r3, #24
 80019c6:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f893 3393 	ldrb.w	r3, [r3, #915]	@ 0x393
 80019ce:	2baa      	cmp	r3, #170	@ 0xaa
 80019d0:	d106      	bne.n	80019e0 <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f893 3392 	ldrb.w	r3, [r3, #914]	@ 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 80019d8:	2beb      	cmp	r3, #235	@ 0xeb
 80019da:	d101      	bne.n	80019e0 <IsL4+0x2a>
		devL4 = 1;
 80019dc:	2301      	movs	r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
	return devL4;
 80019e0:	68fb      	ldr	r3, [r7, #12]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 80019fa:	793b      	ldrb	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d808      	bhi.n	8001a12 <CheckValidRectRoi+0x24>
 8001a00:	797b      	ldrb	r3, [r7, #5]
 8001a02:	2b0f      	cmp	r3, #15
 8001a04:	d805      	bhi.n	8001a12 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001a06:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001a08:	2b0f      	cmp	r3, #15
 8001a0a:	d802      	bhi.n	8001a12 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	2b0f      	cmp	r3, #15
 8001a10:	d901      	bls.n	8001a16 <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001a12:	23fc      	movs	r3, #252	@ 0xfc
 8001a14:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001a16:	793a      	ldrb	r2, [r7, #4]
 8001a18:	79bb      	ldrb	r3, [r7, #6]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d803      	bhi.n	8001a26 <CheckValidRectRoi+0x38>
 8001a1e:	797a      	ldrb	r2, [r7, #5]
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d201      	bcs.n	8001a2a <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001a26:	23fc      	movs	r3, #252	@ 0xfc
 8001a28:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b088      	sub	sp, #32
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d008      	beq.n	8001a6e <VL53LX_SetDistanceMode+0x34>
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d005      	beq.n	8001a6e <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d002      	beq.n	8001a6e <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 8001a68:	f06f 0303 	mvn.w	r3, #3
 8001a6c:	e049      	b.n	8001b02 <VL53LX_SetDistanceMode+0xc8>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffa1 	bl	80019b6 <IsL4>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <VL53LX_SetDistanceMode+0x4c>
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d102      	bne.n	8001a86 <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001a80:	f06f 0303 	mvn.w	r3, #3
 8001a84:	e03d      	b.n	8001b02 <VL53LX_SetDistanceMode+0xc8>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8a:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001a8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10a      	bne.n	8001aaa <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	f107 0210 	add.w	r2, r7, #16
 8001a9c:	f107 010c 	add.w	r1, r7, #12
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f002 f854 	bl	8003b4e <VL53LX_get_timeouts_us>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 8001aaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d107      	bne.n	8001ac2 <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff21 	bl	8001900 <SetPresetModeL3CX>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 8001ac2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <VL53LX_SetDistanceMode+0x9e>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	f882 34e0 	strb.w	r3, [r2, #1248]	@ 0x4e0
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001ad8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10e      	bne.n	8001afe <VL53LX_SetDistanceMode+0xc4>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001ae0:	68f9      	ldr	r1, [r7, #12]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f001 fff8 	bl	8003adc <VL53LX_set_timeouts_us>
 8001aec:	4603      	mov	r3, r0
 8001aee:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 8001af0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <VL53LX_SetDistanceMode+0xc4>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	629a      	str	r2, [r3, #40]	@ 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001afe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3720      	adds	r7, #32
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001b28:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 8001b2a:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	4a31      	ldr	r2, [pc, #196]	@ (8001bf4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d902      	bls.n	8001b3a <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001b34:	23fc      	movs	r3, #252	@ 0xfc
 8001b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (Status == VL53LX_ERROR_NONE)
 8001b3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10b      	bne.n	8001b5a <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	f107 0210 	add.w	r2, r7, #16
 8001b4a:	f107 010c 	add.w	r1, r7, #12
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f001 fffd 	bl	8003b4e <VL53LX_get_timeouts_us>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 8001b5a:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8001b5e:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 8001b60:	2306      	movs	r3, #6
 8001b62:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff26 	bl	80019b6 <IsL4>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 8001b70:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 8001b72:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d803      	bhi.n	8001b84 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001b7c:	23fc      	movs	r3, #252	@ 0xfc
 8001b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b82:	e003      	b.n	8001b8c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8001b8a:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001b8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d11c      	bne.n	8001bce <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	6a3a      	ldr	r2, [r7, #32]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d203      	bcs.n	8001ba4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 8001b9c:	23fc      	movs	r3, #252	@ 0xfc
 8001b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001ba2:	e00d      	b.n	8001bc0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bac:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 8001bae:	68f9      	ldr	r1, [r7, #12]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f001 ff91 	bl	8003adc <VL53LX_set_timeouts_us>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 8001bc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	629a      	str	r2, [r3, #40]	@ 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001bce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd8>
		VL53LXDevDataSet(Dev,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bdc:	461a      	mov	r2, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	f8c2 34e4 	str.w	r3, [r2, #1252]	@ 0x4e4
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001be4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3728      	adds	r7, #40	@ 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	00086470 	.word	0x00086470
 8001bf4:	00989680 	.word	0x00989680
 8001bf8:	00030d40 	.word	0x00030d40

08001bfc <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b092      	sub	sp, #72	@ 0x48
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4613      	mov	r3, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff feeb 	bl	80019ee <CheckValidRectRoi>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (Status != VL53LX_ERROR_NONE)
 8001c1e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <VL53LX_SetUserROI+0x30>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001c26:	f06f 0303 	mvn.w	r3, #3
 8001c2a:	e050      	b.n	8001cce <VL53LX_SetUserROI+0xd2>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	789b      	ldrb	r3, [r3, #2]
 8001c30:	461a      	mov	r2, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	3301      	adds	r3, #1
 8001c3a:	0fda      	lsrs	r2, r3, #31
 8001c3c:	4413      	add	r3, r2
 8001c3e:	105b      	asrs	r3, r3, #1
 8001c40:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	785b      	ldrb	r3, [r3, #1]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	78db      	ldrb	r3, [r3, #3]
 8001c4e:	4413      	add	r3, r2
 8001c50:	3301      	adds	r3, #1
 8001c52:	0fda      	lsrs	r2, r3, #31
 8001c54:	4413      	add	r3, r2
 8001c56:	105b      	asrs	r3, r3, #1
 8001c58:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	789a      	ldrb	r2, [r3, #2]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	785a      	ldrb	r2, [r3, #1]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	78db      	ldrb	r3, [r3, #3]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	zone_cfg.max_zones = 1;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 8001c80:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001c84:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 8001c88:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001c8c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	zone_cfg.user_zones[0].width = width;
 8001c90:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001c94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	zone_cfg.user_zones[0].height = height;
 8001c98:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001c9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if ((width < 3) || (height < 3))
 8001ca0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d903      	bls.n	8001cb0 <VL53LX_SetUserROI+0xb4>
 8001ca8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d803      	bhi.n	8001cb8 <VL53LX_SetUserROI+0xbc>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001cb0:	23fc      	movs	r3, #252	@ 0xfc
 8001cb2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001cb6:	e008      	b.n	8001cca <VL53LX_SetUserROI+0xce>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f002 f827 	bl	8003d12 <VL53LX_set_zone_config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 8001cca:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3748      	adds	r7, #72	@ 0x48
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3318      	adds	r3, #24
 8001ce6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f001 fa8f 	bl	800320c <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001cee:	2300      	movs	r3, #0
 8001cf0:	75bb      	strb	r3, [r7, #22]
 8001cf2:	e01a      	b.n	8001d2a <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001cf4:	7dbb      	ldrb	r3, [r7, #22]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001cfc:	3308      	adds	r3, #8
 8001cfe:	2100      	movs	r1, #0
 8001d00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8001d04:	7dbb      	ldrb	r3, [r7, #22]
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001d0e:	3318      	adds	r3, #24
 8001d10:	22ff      	movs	r2, #255	@ 0xff
 8001d12:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8001d14:	7dbb      	ldrb	r3, [r7, #22]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001d1e:	331c      	adds	r3, #28
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001d24:	7dbb      	ldrb	r3, [r7, #22]
 8001d26:	3301      	adds	r3, #1
 8001d28:	75bb      	strb	r3, [r7, #22]
 8001d2a:	7dbb      	ldrb	r3, [r7, #22]
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d9e1      	bls.n	8001cf4 <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
	pdev->PreviousRangeActiveResults = 0;
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7edb      	ldrb	r3, [r3, #27]
 8001d4c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8001d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d107      	bne.n	8001d66 <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	2206      	movs	r2, #6
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f002 f93f 	bl	8003fe0 <VL53LX_init_and_start_range>
 8001d62:	4603      	mov	r3, r0
 8001d64:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 8001d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f002 fbfc 	bl	800457c <VL53LX_stop_range>
 8001d84:	4603      	mov	r3, r0
 8001d86:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f001 fb6d 	bl	8003468 <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	7edb      	ldrb	r3, [r3, #27]
 8001daa:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8001dac:	7bbb      	ldrb	r3, [r7, #14]
 8001dae:	4619      	mov	r1, r3
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f003 f8fa 	bl	8004faa <VL53LX_clear_interrupt_and_enable_next_range>
 8001db6:	4603      	mov	r3, r0
 8001db8:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 8001dd4:	6839      	ldr	r1, [r7, #0]
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f00f f949 	bl	801106e <VL53LX_is_new_data_ready>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <VL53LX_WaitMeasurementDataReady>:

VL53LX_Error VL53LX_WaitMeasurementDataReady(VL53LX_DEV Dev)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	Status = VL53LX_poll_for_range_completion(Dev,
 8001df8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f00f f99c 	bl	801113a <VL53LX_poll_for_range_completion>
 8001e02:	4603      	mov	r3, r0
 8001e04:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <ConvertStatusHisto>:

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	3b05      	subs	r3, #5
 8001e22:	2b12      	cmp	r3, #18
 8001e24:	d840      	bhi.n	8001ea8 <ConvertStatusHisto+0x94>
 8001e26:	a201      	add	r2, pc, #4	@ (adr r2, 8001e2c <ConvertStatusHisto+0x18>)
 8001e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2c:	08001e79 	.word	0x08001e79
 8001e30:	08001e7f 	.word	0x08001e7f
 8001e34:	08001e8b 	.word	0x08001e8b
 8001e38:	08001ea9 	.word	0x08001ea9
 8001e3c:	08001ea3 	.word	0x08001ea3
 8001e40:	08001ea9 	.word	0x08001ea9
 8001e44:	08001ea9 	.word	0x08001ea9
 8001e48:	08001ea9 	.word	0x08001ea9
 8001e4c:	08001ea9 	.word	0x08001ea9
 8001e50:	08001ea9 	.word	0x08001ea9
 8001e54:	08001ea9 	.word	0x08001ea9
 8001e58:	08001ea9 	.word	0x08001ea9
 8001e5c:	08001ea9 	.word	0x08001ea9
 8001e60:	08001ea9 	.word	0x08001ea9
 8001e64:	08001e85 	.word	0x08001e85
 8001e68:	08001e97 	.word	0x08001e97
 8001e6c:	08001ea9 	.word	0x08001ea9
 8001e70:	08001e9d 	.word	0x08001e9d
 8001e74:	08001e91 	.word	0x08001e91
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	73fb      	strb	r3, [r7, #15]
		break;
 8001e7c:	e016      	b.n	8001eac <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
		break;
 8001e82:	e013      	b.n	8001eac <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 8001e84:	2306      	movs	r3, #6
 8001e86:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 8001e88:	e010      	b.n	8001eac <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	73fb      	strb	r3, [r7, #15]
		break;
 8001e8e:	e00d      	b.n	8001eac <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8001e90:	230c      	movs	r3, #12
 8001e92:	73fb      	strb	r3, [r7, #15]
		break;
 8001e94:	e00a      	b.n	8001eac <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8001e96:	2307      	movs	r3, #7
 8001e98:	73fb      	strb	r3, [r7, #15]
		break;
 8001e9a:	e007      	b.n	8001eac <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8001e9c:	230b      	movs	r3, #11
 8001e9e:	73fb      	strb	r3, [r7, #15]
		break;
 8001ea0:	e004      	b.n	8001eac <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	73fb      	strb	r3, [r7, #15]
		break;
 8001ea6:	e001      	b.n	8001eac <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 8001ea8:	23ff      	movs	r3, #255	@ 0xff
 8001eaa:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop

08001ebc <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08e      	sub	sp, #56	@ 0x38
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	4608      	mov	r0, r1
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4603      	mov	r3, r0
 8001ecc:	70fb      	strb	r3, [r7, #3]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	70bb      	strb	r3, [r7, #2]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	VL53LX_LLDriverData_t *pdev =
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3318      	adds	r3, #24
 8001ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8001ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee4:	33f8      	adds	r3, #248	@ 0xf8
 8001ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
	int16_t AddOffset;
	uint8_t histo_merge_nb;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8001eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eee:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001efa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001efc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001efe:	025b      	lsls	r3, r3, #9
 8001f00:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8001f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f04:	6a3a      	ldr	r2, [r7, #32]
 8001f06:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f0a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001f0c:	025b      	lsls	r3, r3, #9
 8001f0e:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8001f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f18:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001f1a:	025b      	lsls	r3, r3, #9
 8001f1c:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8001f1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8001f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f26:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 8001f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f2c:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8001f2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f30:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 8001f34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f36:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8001f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f3a:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	@ 0x44
 8001f3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f40:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 8001f42:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001f46:	2b11      	cmp	r3, #17
 8001f48:	d009      	beq.n	8001f5e <SetTargetData+0xa2>
 8001f4a:	2b11      	cmp	r3, #17
 8001f4c:	dc0f      	bgt.n	8001f6e <SetTargetData+0xb2>
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	dc02      	bgt.n	8001f58 <SetTargetData+0x9c>
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	dc03      	bgt.n	8001f5e <SetTargetData+0xa2>
 8001f56:	e00a      	b.n	8001f6e <SetTargetData+0xb2>
 8001f58:	2b0d      	cmp	r3, #13
 8001f5a:	d004      	beq.n	8001f66 <SetTargetData+0xaa>
 8001f5c:	e007      	b.n	8001f6e <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8001f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f60:	2205      	movs	r2, #5
 8001f62:	749a      	strb	r2, [r3, #18]
		break;
 8001f64:	e006      	b.n	8001f74 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 8001f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f68:	220d      	movs	r2, #13
 8001f6a:	749a      	strb	r2, [r3, #18]
		break;
 8001f6c:	e002      	b.n	8001f74 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 8001f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f70:	2200      	movs	r2, #0
 8001f72:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8001f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f76:	7c9b      	ldrb	r3, [r3, #18]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d117      	bne.n	8001fac <SetTargetData+0xf0>
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d114      	bne.n	8001fac <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 8001f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f84:	22ff      	movs	r2, #255	@ 0xff
 8001f86:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 8001f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 8001f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f90:	2200      	movs	r2, #0
 8001f92:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 8001f94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001f9a:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 8001f9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f9e:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001fa2:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 8001fa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fa6:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001faa:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 8001fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fae:	7c9b      	ldrb	r3, [r3, #18]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d108      	bne.n	8001fc6 <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 8001fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff2b 	bl	8001e14 <ConvertStatusHisto>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 8001fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fc4:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f248 0191 	movw	r1, #32913	@ 0x8091
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f003 fcf9 	bl	80059c8 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8001fd6:	78bb      	ldrb	r3, [r7, #2]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8001fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fe6:	8a1b      	ldrh	r3, [r3, #16]
 8001fe8:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	86bb      	strh	r3, [r7, #52]	@ 0x34

	pRangeData->ExtendedRange = 0;
 8001fee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	74da      	strb	r2, [r3, #19]


	Status = VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8001ff4:	f107 030b 	add.w	r3, r7, #11
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f009 fc03 	bl	800b806 <VL53LX_compute_histo_merge_nb>
 8002000:	4603      	mov	r3, r0
 8002002:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if ((active_results != 1) ||
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d109      	bne.n	8002020 <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 800200c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800200e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002012:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
	if ((active_results != 1) ||
 8002016:	2b01      	cmp	r3, #1
 8002018:	d102      	bne.n	8002020 <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 800201a:	7afb      	ldrb	r3, [r7, #11]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <SetTargetData+0x168>
		ExtendedRangeEnabled = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 81db 	beq.w	80023e2 <SetTargetData+0x526>
		(pRangeData->RangeStatus ==
 800202c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800202e:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 8002030:	2b07      	cmp	r3, #7
 8002032:	d004      	beq.n	800203e <SetTargetData+0x182>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8002034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002036:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002038:	2b04      	cmp	r3, #4
 800203a:	f040 81d2 	bne.w	80023e2 <SetTargetData+0x526>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 800203e:	787b      	ldrb	r3, [r7, #1]
 8002040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002042:	4413      	add	r3, r2
 8002044:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8002048:	3318      	adds	r3, #24
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b07      	cmp	r3, #7
 800204e:	d01c      	beq.n	800208a <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8002050:	787b      	ldrb	r3, [r7, #1]
 8002052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002054:	4413      	add	r3, r2
 8002056:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 800205a:	3318      	adds	r3, #24
 800205c:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 800205e:	2b04      	cmp	r3, #4
 8002060:	d013      	beq.n	800208a <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8002062:	787b      	ldrb	r3, [r7, #1]
 8002064:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002066:	4413      	add	r3, r2
 8002068:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 800206c:	3318      	adds	r3, #24
 800206e:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8002070:	2b00      	cmp	r3, #0
 8002072:	f040 81b6 	bne.w	80023e2 <SetTargetData+0x526>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8002076:	787b      	ldrb	r3, [r7, #1]
 8002078:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800207a:	4413      	add	r3, r2
 800207c:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8002080:	331c      	adds	r3, #28
 8002082:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 8002084:	2b01      	cmp	r3, #1
 8002086:	f040 81ac 	bne.w	80023e2 <SetTargetData+0x526>
	{
		if (((pdev->PreviousStreamCount) ==
 800208a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800208c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002090:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002094:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8002096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002098:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 800209c:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 800209e:	429a      	cmp	r2, r3
 80020a0:	d00c      	beq.n	80020bc <SetTargetData+0x200>
		|| ((pdev->PreviousStreamCount) ==
 80020a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020a8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80020ac:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 80020ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b0:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 80020b4:	337f      	adds	r3, #127	@ 0x7f
		|| ((pdev->PreviousStreamCount) ==
 80020b6:	429a      	cmp	r2, r3
 80020b8:	f040 816b 	bne.w	8002392 <SetTargetData+0x4d6>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 80020bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020be:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80020c2:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 80020c4:	787b      	ldrb	r3, [r7, #1]
 80020c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80020c8:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 80020cc:	3308      	adds	r3, #8
 80020ce:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80020d2:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 80020da:	2301      	movs	r3, #1
 80020dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		switch (pdev->preset_mode) {
 80020e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020e2:	785b      	ldrb	r3, [r3, #1]
 80020e4:	2b21      	cmp	r3, #33	@ 0x21
 80020e6:	d008      	beq.n	80020fa <SetTargetData+0x23e>
 80020e8:	2b21      	cmp	r3, #33	@ 0x21
 80020ea:	f300 814e 	bgt.w	800238a <SetTargetData+0x4ce>
 80020ee:	2b1b      	cmp	r3, #27
 80020f0:	f000 80d7 	beq.w	80022a2 <SetTargetData+0x3e6>
 80020f4:	2b1e      	cmp	r3, #30
 80020f6:	d004      	beq.n	8002102 <SetTargetData+0x246>
 80020f8:	e147      	b.n	800238a <SetTargetData+0x4ce>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8002100:	e147      	b.n	8002392 <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8002102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002104:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 8002108:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800210c:	429a      	cmp	r2, r3
 800210e:	dd0e      	ble.n	800212e <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8002110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002112:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8002116:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800211a:	429a      	cmp	r2, r3
 800211c:	da07      	bge.n	800212e <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d104      	bne.n	800212e <SetTargetData+0x272>
					sequency == 1) {
					AddOffset =
 8002124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002126:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800212a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800212c:	e0b8      	b.n	80022a0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 800212e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002134:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 8002138:	425b      	negs	r3, r3
 800213a:	429a      	cmp	r2, r3
 800213c:	da0f      	bge.n	800215e <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 800213e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002144:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
 8002148:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 800214a:	429a      	cmp	r2, r3
 800214c:	dd07      	ble.n	800215e <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d104      	bne.n	800215e <SetTargetData+0x2a2>
					sequency == 0) {
					AddOffset =
 8002154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002156:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 800215a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800215c:	e0a0      	b.n	80022a0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800215e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002160:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8002164:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002168:	429a      	cmp	r2, r3
 800216a:	dd0e      	ble.n	800218a <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 800216c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216e:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8002172:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002176:	429a      	cmp	r2, r3
 8002178:	da07      	bge.n	800218a <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 800217a:	7dfb      	ldrb	r3, [r7, #23]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d104      	bne.n	800218a <SetTargetData+0x2ce>
					sequency == 0) {
					AddOffset =
 8002180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002182:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8002186:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002188:	e08a      	b.n	80022a0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 800218a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800218e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002190:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8002194:	425b      	negs	r3, r3
 8002196:	429a      	cmp	r2, r3
 8002198:	da0f      	bge.n	80021ba <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 800219a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800219e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a0:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 80021a4:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80021a6:	429a      	cmp	r2, r3
 80021a8:	dd07      	ble.n	80021ba <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d104      	bne.n	80021ba <SetTargetData+0x2fe>
					sequency == 1) {
					AddOffset =
 80021b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 80021b6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80021b8:	e072      	b.n	80022a0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80021ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021bc:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 80021c0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dd0e      	ble.n	80021e6 <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80021c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ca:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80021ce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	da07      	bge.n	80021e6 <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d104      	bne.n	80021e6 <SetTargetData+0x32a>
					sequency == 1) {
					AddOffset =
 80021dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021de:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80021e2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80021e4:	e05c      	b.n	80022a0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80021e6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80021ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ec:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 80021f0:	425b      	negs	r3, r3
 80021f2:	429a      	cmp	r2, r3
 80021f4:	da0f      	bge.n	8002216 <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 80021f6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80021fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021fc:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
 8002200:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8002202:	429a      	cmp	r2, r3
 8002204:	dd07      	ble.n	8002216 <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002206:	7dfb      	ldrb	r3, [r7, #23]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d104      	bne.n	8002216 <SetTargetData+0x35a>
					sequency == 0) {
					AddOffset =
 800220c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 8002212:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002214:	e044      	b.n	80022a0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002218:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 800221c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002220:	429a      	cmp	r2, r3
 8002222:	dd0e      	ble.n	8002242 <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002226:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 800222a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800222e:	429a      	cmp	r2, r3
 8002230:	da07      	bge.n	8002242 <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002232:	7dfb      	ldrb	r3, [r7, #23]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d104      	bne.n	8002242 <SetTargetData+0x386>
					sequency == 0) {
					AddOffset =
 8002238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800223e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002240:	e02e      	b.n	80022a0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8002242:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002248:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 800224c:	425b      	negs	r3, r3
 800224e:	429a      	cmp	r2, r3
 8002250:	da0f      	bge.n	8002272 <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002252:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002258:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
 800225c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800225e:	429a      	cmp	r2, r3
 8002260:	dd07      	ble.n	8002272 <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002262:	7dfb      	ldrb	r3, [r7, #23]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d104      	bne.n	8002272 <SetTargetData+0x3b6>
					sequency == 1) {
					AddOffset =
 8002268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 800226e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002270:	e016      	b.n	80022a0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002274:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	@ 0xa0
 8002278:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800227c:	429a      	cmp	r2, r3
 800227e:	da0b      	bge.n	8002298 <SetTargetData+0x3dc>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8002280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002282:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	@ 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002286:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800228a:	429a      	cmp	r2, r3
 800228c:	dd04      	ble.n	8002298 <SetTargetData+0x3dc>
					AddOffset =
 800228e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002290:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8002294:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002296:	e003      	b.n	80022a0 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 800229e:	e078      	b.n	8002392 <SetTargetData+0x4d6>
 80022a0:	e077      	b.n	8002392 <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80022a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a4:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 80022a8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dd0e      	ble.n	80022ce <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80022b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b2:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80022b6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	da07      	bge.n	80022ce <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d104      	bne.n	80022ce <SetTargetData+0x412>
					sequency == 0) {
					AddOffset =
 80022c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c6:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 80022ca:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80022cc:	e05c      	b.n	8002388 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80022ce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d4:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 80022d8:	425b      	negs	r3, r3
 80022da:	429a      	cmp	r2, r3
 80022dc:	da0f      	bge.n	80022fe <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80022de:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e4:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 80022e8:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80022ea:	429a      	cmp	r2, r3
 80022ec:	dd07      	ble.n	80022fe <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d104      	bne.n	80022fe <SetTargetData+0x442>
					sequency == 1) {
					AddOffset =
 80022f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f6:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 80022fa:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80022fc:	e044      	b.n	8002388 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80022fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002300:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8002304:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002308:	429a      	cmp	r2, r3
 800230a:	dd0e      	ble.n	800232a <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800230c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230e:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8002312:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002316:	429a      	cmp	r2, r3
 8002318:	da07      	bge.n	800232a <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800231a:	7dfb      	ldrb	r3, [r7, #23]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d104      	bne.n	800232a <SetTargetData+0x46e>
					sequency == 1) {
					AddOffset =
 8002320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002322:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8002326:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002328:	e02e      	b.n	8002388 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800232a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800232e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002330:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8002334:	425b      	negs	r3, r3
 8002336:	429a      	cmp	r2, r3
 8002338:	da0f      	bge.n	800235a <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 800233a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800233e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002340:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 8002344:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8002346:	429a      	cmp	r2, r3
 8002348:	dd07      	ble.n	800235a <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 800234a:	7dfb      	ldrb	r3, [r7, #23]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d104      	bne.n	800235a <SetTargetData+0x49e>
					sequency == 0) {
					AddOffset =
 8002350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002352:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 8002356:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002358:	e016      	b.n	8002388 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 800235a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235c:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 8002360:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002364:	429a      	cmp	r2, r3
 8002366:	da0b      	bge.n	8002380 <SetTargetData+0x4c4>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8002368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236a:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 800236e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002372:	429a      	cmp	r2, r3
 8002374:	dd04      	ble.n	8002380 <SetTargetData+0x4c4>
					AddOffset =
 8002376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002378:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800237c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800237e:	e003      	b.n	8002388 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8002386:	e004      	b.n	8002392 <SetTargetData+0x4d6>
 8002388:	e003      	b.n	8002392 <SetTargetData+0x4d6>

			default:
				uwr_status = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8002390:	bf00      	nop
			}
		}

		if (uwr_status) {
 8002392:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002396:	2b00      	cmp	r3, #0
 8002398:	d023      	beq.n	80023e2 <SetTargetData+0x526>
			pRangeData->RangeMilliMeter += AddOffset;
 800239a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800239c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80023a4:	4413      	add	r3, r2
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	b21a      	sxth	r2, r3
 80023aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023ac:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 80023ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80023b8:	4413      	add	r3, r2
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	b21a      	sxth	r2, r3
 80023be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023c0:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 80023c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80023cc:	4413      	add	r3, r2
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023d4:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 80023d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023d8:	2201      	movs	r2, #1
 80023da:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 80023dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023de:	2200      	movs	r2, #0
 80023e0:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 80023e2:	787b      	ldrb	r3, [r7, #1]
 80023e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023e6:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 80023ea:	3308      	adds	r3, #8
 80023ec:	8ab9      	ldrh	r1, [r7, #20]
 80023ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 80023f2:	787b      	ldrb	r3, [r7, #1]
 80023f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023f6:	7c91      	ldrb	r1, [r2, #18]
 80023f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8002400:	3318      	adds	r3, #24
 8002402:	460a      	mov	r2, r1
 8002404:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8002406:	787b      	ldrb	r3, [r7, #1]
 8002408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800240a:	7cd1      	ldrb	r1, [r2, #19]
 800240c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800240e:	4413      	add	r3, r2
 8002410:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8002414:	331c      	adds	r3, #28
 8002416:	460a      	mov	r2, r1
 8002418:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 800241a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002420:	461a      	mov	r2, r3
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	f882 30a0 	strb.w	r3, [r2, #160]	@ 0xa0

	Range = pRangeData->RangeMilliMeter;
 8002428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800242a:	8a1b      	ldrh	r3, [r3, #16]
 800242c:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 800242e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002430:	7c9b      	ldrb	r3, [r3, #18]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d110      	bne.n	8002458 <SetTargetData+0x59c>
 8002436:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800243a:	2b00      	cmp	r3, #0
 800243c:	da0c      	bge.n	8002458 <SetTargetData+0x59c>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 800243e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002442:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <SetTargetData+0x5a8>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	429a      	cmp	r2, r3
 8002448:	da03      	bge.n	8002452 <SetTargetData+0x596>
			pRangeData->RangeStatus =
 800244a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800244c:	220e      	movs	r2, #14
 800244e:	749a      	strb	r2, [r3, #18]
 8002450:	e002      	b.n	8002458 <SetTargetData+0x59c>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8002452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002454:	2200      	movs	r2, #0
 8002456:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8002458:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
}
 800245c:	4618      	mov	r0, r3
 800245e:	3738      	adds	r7, #56	@ 0x38
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	2000000c 	.word	0x2000000c

08002468 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b08f      	sub	sp, #60	@ 0x3c
 800246c:	af04      	add	r7, sp, #16
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	3318      	adds	r3, #24
 8002478:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800247a:	2300      	movs	r3, #0
 800247c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	7c9a      	ldrb	r2, [r3, #18]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
	pMultiRangingData->HasXtalkValueChanged =
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58


	pMultiRangingData->TimeStamp = 0;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	78da      	ldrb	r2, [r3, #3]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	7c9b      	ldrb	r3, [r3, #18]
 80024a6:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 80024a8:	7ffb      	ldrb	r3, [r7, #31]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d103      	bne.n	80024b6 <SetMeasurementData+0x4e>

		iteration = 1;
 80024ae:	2301      	movs	r3, #1
 80024b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80024b4:	e002      	b.n	80024bc <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 80024b6:	7ffb      	ldrb	r3, [r7, #31]
 80024b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	for (i = 0; i < iteration; i++) {
 80024bc:	2300      	movs	r3, #0
 80024be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80024c2:	e035      	b.n	8002530 <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 80024c4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	3308      	adds	r3, #8
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 80024d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024dc:	224c      	movs	r2, #76	@ 0x4c
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	3310      	adds	r3, #16
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	4413      	add	r3, r2
 80024e8:	3304      	adds	r3, #4
 80024ea:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 80024ec:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d113      	bne.n	800251c <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7918      	ldrb	r0, [r3, #4]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	7c1b      	ldrb	r3, [r3, #16]
 80024fc:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8002500:	7ff9      	ldrb	r1, [r7, #31]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	9202      	str	r2, [sp, #8]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	9201      	str	r2, [sp, #4]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4623      	mov	r3, r4
 800250e:	4602      	mov	r2, r0
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f7ff fcd3 	bl	8001ebc <SetTargetData>
 8002516:	4603      	mov	r3, r0
 8002518:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	for (i = 0; i < iteration; i++) {
 8002526:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800252a:	3301      	adds	r3, #1
 800252c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002530:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002534:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002538:	429a      	cmp	r2, r3
 800253a:	d3c3      	bcc.n	80024c4 <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	f893 243f 	ldrb.w	r2, [r3, #1087]	@ 0x43f
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002548:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800254c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002554:	e01f      	b.n	8002596 <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002556:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800255a:	6a3a      	ldr	r2, [r7, #32]
 800255c:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8002560:	3308      	adds	r3, #8
 8002562:	2100      	movs	r1, #0
 8002564:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800256c:	6a3a      	ldr	r2, [r7, #32]
 800256e:	4413      	add	r3, r2
 8002570:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8002574:	3318      	adds	r3, #24
 8002576:	22ff      	movs	r2, #255	@ 0xff
 8002578:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 800257a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800257e:	6a3a      	ldr	r2, [r7, #32]
 8002580:	4413      	add	r3, r2
 8002582:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8002586:	331c      	adds	r3, #28
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800258c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002590:	3301      	adds	r3, #1
 8002592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002596:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800259a:	2b03      	cmp	r3, #3
 800259c:	d9db      	bls.n	8002556 <SetMeasurementData+0xee>
	}

	return Status;
 800259e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	372c      	adds	r7, #44	@ 0x2c
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd90      	pop	{r4, r7, pc}

080025aa <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3318      	adds	r3, #24
 80025bc:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 80025c4:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 80025c6:	225c      	movs	r2, #92	@ 0x5c
 80025c8:	21ff      	movs	r1, #255	@ 0xff
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	f018 f9ea 	bl	801a9a4 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	2102      	movs	r1, #2
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f002 f8e0 	bl	800479a <VL53LX_get_device_results>
 80025da:	4603      	mov	r3, r0
 80025dc:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	68f9      	ldr	r1, [r7, #12]
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ff40 	bl	8002468 <SetMeasurementData>
 80025e8:	4603      	mov	r3, r0
 80025ea:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 80025ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b090      	sub	sp, #64	@ 0x40
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8002606:	f240 3305 	movw	r3, #773	@ 0x305
 800260a:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3318      	adds	r3, #24
 8002610:	63bb      	str	r3, [r7, #56]	@ 0x38
	pc = &pdev->customer;
 8002612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002614:	3348      	adds	r3, #72	@ 0x48
 8002616:	637b      	str	r3, [r7, #52]	@ 0x34

	DistanceMode = VL53LXDevDataGet(Dev,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800261e:	f893 34e0 	ldrb.w	r3, [r3, #1248]	@ 0x4e0
 8002622:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			CurrentParameters.DistanceMode);

	if (Status == VL53LX_ERROR_NONE)
 8002626:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800262a:	2b00      	cmp	r3, #0
 800262c:	d108      	bne.n	8002640 <VL53LX_PerformRefSpadManagement+0x48>
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 800262e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8002632:	4619      	mov	r1, r3
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fa45 	bl	8002ac4 <VL53LX_run_ref_spad_char>
 800263a:	4603      	mov	r3, r0
 800263c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8002640:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8002644:	f113 0f1d 	cmn.w	r3, #29
 8002648:	d14e      	bne.n	80026e8 <VL53LX_PerformRefSpadManagement+0xf0>

		Status = VL53LX_read_nvm_raw_data(Dev,
 800264a:	f107 0310 	add.w	r3, r7, #16
 800264e:	2206      	movs	r2, #6
 8002650:	2128      	movs	r1, #40	@ 0x28
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f00c ff58 	bl	800f508 <VL53LX_read_nvm_raw_data>
 8002658:	4603      	mov	r3, r0
 800265a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 800265e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <VL53LX_PerformRefSpadManagement+0x82>
			Status = VL53LX_WriteMulti(Dev,
 8002666:	f107 020c 	add.w	r2, r7, #12
 800266a:	2302      	movs	r3, #2
 800266c:	2114      	movs	r1, #20
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f00f f912 	bl	8011898 <VL53LX_WriteMulti>
 8002674:	4603      	mov	r3, r0
 8002676:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 800267a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <VL53LX_PerformRefSpadManagement+0x96>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8002682:	7b3a      	ldrb	r2, [r7, #12]
 8002684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002686:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8002688:	7b7a      	ldrb	r2, [r7, #13]
 800268a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800268c:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 800268e:	f107 0310 	add.w	r3, r7, #16
 8002692:	3310      	adds	r3, #16
 8002694:	62fb      	str	r3, [r7, #44]	@ 0x2c



		if (Status == VL53LX_ERROR_NONE)
 8002696:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800269a:	2b00      	cmp	r3, #0
 800269c:	d108      	bne.n	80026b0 <VL53LX_PerformRefSpadManagement+0xb8>
			Status = VL53LX_WriteMulti(Dev,
 800269e:	2306      	movs	r3, #6
 80026a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026a2:	210d      	movs	r1, #13
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f00f f8f7 	bl	8011898 <VL53LX_WriteMulti>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 80026b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d117      	bne.n	80026e8 <VL53LX_PerformRefSpadManagement+0xf0>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 80026b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026be:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 80026c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c2:	785a      	ldrb	r2, [r3, #1]
 80026c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c6:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 80026c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ca:	789a      	ldrb	r2, [r3, #2]
 80026cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ce:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 80026d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d2:	78da      	ldrb	r2, [r3, #3]
 80026d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d6:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 80026d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026da:	791a      	ldrb	r2, [r3, #4]
 80026dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026de:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 80026e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e2:	795a      	ldrb	r2, [r3, #5]
 80026e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e6:	715a      	strb	r2, [r3, #5]
		}

	}


	VL53LX_SetDistanceMode(Dev, DistanceMode);
 80026e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026ec:	4619      	mov	r1, r3
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff f9a3 	bl	8001a3a <VL53LX_SetDistanceMode>

	LOG_FUNCTION_END(Status);
	return Status;
 80026f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3740      	adds	r7, #64	@ 0x40
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 8002710:	2300      	movs	r3, #0
 8002712:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 8002714:	2300      	movs	r3, #0
 8002716:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8002718:	2300      	movs	r3, #0
 800271a:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	2b03      	cmp	r3, #3
 8002720:	d84a      	bhi.n	80027b8 <VL53LX_SmudgeCorrectionEnable+0xb8>
 8002722:	a201      	add	r2, pc, #4	@ (adr r2, 8002728 <VL53LX_SmudgeCorrectionEnable+0x28>)
 8002724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002728:	08002739 	.word	0x08002739
 800272c:	08002759 	.word	0x08002759
 8002730:	08002779 	.word	0x08002779
 8002734:	08002799 	.word	0x08002799
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f004 f850 	bl	80067de <VL53LX_dynamic_xtalk_correction_disable>
 800273e:	4603      	mov	r3, r0
 8002740:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f004 f862 	bl	800680c <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002748:	4603      	mov	r3, r0
 800274a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f004 f88b 	bl	8006868 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002752:	4603      	mov	r3, r0
 8002754:	733b      	strb	r3, [r7, #12]
		break;
 8002756:	e032      	b.n	80027be <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f004 f829 	bl	80067b0 <VL53LX_dynamic_xtalk_correction_enable>
 800275e:	4603      	mov	r3, r0
 8002760:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f004 f897 	bl	8006896 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002768:	4603      	mov	r3, r0
 800276a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f004 f87b 	bl	8006868 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002772:	4603      	mov	r3, r0
 8002774:	733b      	strb	r3, [r7, #12]
		break;
 8002776:	e022      	b.n	80027be <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f004 f819 	bl	80067b0 <VL53LX_dynamic_xtalk_correction_enable>
 800277e:	4603      	mov	r3, r0
 8002780:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f004 f887 	bl	8006896 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002788:	4603      	mov	r3, r0
 800278a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f004 f854 	bl	800683a <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 8002792:	4603      	mov	r3, r0
 8002794:	733b      	strb	r3, [r7, #12]
		break;
 8002796:	e012      	b.n	80027be <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f004 f809 	bl	80067b0 <VL53LX_dynamic_xtalk_correction_enable>
 800279e:	4603      	mov	r3, r0
 80027a0:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f004 f832 	bl	800680c <VL53LX_dynamic_xtalk_correction_apply_disable>
 80027a8:	4603      	mov	r3, r0
 80027aa:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f004 f85b 	bl	8006868 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80027b2:	4603      	mov	r3, r0
 80027b4:	733b      	strb	r3, [r7, #12]
		break;
 80027b6:	e002      	b.n	80027be <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80027b8:	23fc      	movs	r3, #252	@ 0xfc
 80027ba:	73fb      	strb	r3, [r7, #15]
		break;
 80027bc:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10d      	bne.n	80027e2 <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 80027c6:	7bbb      	ldrb	r3, [r7, #14]
 80027c8:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 80027ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 80027d2:	7b7b      	ldrb	r3, [r7, #13]
 80027d4:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 80027d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 80027de:	7b3b      	ldrb	r3, [r7, #12]
 80027e0:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80027e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop

080027f0 <VL53LX_SetOffsetCorrectionMode>:
}


VL53LX_Error VL53LX_SetOffsetCorrectionMode(VL53LX_DEV Dev,
		VL53LX_OffsetCorrectionModes OffsetCorrectionMode)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	73fb      	strb	r3, [r7, #15]
	VL53LX_OffsetCorrectionMode offset_cor_mode;

	LOG_FUNCTION_START("");

	if (OffsetCorrectionMode ==
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d102      	bne.n	800280c <VL53LX_SetOffsetCorrectionMode+0x1c>
		VL53LX_OFFSETCORRECTIONMODE_PERVCSEL)
		offset_cor_mode =
 8002806:	2303      	movs	r3, #3
 8002808:	73bb      	strb	r3, [r7, #14]
 800280a:	e006      	b.n	800281a <VL53LX_SetOffsetCorrectionMode+0x2a>
				VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS;
	else {
		offset_cor_mode =
 800280c:	2301      	movs	r3, #1
 800280e:	73bb      	strb	r3, [r7, #14]
			VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
		if (OffsetCorrectionMode !=
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d001      	beq.n	800281a <VL53LX_SetOffsetCorrectionMode+0x2a>
			VL53LX_OFFSETCORRECTIONMODE_STANDARD)
			Status = VL53LX_ERROR_INVALID_PARAMS;
 8002816:	23fc      	movs	r3, #252	@ 0xfc
 8002818:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53LX_ERROR_NONE)
 800281a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <VL53LX_SetOffsetCorrectionMode+0x40>
		Status =  VL53LX_set_offset_correction_mode(Dev,
 8002822:	7bbb      	ldrb	r3, [r7, #14]
 8002824:	4619      	mov	r1, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f003 f8b7 	bl	800599a <VL53LX_set_offset_correction_mode>
 800282c:	4603      	mov	r3, r0
 800282e:	73fb      	strb	r3, [r7, #15]
				offset_cor_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002830:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <VL53LX_PerformOffsetSimpleCalibration>:


VL53LX_Error VL53LX_PerformOffsetSimpleCalibration(VL53LX_DEV Dev,
	int32_t CalDistanceMilliMeter)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b0a6      	sub	sp, #152	@ 0x98
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	int16_t meanDistance_mm;
	int16_t offset;
	VL53LX_MultiRangingData_t RangingMeasurementData;
	VL53LX_LLDriverData_t *pdev;
	uint8_t goodmeas;
	VL53LX_Error SmudgeStatus = VL53LX_ERROR_NONE;
 800284c:	2300      	movs	r3, #0
 800284e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
	uint8_t smudge_corr_en;
	VL53LX_TargetRangeData_t *pRange;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3318      	adds	r3, #24
 8002856:	67fb      	str	r3, [r7, #124]	@ 0x7c

	smudge_corr_en = pdev->smudge_correct_config.smudge_corr_enabled;
 8002858:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800285a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800285e:	f893 3394 	ldrb.w	r3, [r3, #916]	@ 0x394
 8002862:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	SmudgeStatus = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f003 ffb9 	bl	80067de <VL53LX_dynamic_xtalk_correction_disable>
 800286c:	4603      	mov	r3, r0
 800286e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

	pdev->customer.algo__part_to_part_range_offset_mm = 0;
 8002872:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002874:	2200      	movs	r2, #0
 8002876:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	pdev->customer.mm_config__inner_offset_mm = 0;
 800287a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800287c:	2200      	movs	r2, #0
 800287e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	pdev->customer.mm_config__outer_offset_mm = 0;
 8002882:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002884:	2200      	movs	r2, #0
 8002886:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	memset(&pdev->per_vcsel_cal_data, 0, sizeof(pdev->per_vcsel_cal_data));
 800288a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800288c:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8002890:	220c      	movs	r2, #12
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f018 f885 	bl	801a9a4 <memset>
	Repeat = BDTable[VL53LX_TUNING_SIMPLE_OFFSET_CALIBRATION_REPEAT];
 800289a:	4b89      	ldr	r3, [pc, #548]	@ (8002ac0 <VL53LX_PerformOffsetSimpleCalibration+0x284>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	Max = BDTable[
 80028a2:	4b87      	ldr	r3, [pc, #540]	@ (8002ac0 <VL53LX_PerformOffsetSimpleCalibration+0x284>)
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
		VL53LX_TUNING_MAX_SIMPLE_OFFSET_CALIBRATION_SAMPLE_NUMBER];
	UnderMax = 1 + (Max / 2);
 80028aa:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 80028ae:	0fda      	lsrs	r2, r3, #31
 80028b0:	4413      	add	r3, r2
 80028b2:	105b      	asrs	r3, r3, #1
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3301      	adds	r3, #1
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	OverMax = Max + (Max / 2);
 80028c0:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 80028c4:	0fda      	lsrs	r2, r3, #31
 80028c6:	4413      	add	r3, r2
 80028c8:	105b      	asrs	r3, r3, #1
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80028d2:	4413      	add	r3, r2
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
	sum_ranging = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	total_count = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	while ((Repeat > 0) && (Status == VL53LX_ERROR_NONE)) {
 80028e6:	e087      	b.n	80029f8 <VL53LX_PerformOffsetSimpleCalibration+0x1bc>
		Status = VL53LX_StartMeasurement(Dev);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff f9f4 	bl	8001cd6 <VL53LX_StartMeasurement>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

		if (Status == VL53LX_ERROR_NONE) {
 80028f4:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10b      	bne.n	8002914 <VL53LX_PerformOffsetSimpleCalibration+0xd8>
			VL53LX_WaitMeasurementDataReady(Dev);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff fa75 	bl	8001dec <VL53LX_WaitMeasurementDataReady>
			VL53LX_GetMultiRangingData(Dev,
 8002902:	f107 0308 	add.w	r3, r7, #8
 8002906:	4619      	mov	r1, r3
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fe4e 	bl	80025aa <VL53LX_GetMultiRangingData>
				&RangingMeasurementData);
			VL53LX_ClearInterruptAndStartMeasurement(Dev);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff fa43 	bl	8001d9a <VL53LX_ClearInterruptAndStartMeasurement>
		}

		inloopcount = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		offset_meas = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		while ((Status == VL53LX_ERROR_NONE) && (inloopcount < Max) &&
 8002920:	e040      	b.n	80029a4 <VL53LX_PerformOffsetSimpleCalibration+0x168>
				(offset_meas < OverMax)) {
			Status = VL53LX_WaitMeasurementDataReady(Dev);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff fa62 	bl	8001dec <VL53LX_WaitMeasurementDataReady>
 8002928:	4603      	mov	r3, r0
 800292a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			if (Status == VL53LX_ERROR_NONE)
 800292e:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8002932:	2b00      	cmp	r3, #0
 8002934:	d108      	bne.n	8002948 <VL53LX_PerformOffsetSimpleCalibration+0x10c>
				Status = VL53LX_GetMultiRangingData(Dev,
 8002936:	f107 0308 	add.w	r3, r7, #8
 800293a:	4619      	mov	r1, r3
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff fe34 	bl	80025aa <VL53LX_GetMultiRangingData>
 8002942:	4603      	mov	r3, r0
 8002944:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						&RangingMeasurementData);
			pRange = &(RangingMeasurementData.RangeData[0]);
 8002948:	f107 0308 	add.w	r3, r7, #8
 800294c:	3308      	adds	r3, #8
 800294e:	673b      	str	r3, [r7, #112]	@ 0x70
			goodmeas = (pRange->RangeStatus ==
 8002950:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002952:	7c9b      	ldrb	r3, [r3, #18]
 8002954:	2b00      	cmp	r3, #0
 8002956:	bf0c      	ite	eq
 8002958:	2301      	moveq	r3, #1
 800295a:	2300      	movne	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				VL53LX_RANGESTATUS_RANGE_VALID);
			if ((Status == VL53LX_ERROR_NONE) && goodmeas) {
 8002962:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8002966:	2b00      	cmp	r3, #0
 8002968:	d111      	bne.n	800298e <VL53LX_PerformOffsetSimpleCalibration+0x152>
 800296a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00d      	beq.n	800298e <VL53LX_PerformOffsetSimpleCalibration+0x152>
				sum_ranging += pRange->RangeMilliMeter;
 8002972:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002974:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002978:	461a      	mov	r2, r3
 800297a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800297e:	4413      	add	r3, r2
 8002980:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				inloopcount++;
 8002984:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002988:	3301      	adds	r3, #1
 800298a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			}
			Status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff fa03 	bl	8001d9a <VL53LX_ClearInterruptAndStartMeasurement>
 8002994:	4603      	mov	r3, r0
 8002996:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			offset_meas++;
 800299a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800299e:	3301      	adds	r3, #1
 80029a0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		while ((Status == VL53LX_ERROR_NONE) && (inloopcount < Max) &&
 80029a4:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10b      	bne.n	80029c4 <VL53LX_PerformOffsetSimpleCalibration+0x188>
 80029ac:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 80029b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80029b4:	429a      	cmp	r2, r3
 80029b6:	da05      	bge.n	80029c4 <VL53LX_PerformOffsetSimpleCalibration+0x188>
				(offset_meas < OverMax)) {
 80029b8:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80029bc:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
		while ((Status == VL53LX_ERROR_NONE) && (inloopcount < Max) &&
 80029c0:	429a      	cmp	r2, r3
 80029c2:	dbae      	blt.n	8002922 <VL53LX_PerformOffsetSimpleCalibration+0xe6>
		}
		total_count += inloopcount;
 80029c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80029c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029cc:	4413      	add	r3, r2
 80029ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88


		if (inloopcount < UnderMax)
 80029d2:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 80029d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80029da:	429a      	cmp	r2, r3
 80029dc:	da02      	bge.n	80029e4 <VL53LX_PerformOffsetSimpleCalibration+0x1a8>
			Status = VL53LX_ERROR_OFFSET_CAL_NO_SAMPLE_FAIL;
 80029de:	23e8      	movs	r3, #232	@ 0xe8
 80029e0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

		VL53LX_StopMeasurement(Dev);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff f9c4 	bl	8001d72 <VL53LX_StopMeasurement>

		Repeat--;
 80029ea:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	while ((Repeat > 0) && (Status == VL53LX_ERROR_NONE)) {
 80029f8:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	dd04      	ble.n	8002a0a <VL53LX_PerformOffsetSimpleCalibration+0x1ce>
 8002a00:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f43f af6f 	beq.w	80028e8 <VL53LX_PerformOffsetSimpleCalibration+0xac>

	}

	if ((SmudgeStatus == VL53LX_ERROR_NONE) && (smudge_corr_en == 1))
 8002a0a:	f997 3083 	ldrsb.w	r3, [r7, #131]	@ 0x83
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <VL53LX_PerformOffsetSimpleCalibration+0x1ea>
 8002a12:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d105      	bne.n	8002a26 <VL53LX_PerformOffsetSimpleCalibration+0x1ea>
		SmudgeStatus = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f003 fec8 	bl	80067b0 <VL53LX_dynamic_xtalk_correction_enable>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

	if ((sum_ranging < 0) ||
 8002a26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	db08      	blt.n	8002a40 <VL53LX_PerformOffsetSimpleCalibration+0x204>
		(sum_ranging > ((int32_t) total_count * 0xffff)))
 8002a2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002a32:	4613      	mov	r3, r2
 8002a34:	041b      	lsls	r3, r3, #16
 8002a36:	1a9b      	subs	r3, r3, r2
	if ((sum_ranging < 0) ||
 8002a38:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	dd02      	ble.n	8002a46 <VL53LX_PerformOffsetSimpleCalibration+0x20a>
		Status = VL53LX_WARNING_OFFSET_CAL_SIGMA_TOO_HIGH;
 8002a40:	23e0      	movs	r3, #224	@ 0xe0
 8002a42:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

	if ((Status == VL53LX_ERROR_NONE) && (total_count > 0)) {
 8002a46:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d132      	bne.n	8002ab4 <VL53LX_PerformOffsetSimpleCalibration+0x278>
 8002a4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	dd2e      	ble.n	8002ab4 <VL53LX_PerformOffsetSimpleCalibration+0x278>
		IncRounding = total_count / 2;
 8002a56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a5a:	0fda      	lsrs	r2, r3, #31
 8002a5c:	4413      	add	r3, r2
 8002a5e:	105b      	asrs	r3, r3, #1
 8002a60:	66bb      	str	r3, [r7, #104]	@ 0x68
		meanDistance_mm = (int16_t)((sum_ranging + IncRounding)
 8002a62:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002a66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a68:	441a      	add	r2, r3
				/ total_count);
 8002a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a6e:	fb92 f3f3 	sdiv	r3, r2, r3
		meanDistance_mm = (int16_t)((sum_ranging + IncRounding)
 8002a72:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		offset = (int16_t)CalDistanceMilliMeter - meanDistance_mm;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		pdev->customer.algo__part_to_part_range_offset_mm = 0;
 8002a86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
		pdev->customer.mm_config__inner_offset_mm = offset;
 8002a8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a90:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8002a94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
		pdev->customer.mm_config__outer_offset_mm = offset;
 8002a98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a9a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8002a9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

		Status = VL53LX_set_customer_nvm_managed(Dev,
 8002aa2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002aa4:	3348      	adds	r3, #72	@ 0x48
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f00c ffe8 	bl	800fa7e <VL53LX_set_customer_nvm_managed>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				&(pdev->customer));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002ab4:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3798      	adds	r7, #152	@ 0x98
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	2000000c 	.word	0x2000000c

08002ac4 <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 8002ac4:	b5b0      	push	{r4, r5, r7, lr}
 8002ac6:	b08c      	sub	sp, #48	@ 0x30
 8002ac8:	af04      	add	r7, sp, #16
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3318      	adds	r3, #24
 8002ad6:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8002ade:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002ae0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d104      	bne.n	8002af2 <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f005 feaa 	bl	8008842 <VL53LX_enable_powerforce>
 8002aee:	4603      	mov	r3, r0
 8002af0:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 8002af2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d117      	bne.n	8002b2a <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	7858      	ldrb	r0, [r3, #1]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	685c      	ldr	r4, [r3, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	891d      	ldrh	r5, [r3, #8]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	899b      	ldrh	r3, [r3, #12]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	8952      	ldrh	r2, [r2, #10]
 8002b0e:	69b9      	ldr	r1, [r7, #24]
 8002b10:	f8b1 12de 	ldrh.w	r1, [r1, #734]	@ 0x2de
 8002b14:	9102      	str	r1, [sp, #8]
 8002b16:	9201      	str	r2, [sp, #4]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	462b      	mov	r3, r5
 8002b1c:	4622      	mov	r2, r4
 8002b1e:	4601      	mov	r1, r0
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f007 fd7d 	bl	800a620 <VL53LX_set_ref_spad_char_config>
 8002b26:	4603      	mov	r3, r0
 8002b28:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 8002b2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d107      	bne.n	8002b42 <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	4619      	mov	r1, r3
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f890 	bl	8002c5e <VL53LX_run_device_test>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 8002b42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d108      	bne.n	8002b5c <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 8002b4a:	f107 020c 	add.w	r2, r7, #12
 8002b4e:	2302      	movs	r3, #2
 8002b50:	21d9      	movs	r1, #217	@ 0xd9
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f00e fed6 	bl	8011904 <VL53LX_ReadMulti>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 8002b5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10b      	bne.n	8002b7c <VL53LX_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8002b64:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b6c:	f883 235f 	strb.w	r2, [r3, #863]	@ 0x35f
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8002b70:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b78:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360
	}



	if (status == VL53LX_ERROR_NONE)
 8002b7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d108      	bne.n	8002b96 <VL53LX_run_ref_spad_char+0xd2>
		status =
			VL53LX_WriteMulti(
 8002b84:	f107 020c 	add.w	r2, r7, #12
 8002b88:	2302      	movs	r3, #2
 8002b8a:	2114      	movs	r1, #20
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f00e fe83 	bl	8011898 <VL53LX_WriteMulti>
 8002b92:	4603      	mov	r3, r0
 8002b94:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8002b96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d107      	bne.n	8002bae <VL53LX_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8002b9e:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8002ba6:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 8002bae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d108      	bne.n	8002bc8 <VL53LX_run_ref_spad_char+0x104>
		status =
			VL53LX_ReadMulti(
 8002bb6:	f107 020c 	add.w	r2, r7, #12
 8002bba:	2306      	movs	r3, #6
 8002bbc:	21ac      	movs	r1, #172	@ 0xac
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f00e fea0 	bl	8011904 <VL53LX_ReadMulti>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 8002bc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d108      	bne.n	8002be2 <VL53LX_run_ref_spad_char+0x11e>
		status =
			VL53LX_WriteMulti(
 8002bd0:	f107 020c 	add.w	r2, r7, #12
 8002bd4:	2306      	movs	r3, #6
 8002bd6:	210d      	movs	r1, #13
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f00e fe5d 	bl	8011898 <VL53LX_WriteMulti>
 8002bde:	4603      	mov	r3, r0
 8002be0:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 8002be2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d117      	bne.n	8002c1a <VL53LX_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8002bea:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8002bf2:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8002bfa:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8002c0a:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8002c12:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 8002c1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d114      	bne.n	8002c4c <VL53LX_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f893 3367 	ldrb.w	r3, [r3, #871]	@ 0x367
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d00c      	beq.n	8002c46 <VL53LX_run_ref_spad_char+0x182>
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	dc0d      	bgt.n	8002c4c <VL53LX_run_ref_spad_char+0x188>
 8002c30:	2b0e      	cmp	r3, #14
 8002c32:	d002      	beq.n	8002c3a <VL53LX_run_ref_spad_char+0x176>
 8002c34:	2b0f      	cmp	r3, #15
 8002c36:	d003      	beq.n	8002c40 <VL53LX_run_ref_spad_char+0x17c>
 8002c38:	e008      	b.n	8002c4c <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8002c3a:	23e4      	movs	r3, #228	@ 0xe4
 8002c3c:	77fb      	strb	r3, [r7, #31]
			break;
 8002c3e:	e005      	b.n	8002c4c <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8002c40:	23e3      	movs	r3, #227	@ 0xe3
 8002c42:	77fb      	strb	r3, [r7, #31]
			break;
 8002c44:	e002      	b.n	8002c4c <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8002c46:	23e2      	movs	r3, #226	@ 0xe2
 8002c48:	77fb      	strb	r3, [r7, #31]
			break;
 8002c4a:	bf00      	nop
		}
	}



	*pcal_status = status;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	7ffa      	ldrb	r2, [r7, #31]
 8002c50:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8002c52:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3720      	adds	r7, #32
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bdb0      	pop	{r4, r5, r7, pc}

08002c5e <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b086      	sub	sp, #24
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	460b      	mov	r3, r1
 8002c68:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3318      	adds	r3, #24
 8002c72:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002c78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d108      	bne.n	8002c92 <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 8002c80:	f107 030b 	add.w	r3, r7, #11
 8002c84:	461a      	mov	r2, r3
 8002c86:	2130      	movs	r1, #48	@ 0x30
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f00e fecd 	bl	8011a28 <VL53LX_RdByte>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 8002c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d103      	bne.n	8002ca2 <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8002c9a:	7afa      	ldrb	r2, [r7, #11]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a


	if (status == VL53LX_ERROR_NONE)
 8002ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	4619      	mov	r1, r3
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f005 fd4b 	bl	800874a <VL53LX_start_test>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 8002cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d104      	bne.n	8002cca <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f00e f99b 	bl	8010ffc <VL53LX_wait_for_test_completion>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8002cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d108      	bne.n	8002ce4 <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 8002cd2:	f107 020c 	add.w	r2, r7, #12
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	2189      	movs	r1, #137	@ 0x89
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f00e fe12 	bl	8011904 <VL53LX_ReadMulti>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8002ce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d107      	bne.n	8002cfc <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8002cec:	7b3a      	ldrb	r2, [r7, #12]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f883 2367 	strb.w	r2, [r3, #871]	@ 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 8002cf4:	7b7a      	ldrb	r2, [r7, #13]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f883 2368 	strb.w	r2, [r3, #872]	@ 0x368
	}



	pdev->sys_results.result__range_status &=
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f893 3367 	ldrb.w	r3, [r3, #871]	@ 0x367
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f883 2367 	strb.w	r2, [r3, #871]	@ 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 8002d0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d108      	bne.n	8002d28 <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 8002d16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d104      	bne.n	8002d28 <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f005 fdb3 	bl	800888a <VL53LX_clear_interrupt>
 8002d24:	4603      	mov	r3, r0
 8002d26:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 8002d28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d105      	bne.n	8002d3c <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8002d30:	2100      	movs	r1, #0
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f005 fd09 	bl	800874a <VL53LX_start_test>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8002d3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	785b      	ldrb	r3, [r3, #1]
 8002d5a:	2b21      	cmp	r3, #33	@ 0x21
 8002d5c:	d006      	beq.n	8002d6c <select_offset_per_vcsel+0x24>
 8002d5e:	2b21      	cmp	r3, #33	@ 0x21
 8002d60:	dc2b      	bgt.n	8002dba <select_offset_per_vcsel+0x72>
 8002d62:	2b1b      	cmp	r3, #27
 8002d64:	d01c      	beq.n	8002da0 <select_offset_per_vcsel+0x58>
 8002d66:	2b1e      	cmp	r3, #30
 8002d68:	d00d      	beq.n	8002d86 <select_offset_per_vcsel+0x3e>
 8002d6a:	e026      	b.n	8002dba <select_offset_per_vcsel+0x72>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d72:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8002d76:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d7e:	f8b3 3c02 	ldrh.w	r3, [r3, #3074]	@ 0xc02
 8002d82:	817b      	strh	r3, [r7, #10]
		break;
 8002d84:	e02b      	b.n	8002dde <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d8c:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	@ 0xc04
 8002d90:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d98:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	@ 0xc06
 8002d9c:	817b      	strh	r3, [r7, #10]
		break;
 8002d9e:	e01e      	b.n	8002dde <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002da6:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 8002daa:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002db2:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 8002db6:	817b      	strh	r3, [r7, #10]
		break;
 8002db8:	e011      	b.n	8002dde <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc0:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 8002dc4:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dcc:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 8002dd0:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8002dd2:	23fc      	movs	r3, #252	@ 0xfc
 8002dd4:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	801a      	strh	r2, [r3, #0]
		break;
 8002ddc:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8002de4:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8002de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10b      	bne.n	8002e06 <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8002dee:	7a7b      	ldrb	r3, [r7, #9]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <select_offset_per_vcsel+0xb6>
 8002df8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002dfc:	e001      	b.n	8002e02 <select_offset_per_vcsel+0xba>
 8002dfe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	8013      	strh	r3, [r2, #0]

	return status;
 8002e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8002e16:	b490      	push	{r4, r7}
 8002e18:	b08a      	sub	sp, #40	@ 0x28
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	4611      	mov	r1, r2
 8002e22:	461a      	mov	r2, r3
 8002e24:	460b      	mov	r3, r1
 8002e26:	71fb      	strb	r3, [r7, #7]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int32_t    total_rate_pre = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002e48:	e021      	b.n	8002e8e <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8002e4a:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	461a      	mov	r2, r3
 8002e56:	0052      	lsls	r2, r2, #1
 8002e58:	441a      	add	r2, r3
 8002e5a:	00d3      	lsls	r3, r2, #3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	460b      	mov	r3, r1
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	440b      	add	r3, r1
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	4413      	add	r3, r2
 8002e68:	4423      	add	r3, r4
 8002e6a:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002e6e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8002e72:	6a3a      	ldr	r2, [r7, #32]
 8002e74:	4413      	add	r3, r2
 8002e76:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8002e78:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	3206      	adds	r2, #6
 8002e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	4413      	add	r3, r2
 8002e86:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002e88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002e8e:	79bb      	ldrb	r3, [r7, #6]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d3d8      	bcc.n	8002e4a <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d047      	beq.n	8002f2e <vl53lx_diff_histo_stddev+0x118>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d044      	beq.n	8002f2e <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002eac:	e03a      	b.n	8002f24 <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8002eae:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	0052      	lsls	r2, r2, #1
 8002ebc:	441a      	add	r2, r3
 8002ebe:	00d3      	lsls	r3, r2, #3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	440b      	add	r3, r1
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	4413      	add	r3, r2
 8002ecc:	4423      	add	r3, r4
 8002ece:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002ed2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002ed6:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ede:	fb03 f202 	mul.w	r2, r3, r2
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ee8:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8002eea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	3206      	adds	r2, #6
 8002ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ef8:	fb03 f202 	mul.w	r2, r3, r2
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f02:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	69b9      	ldr	r1, [r7, #24]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8002f0e:	69b8      	ldr	r0, [r7, #24]
 8002f10:	6979      	ldr	r1, [r7, #20]
 8002f12:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	441a      	add	r2, r3
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f1c:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002f1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002f20:	3301      	adds	r3, #1
 8002f22:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002f24:	79bb      	ldrb	r3, [r7, #6]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d3bf      	bcc.n	8002eae <vl53lx_diff_histo_stddev+0x98>
	}
}
 8002f2e:	bf00      	nop
 8002f30:	3728      	adds	r7, #40	@ 0x28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc90      	pop	{r4, r7}
 8002f36:	4770      	bx	lr

08002f38 <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8002f38:	b5b0      	push	{r4, r5, r7, lr}
 8002f3a:	b08c      	sub	sp, #48	@ 0x30
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3318      	adds	r3, #24
 8002f46:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t    i                        = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	int32_t    TuningBinRecSize		    = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t    timing					= 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8002f68:	2318      	movs	r3, #24
 8002f6a:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	461a      	mov	r2, r3
 8002f72:	f248 018f 	movw	r1, #32911	@ 0x808f
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f002 fd26 	bl	80059c8 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8002f7c:	f107 0310 	add.w	r3, r7, #16
 8002f80:	461a      	mov	r2, r3
 8002f82:	f248 018e 	movw	r1, #32910	@ 0x808e
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f002 fd1e 	bl	80059c8 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f92:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 811a 	bne.w	80031d0 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf0c      	ite	eq
 8002faa:	2301      	moveq	r3, #1
 8002fac:	2300      	movne	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8002fb6:	7efb      	ldrb	r3, [r7, #27]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	7eba      	ldrb	r2, [r7, #26]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fc8:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fd6:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fe0:	e004      	b.n	8002fec <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8002fec:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8002ff0:	7efb      	ldrb	r3, [r7, #27]
 8002ff2:	69f8      	ldr	r0, [r7, #28]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	0052      	lsls	r2, r2, #1
 8002ff8:	441a      	add	r2, r3
 8002ffa:	0153      	lsls	r3, r2, #5
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	460b      	mov	r3, r1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	440b      	add	r3, r1
 8003004:	019b      	lsls	r3, r3, #6
 8003006:	4413      	add	r3, r2
 8003008:	4403      	add	r3, r0
 800300a:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	dd0c      	ble.n	800302e <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 8003014:	7e79      	ldrb	r1, [r7, #25]
 8003016:	7efa      	ldrb	r2, [r7, #27]
 8003018:	f107 030c 	add.w	r3, r7, #12
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	460b      	mov	r3, r1
 8003026:	6839      	ldr	r1, [r7, #0]
 8003028:	69f8      	ldr	r0, [r7, #28]
 800302a:	f7ff fef4 	bl	8002e16 <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	429a      	cmp	r2, r3
 8003034:	db23      	blt.n	800307e <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 800303c:	3310      	adds	r3, #16
 800303e:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8003042:	2100      	movs	r1, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f017 fcad 	bl	801a9a4 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c

			recom_been_reset = 1;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

			if (timing == 0)
 800305c:	7efb      	ldrb	r3, [r7, #27]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003068:	2206      	movs	r2, #6
 800306a:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
 800306e:	e034      	b.n	80030da <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003076:	2207      	movs	r2, #7
 8003078:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
 800307c:	e02d      	b.n	80030da <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003084:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8003088:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 800308a:	2300      	movs	r3, #0
 800308c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003090:	e01e      	b.n	80030d0 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8003092:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8003096:	7e39      	ldrb	r1, [r7, #24]
 8003098:	7efb      	ldrb	r3, [r7, #27]
 800309a:	f897 5025 	ldrb.w	r5, [r7, #37]	@ 0x25
					pdata->bin_data[i];
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	3006      	adds	r0, #6
 80030a2:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 80030a6:	69f8      	ldr	r0, [r7, #28]
 80030a8:	461a      	mov	r2, r3
 80030aa:	0052      	lsls	r2, r2, #1
 80030ac:	441a      	add	r2, r3
 80030ae:	00d3      	lsls	r3, r2, #3
 80030b0:	461a      	mov	r2, r3
 80030b2:	460b      	mov	r3, r1
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	440b      	add	r3, r1
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	4413      	add	r3, r2
 80030bc:	442b      	add	r3, r5
 80030be:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 80030c2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 80030c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80030ca:	3301      	adds	r3, #1
 80030cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80030d0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80030d4:	7ebb      	ldrb	r3, [r7, #26]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d3db      	bcc.n	8003092 <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030e0:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 80030e4:	461a      	mov	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d109      	bne.n	8003102 <vl53lx_histo_merge+0x1ca>
 80030ee:	7efb      	ldrb	r3, [r7, #27]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d106      	bne.n	8003102 <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
 8003100:	e00e      	b.n	8003120 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 8003102:	7efb      	ldrb	r3, [r7, #27]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d10b      	bne.n	8003120 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800310e:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8003112:	3301      	adds	r3, #1
 8003114:	b2da      	uxtb	r2, r3
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800311c:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003120:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003124:	2b01      	cmp	r3, #1
 8003126:	d102      	bne.n	800312e <vl53lx_histo_merge+0x1f6>
 8003128:	7efb      	ldrb	r3, [r7, #27]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d069      	beq.n	8003202 <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003134:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003138:	2b00      	cmp	r3, #0
 800313a:	d162      	bne.n	8003202 <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 800313c:	2300      	movs	r3, #0
 800313e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003140:	e008      	b.n	8003154 <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 8003142:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	3206      	adds	r2, #6
 8003148:	2100      	movs	r1, #0
 800314a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 800314e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003150:	3301      	adds	r3, #1
 8003152:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003154:	7ebb      	ldrb	r3, [r7, #26]
 8003156:	b29b      	uxth	r3, r3
 8003158:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800315a:	429a      	cmp	r2, r3
 800315c:	d3f1      	bcc.n	8003142 <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 800315e:	2300      	movs	r3, #0
 8003160:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003162:	e02f      	b.n	80031c4 <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 8003164:	2300      	movs	r3, #0
 8003166:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800316a:	e023      	b.n	80031b4 <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 800316c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	3206      	adds	r2, #6
 8003172:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8003176:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800317a:	7efb      	ldrb	r3, [r7, #27]
 800317c:	8cfd      	ldrh	r5, [r7, #38]	@ 0x26
 800317e:	69fc      	ldr	r4, [r7, #28]
 8003180:	461a      	mov	r2, r3
 8003182:	0052      	lsls	r2, r2, #1
 8003184:	441a      	add	r2, r3
 8003186:	00d3      	lsls	r3, r2, #3
 8003188:	461a      	mov	r2, r3
 800318a:	460b      	mov	r3, r1
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	440b      	add	r3, r1
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	4413      	add	r3, r2
 8003194:	442b      	add	r3, r5
 8003196:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 800319a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 800319e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80031a0:	18c1      	adds	r1, r0, r3
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	3206      	adds	r2, #6
 80031a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 80031aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80031ae:	3301      	adds	r3, #1
 80031b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80031b4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	dbd6      	blt.n	800316c <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 80031be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80031c0:	3301      	adds	r3, #1
 80031c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80031c4:	7ebb      	ldrb	r3, [r7, #26]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d3ca      	bcc.n	8003164 <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 80031ce:	e018      	b.n	8003202 <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031d6:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 80031da:	3b01      	subs	r3, #1
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031e4:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
		if (pdev->pos_before_next_recom == 255)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031ee:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 80031f2:	2bff      	cmp	r3, #255	@ 0xff
 80031f4:	d105      	bne.n	8003202 <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
}
 8003202:	bf00      	nop
 8003204:	3728      	adds	r7, #40	@ 0x28
 8003206:	46bd      	mov	sp, r7
 8003208:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800320c <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b0c6      	sub	sp, #280	@ 0x118
 8003210:	af00      	add	r7, sp, #0
 8003212:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003216:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800321a:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 800321c:	2300      	movs	r3, #0
 800321e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	int32_t patch_tuning = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8003228:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10b      	bne.n	8003248 <VL53LX_load_patch+0x3c>
		status = VL53LX_WrByte(Dev,
 8003230:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003234:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003238:	2200      	movs	r2, #0
 800323a:	2185      	movs	r1, #133	@ 0x85
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	f00e fb97 	bl	8011970 <VL53LX_WrByte>
 8003242:	4603      	mov	r3, r0
 8003244:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003248:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <VL53LX_load_patch+0x52>
		VL53LX_enable_powerforce(Dev);
 8003250:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003254:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	f005 faf2 	bl	8008842 <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 800325e:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8003262:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003266:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800326a:	f248 018c 	movw	r1, #32908	@ 0x808c
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	f002 fbaa 	bl	80059c8 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8003274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003278:	2b03      	cmp	r3, #3
 800327a:	d81b      	bhi.n	80032b4 <VL53LX_load_patch+0xa8>
 800327c:	a201      	add	r2, pc, #4	@ (adr r2, 8003284 <VL53LX_load_patch+0x78>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	08003295 	.word	0x08003295
 8003288:	0800329d 	.word	0x0800329d
 800328c:	080032a5 	.word	0x080032a5
 8003290:	080032ad 	.word	0x080032ad
	case 0:
		patch_power = 0x00;
 8003294:	2300      	movs	r3, #0
 8003296:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 800329a:	e00e      	b.n	80032ba <VL53LX_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 800329c:	2310      	movs	r3, #16
 800329e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 80032a2:	e00a      	b.n	80032ba <VL53LX_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 80032a4:	2320      	movs	r3, #32
 80032a6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 80032aa:	e006      	b.n	80032ba <VL53LX_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 80032ac:	2340      	movs	r3, #64	@ 0x40
 80032ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 80032b2:	e002      	b.n	80032ba <VL53LX_load_patch+0xae>
	default:
		patch_power = 0x00;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 80032ba:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d134      	bne.n	800332c <VL53LX_load_patch+0x120>

		comms_buffer[0] = 0x29;
 80032c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80032c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80032ca:	2229      	movs	r2, #41	@ 0x29
 80032cc:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80032ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80032d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80032d6:	22c9      	movs	r2, #201	@ 0xc9
 80032d8:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80032da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80032de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80032e2:	220e      	movs	r2, #14
 80032e4:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 80032e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80032ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80032ee:	2240      	movs	r2, #64	@ 0x40
 80032f0:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 80032f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80032f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80032fa:	2228      	movs	r2, #40	@ 0x28
 80032fc:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 80032fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003302:	b2da      	uxtb	r2, r3
 8003304:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003308:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800330c:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 800330e:	f107 020c 	add.w	r2, r7, #12
 8003312:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003316:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800331a:	2306      	movs	r3, #6
 800331c:	f240 4176 	movw	r1, #1142	@ 0x476
 8003320:	6800      	ldr	r0, [r0, #0]
 8003322:	f00e fab9 	bl	8011898 <VL53LX_WriteMulti>
 8003326:	4603      	mov	r3, r0
 8003328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 800332c:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8003330:	2b00      	cmp	r3, #0
 8003332:	d132      	bne.n	800339a <VL53LX_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8003334:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003338:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800333c:	2203      	movs	r2, #3
 800333e:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8003340:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003344:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003348:	226d      	movs	r2, #109	@ 0x6d
 800334a:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800334c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003350:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003354:	2203      	movs	r2, #3
 8003356:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8003358:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800335c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003360:	226f      	movs	r2, #111	@ 0x6f
 8003362:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8003364:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003368:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800336c:	2207      	movs	r2, #7
 800336e:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8003370:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003374:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003378:	2229      	movs	r2, #41	@ 0x29
 800337a:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 800337c:	f107 020c 	add.w	r2, r7, #12
 8003380:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003384:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8003388:	2306      	movs	r3, #6
 800338a:	f240 4196 	movw	r1, #1174	@ 0x496
 800338e:	6800      	ldr	r0, [r0, #0]
 8003390:	f00e fa82 	bl	8011898 <VL53LX_WriteMulti>
 8003394:	4603      	mov	r3, r0
 8003396:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 800339a:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d11a      	bne.n	80033d8 <VL53LX_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 80033a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80033a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80033ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80033b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80033b6:	2207      	movs	r2, #7
 80033b8:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 80033ba:	f107 020c 	add.w	r2, r7, #12
 80033be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80033c2:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80033c6:	2302      	movs	r3, #2
 80033c8:	f240 4172 	movw	r1, #1138	@ 0x472
 80033cc:	6800      	ldr	r0, [r0, #0]
 80033ce:	f00e fa63 	bl	8011898 <VL53LX_WriteMulti>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 80033d8:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d11a      	bne.n	8003416 <VL53LX_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 80033e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80033e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80033ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80033f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80033f4:	2207      	movs	r2, #7
 80033f6:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 80033f8:	f107 020c 	add.w	r2, r7, #12
 80033fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003400:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8003404:	2302      	movs	r3, #2
 8003406:	f240 4174 	movw	r1, #1140	@ 0x474
 800340a:	6800      	ldr	r0, [r0, #0]
 800340c:	f00e fa44 	bl	8011898 <VL53LX_WriteMulti>
 8003410:	4603      	mov	r3, r0
 8003412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 8003416:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10c      	bne.n	8003438 <VL53LX_load_patch+0x22c>
		status = VL53LX_WrByte(Dev,
 800341e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003422:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003426:	2201      	movs	r2, #1
 8003428:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	f00e fa9f 	bl	8011970 <VL53LX_WrByte>
 8003432:	4603      	mov	r3, r0
 8003434:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 8003438:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <VL53LX_load_patch+0x24c>
		status = VL53LX_WrByte(Dev,
 8003440:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003444:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003448:	2201      	movs	r2, #1
 800344a:	2185      	movs	r1, #133	@ 0x85
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	f00e fa8f 	bl	8011970 <VL53LX_WrByte>
 8003452:	4603      	mov	r3, r0
 8003454:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8003458:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
}
 800345c:	4618      	mov	r0, r3
 800345e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop

08003468 <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003470:	2300      	movs	r3, #0
 8003472:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 8003474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d106      	bne.n	800348a <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 800347c:	2200      	movs	r2, #0
 800347e:	2185      	movs	r1, #133	@ 0x85
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f00e fa75 	bl	8011970 <VL53LX_WrByte>
 8003486:	4603      	mov	r3, r0
 8003488:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 800348a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f005 f9e7 	bl	8008866 <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 8003498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 80034a0:	2200      	movs	r2, #0
 80034a2:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f00e fa62 	bl	8011970 <VL53LX_WrByte>
 80034ac:	4603      	mov	r3, r0
 80034ae:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 80034b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 80034b8:	2201      	movs	r2, #1
 80034ba:	2185      	movs	r1, #133	@ 0x85
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f00e fa57 	bl	8011970 <VL53LX_WrByte>
 80034c2:	4603      	mov	r3, r0
 80034c4:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80034c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80034d2:	b5b0      	push	{r4, r5, r7, lr}
 80034d4:	b08a      	sub	sp, #40	@ 0x28
 80034d6:	af04      	add	r7, sp, #16
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80034de:	2300      	movs	r3, #0
 80034e0:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3318      	adds	r3, #24
 80034e6:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80034ee:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 80034f4:	2162      	movs	r1, #98	@ 0x62
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f004 fa28 	bl	800794c <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2204      	movs	r2, #4
 8003500:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2205      	movs	r2, #5
 800350c:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
	pres->zone_results.active_zones    = 0;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003518:	2300      	movs	r3, #0
 800351a:	75bb      	strb	r3, [r7, #22]
 800351c:	e01b      	b.n	8003556 <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 800351e:	7dba      	ldrb	r2, [r7, #22]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	3308      	adds	r3, #8
 8003532:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2200      	movs	r2, #0
 8003538:	639a      	str	r2, [r3, #56]	@ 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2200      	movs	r2, #0
 800353e:	63da      	str	r2, [r3, #60]	@ 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2200      	movs	r2, #0
 8003544:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		pobjects->xmonitor.range_status =
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003550:	7dbb      	ldrb	r3, [r7, #22]
 8003552:	3301      	adds	r3, #1
 8003554:	75bb      	strb	r3, [r7, #22]
 8003556:	7dbb      	ldrb	r3, [r7, #22]
 8003558:	2b04      	cmp	r3, #4
 800355a:	d9e0      	bls.n	800351e <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2205      	movs	r2, #5
 8003560:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
	pres->zone_hists.active_zones      = 0;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 232d 	strb.w	r2, [r3, #813]	@ 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2205      	movs	r2, #5
 8003570:	f883 238f 	strb.w	r2, [r3, #911]	@ 0x38f
	pres->zone_cal.active_zones        = 0;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2390 	strb.w	r2, [r3, #912]	@ 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800357c:	2300      	movs	r3, #0
 800357e:	75bb      	strb	r3, [r7, #22]
 8003580:	e039      	b.n	80035f6 <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 8003582:	7dba      	ldrb	r2, [r7, #22]
 8003584:	68f9      	ldr	r1, [r7, #12]
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	f503 7365 	add.w	r3, r3, #916	@ 0x394
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 8003598:	7dba      	ldrb	r2, [r7, #22]
 800359a:	68f9      	ldr	r1, [r7, #12]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 80035ae:	7dba      	ldrb	r2, [r7, #22]
 80035b0:	68f9      	ldr	r1, [r7, #12]
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	f503 7367 	add.w	r3, r3, #924	@ 0x39c
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 80035c4:	7dba      	ldrb	r2, [r7, #22]
 80035c6:	68f9      	ldr	r1, [r7, #12]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 80035da:	7dba      	ldrb	r2, [r7, #22]
 80035dc:	68f9      	ldr	r1, [r7, #12]
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	f503 736b 	add.w	r3, r3, #940	@ 0x3ac
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80035f0:	7dbb      	ldrb	r3, [r7, #22]
 80035f2:	3301      	adds	r3, #1
 80035f4:	75bb      	strb	r3, [r7, #22]
 80035f6:	7dbb      	ldrb	r3, [r7, #22]
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d9c2      	bls.n	8003582 <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2200      	movs	r2, #0
 8003600:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	221e      	movs	r2, #30
 8003606:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2200      	movs	r2, #0
 800360c:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	2200      	movs	r2, #0
 8003612:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2201      	movs	r2, #1
 8003618:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	2201      	movs	r2, #1
 800361e:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2201      	movs	r2, #1
 8003624:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800362c:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003634:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 800363c:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2264      	movs	r2, #100	@ 0x64
 8003642:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800364a:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800365a:	2203      	movs	r2, #3
 800365c:	f883 22e2 	strb.w	r2, [r3, #738]	@ 0x2e2
	pdev->offset_results.active_results = 0;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003666:	2200      	movs	r2, #0
 8003668:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3



	pdev->gain_cal.standard_ranging_gain_factor =
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f240 72db 	movw	r2, #2011	@ 0x7db
 8003672:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 800367c:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f004 f947 	bl	8007914 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 800368c:	3310      	adds	r3, #16
 800368e:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f017 f985 	bl	801a9a4 <memset>
	pdev->bin_rec_pos = 0;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
	pdev->pos_before_next_recom = 0;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <VL53LX_data_init+0x1f8>
 80036b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d104      	bne.n	80036ca <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f8b7 	bl	8003834 <VL53LX_read_p2p_data>
 80036c6:	4603      	mov	r3, r0
 80036c8:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 80036ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d107      	bne.n	80036e2 <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80036d8:	4618      	mov	r0, r3
 80036da:	f003 f8f3 	bl	80068c4 <VL53LX_init_refspadchar_config_struct>
 80036de:	4603      	mov	r3, r0
 80036e0:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 80036e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d107      	bne.n	80036fa <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80036f0:	4618      	mov	r0, r3
 80036f2:	f003 f90b 	bl	800690c <VL53LX_init_ssc_config_struct>
 80036f6:	4603      	mov	r3, r0
 80036f8:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 80036fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f003 f91c 	bl	800694e <VL53LX_init_xtalk_config_struct>
 8003716:	4603      	mov	r3, r0
 8003718:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 800371a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d107      	bne.n	8003732 <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8003728:	4618      	mov	r0, r3
 800372a:	f003 f983 	bl	8006a34 <VL53LX_init_xtalk_extract_config_struct>
 800372e:	4603      	mov	r3, r0
 8003730:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d107      	bne.n	800374a <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8003740:	4618      	mov	r0, r3
 8003742:	f003 f9a6 	bl	8006a92 <VL53LX_init_offset_cal_config_struct>
 8003746:	4603      	mov	r3, r0
 8003748:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 800374a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d107      	bne.n	8003762 <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8003758:	4618      	mov	r0, r3
 800375a:	f003 f9c1 	bl	8006ae0 <VL53LX_init_zone_cal_config_struct>
 800375e:	4603      	mov	r3, r0
 8003760:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003762:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10b      	bne.n	8003782 <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003776:	4619      	mov	r1, r3
 8003778:	4610      	mov	r0, r2
 800377a:	f003 f9d5 	bl	8006b28 <VL53LX_init_hist_post_process_config_struct>
 800377e:	4603      	mov	r3, r0
 8003780:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 8003782:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d107      	bne.n	800379a <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003790:	4618      	mov	r0, r3
 8003792:	f003 fbd4 	bl	8006f3e <VL53LX_init_hist_gen3_dmax_config_struct>
 8003796:	4603      	mov	r3, r0
 8003798:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 800379a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	33f8      	adds	r3, #248	@ 0xf8
 80037a6:	4618      	mov	r0, r3
 80037a8:	f003 fa2d 	bl	8006c06 <VL53LX_init_tuning_parm_storage_struct>
 80037ac:	4603      	mov	r3, r0
 80037ae:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 80037b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d116      	bne.n	80037e6 <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	7858      	ldrb	r0, [r3, #1]
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	8b1c      	ldrh	r4, [r3, #24]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	689d      	ldr	r5, [r3, #8]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	6912      	ldr	r2, [r2, #16]
 80037cc:	6939      	ldr	r1, [r7, #16]
 80037ce:	6949      	ldr	r1, [r1, #20]
 80037d0:	9102      	str	r1, [sp, #8]
 80037d2:	9201      	str	r2, [sp, #4]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	462b      	mov	r3, r5
 80037d8:	4622      	mov	r2, r4
 80037da:	4601      	mov	r1, r0
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fb3c 	bl	8003e5a <VL53LX_set_preset_mode>
 80037e2:	4603      	mov	r3, r0
 80037e4:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80037ec:	461a      	mov	r2, r3
 80037ee:	2118      	movs	r1, #24
 80037f0:	2000      	movs	r0, #0
 80037f2:	f008 fc8a 	bl	800c10a <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 80037fc:	461a      	mov	r2, r3
 80037fe:	2118      	movs	r1, #24
 8003800:	2000      	movs	r0, #0
 8003802:	f008 fc82 	bl	800c10a <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f203 531c 	addw	r3, r3, #1308	@ 0x51c
 800380c:	461a      	mov	r2, r3
 800380e:	210c      	movs	r1, #12
 8003810:	2000      	movs	r0, #0
 8003812:	f004 fe3b 	bl	800848c <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f007 fe5b 	bl	800b4d2 <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f007 fd61 	bl	800b2e4 <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f007 fe80 	bl	800b528 <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8003828:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bdb0      	pop	{r4, r5, r7, pc}

08003834 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b091      	sub	sp, #68	@ 0x44
 8003838:	af04      	add	r7, sp, #16
 800383a:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800383c:	2300      	movs	r3, #0
 800383e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3318      	adds	r3, #24
 8003846:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8003848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384a:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003852:	3348      	adds	r3, #72	@ 0x48
 8003854:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8003856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003858:	339c      	adds	r3, #156	@ 0x9c
 800385a:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800385c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 8003864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003866:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 800386a:	4619      	mov	r1, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f00b ffc8 	bl	800f802 <VL53LX_get_static_nvm_managed>
 8003872:	4603      	mov	r3, r0
 8003874:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 8003878:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800387c:	2b00      	cmp	r3, #0
 800387e:	d108      	bne.n	8003892 <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 8003880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003882:	3348      	adds	r3, #72	@ 0x48
 8003884:	4619      	mov	r1, r3
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f00c f920 	bl	800facc <VL53LX_get_customer_nvm_managed>
 800388c:	4603      	mov	r3, r0
 800388e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 8003892:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003896:	2b00      	cmp	r3, #0
 8003898:	d117      	bne.n	80038ca <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 800389a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389c:	f203 3392 	addw	r3, r3, #914	@ 0x392
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f00d f81c 	bl	80108e0 <VL53LX_get_nvm_copy_data>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 80038ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 80038b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b8:	f203 3292 	addw	r2, r3, #914	@ 0x392
 80038bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038be:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80038c2:	4619      	mov	r1, r3
 80038c4:	4610      	mov	r0, r2
 80038c6:	f004 fb37 	bl	8007f38 <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 80038ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10e      	bne.n	80038f0 <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	895b      	ldrh	r3, [r3, #10]
 80038d6:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	62da      	str	r2, [r3, #44]	@ 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	865a      	strh	r2, [r3, #50]	@ 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 80038f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d108      	bne.n	800390a <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 80038f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fa:	33c0      	adds	r3, #192	@ 0xc0
 80038fc:	4619      	mov	r1, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f00b fe33 	bl	800f56a <VL53LX_read_nvm_optical_centre>
 8003904:	4603      	mov	r3, r0
 8003906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 800390a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800390e:	2b00      	cmp	r3, #0
 8003910:	d108      	bne.n	8003924 <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 8003912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003914:	3360      	adds	r3, #96	@ 0x60
 8003916:	4619      	mov	r1, r3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f00b fe49 	bl	800f5b0 <VL53LX_read_nvm_cal_peak_rate_map>
 800391e:	4603      	mov	r3, r0
 8003920:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 8003924:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003928:	2b00      	cmp	r3, #0
 800392a:	d12d      	bne.n	8003988 <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 800392c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392e:	339c      	adds	r3, #156	@ 0x9c
 8003930:	4619      	mov	r1, r3
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f00b fe62 	bl	800f5fc <VL53LX_read_nvm_additional_offset_cal_data>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	889b      	ldrh	r3, [r3, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d120      	bne.n	8003988 <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 800394a:	2b00      	cmp	r3, #0
 800394c:	d11c      	bne.n	8003988 <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	2280      	movs	r2, #128	@ 0x80
 8003952:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800395a:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 800395c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395e:	f893 03c2 	ldrb.w	r0, [r3, #962]	@ 0x3c2
 8003962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003964:	f893 43c3 	ldrb.w	r4, [r3, #963]	@ 0x3c3
 8003968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	69f9      	ldr	r1, [r7, #28]
 8003972:	3102      	adds	r1, #2
 8003974:	9103      	str	r1, [sp, #12]
 8003976:	9202      	str	r2, [sp, #8]
 8003978:	2238      	movs	r2, #56	@ 0x38
 800397a:	9201      	str	r2, [sp, #4]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	23ff      	movs	r3, #255	@ 0xff
 8003980:	22c7      	movs	r2, #199	@ 0xc7
 8003982:	4621      	mov	r1, r4
 8003984:	f006 fb46 	bl	800a014 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 8003988:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800398c:	2b00      	cmp	r3, #0
 800398e:	d12f      	bne.n	80039f0 <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8003990:	f107 030c 	add.w	r3, r7, #12
 8003994:	461a      	mov	r2, r3
 8003996:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f00b fe51 	bl	800f642 <VL53LX_read_nvm_fmt_range_results_data>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 80039a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d120      	bne.n	80039f0 <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 80039ae:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 80039b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b2:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 80039b6:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 80039b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ba:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 80039be:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 80039c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c2:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 80039c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d006      	beq.n	80039de <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 80039d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 80039d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d8:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
 80039dc:	e003      	b.n	80039e6 <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 80039de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e0:	2214      	movs	r2, #20
 80039e2:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 80039e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039ec:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 80039f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 80039f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fa:	f503 539b 	add.w	r3, r3, #4960	@ 0x1360
 80039fe:	3304      	adds	r3, #4
 8003a00:	461a      	mov	r2, r3
 8003a02:	21de      	movs	r1, #222	@ 0xde
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f00e f843 	bl	8011a90 <VL53LX_RdWord>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8003a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a12:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1a:	d204      	bcs.n	8003a26 <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8003a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1e:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 8003a22:	f8a3 22de 	strh.w	r2, [r3, #734]	@ 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 8003a26:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d108      	bne.n	8003a40 <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 8003a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a30:	33bc      	adds	r3, #188	@ 0xbc
 8003a32:	4619      	mov	r1, r3
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f918 	bl	8003c6a <VL53LX_get_mode_mitigation_roi>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8003a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a42:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d114      	bne.n	8003a74 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8003a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4c:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10f      	bne.n	8003a74 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8003a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a56:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8003a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a60:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8003a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a66:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8003a74:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3734      	adds	r7, #52	@ 0x34
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd90      	pop	{r4, r7, pc}

08003a80 <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3318      	adds	r3, #24
 8003a92:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a9a:	f8b3 3364 	ldrh.w	r3, [r3, #868]	@ 0x364
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003aa2:	23f1      	movs	r3, #241	@ 0xf1
 8003aa4:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 8003aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10e      	bne.n	8003acc <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003aba:	f8b3 3364 	ldrh.w	r3, [r3, #868]	@ 0x364
 8003abe:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 8003acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3318      	adds	r3, #24
 8003af2:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003afe:	23f1      	movs	r3, #241	@ 0xf1
 8003b00:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 8003b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d11b      	bne.n	8003b42 <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f8b3 12de 	ldrh.w	r1, [r3, #734]	@ 0x2de
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	f502 724d 	add.w	r2, r2, #820	@ 0x334
 8003b2e:	9201      	str	r2, [sp, #4]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	460b      	mov	r3, r1
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	68b8      	ldr	r0, [r7, #8]
 8003b3a:	f005 f84a 	bl	8008bd2 <VL53LX_calc_timeout_register_values>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8003b42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b088      	sub	sp, #32
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3318      	adds	r3, #24
 8003b64:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003b78:	23f1      	movs	r3, #241	@ 0xf1
 8003b7a:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8003b7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d148      	bne.n	8003c16 <VL53LX_get_timeouts_us+0xc8>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f8b3 22de 	ldrh.w	r2, [r3, #734]	@ 0x2de
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f004 fe96 	bl	80088c4 <VL53LX_calc_macro_period_us>
 8003b98:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
			VL53LX_calc_timeout_us(
 8003ba0:	6979      	ldr	r1, [r7, #20]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f004 ff55 	bl	8008a52 <VL53LX_calc_timeout_us>
 8003ba8:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
		timeout_encoded =
 8003bb4:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003bb6:	8a7b      	ldrh	r3, [r7, #18]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	f892 2335 	ldrb.w	r2, [r2, #821]	@ 0x335
		timeout_encoded = (timeout_encoded << 8) +
 8003bc2:	4413      	add	r3, r2
 8003bc4:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8003bc6:	8a7b      	ldrh	r3, [r7, #18]
 8003bc8:	6979      	ldr	r1, [r7, #20]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f004 ffa8 	bl	8008b20 <VL53LX_calc_decoded_timeout_us>
 8003bd0:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
		timeout_encoded =
 8003bdc:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003bde:	8a7b      	ldrh	r3, [r7, #18]
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	b29b      	uxth	r3, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	f892 2339 	ldrb.w	r2, [r2, #825]	@ 0x339
		timeout_encoded = (timeout_encoded << 8) +
 8003bea:	4413      	add	r3, r2
 8003bec:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8003bee:	8a7b      	ldrh	r3, [r7, #18]
 8003bf0:	6979      	ldr	r1, [r7, #20]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f004 ff94 	bl	8008b20 <VL53LX_calc_decoded_timeout_us>
 8003bf8:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8003c16:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3720      	adds	r7, #32
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3318      	adds	r3, #24
 8003c34:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	7858      	ldrb	r0, [r3, #1]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	7819      	ldrb	r1, [r3, #0]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f203 335b 	addw	r3, r3, #859	@ 0x35b
 8003c44:	461a      	mov	r2, r3
 8003c46:	f006 f864 	bl	8009d12 <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	7898      	ldrb	r0, [r3, #2]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	78d9      	ldrb	r1, [r3, #3]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f006 f899 	bl	8009d90 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8003c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b086      	sub	sp, #24
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003c74:	2300      	movs	r3, #0
 8003c76:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3318      	adds	r3, #24
 8003c7c:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f893 33c2 	ldrb.w	r3, [r3, #962]	@ 0x3c2
 8003c90:	f107 020e 	add.w	r2, r7, #14
 8003c94:	f107 010d 	add.w	r1, r7, #13
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f008 fadf 	bl	800c25c <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8003c9e:	7bba      	ldrb	r2, [r7, #14]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8003ca4:	7b7a      	ldrb	r2, [r7, #13]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f893 33c3 	ldrb.w	r3, [r3, #963]	@ 0x3c3
 8003cb0:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8003cc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	73fb      	strb	r3, [r7, #15]
 8003ce4:	e008      	b.n	8003cf8 <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	for (i = 0; i < pdata->max_zones; i++)
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d3f1      	bcc.n	8003ce6 <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8003d02:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3318      	adds	r3, #24
 8003d24:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f103 00de 	add.w	r0, r3, #222	@ 0xde
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	331c      	adds	r3, #28
 8003d30:	2214      	movs	r2, #20
 8003d32:	4619      	mov	r1, r3
 8003d34:	f016 ff1b 	bl	801ab6e <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	781a      	ldrb	r2, [r3, #0]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	785a      	ldrb	r2, [r3, #1]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	33c2      	adds	r3, #194	@ 0xc2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff ffbf 	bl	8003cd4 <VL53LX_init_zone_config_histogram_bins>
 8003d56:	4603      	mov	r3, r0
 8003d58:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	785b      	ldrb	r3, [r3, #1]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d104      	bne.n	8003d6c <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
 8003d6a:	e00f      	b.n	8003d8c <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	785b      	ldrb	r3, [r3, #1]
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d807      	bhi.n	8003d84 <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	785b      	ldrb	r3, [r3, #1]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
 8003d82:	e003      	b.n	8003d8c <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2206      	movs	r2, #6
 8003d88:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8003d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	607a      	str	r2, [r7, #4]
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	460b      	mov	r3, r1
 8003da6:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3318      	adds	r3, #24
 8003db0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8003db2:	7afb      	ldrb	r3, [r7, #11]
 8003db4:	2b21      	cmp	r3, #33	@ 0x21
 8003db6:	d030      	beq.n	8003e1a <VL53LX_get_preset_mode_timing_cfg+0x82>
 8003db8:	2b21      	cmp	r3, #33	@ 0x21
 8003dba:	dc43      	bgt.n	8003e44 <VL53LX_get_preset_mode_timing_cfg+0xac>
 8003dbc:	2b1b      	cmp	r3, #27
 8003dbe:	d002      	beq.n	8003dc6 <VL53LX_get_preset_mode_timing_cfg+0x2e>
 8003dc0:	2b1e      	cmp	r3, #30
 8003dc2:	d015      	beq.n	8003df0 <VL53LX_get_preset_mode_timing_cfg+0x58>
 8003dc4:	e03e      	b.n	8003e44 <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
		*pphasecal_config_timeout_us =
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	601a      	str	r2, [r3, #0]

	break;
 8003dee:	e02c      	b.n	8003e4a <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
		*pphasecal_config_timeout_us =
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	601a      	str	r2, [r3, #0]
	break;
 8003e18:	e017      	b.n	8003e4a <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
		*pphasecal_config_timeout_us =
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	601a      	str	r2, [r3, #0]
	break;
 8003e42:	e002      	b.n	8003e4a <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003e44:	23fc      	movs	r3, #252	@ 0xfc
 8003e46:	75fb      	strb	r3, [r7, #23]
		break;
 8003e48:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8003e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b096      	sub	sp, #88	@ 0x58
 8003e5e:	af06      	add	r7, sp, #24
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	72fb      	strb	r3, [r7, #11]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53LX_LLDriverData_t *pdev =
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3318      	adds	r3, #24
 8003e76:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003e7e:	637b      	str	r3, [r7, #52]	@ 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8003e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e82:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003e86:	633b      	str	r3, [r7, #48]	@ 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e8a:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8003e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8003e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e92:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8003e96:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9a:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea2:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003ea6:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eaa:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003eae:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003eb6:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eba:	33c2      	adds	r3, #194	@ 0xc2
 8003ebc:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec0:	33f8      	adds	r3, #248	@ 0xf8
 8003ec2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec6:	7afa      	ldrb	r2, [r7, #11]
 8003ec8:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8003eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ecc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ece:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ed4:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003eda:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 8003edc:	2103      	movs	r1, #3
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f003 fd34 	bl	800794c <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8003ee4:	7afb      	ldrb	r3, [r7, #11]
 8003ee6:	2b21      	cmp	r3, #33	@ 0x21
 8003ee8:	d02e      	beq.n	8003f48 <VL53LX_set_preset_mode+0xee>
 8003eea:	2b21      	cmp	r3, #33	@ 0x21
 8003eec:	dc40      	bgt.n	8003f70 <VL53LX_set_preset_mode+0x116>
 8003eee:	2b1b      	cmp	r3, #27
 8003ef0:	d002      	beq.n	8003ef8 <VL53LX_set_preset_mode+0x9e>
 8003ef2:	2b1e      	cmp	r3, #30
 8003ef4:	d014      	beq.n	8003f20 <VL53LX_set_preset_mode+0xc6>
 8003ef6:	e03b      	b.n	8003f70 <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	9304      	str	r3, [sp, #16]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	9303      	str	r3, [sp, #12]
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	9302      	str	r3, [sp, #8]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	9301      	str	r3, [sp, #4]
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f14:	f003 fa57 	bl	80073c6 <VL53LX_preset_mode_histogram_long_range>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003f1e:	e02b      	b.n	8003f78 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	9304      	str	r3, [sp, #16]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	9303      	str	r3, [sp, #12]
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	9302      	str	r3, [sp, #8]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f3c:	f003 fae1 	bl	8007502 <VL53LX_preset_mode_histogram_medium_range>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003f46:	e017      	b.n	8003f78 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	9304      	str	r3, [sp, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	9303      	str	r3, [sp, #12]
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	9302      	str	r3, [sp, #8]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f64:	f003 fb6b 	bl	800763e <VL53LX_preset_mode_histogram_short_range>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003f6e:	e003      	b.n	8003f78 <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003f70:	23fc      	movs	r3, #252	@ 0xfc
 8003f72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		break;
 8003f76:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 8003f78:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d105      	bne.n	8003f8c <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 8003f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f82:	893a      	ldrh	r2, [r7, #8]
 8003f84:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8003f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f88:	893a      	ldrh	r2, [r7, #8]
 8003f8a:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 8003f8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d108      	bne.n	8003fa6 <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 8003f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff fd9e 	bl	8003adc <VL53LX_set_timeouts_us>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 8003fa6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8003fae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff fd65 	bl	8003a80 <VL53LX_set_inter_measurement_period_ms>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fbe:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
	V53L1_init_zone_results_structure(
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc8:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	f004 f8d2 	bl	8008178 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8003fd4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3740      	adds	r7, #64	@ 0x40
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b0d2      	sub	sp, #328	@ 0x148
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003fea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003fee:	6018      	str	r0, [r3, #0]
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ff8:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	701a      	strb	r2, [r3, #0]
 8004000:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004004:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004008:	460a      	mov	r2, r1
 800400a:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800400c:	2300      	movs	r3, #0
 800400e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004012:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004016:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3318      	adds	r3, #24
 800401e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	VL53LX_LLDriverResults_t  *pres =
 8004022:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004026:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8004030:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8004034:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004038:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 800403c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8004040:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004044:	3348      	adds	r3, #72	@ 0x48
 8004046:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800404a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800404e:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8004052:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004056:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800405a:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 800405e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004062:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004066:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800406a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800406e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004072:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8004076:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800407a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800407e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004082:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8004086:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800408a:	332c      	adds	r3, #44	@ 0x2c
 800408c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8004090:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004094:	3348      	adds	r3, #72	@ 0x48
 8004096:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800409a:	f107 030c 	add.w	r3, r7, #12
 800409e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint16_t i                          = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t i2c_index                  = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 80040ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80040be:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80040c2:	f2a2 1245 	subw	r2, r2, #325	@ 0x145
 80040c6:	7812      	ldrb	r2, [r2, #0]
 80040c8:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 80040ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80040ce:	791b      	ldrb	r3, [r3, #4]
 80040d0:	b25b      	sxtb	r3, r3
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80040d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040dc:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 80040e0:	f993 3000 	ldrsb.w	r3, [r3]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	b25b      	sxtb	r3, r3
 80040e8:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 80040ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80040ee:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 80040f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80040f4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
		VL53LX_set_user_zone(
 80040f8:	3336      	adds	r3, #54	@ 0x36
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8004100:	4413      	add	r3, r2
 8004102:	1d9a      	adds	r2, r3, #6
 8004104:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004108:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800410c:	4611      	mov	r1, r2
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	f7ff fd87 	bl	8003c22 <VL53LX_set_user_zone>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 800411a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800411e:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d019      	beq.n	800415a <VL53LX_init_and_start_range+0x17a>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8004126:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800412a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800412e:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800413c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8004140:	4413      	add	r3, r2
 8004142:	1c9a      	adds	r2, r3, #2
 8004144:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004148:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800414c:	4611      	mov	r1, r2
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	f001 fbbc 	bl	80058cc <VL53LX_set_zone_dss_config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 800415a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800415e:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10d      	bne.n	8004186 <VL53LX_init_and_start_range+0x1a6>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 800416a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800416e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8004172:	2b01      	cmp	r3, #1
 8004174:	d107      	bne.n	8004186 <VL53LX_init_and_start_range+0x1a6>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8004176:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800417a:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	@ 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800417e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004182:	f8a3 2316 	strh.w	r2, [r3, #790]	@ 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8004186:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800418a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800418e:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8004192:	2bff      	cmp	r3, #255	@ 0xff
 8004194:	d106      	bne.n	80041a4 <VL53LX_init_and_start_range+0x1c4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8004196:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800419a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80041a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80041a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ac:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d139      	bne.n	8004228 <VL53LX_init_and_start_range+0x248>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80041b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80041b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041bc:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d131      	bne.n	8004228 <VL53LX_init_and_start_range+0x248>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 80041c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80041c8:	f893 2320 	ldrb.w	r2, [r3, #800]	@ 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 80041cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80041d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041d4:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80041d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 80041e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80041e6:	f893 335d 	ldrb.w	r3, [r3, #861]	@ 0x35d
 80041ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <VL53LX_init_and_start_range+0x226>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 80041f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80041f6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80041fa:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 80041fc:	b21a      	sxth	r2, r3
 80041fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004202:	825a      	strh	r2, [r3, #18]
 8004204:	e003      	b.n	800420e <VL53LX_init_and_start_range+0x22e>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8004206:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800420a:	2200      	movs	r2, #0
 800420c:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 800420e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004212:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b04      	cmp	r3, #4
 800421a:	d805      	bhi.n	8004228 <VL53LX_init_and_start_range+0x248>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800421c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004220:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004224:	2205      	movs	r2, #5
 8004226:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004228:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800422c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004230:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8004234:	2b01      	cmp	r3, #1
 8004236:	d117      	bne.n	8004268 <VL53LX_init_and_start_range+0x288>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8004238:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800423c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004240:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004244:	2b01      	cmp	r3, #1
 8004246:	d10f      	bne.n	8004268 <VL53LX_init_and_start_range+0x288>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8004248:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800424c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004250:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
		pdev->gen_cfg.system__interrupt_config_gpio =
 8004254:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004258:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 800425c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004260:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004264:	2206      	movs	r2, #6
 8004266:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 8004268:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <VL53LX_init_and_start_range+0x2a4>
		status = VL53LX_save_cfg_data(Dev);
 8004270:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004274:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	f006 f835 	bl	800a2e8 <VL53LX_save_cfg_data>
 800427e:	4603      	mov	r3, r0
 8004280:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147



	switch (device_config_level) {
 8004284:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004288:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	3b01      	subs	r3, #1
 8004290:	2b05      	cmp	r3, #5
 8004292:	d827      	bhi.n	80042e4 <VL53LX_init_and_start_range+0x304>
 8004294:	a201      	add	r2, pc, #4	@ (adr r2, 800429c <VL53LX_init_and_start_range+0x2bc>)
 8004296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429a:	bf00      	nop
 800429c:	080042dd 	.word	0x080042dd
 80042a0:	080042d5 	.word	0x080042d5
 80042a4:	080042cd 	.word	0x080042cd
 80042a8:	080042c5 	.word	0x080042c5
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042b5 	.word	0x080042b5
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 80042ba:	e017      	b.n	80042ec <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 80042bc:	230d      	movs	r3, #13
 80042be:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 80042c2:	e013      	b.n	80042ec <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 80042c4:	2324      	movs	r3, #36	@ 0x24
 80042c6:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 80042ca:	e00f      	b.n	80042ec <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 80042cc:	2344      	movs	r3, #68	@ 0x44
 80042ce:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 80042d2:	e00b      	b.n	80042ec <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 80042d4:	235a      	movs	r3, #90	@ 0x5a
 80042d6:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 80042da:	e007      	b.n	80042ec <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 80042dc:	2371      	movs	r3, #113	@ 0x71
 80042de:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 80042e2:	e003      	b.n	80042ec <VL53LX_init_and_start_range+0x30c>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 80042e4:	2383      	movs	r3, #131	@ 0x83
 80042e6:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 80042ea:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 80042ec:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80042f0:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 80042f4:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 80042f8:	f107 030c 	add.w	r3, r7, #12
 80042fc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8004300:	2300      	movs	r3, #0
 8004302:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8004306:	e00b      	b.n	8004320 <VL53LX_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8004308:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	f8c7 2140 	str.w	r2, [r7, #320]	@ 0x140
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8004316:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800431a:	3301      	adds	r3, #1
 800431c:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8004320:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
 8004324:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8004328:	429a      	cmp	r2, r3
 800432a:	d3ed      	bcc.n	8004308 <VL53LX_init_and_start_range+0x328>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 800432c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004330:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b05      	cmp	r3, #5
 8004338:	d917      	bls.n	800436a <VL53LX_init_and_start_range+0x38a>
 800433a:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800433e:	2b00      	cmp	r3, #0
 8004340:	d113      	bne.n	800436a <VL53LX_init_and_start_range+0x38a>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004342:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8004346:	f1c3 0301 	rsb	r3, r3, #1
 800434a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800434e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 8004352:	f107 020c 	add.w	r2, r7, #12
 8004356:	4413      	add	r3, r2
 8004358:	461a      	mov	r2, r3
 800435a:	210b      	movs	r1, #11
 800435c:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8004360:	f00b f99a 	bl	800f698 <VL53LX_i2c_encode_static_nvm_managed>
 8004364:	4603      	mov	r3, r0
 8004366:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800436a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800436e:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b04      	cmp	r3, #4
 8004376:	d917      	bls.n	80043a8 <VL53LX_init_and_start_range+0x3c8>
 8004378:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800437c:	2b00      	cmp	r3, #0
 800437e:	d113      	bne.n	80043a8 <VL53LX_init_and_start_range+0x3c8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004380:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8004384:	f1c3 030d 	rsb	r3, r3, #13
 8004388:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800438c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8004390:	f107 020c 	add.w	r2, r7, #12
 8004394:	4413      	add	r3, r2
 8004396:	461a      	mov	r2, r3
 8004398:	2117      	movs	r1, #23
 800439a:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800439e:	f00b fa57 	bl	800f850 <VL53LX_i2c_encode_customer_nvm_managed>
 80043a2:	4603      	mov	r3, r0
 80043a4:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80043a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80043ac:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d917      	bls.n	80043e6 <VL53LX_init_and_start_range+0x406>
 80043b6:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d113      	bne.n	80043e6 <VL53LX_init_and_start_range+0x406>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80043be:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80043c2:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80043c6:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80043ca:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_config(
 80043ce:	f107 020c 	add.w	r2, r7, #12
 80043d2:	4413      	add	r3, r2
 80043d4:	461a      	mov	r2, r3
 80043d6:	2120      	movs	r1, #32
 80043d8:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80043dc:	f00b fbc1 	bl	800fb62 <VL53LX_i2c_encode_static_config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80043e6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80043ea:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d917      	bls.n	8004424 <VL53LX_init_and_start_range+0x444>
 80043f4:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d113      	bne.n	8004424 <VL53LX_init_and_start_range+0x444>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80043fc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8004400:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8004404:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004408:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_general_config(
 800440c:	f107 020c 	add.w	r2, r7, #12
 8004410:	4413      	add	r3, r2
 8004412:	461a      	mov	r2, r3
 8004414:	2116      	movs	r1, #22
 8004416:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800441a:	f00b fc85 	bl	800fd28 <VL53LX_i2c_encode_general_config>
 800441e:	4603      	mov	r3, r0
 8004420:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8004424:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004428:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d917      	bls.n	8004462 <VL53LX_init_and_start_range+0x482>
 8004432:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004436:	2b00      	cmp	r3, #0
 8004438:	d113      	bne.n	8004462 <VL53LX_init_and_start_range+0x482>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800443a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800443e:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8004442:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004446:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_timing_config(
 800444a:	f107 020c 	add.w	r2, r7, #12
 800444e:	4413      	add	r3, r2
 8004450:	461a      	mov	r2, r3
 8004452:	2117      	movs	r1, #23
 8004454:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8004458:	f00b fcea 	bl	800fe30 <VL53LX_i2c_encode_timing_config>
 800445c:	4603      	mov	r3, r0
 800445e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8004462:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004466:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d036      	beq.n	80044de <VL53LX_init_and_start_range+0x4fe>
 8004470:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004474:	2b00      	cmp	r3, #0
 8004476:	d132      	bne.n	80044de <VL53LX_init_and_start_range+0x4fe>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004478:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800447c:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8004480:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8004484:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004488:	791b      	ldrb	r3, [r3, #4]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d017      	beq.n	80044c2 <VL53LX_init_and_start_range+0x4e2>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004496:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	b2da      	uxtb	r2, r3
 800449e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044a2:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 80044a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a8:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044b4:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ba:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 80044bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044c0:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80044c2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_dynamic_config(
 80044c6:	f107 020c 	add.w	r2, r7, #12
 80044ca:	4413      	add	r3, r2
 80044cc:	461a      	mov	r2, r3
 80044ce:	2112      	movs	r1, #18
 80044d0:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80044d4:	f00b fd2e 	bl	800ff34 <VL53LX_i2c_encode_dynamic_config>
 80044d8:	4603      	mov	r3, r0
 80044da:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 80044de:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d113      	bne.n	800450e <VL53LX_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 80044e6:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80044ea:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 80044ee:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80044f2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_system_control(
 80044f6:	f107 020c 	add.w	r2, r7, #12
 80044fa:	4413      	add	r3, r2
 80044fc:	461a      	mov	r2, r3
 80044fe:	2105      	movs	r1, #5
 8004500:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8004504:	f00b fd9b 	bl	801003e <VL53LX_i2c_encode_system_control>
 8004508:	4603      	mov	r3, r0
 800450a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 800450e:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10f      	bne.n	8004536 <VL53LX_init_and_start_range+0x556>
		status =
			VL53LX_WriteMulti(
 8004516:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 800451a:	f107 020c 	add.w	r2, r7, #12
 800451e:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 8004522:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8004526:	f5a0 70a2 	sub.w	r0, r0, #324	@ 0x144
 800452a:	6800      	ldr	r0, [r0, #0]
 800452c:	f00d f9b4 	bl	8011898 <VL53LX_WriteMulti>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 8004536:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <VL53LX_init_and_start_range+0x572>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 800453e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004542:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	f003 fa30 	bl	80079ac <VL53LX_update_ll_driver_rd_state>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	if (status == VL53LX_ERROR_NONE)
 8004552:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <VL53LX_init_and_start_range+0x58e>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 800455a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800455e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	f003 fbc2 	bl	8007cec <VL53LX_update_ll_driver_cfg_state>
 8004568:	4603      	mov	r3, r0
 800456a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	LOG_FUNCTION_END(status);

	return status;
 800456e:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 8004572:	4618      	mov	r0, r3
 8004574:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004584:	2300      	movs	r3, #0
 8004586:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3318      	adds	r3, #24
 800458c:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8004594:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 800459c:	b25b      	sxtb	r3, r3
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80045a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045a8:	b25b      	sxtb	r3, r3
 80045aa:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f883 2364 	strb.w	r2, [r3, #868]	@ 0x364
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80045b8:	4619      	mov	r1, r3
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f00b fd7a 	bl	80100b4 <VL53LX_set_system_control>
 80045c0:	4603      	mov	r3, r0
 80045c2:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f883 2364 	strb.w	r2, [r3, #868]	@ 0x364
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 80045d6:	2103      	movs	r1, #3
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f003 f9b7 	bl	800794c <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
	V53L1_init_zone_results_structure(
 80045e4:	3301      	adds	r3, #1
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f003 fdc1 	bl	8008178 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f003 fdf3 	bl	80081e2 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004602:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8004606:	2b01      	cmp	r3, #1
 8004608:	d102      	bne.n	8004610 <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f006 ffd4 	bl	800b5b8 <VL53LX_low_power_auto_data_stop_range>

	return status;
 8004610:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b0c8      	sub	sp, #288	@ 0x120
 8004620:	af00      	add	r7, sp, #0
 8004622:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004626:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800462a:	6018      	str	r0, [r3, #0]
 800462c:	460a      	mov	r2, r1
 800462e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004632:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8004636:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004638:	2300      	movs	r3, #0
 800463a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800463e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004642:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3318      	adds	r3, #24
 800464a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 800464e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004652:	f203 3366 	addw	r3, r3, #870	@ 0x366
 8004656:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 800465a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800465e:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 8004662:	3318      	adds	r3, #24
 8004664:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8004668:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800466c:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8004670:	331c      	adds	r3, #28
 8004672:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 8004676:	2388      	movs	r3, #136	@ 0x88
 8004678:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8004688:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800468c:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d008      	beq.n	80046a8 <VL53LX_get_measurement_results+0x8c>
 8004696:	2b02      	cmp	r3, #2
 8004698:	d10d      	bne.n	80046b6 <VL53LX_get_measurement_results+0x9a>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800469a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 800469e:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 80046a2:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80046a6:	e00a      	b.n	80046be <VL53LX_get_measurement_results+0xa2>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80046a8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80046ac:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 80046b0:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80046b4:	e003      	b.n	80046be <VL53LX_get_measurement_results+0xa2>
	default:
		i2c_buffer_size_bytes =
 80046b6:	232c      	movs	r3, #44	@ 0x2c
 80046b8:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80046bc:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 80046be:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10f      	bne.n	80046e6 <VL53LX_get_measurement_results+0xca>
		status =
			VL53LX_ReadMulti(
 80046c6:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80046ca:	f107 0208 	add.w	r2, r7, #8
 80046ce:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 80046d2:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80046d6:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 80046da:	6800      	ldr	r0, [r0, #0]
 80046dc:	f00d f912 	bl	8011904 <VL53LX_ReadMulti>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 80046e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80046ea:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d917      	bls.n	8004724 <VL53LX_get_measurement_results+0x108>
 80046f4:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d113      	bne.n	8004724 <VL53LX_get_measurement_results+0x108>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80046fc:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8004700:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 8004704:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004708:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_debug_results(
 800470c:	f107 0208 	add.w	r2, r7, #8
 8004710:	4413      	add	r3, r2
 8004712:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8004716:	4619      	mov	r1, r3
 8004718:	2038      	movs	r0, #56	@ 0x38
 800471a:	f00b fe49 	bl	80103b0 <VL53LX_i2c_decode_debug_results>
 800471e:	4603      	mov	r3, r0
 8004720:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 8004724:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004728:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d017      	beq.n	8004762 <VL53LX_get_measurement_results+0x146>
 8004732:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8004736:	2b00      	cmp	r3, #0
 8004738:	d113      	bne.n	8004762 <VL53LX_get_measurement_results+0x146>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800473a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 800473e:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8004742:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004746:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_core_results(
 800474a:	f107 0208 	add.w	r2, r7, #8
 800474e:	4413      	add	r3, r2
 8004750:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8004754:	4619      	mov	r1, r3
 8004756:	2021      	movs	r0, #33	@ 0x21
 8004758:	f00b fdc9 	bl	80102ee <VL53LX_i2c_decode_core_results>
 800475c:	4603      	mov	r3, r0
 800475e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 8004762:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8004766:	2b00      	cmp	r3, #0
 8004768:	d110      	bne.n	800478c <VL53LX_get_measurement_results+0x170>

		i2c_buffer_offset_bytes = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004770:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_system_results(
 8004774:	f107 0208 	add.w	r2, r7, #8
 8004778:	4413      	add	r3, r2
 800477a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800477e:	4619      	mov	r1, r3
 8004780:	202c      	movs	r0, #44	@ 0x2c
 8004782:	f00b fcbe 	bl	8010102 <VL53LX_i2c_decode_system_results>
 8004786:	4603      	mov	r3, r0
 8004788:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800478c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8004790:	4618      	mov	r0, r3
 8004792:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 800479a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800479e:	b0a0      	sub	sp, #128	@ 0x80
 80047a0:	af06      	add	r7, sp, #24
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	460b      	mov	r3, r1
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80047aa:	2300      	movs	r3, #0
 80047ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	VL53LX_LLDriverData_t *pdev =
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3318      	adds	r3, #24
 80047b4:	663b      	str	r3, [r7, #96]	@ 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80047bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 80047be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047c0:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 80047c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047c4:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80047c8:	657b      	str	r3, [r7, #84]	@ 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 80047ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047cc:	332c      	adds	r3, #44	@ 0x2c
 80047ce:	653b      	str	r3, [r7, #80]	@ 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 80047d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047d2:	33c2      	adds	r3, #194	@ 0xc2
 80047d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 80047d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047d8:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 80047dc:	64bb      	str	r3, [r7, #72]	@ 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 80047de:	f107 0314 	add.w	r3, r7, #20
 80047e2:	647b      	str	r3, [r7, #68]	@ 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80047e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047e6:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80047ea:	643b      	str	r3, [r7, #64]	@ 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 80047ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047ee:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80047f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 80047f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047f6:	f503 539f 	add.w	r3, r3, #5088	@ 0x13e0
 80047fa:	3310      	adds	r3, #16
 80047fc:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 80047fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004800:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004804:	637b      	str	r3, [r7, #52]	@ 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8004806:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004808:	3348      	adds	r3, #72	@ 0x48
 800480a:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 800480c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800480e:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8004812:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8004814:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004816:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800481a:	331c      	adds	r3, #28
 800481c:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 800481e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004820:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8296 	beq.w	8004d5a <VL53LX_get_device_results+0x5c0>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 800482e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004830:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004834:	4619      	mov	r1, r3
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fbd2 	bl	8004fe0 <VL53LX_get_histogram_bin_data>
 800483c:	4603      	mov	r3, r0
 800483e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 8004842:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004846:	2b00      	cmp	r3, #0
 8004848:	d118      	bne.n	800487c <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 800484a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484c:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 800484e:	2b00      	cmp	r3, #0
 8004850:	d114      	bne.n	800487c <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 8004852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004854:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 800485c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004864:	4413      	add	r3, r2
 8004866:	1d1a      	adds	r2, r3, #4
 8004868:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800486a:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800486e:	4619      	mov	r1, r3
 8004870:	4610      	mov	r0, r2
 8004872:	f004 fa27 	bl	8008cc4 <VL53LX_hist_copy_and_scale_ambient_info>
 8004876:	4603      	mov	r3, r0
 8004878:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 800487c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004880:	2b00      	cmp	r3, #0
 8004882:	f040 8206 	bne.w	8004c92 <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8004886:	f107 0313 	add.w	r3, r7, #19
 800488a:	4619      	mov	r1, r3
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f006 ffba 	bl	800b806 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8004892:	7cfb      	ldrb	r3, [r7, #19]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 8004898:	2301      	movs	r3, #1
 800489a:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 800489c:	7cfb      	ldrb	r3, [r7, #19]
 800489e:	3b01      	subs	r3, #1
 80048a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 80048a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048a6:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d107      	bne.n	80048be <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 80048ae:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80048b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b4:	3202      	adds	r2, #2
 80048b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80048ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048bc:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 80048be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048c0:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	@ 0xba
		pHP->gain_factor =
 80048c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048c6:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 80048c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f004 f8fd 	bl	8008ad4 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 80048da:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80048dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048de:	62da      	str	r2, [r3, #44]	@ 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80048e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048e2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80048e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048e8:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80048ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ec:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80048f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048f2:	865a      	strh	r2, [r3, #50]	@ 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 80048f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048f6:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 80048f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048fa:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 80048fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004900:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8004902:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004904:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8004908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800490a:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 800490c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800490e:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8004912:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004914:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	@ 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8004918:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800491a:	f8a3 226c 	strh.w	r2, [r3, #620]	@ 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 800491e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004920:	f893 2331 	ldrb.w	r2, [r3, #817]	@ 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8004924:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004926:	f883 226e 	strb.w	r2, [r3, #622]	@ 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 800492a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800492c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8004930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004932:	86da      	strh	r2, [r3, #54]	@ 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8004934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004936:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 800493a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800493c:	869a      	strh	r2, [r3, #52]	@ 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 800493e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004940:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8004942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004944:	871a      	strh	r2, [r3, #56]	@ 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 8004946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004948:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 800494a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800494c:	875a      	strh	r2, [r3, #58]	@ 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 800494e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004950:	f203 3292 	addw	r2, r3, #914	@ 0x392
 8004954:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004956:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f003 faeb 	bl	8007f38 <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8004962:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004964:	795b      	ldrb	r3, [r3, #5]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d002      	beq.n	8004970 <VL53LX_get_device_results+0x1d6>
 800496a:	2b03      	cmp	r3, #3
 800496c:	d02e      	beq.n	80049cc <VL53LX_get_device_results+0x232>
 800496e:	e03d      	b.n	80049ec <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8004970:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004972:	f893 3331 	ldrb.w	r3, [r3, #817]	@ 0x331
 8004976:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 800497a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497c:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8004980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004982:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8004986:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004988:	f893 e3c2 	ldrb.w	lr, [r3, #962]	@ 0x3c2
 800498c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800498e:	f893 83c3 	ldrb.w	r8, [r3, #963]	@ 0x3c3
 8004992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004994:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8004998:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800499a:	f892 20a9 	ldrb.w	r2, [r2, #169]	@ 0xa9
 800499e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80049a0:	319c      	adds	r1, #156	@ 0x9c
 80049a2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80049a4:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 80049a8:	f897 4025 	ldrb.w	r4, [r7, #37]	@ 0x25
 80049ac:	b2a4      	uxth	r4, r4
 80049ae:	6c3d      	ldr	r5, [r7, #64]	@ 0x40
 80049b0:	351c      	adds	r5, #28
 80049b2:	9505      	str	r5, [sp, #20]
 80049b4:	9404      	str	r4, [sp, #16]
 80049b6:	9003      	str	r0, [sp, #12]
 80049b8:	9102      	str	r1, [sp, #8]
 80049ba:	9201      	str	r2, [sp, #4]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	4643      	mov	r3, r8
 80049c0:	4672      	mov	r2, lr
 80049c2:	4661      	mov	r1, ip
 80049c4:	4630      	mov	r0, r6
 80049c6:	f005 f8f4 	bl	8009bb2 <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 80049ca:	e013      	b.n	80049f4 <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 80049cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ce:	331c      	adds	r3, #28
 80049d0:	4619      	mov	r1, r3
 80049d2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80049d4:	f7fe f9b8 	bl	8002d48 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 80049d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049da:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	b21a      	sxth	r2, r3
 80049e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049e8:	839a      	strh	r2, [r3, #28]
		break;
 80049ea:	e003      	b.n	80049f4 <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 80049ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ee:	2200      	movs	r2, #0
 80049f0:	839a      	strh	r2, [r3, #28]
		break;
 80049f2:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 80049f4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f040 814c 	bne.w	8004c96 <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 80049fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a00:	f893 00a8 	ldrb.w	r0, [r3, #168]	@ 0xa8
 8004a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a06:	f893 10a9 	ldrb.w	r1, [r3, #169]	@ 0xa9
 8004a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a0c:	f503 72ec 	add.w	r2, r3, #472	@ 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8004a10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a12:	f893 3331 	ldrb.w	r3, [r3, #817]	@ 0x331
		VL53LX_calc_max_effective_spads(
 8004a16:	461c      	mov	r4, r3
 8004a18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a1a:	f203 236a 	addw	r3, r3, #618	@ 0x26a
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	4623      	mov	r3, r4
 8004a22:	f005 fa69 	bl	8009ef8 <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 8004a26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a28:	799b      	ldrb	r3, [r3, #6]
 8004a2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 ff89 	bl	8005946 <VL53LX_get_dmax_calibration_data>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8004a3a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f040 812b 	bne.w	8004c9a <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 8004a44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a46:	f503 7515 	add.w	r5, r3, #596	@ 0x254
 8004a4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a4c:	f503 7605 	add.w	r6, r3, #532	@ 0x214
 8004a50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a52:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004a56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a58:	f202 521c 	addw	r2, r2, #1308	@ 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8004a5c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004a5e:	f501 51a0 	add.w	r1, r1, #5120	@ 0x1400
				pdev->wArea2,
 8004a62:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004a64:	f500 50d0 	add.w	r0, r0, #6656	@ 0x1a00
		status = VL53LX_ipp_hist_process_data(
 8004a68:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 8004a6a:	9405      	str	r4, [sp, #20]
 8004a6c:	f107 0413 	add.w	r4, r7, #19
 8004a70:	9404      	str	r4, [sp, #16]
 8004a72:	9003      	str	r0, [sp, #12]
 8004a74:	9102      	str	r1, [sp, #8]
 8004a76:	9201      	str	r2, [sp, #4]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	4633      	mov	r3, r6
 8004a7c:	462a      	mov	r2, r5
 8004a7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f00d f94d 	bl	8011d20 <VL53LX_ipp_hist_process_data>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004a8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a8e:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d150      	bne.n	8004b38 <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 8004a96:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d94d      	bls.n	8004b38 <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004aa2:	e045      	b.n	8004b30 <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 8004aa4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004aa8:	224c      	movs	r2, #76	@ 0x4c
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	3310      	adds	r3, #16
 8004ab0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	7cfa      	ldrb	r2, [r7, #19]
 8004abe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aca:	7cfa      	ldrb	r2, [r7, #19]
 8004acc:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	7cfa      	ldrb	r2, [r7, #19]
 8004ada:	fb93 f2f2 	sdiv	r2, r3, r2
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	7cfb      	ldrb	r3, [r7, #19]
 8004aea:	fb92 f3f3 	sdiv	r3, r2, r3
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004af8:	461a      	mov	r2, r3
 8004afa:	7cfb      	ldrb	r3, [r7, #19]
 8004afc:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	7cfb      	ldrb	r3, [r7, #19]
 8004b0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1c:	7cfa      	ldrb	r2, [r7, #19]
 8004b1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	639a      	str	r2, [r3, #56]	@ 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004b26:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004b30:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d9b5      	bls.n	8004aa4 <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 8004b38:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f040 80ae 	bne.w	8004c9e <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8004b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b44:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 8004b48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b4a:	f503 7171 	add.w	r1, r3, #964	@ 0x3c4
 8004b4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b50:	330e      	adds	r3, #14
 8004b52:	461a      	mov	r2, r3
 8004b54:	f004 fff7 	bl	8009b46 <VL53LX_hist_wrap_dmax>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 8004b5e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f040 809d 	bne.w	8004ca2 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8004b68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b6a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8004b72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b7a:	4413      	add	r3, r2
 8004b7c:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004b7e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 8004b82:	4613      	mov	r3, r2
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004b8e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b90:	4413      	add	r3, r2
 8004b92:	f103 0208 	add.w	r2, r3, #8
 8004b96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f004 faf2 	bl	8009182 <VL53LX_hist_phase_consistency_check>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 8004ba4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d17c      	bne.n	8004ca6 <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8004bac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bae:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004bb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8004bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bbe:	4413      	add	r3, r2
 8004bc0:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004bc2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004bd2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f103 0208 	add.w	r2, r3, #8
 8004bda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bdc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f004 ff58 	bl	8009a96 <VL53LX_hist_xmonitor_consistency_check>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 8004bec:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d15a      	bne.n	8004caa <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8004bf4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bf6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8004bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c00:	2205      	movs	r2, #5
 8004c02:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8004c04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c06:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8004c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c10:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8004c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c14:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004c18:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8004c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c1c:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
		if (zid <
 8004c20:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d222      	bcs.n	8004c6e <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 8004c28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			phist_info =
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c30:	4413      	add	r3, r2
 8004c32:	3304      	adds	r3, #4
 8004c34:	64bb      	str	r3, [r7, #72]	@ 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8004c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c38:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8004c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c3c:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c40:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8004c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c44:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8004c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c48:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
			phist_info->result__dss_actual_effective_spads =
 8004c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c4e:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8004c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c52:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
			phist_info->VL53LX_p_005 =
 8004c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c58:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
			phist_info->total_periods_elapsed =
 8004c60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c62:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8004c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c66:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			phist_info->ambient_events_sum =
 8004c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c6c:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 8004c6e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d11b      	bne.n	8004cae <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 8004c76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c78:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
 8004c7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c7e:	f203 3266 	addw	r2, r3, #870	@ 0x366
 8004c82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c84:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 8004c88:	3318      	adds	r3, #24
 8004c8a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004c8c:	f005 fa91 	bl	800a1b2 <VL53LX_hist_copy_results_to_sys_and_core>
 8004c90:	e00e      	b.n	8004cb0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004c92:	bf00      	nop
 8004c94:	e00c      	b.n	8004cb0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004c96:	bf00      	nop
 8004c98:	e00a      	b.n	8004cb0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004c9a:	bf00      	nop
 8004c9c:	e008      	b.n	8004cb0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004c9e:	bf00      	nop
 8004ca0:	e006      	b.n	8004cb0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004ca2:	bf00      	nop
 8004ca4:	e004      	b.n	8004cb0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004ca6:	bf00      	nop
 8004ca8:	e002      	b.n	8004cb0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004caa:	bf00      	nop
 8004cac:	e000      	b.n	8004cb0 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004cae:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8004cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d036      	beq.n	8004d26 <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 8004cb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cba:	79db      	ldrb	r3, [r3, #7]
 8004cbc:	2b06      	cmp	r3, #6
 8004cbe:	d00a      	beq.n	8004cd6 <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 8004cc0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 8004cc8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f005 fb45 	bl	800a35a <VL53LX_dynamic_zone_update>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004cdc:	e015      	b.n	8004d0a <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8004cde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ce0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
						& 0x01) ?
 8004ce4:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <VL53LX_get_device_results+0x556>
 8004cec:	2103      	movs	r1, #3
 8004cee:	e000      	b.n	8004cf2 <VL53LX_get_device_results+0x558>
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004cf6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cf8:	4413      	add	r3, r2
 8004cfa:	460a      	mov	r2, r1
 8004cfc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004d00:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004d04:	3301      	adds	r3, #1
 8004d06:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004d0a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d9e5      	bls.n	8004cde <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8004d12:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d105      	bne.n	8004d26 <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f005 fb97 	bl	800a44e <VL53LX_multizone_hist_bins_update>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 8004d26:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d105      	bne.n	8004d3a <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f006 f832 	bl	800ad98 <VL53LX_dynamic_xtalk_correction_corrector>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004d3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d3c:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d157      	bne.n	8004df4 <VL53LX_get_device_results+0x65a>
			(histo_merge_nb != 0))
 8004d44:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d054      	beq.n	8004df4 <VL53LX_get_device_results+0x65a>
			pC->algo__crosstalk_compensation_plane_offset_kcps /=
 8004d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	7cfa      	ldrb	r2, [r7, #19]
 8004d50:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	e04c      	b.n	8004df4 <VL53LX_get_device_results+0x65a>
				histo_merge_nb;
	} else {

		if (status == VL53LX_ERROR_NONE)
 8004d5a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d107      	bne.n	8004d72 <VL53LX_get_device_results+0x5d8>
			status = VL53LX_get_measurement_results(
 8004d62:	7afb      	ldrb	r3, [r7, #11]
 8004d64:	4619      	mov	r1, r3
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f7ff fc58 	bl	800461c <VL53LX_get_measurement_results>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 8004d72:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10d      	bne.n	8004d96 <VL53LX_get_device_results+0x5fc>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8004d7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d7c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 8004d80:	4618      	mov	r0, r3
 8004d82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d84:	f203 3166 	addw	r1, r3, #870	@ 0x366
 8004d88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d8a:	f503 5299 	add.w	r2, r3, #4896	@ 0x1320
 8004d8e:	3218      	adds	r2, #24
 8004d90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d92:	f000 fc27 	bl	80055e4 <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8004d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d98:	785b      	ldrb	r3, [r3, #1]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d12a      	bne.n	8004df4 <VL53LX_get_device_results+0x65a>

			if ((status == VL53LX_ERROR_NONE) &&
 8004d9e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10d      	bne.n	8004dc2 <VL53LX_get_device_results+0x628>
				(pL->low_power_auto_range_count == 0)) {
 8004da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da8:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <VL53LX_get_device_results+0x628>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f006 fc4e 	bl	800b650 <VL53LX_low_power_auto_setup_manual_calibration>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8004dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	709a      	strb	r2, [r3, #2]
 8004dc0:	e00a      	b.n	8004dd8 <VL53LX_get_device_results+0x63e>
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004dc2:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <VL53LX_get_device_results+0x63e>
				(pL->low_power_auto_range_count == 1)) {
 8004dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dcc:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d102      	bne.n	8004dd8 <VL53LX_get_device_results+0x63e>
				pL->low_power_auto_range_count = 2;
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 8004dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dda:	789b      	ldrb	r3, [r3, #2]
 8004ddc:	2bff      	cmp	r3, #255	@ 0xff
 8004dde:	d009      	beq.n	8004df4 <VL53LX_get_device_results+0x65a>
 8004de0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d105      	bne.n	8004df4 <VL53LX_get_device_results+0x65a>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f006 fc83 	bl	800b6f4 <VL53LX_low_power_auto_update_DSS>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8004df4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004df6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004dfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dfc:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8004dfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e00:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8004e04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e06:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8004e08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e0a:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8004e0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e10:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 8004e12:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f040 80b0 	bne.w	8004f7c <VL53LX_get_device_results+0x7e2>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8004e1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e1e:	2205      	movs	r2, #5
 8004e20:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8004e24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e26:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e30:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 8004e34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e36:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (zid < pres->zone_results.max_zones) {
 8004e3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e40:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
 8004e44:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	f080 8097 	bcs.w	8004f7c <VL53LX_get_device_results+0x7e2>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8004e4e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
			pobjects =
 8004e52:	4613      	mov	r3, r2
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004e5e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e60:	4413      	add	r3, r2
 8004e62:	3308      	adds	r3, #8
 8004e64:	657b      	str	r3, [r7, #84]	@ 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8004e66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e68:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8004e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e6c:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8004e6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e70:	785a      	ldrb	r2, [r3, #1]
 8004e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e74:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8004e76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e78:	789a      	ldrb	r2, [r3, #2]
 8004e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e7c:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8004e7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e80:	78da      	ldrb	r2, [r3, #3]
 8004e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e84:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 8004e86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e88:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 8004e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e8e:	639a      	str	r2, [r3, #56]	@ 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 8004e90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e92:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 8004e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e98:	63da      	str	r2, [r3, #60]	@ 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 8004e9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e9c:	f8b3 2184 	ldrh.w	r2, [r3, #388]	@ 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 8004ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8004ea6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ea8:	f893 218e 	ldrb.w	r2, [r3, #398]	@ 0x18e
			pobjects->xmonitor.range_status =
 8004eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

			pobjects->max_objects      = presults->max_results;
 8004eb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004eb4:	7c5a      	ldrb	r2, [r3, #17]
 8004eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb8:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8004eba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ebc:	7c9a      	ldrb	r2, [r3, #18]
 8004ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec0:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004ec8:	e052      	b.n	8004f70 <VL53LX_get_device_results+0x7d6>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004eca:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004ece:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004ed2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004ed4:	204c      	movs	r0, #76	@ 0x4c
 8004ed6:	fb00 f303 	mul.w	r3, r0, r3
 8004eda:	440b      	add	r3, r1
 8004edc:	3338      	adds	r3, #56	@ 0x38
 8004ede:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004ee0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4403      	add	r3, r0
 8004eec:	3308      	adds	r3, #8
 8004eee:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004ef0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004ef4:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004ef8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004efa:	204c      	movs	r0, #76	@ 0x4c
 8004efc:	fb00 f303 	mul.w	r3, r0, r3
 8004f00:	440b      	add	r3, r1
 8004f02:	333c      	adds	r3, #60	@ 0x3c
 8004f04:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004f06:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004f08:	4613      	mov	r3, r2
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4403      	add	r3, r0
 8004f12:	330c      	adds	r3, #12
 8004f14:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004f16:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004f1a:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004f1e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004f20:	204c      	movs	r0, #76	@ 0x4c
 8004f22:	fb00 f303 	mul.w	r3, r0, r3
 8004f26:	440b      	add	r3, r1
 8004f28:	3354      	adds	r3, #84	@ 0x54
 8004f2a:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004f2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f2e:	4613      	mov	r3, r2
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	3310      	adds	r3, #16
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8004f3e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8004f42:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].range_status;
 8004f46:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004f48:	204c      	movs	r0, #76	@ 0x4c
 8004f4a:	fb00 f303 	mul.w	r3, r0, r3
 8004f4e:	440b      	add	r3, r1
 8004f50:	335e      	adds	r3, #94	@ 0x5e
 8004f52:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 8004f54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f56:	4613      	mov	r3, r2
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	3312      	adds	r3, #18
 8004f62:	4602      	mov	r2, r0
 8004f64:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8004f66:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004f70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f72:	7c9b      	ldrb	r3, [r3, #18]
 8004f74:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d3a6      	bcc.n	8004eca <VL53LX_get_device_results+0x730>
		}
	}



	memcpy(
 8004f7c:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8004f80:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f015 fdf3 	bl	801ab6e <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 8004f88:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d105      	bne.n	8004f9c <VL53LX_get_device_results+0x802>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f002 fdf9 	bl	8007b88 <VL53LX_check_ll_driver_rd_state>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8004f9c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3768      	adds	r7, #104	@ 0x68
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004faa <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 8004fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d107      	bne.n	8004fd2 <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff f809 	bl	8003fe0 <VL53LX_init_and_start_range>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8004fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b0d2      	sub	sp, #328	@ 0x148
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004fea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004fee:	6018      	str	r0, [r3, #0]
 8004ff0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ff4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ff8:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev =
 8005000:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005004:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3318      	adds	r3, #24
 800500c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8005010:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005014:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800501e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8005022:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005026:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 800502a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 800502e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005032:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8005036:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 800503a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800503e:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8005042:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8005046:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800504a:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800504e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 8005052:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005056:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 800505a:	f107 030c 	add.w	r3, r7, #12
 800505e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint8_t    bin_23_0 = 0x00;
 8005062:	2300      	movs	r3, #0
 8005064:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
	uint16_t   bin                      = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 800506e:	2300      	movs	r3, #0
 8005070:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
	uint16_t   encoded_timeout          = 0;
 8005074:	2300      	movs	r3, #0
 8005076:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c

	uint32_t   pll_period_us            = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t    i                        = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b

	int32_t    hist_merge				= 0;
 800508c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005090:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8005098:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10d      	bne.n	80050bc <VL53LX_get_histogram_bin_data+0xdc>
		status = VL53LX_ReadMulti(
 80050a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050a4:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 80050a8:	2353      	movs	r3, #83	@ 0x53
 80050aa:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80050ae:	2188      	movs	r1, #136	@ 0x88
 80050b0:	6800      	ldr	r0, [r0, #0]
 80050b2:	f00c fc27 	bl	8011904 <VL53LX_ReadMulti>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 80050bc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80050c0:	781a      	ldrb	r2, [r3, #0]
 80050c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050c6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 80050d0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80050d4:	785a      	ldrb	r2, [r3, #1]
 80050d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050da:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 80050e4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80050e8:	789a      	ldrb	r2, [r3, #2]
 80050ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050ee:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 80050f8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80050fc:	78da      	ldrb	r2, [r3, #3]
 80050fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005102:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 800510c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8005110:	3304      	adds	r3, #4
 8005112:	4619      	mov	r1, r3
 8005114:	2002      	movs	r0, #2
 8005116:	f003 fa37 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800511a:	4603      	mov	r3, r0
 800511c:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 800511e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005122:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c



	i2c_buffer_offset_bytes =
 800512c:	234e      	movs	r3, #78	@ 0x4e
 800512e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8005132:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8005136:	f107 020c 	add.w	r2, r7, #12
 800513a:	4413      	add	r3, r2
 800513c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8005140:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005144:	2002      	movs	r0, #2
 8005146:	f003 fa1f 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800514a:	4603      	mov	r3, r0
 800514c:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800514e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005152:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

	i2c_buffer_offset_bytes =
 800515c:	2350      	movs	r3, #80	@ 0x50
 800515e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8005162:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8005166:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800516a:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800516e:	5cd2      	ldrb	r2, [r2, r3]
 8005170:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005174:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 800517e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005182:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8b3 207e 	ldrh.w	r2, [r3, #126]	@ 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 800518c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005194:	f8a3 235c 	strh.w	r2, [r3, #860]	@ 0x35c
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8005198:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800519c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 80051a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80051aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051ae:	f883 235e 	strb.w	r2, [r3, #862]	@ 0x35e



	i2c_buffer_offset_bytes =
 80051b2:	2351      	movs	r3, #81	@ 0x51
 80051b4:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 80051b8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 80051bc:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80051c0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80051c4:	5cd3      	ldrb	r3, [r2, r3]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 80051cc:	2352      	movs	r3, #82	@ 0x52
 80051ce:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 80051d2:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 80051d6:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80051da:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80051de:	5cd2      	ldrb	r2, [r2, r3]
 80051e0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80051e4:	4413      	add	r3, r2
 80051e6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 80051ea:	234d      	movs	r3, #77	@ 0x4d
 80051ec:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 80051f0:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 80051f4:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80051f8:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80051fc:	f897 111b 	ldrb.w	r1, [r7, #283]	@ 0x11b
 8005200:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8005202:	2306      	movs	r3, #6
 8005204:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8005208:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800520c:	f107 020c 	add.w	r2, r7, #12
 8005210:	4413      	add	r3, r2
 8005212:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8005216:	2300      	movs	r3, #0
 8005218:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 800521c:	e01a      	b.n	8005254 <VL53LX_get_histogram_bin_data+0x274>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 800521e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005222:	2003      	movs	r0, #3
 8005224:	f003 fa4f 	bl	80086c6 <VL53LX_i2c_decode_uint32_t>
 8005228:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 800522a:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 800522e:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8005230:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005234:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3206      	adds	r2, #6
 800523c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8005240:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8005244:	3303      	adds	r3, #3
 8005246:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 800524a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800524e:	3301      	adds	r3, #1
 8005250:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8005254:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8005258:	2b17      	cmp	r3, #23
 800525a:	d9e0      	bls.n	800521e <VL53LX_get_histogram_bin_data+0x23e>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 800525c:	f107 0208 	add.w	r2, r7, #8
 8005260:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005264:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005268:	f248 018d 	movw	r1, #32909	@ 0x808d
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	f000 fbab 	bl	80059c8 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 8005272:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005276:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8005280:	2b00      	cmp	r3, #0
 8005282:	d118      	bne.n	80052b6 <VL53LX_get_histogram_bin_data+0x2d6>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8005284:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005288:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 800528c:	3310      	adds	r3, #16
 800528e:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8005292:	2100      	movs	r1, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f015 fb85 	bl	801a9a4 <memset>
		pdev->bin_rec_pos = 0;
 800529a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800529e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
		pdev->pos_before_next_recom = 0;
 80052a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80052ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
	}

	if (hist_merge == 1)
 80052b6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80052ba:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d10b      	bne.n	80052dc <VL53LX_get_histogram_bin_data+0x2fc>
		vl53lx_histo_merge(Dev, pdata);
 80052c4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80052c8:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 80052cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80052d0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80052d4:	6811      	ldr	r1, [r2, #0]
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	f7fd fe2e 	bl	8002f38 <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 80052dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80052e0:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 80052e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80052e8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 80052f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80052f4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2200      	movs	r2, #0
 80052fc:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 80052fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005302:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2218      	movs	r2, #24
 800530a:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800530c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005310:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2218      	movs	r2, #24
 8005318:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 800531a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800531e:	78da      	ldrb	r2, [r3, #3]
 8005320:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005324:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 800532e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005332:	799b      	ldrb	r3, [r3, #6]
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8005338:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800533c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->vcsel_width +=
 8005346:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800534a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8005354:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005358:	7c12      	ldrb	r2, [r2, #16]
	pdata->vcsel_width +=
 800535a:	4413      	add	r3, r2
 800535c:	b29a      	uxth	r2, r3
 800535e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005362:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 800536c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005370:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 8005372:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005376:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 8005380:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005384:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 8005388:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800538c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005390:	6811      	ldr	r1, [r2, #0]
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	f003 fd97 	bl	8008ec6 <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8005398:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800539c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d115      	bne.n	80053d0 <VL53LX_get_histogram_bin_data+0x3f0>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 80053a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80053a8:	791b      	ldrb	r3, [r3, #4]
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 80053ae:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80053b2:	7952      	ldrb	r2, [r2, #5]
		encoded_timeout =
 80053b4:	4413      	add	r3, r2
 80053b6:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 80053ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80053be:	799a      	ldrb	r2, [r3, #6]
 80053c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80053c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80053ce:	e014      	b.n	80053fa <VL53LX_get_histogram_bin_data+0x41a>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 80053d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80053d4:	79db      	ldrb	r3, [r3, #7]
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 80053da:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80053de:	7a12      	ldrb	r2, [r2, #8]
		encoded_timeout =
 80053e0:	4413      	add	r3, r2
 80053e2:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 80053e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80053ea:	7a5a      	ldrb	r2, [r3, #9]
 80053ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80053f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 80053fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80053fe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2200      	movs	r2, #0
 8005406:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8005408:	2300      	movs	r3, #0
 800540a:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 800540e:	e01f      	b.n	8005450 <VL53LX_get_histogram_bin_data+0x470>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8005410:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8005414:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8005418:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	4413      	add	r3, r2
 8005420:	7b1b      	ldrb	r3, [r3, #12]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	2b07      	cmp	r3, #7
 8005428:	d10d      	bne.n	8005446 <VL53LX_get_histogram_bin_data+0x466>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 800542a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800542e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	7adb      	ldrb	r3, [r3, #11]
 8005436:	3304      	adds	r3, #4
 8005438:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 800543a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800543e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8005446:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 800544a:	3301      	adds	r3, #1
 800544c:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8005450:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8005454:	2b05      	cmp	r3, #5
 8005456:	d9db      	bls.n	8005410 <VL53LX_get_histogram_bin_data+0x430>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 8005458:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800545c:	4618      	mov	r0, r3
 800545e:	f003 fba2 	bl	8008ba6 <VL53LX_decode_timeout>
 8005462:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8005464:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005468:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 8005472:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005476:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8005480:	4618      	mov	r0, r3
 8005482:	f006 fa00 	bl	800b886 <VL53LX_calc_pll_period_us>
 8005486:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 800548a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800548e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005498:	3301      	adds	r3, #1
 800549a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 800549e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80054a2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		VL53LX_duration_maths(
 80054ac:	4619      	mov	r1, r3
 80054ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80054b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054b6:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80054ba:	f006 f9fb 	bl	800b8b4 <VL53LX_duration_maths>
 80054be:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 80054c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80054c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 80054ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80054d2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2200      	movs	r2, #0
 80054da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 80054de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80054e2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	f006 fb0a 	bl	800bb00 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 80054ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80054f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	f006 ff22 	bl	800c33e <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 80054fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80054fe:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005502:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005506:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 800550e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005512:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8005516:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800551a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 8005522:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005526:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	789b      	ldrb	r3, [r3, #2]
 800552e:	461a      	mov	r2, r3
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800553c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8005540:	4413      	add	r3, r2
 8005542:	3302      	adds	r3, #2
 8005544:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8005548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800554c:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 800554e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005552:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 800555c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005560:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8005562:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005566:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005570:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005574:	2200      	movs	r2, #0
 8005576:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8005578:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800557c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	2b11      	cmp	r3, #17
 800558c:	bf8c      	ite	hi
 800558e:	2201      	movhi	r2, #1
 8005590:	2200      	movls	r2, #0
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	2a00      	cmp	r2, #0
 8005596:	d11c      	bne.n	80055d2 <VL53LX_get_histogram_bin_data+0x5f2>
 8005598:	4a11      	ldr	r2, [pc, #68]	@ (80055e0 <VL53LX_get_histogram_bin_data+0x600>)
 800559a:	fa22 f303 	lsr.w	r3, r2, r3
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bf14      	ite	ne
 80055a6:	2301      	movne	r3, #1
 80055a8:	2300      	moveq	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d010      	beq.n	80055d2 <VL53LX_get_histogram_bin_data+0x5f2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 80055b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80055b4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055c8:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 80055ca:	23fa      	movs	r3, #250	@ 0xfa
 80055cc:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	break;
 80055d0:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80055d2:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	0002200e 	.word	0x0002200e

080055e4 <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b08b      	sub	sp, #44	@ 0x2c
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2200      	movs	r2, #0
 8005604:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	78da      	ldrb	r2, [r3, #3]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2200      	movs	r2, #0
 8005612:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2204      	movs	r2, #4
 8005618:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2201      	movs	r2, #1
 800561e:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	8a1b      	ldrh	r3, [r3, #16]
 8005624:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	8a9b      	ldrh	r3, [r3, #20]
 800562a:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	8a5b      	ldrh	r3, [r3, #18]
 8005630:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8005632:	2300      	movs	r3, #0
 8005634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005638:	e00b      	b.n	8005652 <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 800563a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	4413      	add	r3, r2
 8005644:	2200      	movs	r2, #0
 8005646:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8005648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800564c:	3301      	adds	r3, #1
 800564e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005652:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005656:	2b04      	cmp	r3, #4
 8005658:	d9ef      	bls.n	800563a <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	3314      	adds	r3, #20
 800565e:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8005660:	2300      	movs	r3, #0
 8005662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005666:	e0fe      	b.n	8005866 <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800566e:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	2200      	movs	r2, #0
 8005674:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	78db      	ldrb	r3, [r3, #3]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10a      	bne.n	8005694 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	785b      	ldrb	r3, [r3, #1]
 8005682:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8005686:	2b09      	cmp	r3, #9
 8005688:	d104      	bne.n	8005694 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	2213      	movs	r2, #19
 800568e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 8005692:	e007      	b.n	80056a4 <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	2200      	movs	r2, #0
 80056a8:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	2200      	movs	r2, #0
 80056ae:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	2200      	movs	r2, #0
 80056b4:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	2200      	movs	r2, #0
 80056ba:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	2200      	movs	r2, #0
 80056c0:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	2200      	movs	r2, #0
 80056c6:	735a      	strb	r2, [r3, #13]

		switch (i) {
 80056c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d05c      	beq.n	800578e <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 80056d4:	e0a8      	b.n	8005828 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	789b      	ldrb	r3, [r3, #2]
 80056da:	2b07      	cmp	r3, #7
 80056dc:	d103      	bne.n	80056e6 <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	8a7a      	ldrh	r2, [r7, #18]
 80056e2:	82da      	strh	r2, [r3, #22]
 80056e4:	e00b      	b.n	80056fe <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	789b      	ldrb	r3, [r3, #2]
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d103      	bne.n	80056f6 <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	8aba      	ldrh	r2, [r7, #20]
 80056f2:	82da      	strh	r2, [r3, #22]
 80056f4:	e003      	b.n	80056fe <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	8afa      	ldrh	r2, [r7, #22]
 8005702:	861a      	strh	r2, [r3, #48]	@ 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	895b      	ldrh	r3, [r3, #10]
 8005718:	015b      	lsls	r3, r3, #5
 800571a:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005722:	d302      	bcc.n	800572a <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8005724:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005728:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	b29a      	uxth	r2, r3
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8005740:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	fb02 f303 	mul.w	r3, r2, r3
 800574a:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005752:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	da01      	bge.n	800575e <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 800575a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800575e:	12db      	asrs	r3, r3, #11
 8005760:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	b21a      	sxth	r2, r3
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 800578c:	e04c      	b.n	8005828 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps =
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057a4:	865a      	strh	r2, [r3, #50]	@ 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	8bdb      	ldrh	r3, [r3, #30]
 80057b2:	015b      	lsls	r3, r3, #5
 80057b4:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057bc:	d302      	bcc.n	80057c4 <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 80057be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80057c2:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm = (int32_t)(
 80057da:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	fb02 f303 	mul.w	r3, r2, r3
 80057e4:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057ec:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	da01      	bge.n	80057f8 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 80057f4:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80057f8:	12db      	asrs	r3, r3, #11
 80057fa:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	b21a      	sxth	r2, r3
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 8005826:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	87da      	strh	r2, [r3, #62]	@ 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

		pdata++;
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	334c      	adds	r3, #76	@ 0x4c
 800585a:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 800585c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005860:	3301      	adds	r3, #1
 8005862:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005866:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800586a:	2b01      	cmp	r3, #1
 800586c:	f67f aefc 	bls.w	8005668 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2200      	movs	r2, #0
 8005874:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	2b11      	cmp	r3, #17
 8005880:	bf8c      	ite	hi
 8005882:	2201      	movhi	r2, #1
 8005884:	2200      	movls	r2, #0
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	2a00      	cmp	r2, #0
 800588a:	d117      	bne.n	80058bc <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
 800588c:	4a0e      	ldr	r2, [pc, #56]	@ (80058c8 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 800588e:	fa22 f303 	lsr.w	r3, r2, r3
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	bf14      	ite	ne
 800589a:	2301      	movne	r3, #1
 800589c:	2300      	moveq	r3, #0
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00b      	beq.n	80058bc <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	785b      	ldrb	r3, [r3, #1]
 80058a8:	f003 031f 	and.w	r3, r3, #31
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 80058ba:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 80058bc:	bf00      	nop
 80058be:	372c      	adds	r7, #44	@ 0x2c
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	0002200e 	.word	0x0002200e

080058cc <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80058d6:	2300      	movs	r3, #0
 80058d8:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3318      	adds	r3, #24
 80058de:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	332c      	adds	r3, #44	@ 0x2c
 80058e4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d109      	bne.n	8005902 <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	2202      	movs	r2, #2
 80058f2:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
 8005900:	e003      	b.n	800590a <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 800590a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800590e:	4618      	mov	r0, r3
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 800591a:	b480      	push	{r7}
 800591c:	b085      	sub	sp, #20
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	460b      	mov	r3, r1
 8005924:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005926:	2300      	movs	r3, #0
 8005928:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3318      	adds	r3, #24
 800592e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	78fa      	ldrb	r2, [r7, #3]
 8005934:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8005936:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b086      	sub	sp, #24
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	460b      	mov	r3, r1
 8005950:	607a      	str	r2, [r7, #4]
 8005952:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005954:	2300      	movs	r3, #0
 8005956:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3318      	adds	r3, #24
 800595c:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 800595e:	7afb      	ldrb	r3, [r7, #11]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d009      	beq.n	8005978 <VL53LX_get_dmax_calibration_data+0x32>
 8005964:	2b02      	cmp	r3, #2
 8005966:	d10f      	bne.n	8005988 <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	33ae      	adds	r3, #174	@ 0xae
		memcpy(
 800596c:	220a      	movs	r2, #10
 800596e:	4619      	mov	r1, r3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f015 f8fc 	bl	801ab6e <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8005976:	e00a      	b.n	800598e <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	33a4      	adds	r3, #164	@ 0xa4
		memcpy(
 800597c:	220a      	movs	r2, #10
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f015 f8f4 	bl	801ab6e <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8005986:	e002      	b.n	800598e <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8005988:	23fc      	movs	r3, #252	@ 0xfc
 800598a:	75fb      	strb	r3, [r7, #23]
	break;
 800598c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800598e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <VL53LX_set_offset_correction_mode>:


VL53LX_Error VL53LX_set_offset_correction_mode(
	VL53LX_DEV                     Dev,
	VL53LX_OffsetCorrectionMode    offset_cor_mode)
{
 800599a:	b480      	push	{r7}
 800599c:	b085      	sub	sp, #20
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3318      	adds	r3, #24
 80059ae:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->offset_correction_mode = offset_cor_mode;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	78fa      	ldrb	r2, [r7, #3]
 80059b4:	715a      	strb	r2, [r3, #5]

	LOG_FUNCTION_END(status);

	return status;
 80059b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b089      	sub	sp, #36	@ 0x24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	460b      	mov	r3, r1
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80059d6:	2300      	movs	r3, #0
 80059d8:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3318      	adds	r3, #24
 80059de:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80059e6:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80059ee:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80059f0:	897b      	ldrh	r3, [r7, #10]
 80059f2:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80059f6:	2bb9      	cmp	r3, #185	@ 0xb9
 80059f8:	f200 86ca 	bhi.w	8006790 <VL53LX_get_tuning_parm+0xdc8>
 80059fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005a04 <VL53LX_get_tuning_parm+0x3c>)
 80059fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a02:	bf00      	nop
 8005a04:	08005ced 	.word	0x08005ced
 8005a08:	08005cfd 	.word	0x08005cfd
 8005a0c:	08005d0d 	.word	0x08005d0d
 8005a10:	08005d1d 	.word	0x08005d1d
 8005a14:	08005d2b 	.word	0x08005d2b
 8005a18:	08005d39 	.word	0x08005d39
 8005a1c:	08005d47 	.word	0x08005d47
 8005a20:	08005d55 	.word	0x08005d55
 8005a24:	08005d63 	.word	0x08005d63
 8005a28:	08005d71 	.word	0x08005d71
 8005a2c:	08005d7f 	.word	0x08005d7f
 8005a30:	08005d8b 	.word	0x08005d8b
 8005a34:	08005d99 	.word	0x08005d99
 8005a38:	08005da7 	.word	0x08005da7
 8005a3c:	08005db3 	.word	0x08005db3
 8005a40:	08005dc1 	.word	0x08005dc1
 8005a44:	08005dcf 	.word	0x08005dcf
 8005a48:	08005ddf 	.word	0x08005ddf
 8005a4c:	08005def 	.word	0x08005def
 8005a50:	08005dfd 	.word	0x08005dfd
 8005a54:	08005e0d 	.word	0x08005e0d
 8005a58:	08005e1b 	.word	0x08005e1b
 8005a5c:	08005e2b 	.word	0x08005e2b
 8005a60:	08005e3b 	.word	0x08005e3b
 8005a64:	08005e4b 	.word	0x08005e4b
 8005a68:	08005e5b 	.word	0x08005e5b
 8005a6c:	08005e6b 	.word	0x08005e6b
 8005a70:	08005e7b 	.word	0x08005e7b
 8005a74:	08005e8b 	.word	0x08005e8b
 8005a78:	08005e9b 	.word	0x08005e9b
 8005a7c:	08005eab 	.word	0x08005eab
 8005a80:	08005eb9 	.word	0x08005eb9
 8005a84:	08005ec9 	.word	0x08005ec9
 8005a88:	08005ed9 	.word	0x08005ed9
 8005a8c:	08005ee9 	.word	0x08005ee9
 8005a90:	08005ef9 	.word	0x08005ef9
 8005a94:	08005f09 	.word	0x08005f09
 8005a98:	08005f19 	.word	0x08005f19
 8005a9c:	08005f29 	.word	0x08005f29
 8005aa0:	08005f39 	.word	0x08005f39
 8005aa4:	08005f49 	.word	0x08005f49
 8005aa8:	08005f59 	.word	0x08005f59
 8005aac:	08005f69 	.word	0x08005f69
 8005ab0:	08005f79 	.word	0x08005f79
 8005ab4:	08005f89 	.word	0x08005f89
 8005ab8:	08005f99 	.word	0x08005f99
 8005abc:	08005fa7 	.word	0x08005fa7
 8005ac0:	08005fb5 	.word	0x08005fb5
 8005ac4:	08005fc3 	.word	0x08005fc3
 8005ac8:	08005fd1 	.word	0x08005fd1
 8005acc:	08005fdf 	.word	0x08005fdf
 8005ad0:	08005fed 	.word	0x08005fed
 8005ad4:	08005ffb 	.word	0x08005ffb
 8005ad8:	08006009 	.word	0x08006009
 8005adc:	08006017 	.word	0x08006017
 8005ae0:	08006025 	.word	0x08006025
 8005ae4:	08006033 	.word	0x08006033
 8005ae8:	08006041 	.word	0x08006041
 8005aec:	0800604f 	.word	0x0800604f
 8005af0:	0800605d 	.word	0x0800605d
 8005af4:	0800606b 	.word	0x0800606b
 8005af8:	08006079 	.word	0x08006079
 8005afc:	08006087 	.word	0x08006087
 8005b00:	08006095 	.word	0x08006095
 8005b04:	080060a3 	.word	0x080060a3
 8005b08:	080060b1 	.word	0x080060b1
 8005b0c:	080060bf 	.word	0x080060bf
 8005b10:	080060cd 	.word	0x080060cd
 8005b14:	080060db 	.word	0x080060db
 8005b18:	080060e9 	.word	0x080060e9
 8005b1c:	080060f7 	.word	0x080060f7
 8005b20:	08006105 	.word	0x08006105
 8005b24:	08006113 	.word	0x08006113
 8005b28:	08006121 	.word	0x08006121
 8005b2c:	0800612d 	.word	0x0800612d
 8005b30:	0800613b 	.word	0x0800613b
 8005b34:	08006149 	.word	0x08006149
 8005b38:	08006155 	.word	0x08006155
 8005b3c:	08006161 	.word	0x08006161
 8005b40:	0800616d 	.word	0x0800616d
 8005b44:	08006179 	.word	0x08006179
 8005b48:	08006185 	.word	0x08006185
 8005b4c:	08006191 	.word	0x08006191
 8005b50:	0800619f 	.word	0x0800619f
 8005b54:	080061ad 	.word	0x080061ad
 8005b58:	080061bb 	.word	0x080061bb
 8005b5c:	080061c9 	.word	0x080061c9
 8005b60:	080061d7 	.word	0x080061d7
 8005b64:	080061e5 	.word	0x080061e5
 8005b68:	080061f3 	.word	0x080061f3
 8005b6c:	08006201 	.word	0x08006201
 8005b70:	0800620f 	.word	0x0800620f
 8005b74:	0800621d 	.word	0x0800621d
 8005b78:	0800622b 	.word	0x0800622b
 8005b7c:	08006239 	.word	0x08006239
 8005b80:	08006247 	.word	0x08006247
 8005b84:	08006255 	.word	0x08006255
 8005b88:	08006263 	.word	0x08006263
 8005b8c:	08006271 	.word	0x08006271
 8005b90:	0800627f 	.word	0x0800627f
 8005b94:	0800628d 	.word	0x0800628d
 8005b98:	0800629b 	.word	0x0800629b
 8005b9c:	080062a9 	.word	0x080062a9
 8005ba0:	080062b7 	.word	0x080062b7
 8005ba4:	080062c5 	.word	0x080062c5
 8005ba8:	080062d3 	.word	0x080062d3
 8005bac:	080062e1 	.word	0x080062e1
 8005bb0:	080062ef 	.word	0x080062ef
 8005bb4:	080062fd 	.word	0x080062fd
 8005bb8:	0800630b 	.word	0x0800630b
 8005bbc:	08006319 	.word	0x08006319
 8005bc0:	08006327 	.word	0x08006327
 8005bc4:	08006335 	.word	0x08006335
 8005bc8:	08006343 	.word	0x08006343
 8005bcc:	08006351 	.word	0x08006351
 8005bd0:	0800635f 	.word	0x0800635f
 8005bd4:	0800636d 	.word	0x0800636d
 8005bd8:	0800637b 	.word	0x0800637b
 8005bdc:	08006389 	.word	0x08006389
 8005be0:	0800639b 	.word	0x0800639b
 8005be4:	080063ad 	.word	0x080063ad
 8005be8:	080063bf 	.word	0x080063bf
 8005bec:	080063d1 	.word	0x080063d1
 8005bf0:	080063e3 	.word	0x080063e3
 8005bf4:	080063f5 	.word	0x080063f5
 8005bf8:	08006407 	.word	0x08006407
 8005bfc:	08006419 	.word	0x08006419
 8005c00:	0800642b 	.word	0x0800642b
 8005c04:	0800643d 	.word	0x0800643d
 8005c08:	0800644f 	.word	0x0800644f
 8005c0c:	08006461 	.word	0x08006461
 8005c10:	08006473 	.word	0x08006473
 8005c14:	08006485 	.word	0x08006485
 8005c18:	08006497 	.word	0x08006497
 8005c1c:	080064a9 	.word	0x080064a9
 8005c20:	080064bb 	.word	0x080064bb
 8005c24:	080064cd 	.word	0x080064cd
 8005c28:	080064df 	.word	0x080064df
 8005c2c:	080064ed 	.word	0x080064ed
 8005c30:	080064fb 	.word	0x080064fb
 8005c34:	08006509 	.word	0x08006509
 8005c38:	08006517 	.word	0x08006517
 8005c3c:	08006525 	.word	0x08006525
 8005c40:	08006533 	.word	0x08006533
 8005c44:	08006541 	.word	0x08006541
 8005c48:	08006553 	.word	0x08006553
 8005c4c:	08006561 	.word	0x08006561
 8005c50:	0800656f 	.word	0x0800656f
 8005c54:	0800657d 	.word	0x0800657d
 8005c58:	0800658b 	.word	0x0800658b
 8005c5c:	08006599 	.word	0x08006599
 8005c60:	080065a7 	.word	0x080065a7
 8005c64:	080065b5 	.word	0x080065b5
 8005c68:	080065c3 	.word	0x080065c3
 8005c6c:	080065d1 	.word	0x080065d1
 8005c70:	080065df 	.word	0x080065df
 8005c74:	080065ed 	.word	0x080065ed
 8005c78:	080065fb 	.word	0x080065fb
 8005c7c:	08006609 	.word	0x08006609
 8005c80:	08006617 	.word	0x08006617
 8005c84:	08006625 	.word	0x08006625
 8005c88:	08006633 	.word	0x08006633
 8005c8c:	08006641 	.word	0x08006641
 8005c90:	0800664f 	.word	0x0800664f
 8005c94:	0800665d 	.word	0x0800665d
 8005c98:	0800666b 	.word	0x0800666b
 8005c9c:	08006679 	.word	0x08006679
 8005ca0:	08006687 	.word	0x08006687
 8005ca4:	08006695 	.word	0x08006695
 8005ca8:	080066a3 	.word	0x080066a3
 8005cac:	080066b1 	.word	0x080066b1
 8005cb0:	080066bf 	.word	0x080066bf
 8005cb4:	080066cd 	.word	0x080066cd
 8005cb8:	080066db 	.word	0x080066db
 8005cbc:	080066e9 	.word	0x080066e9
 8005cc0:	080066f7 	.word	0x080066f7
 8005cc4:	08006705 	.word	0x08006705
 8005cc8:	08006713 	.word	0x08006713
 8005ccc:	08006721 	.word	0x08006721
 8005cd0:	0800672f 	.word	0x0800672f
 8005cd4:	0800673d 	.word	0x0800673d
 8005cd8:	0800674b 	.word	0x0800674b
 8005cdc:	08006759 	.word	0x08006759
 8005ce0:	08006767 	.word	0x08006767
 8005ce4:	08006775 	.word	0x08006775
 8005ce8:	08006783 	.word	0x08006783

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8005cf2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	601a      	str	r2, [r3, #0]
	break;
 8005cf8:	f000 bd51 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8005d02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	601a      	str	r2, [r3, #0]
	break;
 8005d08:	f000 bd49 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 8005d12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	601a      	str	r2, [r3, #0]
	break;
 8005d18:	f000 bd41 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	601a      	str	r2, [r3, #0]
	break;
 8005d26:	f000 bd3a 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	785b      	ldrb	r3, [r3, #1]
 8005d2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	601a      	str	r2, [r3, #0]
	break;
 8005d34:	f000 bd33 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	789b      	ldrb	r3, [r3, #2]
 8005d3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	601a      	str	r2, [r3, #0]
	break;
 8005d42:	f000 bd2c 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	78db      	ldrb	r3, [r3, #3]
 8005d4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	601a      	str	r2, [r3, #0]
	break;
 8005d50:	f000 bd25 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	791b      	ldrb	r3, [r3, #4]
 8005d58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
	break;
 8005d5e:	f000 bd1e 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	795b      	ldrb	r3, [r3, #5]
 8005d66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	601a      	str	r2, [r3, #0]
	break;
 8005d6c:	f000 bd17 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	799b      	ldrb	r3, [r3, #6]
 8005d74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	601a      	str	r2, [r3, #0]
	break;
 8005d7a:	f000 bd10 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	601a      	str	r2, [r3, #0]
	break;
 8005d86:	f000 bd0a 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	891b      	ldrh	r3, [r3, #8]
 8005d8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	601a      	str	r2, [r3, #0]
	break;
 8005d94:	f000 bd03 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	8a1b      	ldrh	r3, [r3, #16]
 8005d9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	601a      	str	r2, [r3, #0]
	break;
 8005da2:	f000 bcfc 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	601a      	str	r2, [r3, #0]
	break;
 8005dae:	f000 bcf6 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	7e1b      	ldrb	r3, [r3, #24]
 8005db6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	601a      	str	r2, [r3, #0]
	break;
 8005dbc:	f000 bcef 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	8b5b      	ldrh	r3, [r3, #26]
 8005dc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	601a      	str	r2, [r3, #0]
	break;
 8005dca:	f000 bce8 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8005dd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
	break;
 8005dda:	f000 bce0 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005de4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	601a      	str	r2, [r3, #0]
	break;
 8005dea:	f000 bcd8 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005df2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]
	break;
 8005df8:	f000 bcd1 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8005e02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	601a      	str	r2, [r3, #0]
	break;
 8005e08:	f000 bcc9 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005e10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	601a      	str	r2, [r3, #0]
	break;
 8005e16:	f000 bcc2 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8005e20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	601a      	str	r2, [r3, #0]
	break;
 8005e26:	f000 bcba 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8005e30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	601a      	str	r2, [r3, #0]
	break;
 8005e36:	f000 bcb2 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8005e40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	601a      	str	r2, [r3, #0]
	break;
 8005e46:	f000 bcaa 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 8005e50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	601a      	str	r2, [r3, #0]
	break;
 8005e56:	f000 bca2 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8005e60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	601a      	str	r2, [r3, #0]
	break;
 8005e66:	f000 bc9a 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 8005e70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	601a      	str	r2, [r3, #0]
	break;
 8005e76:	f000 bc92 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	@ 0x2a6
		*ptuning_parm_value = (int32_t)(
 8005e80:	461a      	mov	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	601a      	str	r2, [r3, #0]
	break;
 8005e86:	f000 bc8a 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	@ 0x2a8
		*ptuning_parm_value = (int32_t)(
 8005e90:	461a      	mov	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	601a      	str	r2, [r3, #0]
	break;
 8005e96:	f000 bc82 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	@ 0x2ac
 8005ea0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	601a      	str	r2, [r3, #0]
	break;
 8005ea6:	f000 bc7a 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	601a      	str	r2, [r3, #0]
	break;
 8005eb4:	f000 bc73 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	@ 0x2aa
		*ptuning_parm_value = (int32_t)(
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	601a      	str	r2, [r3, #0]
	break;
 8005ec4:	f000 bc6b 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ece:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	601a      	str	r2, [r3, #0]
	break;
 8005ed4:	f000 bc63 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	@ 0x29e
 8005ede:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	601a      	str	r2, [r3, #0]
	break;
 8005ee4:	f000 bc5b 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8005eee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	601a      	str	r2, [r3, #0]
	break;
 8005ef4:	f000 bc53 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 8005efe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]
	break;
 8005f04:	f000 bc4b 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8005f0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	601a      	str	r2, [r3, #0]
	break;
 8005f14:	f000 bc43 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8005f1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
	break;
 8005f24:	f000 bc3b 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8005f2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]
	break;
 8005f34:	f000 bc33 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8005f3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	601a      	str	r2, [r3, #0]
	break;
 8005f44:	f000 bc2b 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8005f4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	601a      	str	r2, [r3, #0]
	break;
 8005f54:	f000 bc23 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	f8b3 3114 	ldrh.w	r3, [r3, #276]	@ 0x114
 8005f5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	601a      	str	r2, [r3, #0]
	break;
 8005f64:	f000 bc1b 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
		*ptuning_parm_value = (int32_t)(
 8005f6e:	461a      	mov	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	601a      	str	r2, [r3, #0]
	break;
 8005f74:	f000 bc13 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8005f7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	601a      	str	r2, [r3, #0]
	break;
 8005f84:	f000 bc0b 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
		*ptuning_parm_value = (int32_t)(
 8005f8e:	461a      	mov	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	601a      	str	r2, [r3, #0]
	break;
 8005f94:	f000 bc03 	b.w	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8005f9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	601a      	str	r2, [r3, #0]
	break;
 8005fa4:	e3fb      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8005fac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	601a      	str	r2, [r3, #0]
	break;
 8005fb2:	e3f4      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8005fba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	601a      	str	r2, [r3, #0]
	break;
 8005fc0:	e3ed      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	f893 32a2 	ldrb.w	r3, [r3, #674]	@ 0x2a2
 8005fc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	601a      	str	r2, [r3, #0]
	break;
 8005fce:	e3e6      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 8005fd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	601a      	str	r2, [r3, #0]
	break;
 8005fdc:	e3df      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8005fe4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	601a      	str	r2, [r3, #0]
	break;
 8005fea:	e3d8      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8005ff2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]
	break;
 8005ff8:	e3d1      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	@ 0x2a0
 8006000:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	601a      	str	r2, [r3, #0]
	break;
 8006006:	e3ca      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 800600e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	601a      	str	r2, [r3, #0]
	break;
 8006014:	e3c3      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 800601c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	601a      	str	r2, [r3, #0]
	break;
 8006022:	e3bc      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 800602a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	601a      	str	r2, [r3, #0]
	break;
 8006030:	e3b5      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8006038:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	601a      	str	r2, [r3, #0]
	break;
 800603e:	e3ae      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8006046:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	601a      	str	r2, [r3, #0]
	break;
 800604c:	e3a7      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	f893 3103 	ldrb.w	r3, [r3, #259]	@ 0x103
 8006054:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	601a      	str	r2, [r3, #0]
	break;
 800605a:	e3a0      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8006062:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	601a      	str	r2, [r3, #0]
	break;
 8006068:	e399      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8006070:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
	break;
 8006076:	e392      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	f8b3 3260 	ldrh.w	r3, [r3, #608]	@ 0x260
 800607e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	601a      	str	r2, [r3, #0]
	break;
 8006084:	e38b      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	f8b3 3262 	ldrh.w	r3, [r3, #610]	@ 0x262
 800608c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	601a      	str	r2, [r3, #0]
	break;
 8006092:	e384      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800609a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	601a      	str	r2, [r3, #0]
	break;
 80060a0:	e37d      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	f8b3 3266 	ldrh.w	r3, [r3, #614]	@ 0x266
 80060a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	601a      	str	r2, [r3, #0]
	break;
 80060ae:	e376      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	f8b3 3268 	ldrh.w	r3, [r3, #616]	@ 0x268
 80060b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	601a      	str	r2, [r3, #0]
	break;
 80060bc:	e36f      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 80060c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	601a      	str	r2, [r3, #0]
	break;
 80060ca:	e368      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 80060d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	601a      	str	r2, [r3, #0]
	break;
 80060d8:	e361      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 80060e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	601a      	str	r2, [r3, #0]
	break;
 80060e6:	e35a      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 80060ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	601a      	str	r2, [r3, #0]
	break;
 80060f4:	e353      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 80060fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
	break;
 8006102:	e34c      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 800610a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	601a      	str	r2, [r3, #0]
	break;
 8006110:	e345      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8006118:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	601a      	str	r2, [r3, #0]
	break;
 800611e:	e33e      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	7c1b      	ldrb	r3, [r3, #16]
 8006124:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	601a      	str	r2, [r3, #0]
	break;
 800612a:	e338      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006132:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	601a      	str	r2, [r3, #0]
	break;
 8006138:	e331      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006140:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	601a      	str	r2, [r3, #0]
	break;
 8006146:	e32a      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	601a      	str	r2, [r3, #0]
	break;
 8006152:	e324      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	601a      	str	r2, [r3, #0]
	break;
 800615e:	e31e      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	8adb      	ldrh	r3, [r3, #22]
 8006164:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	601a      	str	r2, [r3, #0]
	break;
 800616a:	e318      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	8b1b      	ldrh	r3, [r3, #24]
 8006170:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	601a      	str	r2, [r3, #0]
	break;
 8006176:	e312      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	601a      	str	r2, [r3, #0]
	break;
 8006182:	e30c      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	601a      	str	r2, [r3, #0]
	break;
 800618e:	e306      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006196:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	601a      	str	r2, [r3, #0]
	break;
 800619c:	e2ff      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	601a      	str	r2, [r3, #0]
	break;
 80061aa:	e2f8      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80061b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	601a      	str	r2, [r3, #0]
	break;
 80061b8:	e2f1      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
	break;
 80061c6:	e2ea      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f893 32c0 	ldrb.w	r3, [r3, #704]	@ 0x2c0
 80061ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	601a      	str	r2, [r3, #0]
	break;
 80061d4:	e2e3      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f893 32c1 	ldrb.w	r3, [r3, #705]	@ 0x2c1
 80061dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	601a      	str	r2, [r3, #0]
	break;
 80061e2:	e2dc      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f893 32c2 	ldrb.w	r3, [r3, #706]	@ 0x2c2
 80061ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	601a      	str	r2, [r3, #0]
	break;
 80061f0:	e2d5      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	@ 0x2c4
 80061f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	601a      	str	r2, [r3, #0]
	break;
 80061fe:	e2ce      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006206:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	601a      	str	r2, [r3, #0]
	break;
 800620c:	e2c7      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	f8d3 32cc 	ldr.w	r3, [r3, #716]	@ 0x2cc
 8006214:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	601a      	str	r2, [r3, #0]
	break;
 800621a:	e2c0      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	@ 0x2d4
 8006222:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	601a      	str	r2, [r3, #0]
	break;
 8006228:	e2b9      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8006230:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	601a      	str	r2, [r3, #0]
	break;
 8006236:	e2b2      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	@ 0x2d6
 800623e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	601a      	str	r2, [r3, #0]
	break;
 8006244:	e2ab      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	f893 3209 	ldrb.w	r3, [r3, #521]	@ 0x209
 800624c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	601a      	str	r2, [r3, #0]
	break;
 8006252:	e2a4      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	f893 320a 	ldrb.w	r3, [r3, #522]	@ 0x20a
 800625a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	601a      	str	r2, [r3, #0]
	break;
 8006260:	e29d      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8006268:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	601a      	str	r2, [r3, #0]
	break;
 800626e:	e296      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 8006276:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	601a      	str	r2, [r3, #0]
	break;
 800627c:	e28f      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	f8b3 3126 	ldrh.w	r3, [r3, #294]	@ 0x126
 8006284:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	601a      	str	r2, [r3, #0]
	break;
 800628a:	e288      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 8006292:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	601a      	str	r2, [r3, #0]
	break;
 8006298:	e281      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	f8b3 312a 	ldrh.w	r3, [r3, #298]	@ 0x12a
 80062a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	601a      	str	r2, [r3, #0]
	break;
 80062a6:	e27a      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80062ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	601a      	str	r2, [r3, #0]
	break;
 80062b4:	e273      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80062bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	601a      	str	r2, [r3, #0]
	break;
 80062c2:	e26c      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80062ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	601a      	str	r2, [r3, #0]
	break;
 80062d0:	e265      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80062d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	601a      	str	r2, [r3, #0]
	break;
 80062de:	e25e      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80062e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	601a      	str	r2, [r3, #0]
	break;
 80062ec:	e257      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80062f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	601a      	str	r2, [r3, #0]
	break;
 80062fa:	e250      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8006302:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	601a      	str	r2, [r3, #0]
	break;
 8006308:	e249      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8006310:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	601a      	str	r2, [r3, #0]
	break;
 8006316:	e242      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800631e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	601a      	str	r2, [r3, #0]
	break;
 8006324:	e23b      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800632c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
	break;
 8006332:	e234      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800633a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	601a      	str	r2, [r3, #0]
	break;
 8006340:	e22d      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8006348:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
	break;
 800634e:	e226      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8006356:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	601a      	str	r2, [r3, #0]
	break;
 800635c:	e21f      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8006364:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	601a      	str	r2, [r3, #0]
	break;
 800636a:	e218      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8006372:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	601a      	str	r2, [r3, #0]
	break;
 8006378:	e211      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8006380:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	601a      	str	r2, [r3, #0]
	break;
 8006386:	e20a      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800638e:	f8b3 3398 	ldrh.w	r3, [r3, #920]	@ 0x398
 8006392:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	601a      	str	r2, [r3, #0]
	break;
 8006398:	e201      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063a0:	f8d3 339c 	ldr.w	r3, [r3, #924]	@ 0x39c
 80063a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	601a      	str	r2, [r3, #0]
	break;
 80063aa:	e1f8      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063b2:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80063b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	601a      	str	r2, [r3, #0]
	break;
 80063bc:	e1ef      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063c4:	f893 33a4 	ldrb.w	r3, [r3, #932]	@ 0x3a4
 80063c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	601a      	str	r2, [r3, #0]
	break;
 80063ce:	e1e6      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063d6:	f8d3 33a8 	ldr.w	r3, [r3, #936]	@ 0x3a8
 80063da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	601a      	str	r2, [r3, #0]
	break;
 80063e0:	e1dd      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063e8:	f8d3 33ac 	ldr.w	r3, [r3, #940]	@ 0x3ac
 80063ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	601a      	str	r2, [r3, #0]
	break;
 80063f2:	e1d4      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063fa:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 80063fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	601a      	str	r2, [r3, #0]
	break;
 8006404:	e1cb      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800640c:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8006410:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
	break;
 8006416:	e1c2      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800641e:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8006422:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	601a      	str	r2, [r3, #0]
	break;
 8006428:	e1b9      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006430:	f9b3 33be 	ldrsh.w	r3, [r3, #958]	@ 0x3be
 8006434:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	601a      	str	r2, [r3, #0]
	break;
 800643a:	e1b0      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006442:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	@ 0x3c0
 8006446:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	601a      	str	r2, [r3, #0]
	break;
 800644c:	e1a7      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006454:	f893 33c2 	ldrb.w	r3, [r3, #962]	@ 0x3c2
 8006458:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	601a      	str	r2, [r3, #0]
	break;
 800645e:	e19e      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006466:	f893 3396 	ldrb.w	r3, [r3, #918]	@ 0x396
 800646a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	601a      	str	r2, [r3, #0]
	break;
 8006470:	e195      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006478:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
		*ptuning_parm_value = (int32_t)(
 800647c:	461a      	mov	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	601a      	str	r2, [r3, #0]
	break;
 8006482:	e18c      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800648a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800648e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	601a      	str	r2, [r3, #0]
	break;
 8006494:	e183      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800649c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80064a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	601a      	str	r2, [r3, #0]
	break;
 80064a6:	e17a      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ae:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 80064b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	601a      	str	r2, [r3, #0]
	break;
 80064b8:	e171      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064c0:	f8b3 33d0 	ldrh.w	r3, [r3, #976]	@ 0x3d0
 80064c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	601a      	str	r2, [r3, #0]
	break;
 80064ca:	e168      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064d2:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 80064d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	601a      	str	r2, [r3, #0]
	break;
 80064dc:	e15f      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80064e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	601a      	str	r2, [r3, #0]
	break;
 80064ea:	e158      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80064f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	601a      	str	r2, [r3, #0]
	break;
 80064f8:	e151      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	f8b3 312c 	ldrh.w	r3, [r3, #300]	@ 0x12c
 8006500:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	601a      	str	r2, [r3, #0]
	break;
 8006506:	e14a      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800650e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	601a      	str	r2, [r3, #0]
	break;
 8006514:	e143      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800651c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	601a      	str	r2, [r3, #0]
	break;
 8006522:	e13c      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800652a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	601a      	str	r2, [r3, #0]
	break;
 8006530:	e135      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8006538:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	601a      	str	r2, [r3, #0]
	break;
 800653e:	e12e      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006546:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800654a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	601a      	str	r2, [r3, #0]
	break;
 8006550:	e125      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 8006558:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	601a      	str	r2, [r3, #0]
	break;
 800655e:	e11e      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	@ 0x186
 8006566:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	601a      	str	r2, [r3, #0]
	break;
 800656c:	e117      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	@ 0x188
 8006574:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	601a      	str	r2, [r3, #0]
	break;
 800657a:	e110      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	@ 0x18a
 8006582:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	601a      	str	r2, [r3, #0]
	break;
 8006588:	e109      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	@ 0x18c
 8006590:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
	break;
 8006596:	e102      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	@ 0x18e
 800659e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	601a      	str	r2, [r3, #0]
	break;
 80065a4:	e0fb      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	@ 0x190
 80065ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	601a      	str	r2, [r3, #0]
	break;
 80065b2:	e0f4      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	@ 0x192
 80065ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	601a      	str	r2, [r3, #0]
	break;
 80065c0:	e0ed      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	@ 0x194
 80065c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	601a      	str	r2, [r3, #0]
	break;
 80065ce:	e0e6      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	@ 0x196
 80065d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	601a      	str	r2, [r3, #0]
	break;
 80065dc:	e0df      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	@ 0x198
 80065e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	601a      	str	r2, [r3, #0]
	break;
 80065ea:	e0d8      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	@ 0x19a
 80065f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	601a      	str	r2, [r3, #0]
	break;
 80065f8:	e0d1      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	@ 0x19c
 8006600:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	601a      	str	r2, [r3, #0]
	break;
 8006606:	e0ca      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	@ 0x19e
 800660e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	601a      	str	r2, [r3, #0]
	break;
 8006614:	e0c3      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	@ 0x1a0
 800661c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]
	break;
 8006622:	e0bc      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	@ 0x1a2
 800662a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	601a      	str	r2, [r3, #0]
	break;
 8006630:	e0b5      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	@ 0x1a4
 8006638:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	601a      	str	r2, [r3, #0]
	break;
 800663e:	e0ae      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	@ 0x1a6
 8006646:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	601a      	str	r2, [r3, #0]
	break;
 800664c:	e0a7      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	@ 0x1a8
 8006654:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	601a      	str	r2, [r3, #0]
	break;
 800665a:	e0a0      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	@ 0x1aa
 8006662:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	601a      	str	r2, [r3, #0]
	break;
 8006668:	e099      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	@ 0x1ac
 8006670:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	601a      	str	r2, [r3, #0]
	break;
 8006676:	e092      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	@ 0x1ae
 800667e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	601a      	str	r2, [r3, #0]
	break;
 8006684:	e08b      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	@ 0x1b0
 800668c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	601a      	str	r2, [r3, #0]
	break;
 8006692:	e084      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	@ 0x1b2
 800669a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	601a      	str	r2, [r3, #0]
	break;
 80066a0:	e07d      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	@ 0x1b4
 80066a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	601a      	str	r2, [r3, #0]
	break;
 80066ae:	e076      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	@ 0x1b6
 80066b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	601a      	str	r2, [r3, #0]
	break;
 80066bc:	e06f      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	@ 0x1b8
 80066c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	601a      	str	r2, [r3, #0]
	break;
 80066ca:	e068      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	@ 0x1ba
 80066d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	601a      	str	r2, [r3, #0]
	break;
 80066d8:	e061      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	@ 0x1bc
 80066e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	601a      	str	r2, [r3, #0]
	break;
 80066e6:	e05a      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	@ 0x1be
 80066ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	601a      	str	r2, [r3, #0]
	break;
 80066f4:	e053      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	@ 0x1c0
 80066fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	601a      	str	r2, [r3, #0]
	break;
 8006702:	e04c      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	@ 0x1c2
 800670a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	601a      	str	r2, [r3, #0]
	break;
 8006710:	e045      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	@ 0x1c4
 8006718:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	601a      	str	r2, [r3, #0]
	break;
 800671e:	e03e      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	@ 0x1c6
 8006726:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	601a      	str	r2, [r3, #0]
	break;
 800672c:	e037      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	@ 0x1c8
 8006734:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	601a      	str	r2, [r3, #0]
	break;
 800673a:	e030      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	@ 0x1ca
 8006742:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	601a      	str	r2, [r3, #0]
	break;
 8006748:	e029      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	@ 0x1cc
 8006750:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	601a      	str	r2, [r3, #0]
	break;
 8006756:	e022      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	@ 0x1ce
 800675e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	601a      	str	r2, [r3, #0]
	break;
 8006764:	e01b      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	@ 0x1d0
 800676c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	601a      	str	r2, [r3, #0]
	break;
 8006772:	e014      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	@ 0x1d2
 800677a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	601a      	str	r2, [r3, #0]
	break;
 8006780:	e00d      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	@ 0x1d4
 8006788:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	601a      	str	r2, [r3, #0]
	break;
 800678e:	e006      	b.n	800679e <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8006796:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8006798:	23fc      	movs	r3, #252	@ 0xfc
 800679a:	77fb      	strb	r3, [r7, #31]
	break;
 800679c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800679e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3724      	adds	r7, #36	@ 0x24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop

080067b0 <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3318      	adds	r3, #24
 80067c0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394

	LOG_FUNCTION_END(status);

	return status;
 80067ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80067e6:	2300      	movs	r3, #0
 80067e8:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3318      	adds	r3, #24
 80067ee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394

	LOG_FUNCTION_END(status);

	return status;
 80067fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006814:	2300      	movs	r3, #0
 8006816:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3318      	adds	r3, #24
 800681c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395

	LOG_FUNCTION_END(status);

	return status;
 800682a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 800683a:	b480      	push	{r7}
 800683c:	b085      	sub	sp, #20
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006842:	2300      	movs	r3, #0
 8006844:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3318      	adds	r3, #24
 800684a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396

	LOG_FUNCTION_END(status);

	return status;
 8006858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006870:	2300      	movs	r3, #0
 8006872:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3318      	adds	r3, #24
 8006878:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396

	LOG_FUNCTION_END(status);

	return status;
 8006886:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800689e:	2300      	movs	r3, #0
 80068a0:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3318      	adds	r3, #24
 80068a6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395

	LOG_FUNCTION_END(status);

	return status;
 80068b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80068cc:	2300      	movs	r3, #0
 80068ce:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2208      	movs	r2, #8
 80068d4:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	220b      	movs	r2, #11
 80068da:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80068e2:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80068ea:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80068f2:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80068fa:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80068fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006914:	2300      	movs	r3, #0
 8006916:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2212      	movs	r2, #18
 8006922:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	220f      	movs	r2, #15
 8006928:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2202      	movs	r2, #2
 800692e:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8006936:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	220c      	movs	r2, #12
 800693c:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800693e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006958:	2300      	movs	r3, #0
 800695a:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	895b      	ldrh	r3, [r3, #10]
 8006960:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	895b      	ldrh	r3, [r3, #10]
 800697e:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2200      	movs	r2, #0
 80069a2:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2240      	movs	r2, #64	@ 0x40
 80069a8:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10d      	bne.n	80069ce <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d108      	bne.n	80069ce <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2200      	movs	r2, #0
 80069ca:	741a      	strb	r2, [r3, #16]
 80069cc:	e002      	b.n	80069d4 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2201      	movs	r2, #1
 80069d2:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 80069d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d114      	bne.n	8006a06 <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d110      	bne.n	8006a06 <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	6818      	ldr	r0, [r3, #0]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	7d9b      	ldrb	r3, [r3, #22]
 80069f8:	f001 ff94 	bl	8008924 <VL53LX_calc_range_ignore_threshold>
 80069fc:	4603      	mov	r3, r0
 80069fe:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	831a      	strh	r2, [r3, #24]
 8006a04:	e002      	b.n	8006a0c <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 8006a12:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2232      	movs	r2, #50	@ 0x32
 8006a18:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006a20:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	228c      	movs	r2, #140	@ 0x8c
 8006a26:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006a46:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006a4e:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2207      	movs	r2, #7
 8006a54:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006a5c:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006a64:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f64f 72ba 	movw	r2, #65466	@ 0xffba
 8006a6c:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2246      	movs	r2, #70	@ 0x46
 8006a72:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8006a7a:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	228c      	movs	r2, #140	@ 0x8c
 8006a80:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8006a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b085      	sub	sp, #20
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006aa4:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006aac:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006ab4:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006abc:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2228      	movs	r2, #40	@ 0x28
 8006ac8:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2209      	movs	r2, #9
 8006ace:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006af2:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006afa:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006b02:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006b0a:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2210      	movs	r2, #16
 8006b10:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2208      	movs	r2, #8
 8006b16:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	6039      	str	r1, [r7, #0]
 8006b32:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2201      	movs	r2, #1
 8006b42:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2201      	movs	r2, #1
 8006b48:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2201      	movs	r2, #1
 8006b54:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2250      	movs	r2, #80	@ 0x50
 8006b5a:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2264      	movs	r2, #100	@ 0x64
 8006b60:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	f241 023d 	movw	r2, #4157	@ 0x103d
 8006b68:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2210      	movs	r2, #16
 8006b6e:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2232      	movs	r2, #50	@ 0x32
 8006b74:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2264      	movs	r2, #100	@ 0x64
 8006b7a:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	22b4      	movs	r2, #180	@ 0xb4
 8006b86:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 8006b94:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2208      	movs	r2, #8
 8006b9a:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2288      	movs	r2, #136	@ 0x88
 8006ba2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2208      	movs	r2, #8
 8006baa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bbc:	849a      	strh	r2, [r3, #36]	@ 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	84da      	strh	r2, [r3, #38]	@ 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	79fa      	ldrb	r2, [r7, #7]
 8006bc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 8006bd2:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2232      	movs	r2, #50	@ 0x32
 8006bd8:	86da      	strh	r2, [r3, #54]	@ 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006be0:	871a      	strh	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	228c      	movs	r2, #140	@ 0x8c
 8006be6:	875a      	strh	r2, [r3, #58]	@ 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2250      	movs	r2, #80	@ 0x50
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2232      	movs	r2, #50	@ 0x32
 8006bf4:	87da      	strh	r2, [r3, #62]	@ 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8006bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	221e      	movs	r2, #30
 8006c16:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	220e      	movs	r2, #14
 8006c1c:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f642 7294 	movw	r2, #12180	@ 0x2f94
 8006c24:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	220e      	movs	r2, #14
 8006c2a:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	220a      	movs	r2, #10
 8006c30:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2206      	movs	r2, #6
 8006c36:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	220e      	movs	r2, #14
 8006c3c:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	220a      	movs	r2, #10
 8006c42:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2206      	movs	r2, #6
 8006c48:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2209      	movs	r2, #9
 8006c4e:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2205      	movs	r2, #5
 8006c54:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2203      	movs	r2, #3
 8006c5a:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2206      	movs	r2, #6
 8006c60:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2206      	movs	r2, #6
 8006c66:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2206      	movs	r2, #6
 8006c6c:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2202      	movs	r2, #2
 8006c72:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2221      	movs	r2, #33	@ 0x21
 8006c78:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	223c      	movs	r2, #60	@ 0x3c
 8006c8a:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	223c      	movs	r2, #60	@ 0x3c
 8006c90:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	223c      	movs	r2, #60	@ 0x3c
 8006c96:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2280      	movs	r2, #128	@ 0x80
 8006c9c:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2280      	movs	r2, #128	@ 0x80
 8006ca2:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2280      	movs	r2, #128	@ 0x80
 8006ca8:	845a      	strh	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2208      	movs	r2, #8
 8006cae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2210      	movs	r2, #16
 8006cb6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006cf0:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f640 22be 	movw	r2, #2750	@ 0xabe
 8006cfa:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	22fa      	movs	r2, #250	@ 0xfa
 8006d02:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006d0c:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8006d16:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8006d20:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8006d2a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8006d34:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8006d3e:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	22c8      	movs	r2, #200	@ 0xc8
 8006d46:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f640 1238 	movw	r2, #2360	@ 0x938
 8006d50:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f640 1247 	movw	r2, #2375	@ 0x947
 8006d62:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f640 4235 	movw	r2, #3125	@ 0xc35
 8006d6c:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f241 2270 	movw	r2, #4720	@ 0x1270
 8006d76:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f640 429e 	movw	r2, #3230	@ 0xc9e
 8006d80:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f241 228e 	movw	r2, #4750	@ 0x128e
 8006d8a:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f641 02ce 	movw	r2, #6350	@ 0x18ce
 8006d94:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	22fa      	movs	r2, #250	@ 0xfa
 8006dac:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8006db6:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f640 42b2 	movw	r2, #3250	@ 0xcb2
 8006dc0:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f241 1294 	movw	r2, #4500	@ 0x1194
 8006dca:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8006dd4:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	22c8      	movs	r2, #200	@ 0xc8
 8006ddc:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f640 720a 	movw	r2, #3850	@ 0xf0a
 8006e06:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8006e10:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f640 720a 	movw	r2, #3850	@ 0xf0a
 8006e1a:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8a3 20da 	strh.w	r2, [r3, #218]	@ 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006e5c:	859a      	strh	r2, [r3, #44]	@ 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006e64:	85da      	strh	r2, [r3, #46]	@ 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006e6c:	861a      	strh	r2, [r3, #48]	@ 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006e74:	865a      	strh	r2, [r3, #50]	@ 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006e7c:	639a      	str	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006e84:	63da      	str	r2, [r3, #60]	@ 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006e8c:	641a      	str	r2, [r3, #64]	@ 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006e94:	645a      	str	r2, [r3, #68]	@ 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006e9c:	649a      	str	r2, [r3, #72]	@ 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f242 3228 	movw	r2, #9000	@ 0x2328
 8006ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f241 7270 	movw	r2, #6000	@ 0x1770
 8006eac:	651a      	str	r2, [r3, #80]	@ 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006eb4:	655a      	str	r2, [r3, #84]	@ 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006ebc:	659a      	str	r2, [r3, #88]	@ 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006ec4:	65da      	str	r2, [r3, #92]	@ 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006ecc:	661a      	str	r2, [r3, #96]	@ 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006ed4:	665a      	str	r2, [r3, #100]	@ 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8006edc:	66da      	str	r2, [r3, #108]	@ 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8006ee4:	671a      	str	r2, [r3, #112]	@ 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8006eec:	675a      	str	r2, [r3, #116]	@ 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006ef4:	679a      	str	r2, [r3, #120]	@ 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	669a      	str	r2, [r3, #104]	@ 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8006f02:	67da      	str	r2, [r3, #124]	@ 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8006f0a:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2206      	movs	r2, #6
 8006f2a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b085      	sub	sp, #20
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006f50:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2238      	movs	r2, #56	@ 0x38
 8006f56:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2270      	movs	r2, #112	@ 0x70
 8006f62:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2210      	movs	r2, #16
 8006f68:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2264      	movs	r2, #100	@ 0x64
 8006f6e:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f76:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	220f      	movs	r2, #15
 8006f7c:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2234      	movs	r2, #52	@ 0x34
 8006f82:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	22c8      	movs	r2, #200	@ 0xc8
 8006f88:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006f90:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006f98:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b087      	sub	sp, #28
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
 8006fb6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006fc2:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2211      	movs	r2, #17
 8007004:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2202      	movs	r2, #2
 800700a:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2202      	movs	r2, #2
 8007016:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2208      	movs	r2, #8
 800701c:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8007024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007026:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800702e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007030:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8007038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703a:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	22ff      	movs	r2, #255	@ 0xff
 800705e:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8007060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007062:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8007068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706a:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	220b      	movs	r2, #11
 8007098:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800709a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709c:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2202      	movs	r2, #2
 80070a6:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	220d      	movs	r2, #13
 80070ac:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 80070ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b0:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 80070d4:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2238      	movs	r2, #56	@ 0x38
 80070e0:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	22ff      	movs	r2, #255	@ 0xff
 80070e6:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2200      	movs	r2, #0
 80070f2:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	221a      	movs	r2, #26
 80070f8:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2200      	movs	r2, #0
 80070fe:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	2220      	movs	r2, #32
 8007104:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2201      	movs	r2, #1
 800710a:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	22cc      	movs	r2, #204	@ 0xcc
 8007110:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	220b      	movs	r2, #11
 8007116:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2201      	movs	r2, #1
 800711c:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	22f5      	movs	r2, #245	@ 0xf5
 8007122:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2209      	movs	r2, #9
 8007128:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800712a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712c:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8007132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007134:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2208      	movs	r2, #8
 800713e:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2278      	movs	r2, #120	@ 0x78
 8007144:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2200      	movs	r2, #0
 800714a:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2200      	movs	r2, #0
 8007150:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2207      	movs	r2, #7
 8007156:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2221      	movs	r2, #33	@ 0x21
 800715c:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2243      	movs	r2, #67	@ 0x43
 8007162:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2210      	movs	r2, #16
 8007168:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2232      	movs	r2, #50	@ 0x32
 800716e:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2254      	movs	r2, #84	@ 0x54
 8007174:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2207      	movs	r2, #7
 800717a:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2221      	movs	r2, #33	@ 0x21
 8007180:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2243      	movs	r2, #67	@ 0x43
 8007186:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2210      	movs	r2, #16
 800718c:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2202      	movs	r2, #2
 8007192:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2243      	movs	r2, #67	@ 0x43
 8007198:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2205      	movs	r2, #5
 800719e:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2200      	movs	r2, #0
 80071a4:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2207      	movs	r2, #7
 80071aa:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2221      	movs	r2, #33	@ 0x21
 80071b0:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2243      	movs	r2, #67	@ 0x43
 80071b6:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2210      	movs	r2, #16
 80071bc:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2232      	movs	r2, #50	@ 0x32
 80071c2:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2254      	movs	r2, #84	@ 0x54
 80071c8:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071d0:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071d8:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2200      	movs	r2, #0
 80071de:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 80071e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e2:	2205      	movs	r2, #5
 80071e4:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 80071e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e8:	2200      	movs	r2, #0
 80071ea:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 80071ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ee:	220f      	movs	r2, #15
 80071f0:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 80071f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f4:	220f      	movs	r2, #15
 80071f6:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 80071f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fa:	2208      	movs	r2, #8
 80071fc:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 80071fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007200:	2208      	movs	r2, #8
 8007202:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	2201      	movs	r2, #1
 8007208:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	2200      	movs	r2, #0
 800720e:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	2200      	movs	r2, #0
 8007214:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	2200      	movs	r2, #0
 800721a:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800721c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721e:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
	pdynamic->system__seed_config =
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	220b      	movs	r2, #11
 800722a:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	2209      	movs	r2, #9
 8007230:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8007232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007234:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 800723a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723c:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	2201      	movs	r2, #1
 8007246:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8007248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724a:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
	pdynamic->sd_config__first_order_select =
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8007252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007254:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
	pdynamic->sd_config__quantifier         =
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	22c7      	movs	r2, #199	@ 0xc7
 8007260:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	22ff      	movs	r2, #255	@ 0xff
 8007266:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	22db      	movs	r2, #219	@ 0xdb
 800726c:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	2202      	movs	r2, #2
 8007272:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8007274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007276:	2200      	movs	r2, #0
 8007278:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	2201      	movs	r2, #1
 800727e:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8007280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007282:	2201      	movs	r2, #1
 8007284:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007288:	2221      	movs	r2, #33	@ 0x21
 800728a:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800728c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007290:	4618      	mov	r0, r3
 8007292:	371c      	adds	r7, #28
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b090      	sub	sp, #64	@ 0x40
 80072a0:	af0a      	add	r7, sp, #40	@ 0x28
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80072aa:	2300      	movs	r3, #0
 80072ac:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 80072ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b0:	9303      	str	r3, [sp, #12]
 80072b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b4:	9302      	str	r3, [sp, #8]
 80072b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b8:	9301      	str	r3, [sp, #4]
 80072ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	68b8      	ldr	r0, [r7, #8]
 80072c6:	f7ff fe70 	bl	8006faa <VL53LX_preset_mode_standard_ranging>
 80072ca:	4603      	mov	r3, r0
 80072cc:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80072ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d171      	bne.n	80073ba <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80072dc:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	9308      	str	r3, [sp, #32]
 80072e2:	2305      	movs	r3, #5
 80072e4:	9307      	str	r3, [sp, #28]
 80072e6:	2304      	movs	r3, #4
 80072e8:	9306      	str	r3, [sp, #24]
 80072ea:	2303      	movs	r3, #3
 80072ec:	9305      	str	r3, [sp, #20]
 80072ee:	2302      	movs	r3, #2
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	2301      	movs	r3, #1
 80072f4:	9303      	str	r3, [sp, #12]
 80072f6:	2300      	movs	r3, #0
 80072f8:	9302      	str	r3, [sp, #8]
 80072fa:	2304      	movs	r3, #4
 80072fc:	9301      	str	r3, [sp, #4]
 80072fe:	2303      	movs	r3, #3
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	2302      	movs	r3, #2
 8007304:	2201      	movs	r2, #1
 8007306:	2100      	movs	r1, #0
 8007308:	2007      	movs	r0, #7
 800730a:	f000 ff9f 	bl	800824c <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	3302      	adds	r3, #2
 8007312:	9308      	str	r3, [sp, #32]
 8007314:	2305      	movs	r3, #5
 8007316:	9307      	str	r3, [sp, #28]
 8007318:	2304      	movs	r3, #4
 800731a:	9306      	str	r3, [sp, #24]
 800731c:	2303      	movs	r3, #3
 800731e:	9305      	str	r3, [sp, #20]
 8007320:	2302      	movs	r3, #2
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	2301      	movs	r3, #1
 8007326:	9303      	str	r3, [sp, #12]
 8007328:	2300      	movs	r3, #0
 800732a:	9302      	str	r3, [sp, #8]
 800732c:	2304      	movs	r3, #4
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	2303      	movs	r3, #3
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	2302      	movs	r3, #2
 8007336:	2201      	movs	r2, #1
 8007338:	2100      	movs	r1, #0
 800733a:	2007      	movs	r0, #7
 800733c:	f001 f816 	bl	800836c <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	2209      	movs	r2, #9
 8007344:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	220b      	movs	r2, #11
 800734a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800734c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734e:	2209      	movs	r2, #9
 8007350:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	220b      	movs	r2, #11
 8007356:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	2200      	movs	r2, #0
 800735c:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	2220      	movs	r2, #32
 8007362:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	2200      	movs	r2, #0
 8007368:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	221a      	movs	r2, #26
 800736e:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	2200      	movs	r2, #0
 8007374:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	2228      	movs	r2, #40	@ 0x28
 800737a:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	2200      	movs	r2, #0
 8007380:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	2221      	movs	r2, #33	@ 0x21
 8007386:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	22f5      	movs	r2, #245	@ 0xf5
 800738c:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2208      	movs	r2, #8
 8007392:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2288      	movs	r2, #136	@ 0x88
 800739a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f9e6 	bl	800777a <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	229b      	movs	r2, #155	@ 0x9b
 80073b2:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80073b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b6:	2226      	movs	r2, #38	@ 0x26
 80073b8:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80073ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b090      	sub	sp, #64	@ 0x40
 80073ca:	af0a      	add	r7, sp, #40	@ 0x28
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	607a      	str	r2, [r7, #4]
 80073d2:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80073d4:	2300      	movs	r3, #0
 80073d6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80073d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073da:	9304      	str	r3, [sp, #16]
 80073dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073de:	9303      	str	r3, [sp, #12]
 80073e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e2:	9302      	str	r3, [sp, #8]
 80073e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e6:	9301      	str	r3, [sp, #4]
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	68b9      	ldr	r1, [r7, #8]
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f7ff ff52 	bl	800729c <VL53LX_preset_mode_histogram_ranging>
 80073f8:	4603      	mov	r3, r0
 80073fa:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80073fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d178      	bne.n	80074f6 <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	9308      	str	r3, [sp, #32]
 8007408:	2305      	movs	r3, #5
 800740a:	9307      	str	r3, [sp, #28]
 800740c:	2304      	movs	r3, #4
 800740e:	9306      	str	r3, [sp, #24]
 8007410:	2303      	movs	r3, #3
 8007412:	9305      	str	r3, [sp, #20]
 8007414:	2302      	movs	r3, #2
 8007416:	9304      	str	r3, [sp, #16]
 8007418:	2301      	movs	r3, #1
 800741a:	9303      	str	r3, [sp, #12]
 800741c:	2300      	movs	r3, #0
 800741e:	9302      	str	r3, [sp, #8]
 8007420:	2304      	movs	r3, #4
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	2303      	movs	r3, #3
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	2302      	movs	r3, #2
 800742a:	2201      	movs	r2, #1
 800742c:	2100      	movs	r1, #0
 800742e:	2007      	movs	r0, #7
 8007430:	f000 ff0c 	bl	800824c <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007436:	3302      	adds	r3, #2
 8007438:	9308      	str	r3, [sp, #32]
 800743a:	2305      	movs	r3, #5
 800743c:	9307      	str	r3, [sp, #28]
 800743e:	2304      	movs	r3, #4
 8007440:	9306      	str	r3, [sp, #24]
 8007442:	2303      	movs	r3, #3
 8007444:	9305      	str	r3, [sp, #20]
 8007446:	2302      	movs	r3, #2
 8007448:	9304      	str	r3, [sp, #16]
 800744a:	2301      	movs	r3, #1
 800744c:	9303      	str	r3, [sp, #12]
 800744e:	2300      	movs	r3, #0
 8007450:	9302      	str	r3, [sp, #8]
 8007452:	2304      	movs	r3, #4
 8007454:	9301      	str	r3, [sp, #4]
 8007456:	2303      	movs	r3, #3
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	2302      	movs	r3, #2
 800745c:	2201      	movs	r2, #1
 800745e:	2100      	movs	r1, #0
 8007460:	2007      	movs	r0, #7
 8007462:	f000 ff83 	bl	800836c <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	68b9      	ldr	r1, [r7, #8]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f982 	bl	800777a <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	2209      	movs	r2, #9
 800747a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	220b      	movs	r2, #11
 8007480:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	2200      	movs	r2, #0
 8007486:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	2221      	movs	r2, #33	@ 0x21
 800748c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	2200      	movs	r2, #0
 8007492:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	221b      	movs	r2, #27
 8007498:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	2200      	movs	r2, #0
 800749e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	2229      	movs	r2, #41	@ 0x29
 80074a4:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	2200      	movs	r2, #0
 80074aa:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	2222      	movs	r2, #34	@ 0x22
 80074b0:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2209      	movs	r2, #9
 80074b6:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	22f5      	movs	r2, #245	@ 0xf5
 80074bc:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	2209      	movs	r2, #9
 80074c2:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80074c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c6:	220b      	movs	r2, #11
 80074c8:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 80074ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074cc:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 80074ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d0:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 80074d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d4:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d8:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2208      	movs	r2, #8
 80074de:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2288      	movs	r2, #136	@ 0x88
 80074e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ec:	229b      	movs	r2, #155	@ 0x9b
 80074ee:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80074f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f2:	2226      	movs	r2, #38	@ 0x26
 80074f4:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80074f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b090      	sub	sp, #64	@ 0x40
 8007506:	af0a      	add	r7, sp, #40	@ 0x28
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	607a      	str	r2, [r7, #4]
 800750e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007510:	2300      	movs	r3, #0
 8007512:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007516:	9304      	str	r3, [sp, #16]
 8007518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800751a:	9303      	str	r3, [sp, #12]
 800751c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751e:	9302      	str	r3, [sp, #8]
 8007520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007522:	9301      	str	r3, [sp, #4]
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	68b9      	ldr	r1, [r7, #8]
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f7ff feb4 	bl	800729c <VL53LX_preset_mode_histogram_ranging>
 8007534:	4603      	mov	r3, r0
 8007536:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007538:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d178      	bne.n	8007632 <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	9308      	str	r3, [sp, #32]
 8007544:	2303      	movs	r3, #3
 8007546:	9307      	str	r3, [sp, #28]
 8007548:	2302      	movs	r3, #2
 800754a:	9306      	str	r3, [sp, #24]
 800754c:	2301      	movs	r3, #1
 800754e:	9305      	str	r3, [sp, #20]
 8007550:	2302      	movs	r3, #2
 8007552:	9304      	str	r3, [sp, #16]
 8007554:	2301      	movs	r3, #1
 8007556:	9303      	str	r3, [sp, #12]
 8007558:	2300      	movs	r3, #0
 800755a:	9302      	str	r3, [sp, #8]
 800755c:	2302      	movs	r3, #2
 800755e:	9301      	str	r3, [sp, #4]
 8007560:	2302      	movs	r3, #2
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	2301      	movs	r3, #1
 8007566:	2201      	movs	r2, #1
 8007568:	2100      	movs	r1, #0
 800756a:	2007      	movs	r0, #7
 800756c:	f000 fe6e 	bl	800824c <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007572:	3302      	adds	r3, #2
 8007574:	9308      	str	r3, [sp, #32]
 8007576:	2303      	movs	r3, #3
 8007578:	9307      	str	r3, [sp, #28]
 800757a:	2302      	movs	r3, #2
 800757c:	9306      	str	r3, [sp, #24]
 800757e:	2301      	movs	r3, #1
 8007580:	9305      	str	r3, [sp, #20]
 8007582:	2302      	movs	r3, #2
 8007584:	9304      	str	r3, [sp, #16]
 8007586:	2301      	movs	r3, #1
 8007588:	9303      	str	r3, [sp, #12]
 800758a:	2300      	movs	r3, #0
 800758c:	9302      	str	r3, [sp, #8]
 800758e:	2302      	movs	r3, #2
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	2302      	movs	r3, #2
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	2301      	movs	r3, #1
 8007598:	2201      	movs	r2, #1
 800759a:	2100      	movs	r1, #0
 800759c:	2007      	movs	r0, #7
 800759e:	f000 fee5 	bl	800836c <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80075a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f8e4 	bl	800777a <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	2205      	movs	r2, #5
 80075b6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	2207      	movs	r2, #7
 80075bc:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	2200      	movs	r2, #0
 80075c2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	2236      	movs	r2, #54	@ 0x36
 80075c8:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	2200      	movs	r2, #0
 80075ce:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 80075d0:	6a3b      	ldr	r3, [r7, #32]
 80075d2:	2228      	movs	r2, #40	@ 0x28
 80075d4:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	2200      	movs	r2, #0
 80075da:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	2244      	movs	r2, #68	@ 0x44
 80075e0:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	2200      	movs	r2, #0
 80075e6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	2233      	movs	r2, #51	@ 0x33
 80075ec:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2205      	movs	r2, #5
 80075f2:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	22f5      	movs	r2, #245	@ 0xf5
 80075f8:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	2205      	movs	r2, #5
 80075fe:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	2207      	movs	r2, #7
 8007604:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 8007606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007608:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 800760e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007610:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8007612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007614:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2208      	movs	r2, #8
 800761a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2248      	movs	r2, #72	@ 0x48
 8007622:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 8007626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007628:	229b      	movs	r2, #155	@ 0x9b
 800762a:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800762c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762e:	2226      	movs	r2, #38	@ 0x26
 8007630:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007632:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b090      	sub	sp, #64	@ 0x40
 8007642:	af0a      	add	r7, sp, #40	@ 0x28
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
 800764a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800764c:	2300      	movs	r3, #0
 800764e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	9304      	str	r3, [sp, #16]
 8007654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007656:	9303      	str	r3, [sp, #12]
 8007658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765a:	9302      	str	r3, [sp, #8]
 800765c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765e:	9301      	str	r3, [sp, #4]
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	68b9      	ldr	r1, [r7, #8]
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7ff fe16 	bl	800729c <VL53LX_preset_mode_histogram_ranging>
 8007670:	4603      	mov	r3, r0
 8007672:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007674:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d178      	bne.n	800776e <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	9308      	str	r3, [sp, #32]
 8007680:	2302      	movs	r3, #2
 8007682:	9307      	str	r3, [sp, #28]
 8007684:	2302      	movs	r3, #2
 8007686:	9306      	str	r3, [sp, #24]
 8007688:	2301      	movs	r3, #1
 800768a:	9305      	str	r3, [sp, #20]
 800768c:	2301      	movs	r3, #1
 800768e:	9304      	str	r3, [sp, #16]
 8007690:	2301      	movs	r3, #1
 8007692:	9303      	str	r3, [sp, #12]
 8007694:	2300      	movs	r3, #0
 8007696:	9302      	str	r3, [sp, #8]
 8007698:	2301      	movs	r3, #1
 800769a:	9301      	str	r3, [sp, #4]
 800769c:	2301      	movs	r3, #1
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	2301      	movs	r3, #1
 80076a2:	2200      	movs	r2, #0
 80076a4:	2107      	movs	r1, #7
 80076a6:	2007      	movs	r0, #7
 80076a8:	f000 fdd0 	bl	800824c <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80076ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ae:	3302      	adds	r3, #2
 80076b0:	9308      	str	r3, [sp, #32]
 80076b2:	2302      	movs	r3, #2
 80076b4:	9307      	str	r3, [sp, #28]
 80076b6:	2302      	movs	r3, #2
 80076b8:	9306      	str	r3, [sp, #24]
 80076ba:	2301      	movs	r3, #1
 80076bc:	9305      	str	r3, [sp, #20]
 80076be:	2301      	movs	r3, #1
 80076c0:	9304      	str	r3, [sp, #16]
 80076c2:	2301      	movs	r3, #1
 80076c4:	9303      	str	r3, [sp, #12]
 80076c6:	2300      	movs	r3, #0
 80076c8:	9302      	str	r3, [sp, #8]
 80076ca:	2301      	movs	r3, #1
 80076cc:	9301      	str	r3, [sp, #4]
 80076ce:	2301      	movs	r3, #1
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	2301      	movs	r3, #1
 80076d4:	2200      	movs	r2, #0
 80076d6:	2107      	movs	r1, #7
 80076d8:	2007      	movs	r0, #7
 80076da:	f000 fe47 	bl	800836c <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80076de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	68b9      	ldr	r1, [r7, #8]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f846 	bl	800777a <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	2203      	movs	r2, #3
 80076f2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	2205      	movs	r2, #5
 80076f8:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	2200      	movs	r2, #0
 80076fe:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	2252      	movs	r2, #82	@ 0x52
 8007704:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	2200      	movs	r2, #0
 800770a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	2237      	movs	r2, #55	@ 0x37
 8007710:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	2200      	movs	r2, #0
 8007716:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	2266      	movs	r2, #102	@ 0x66
 800771c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	2200      	movs	r2, #0
 8007722:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	2244      	movs	r2, #68	@ 0x44
 8007728:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2203      	movs	r2, #3
 800772e:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	22f5      	movs	r2, #245	@ 0xf5
 8007734:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007738:	2203      	movs	r2, #3
 800773a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773e:	2205      	movs	r2, #5
 8007740:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8007742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007744:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800774a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800774c:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800774e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007750:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2208      	movs	r2, #8
 8007756:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2228      	movs	r2, #40	@ 0x28
 800775e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 8007762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007764:	22bb      	movs	r2, #187	@ 0xbb
 8007766:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776a:	2226      	movs	r2, #38	@ 0x26
 800776c:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800776e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 800777a:	b480      	push	{r7}
 800777c:	b085      	sub	sp, #20
 800777e:	af00      	add	r7, sp, #0
 8007780:	60f8      	str	r0, [r7, #12]
 8007782:	60b9      	str	r1, [r7, #8]
 8007784:	607a      	str	r2, [r7, #4]
 8007786:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 80077bc:	021b      	lsls	r3, r3, #8
 80077be:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	7a12      	ldrb	r2, [r2, #8]
 80077c4:	4413      	add	r3, r2
 80077c6:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 8007800:	021b      	lsls	r3, r3, #8
 8007802:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	7892      	ldrb	r2, [r2, #2]
 8007808:	4413      	add	r3, r2
 800780a:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 8007814:	021b      	lsls	r3, r3, #8
 8007816:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	7912      	ldrb	r2, [r2, #4]
 800781c:	4413      	add	r3, r2
 800781e:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800784c:	bf00      	nop
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	7a12      	ldrb	r2, [r2, #8]
 80078a0:	4413      	add	r3, r2
 80078a2:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 80078d4:	021b      	lsls	r3, r3, #8
 80078d6:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	7892      	ldrb	r2, [r2, #2]
 80078dc:	4413      	add	r3, r2
 80078de:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 80078e8:	021b      	lsls	r3, r3, #8
 80078ea:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	7912      	ldrb	r2, [r2, #4]
 80078f0:	4413      	add	r3, r2
 80078f2:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 8007908:	bf00      	nop
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3318      	adds	r3, #24
 8007920:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007940:	bf00      	nop
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3318      	adds	r3, #24
 800795c:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	332c      	adds	r3, #44	@ 0x2c
 8007962:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	78fa      	ldrb	r2, [r7, #3]
 8007968:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2200      	movs	r2, #0
 800796e:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2202      	movs	r2, #2
 8007974:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2200      	movs	r2, #0
 800797a:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2200      	movs	r2, #0
 8007980:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	78fa      	ldrb	r2, [r7, #3]
 8007986:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2200      	movs	r2, #0
 800798c:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2202      	movs	r2, #2
 8007992:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2200      	movs	r2, #0
 8007998:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2200      	movs	r2, #0
 800799e:	735a      	strb	r2, [r3, #13]

}
 80079a0:	bf00      	nop
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 80079b4:	2300      	movs	r3, #0
 80079b6:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3318      	adds	r3, #24
 80079bc:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	332c      	adds	r3, #44	@ 0x2c
 80079c2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 80079ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d115      	bne.n	80079fe <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2203      	movs	r2, #3
 80079d6:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2202      	movs	r2, #2
 80079ee:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	735a      	strb	r2, [r3, #13]
 80079fc:	e0be      	b.n	8007b7c <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	7a1b      	ldrb	r3, [r3, #8]
 8007a02:	2bff      	cmp	r3, #255	@ 0xff
 8007a04:	d103      	bne.n	8007a0e <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2280      	movs	r2, #128	@ 0x80
 8007a0a:	721a      	strb	r2, [r3, #8]
 8007a0c:	e005      	b.n	8007a1a <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	7a1b      	ldrb	r3, [r3, #8]
 8007a12:	3301      	adds	r3, #1
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	7a19      	ldrb	r1, [r3, #8]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f103 0209 	add.w	r2, r3, #9
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	330a      	adds	r3, #10
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f002 fdba 	bl	800a5a2 <VL53LX_update_internal_stream_counters>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	7adb      	ldrb	r3, [r3, #11]
 8007a36:	f083 0302 	eor.w	r3, r3, #2
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	79db      	ldrb	r3, [r3, #7]
 8007a44:	3b03      	subs	r3, #3
 8007a46:	2b05      	cmp	r3, #5
 8007a48:	f200 8082 	bhi.w	8007b50 <VL53LX_update_ll_driver_rd_state+0x1a4>
 8007a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a54 <VL53LX_update_ll_driver_rd_state+0xa8>)
 8007a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a52:	bf00      	nop
 8007a54:	08007a6d 	.word	0x08007a6d
 8007a58:	08007b51 	.word	0x08007b51
 8007a5c:	08007b51 	.word	0x08007b51
 8007a60:	08007abf 	.word	0x08007abf
 8007a64:	08007af5 	.word	0x08007af5
 8007a68:	08007b1f 	.word	0x08007b1f

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	f893 335e 	ldrb.w	r3, [r3, #862]	@ 0x35e
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dd03      	ble.n	8007a82 <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2206      	movs	r2, #6
 8007a7e:	71da      	strb	r2, [r3, #7]
 8007a80:	e00d      	b.n	8007a9e <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
				if (pstate->rd_zone_id >=
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d303      	bcc.n	8007a98 <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2208      	movs	r2, #8
 8007a94:	71da      	strb	r2, [r3, #7]
 8007a96:	e002      	b.n	8007a9e <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2207      	movs	r2, #7
 8007a9c:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	735a      	strb	r2, [r3, #13]

			break;
 8007abc:	e05e      	b.n	8007b7c <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d303      	bcc.n	8007aec <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2208      	movs	r2, #8
 8007ae8:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8007aea:	e047      	b.n	8007b7c <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2207      	movs	r2, #7
 8007af0:	71da      	strb	r2, [r3, #7]
			break;
 8007af2:	e043      	b.n	8007b7c <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	7b5b      	ldrb	r3, [r3, #13]
 8007af8:	3301      	adds	r3, #1
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d303      	bcc.n	8007b16 <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2208      	movs	r2, #8
 8007b12:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8007b14:	e032      	b.n	8007b7c <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2207      	movs	r2, #7
 8007b1a:	71da      	strb	r2, [r3, #7]
			break;
 8007b1c:	e02e      	b.n	8007b7c <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	7b1b      	ldrb	r3, [r3, #12]
 8007b28:	f083 0301 	eor.w	r3, r3, #1
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d303      	bcc.n	8007b48 <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2208      	movs	r2, #8
 8007b44:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 8007b46:	e019      	b.n	8007b7c <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2207      	movs	r2, #7
 8007b4c:	71da      	strb	r2, [r3, #7]
			break;
 8007b4e:	e015      	b.n	8007b7c <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2203      	movs	r2, #3
 8007b54:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	735a      	strb	r2, [r3, #13]
			break;
 8007b7a:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8007b7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b08d      	sub	sp, #52	@ 0x34
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007b90:	2300      	movs	r3, #0
 8007b92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t  *pdev =
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	3318      	adds	r3, #24
 8007b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8007ba2:	627b      	str	r3, [r7, #36]	@ 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8007ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba6:	332c      	adds	r3, #44	@ 0x2c
 8007ba8:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 8007baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bac:	f203 3366 	addw	r3, r3, #870	@ 0x366
 8007bb0:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 8007bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb4:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8007bb8:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8007bc0:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint8_t   histogram_mode        = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8007be0:	f003 031f 	and.w	r3, r3, #31
 8007be4:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	78db      	ldrb	r3, [r3, #3]
 8007bea:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 8007bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bee:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8007bf2:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bf14      	ite	ne
 8007bfa:	2301      	movne	r3, #1
 8007bfc:	2300      	moveq	r3, #0
 8007bfe:	b2db      	uxtb	r3, r3
	histogram_mode =
 8007c00:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8007c06:	111b      	asrs	r3, r3, #4
 8007c08:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	if (histogram_mode)
 8007c12:	7c7b      	ldrb	r3, [r7, #17]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d008      	beq.n	8007c2a <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8007c1e:	111b      	asrs	r3, r3, #4
 8007c20:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 8007c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2c:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8007c30:	f003 0320 	and.w	r3, r3, #32
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d04e      	beq.n	8007cd6 <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	79db      	ldrb	r3, [r3, #7]
 8007c3c:	2b06      	cmp	r3, #6
 8007c3e:	d109      	bne.n	8007c54 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8007c40:	7c7b      	ldrb	r3, [r7, #17]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d14a      	bne.n	8007cdc <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 8007c46:	7cfb      	ldrb	r3, [r7, #19]
 8007c48:	2b12      	cmp	r3, #18
 8007c4a:	d047      	beq.n	8007cdc <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8007c4c:	23ef      	movs	r3, #239	@ 0xef
 8007c4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007c52:	e043      	b.n	8007cdc <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	7a1b      	ldrb	r3, [r3, #8]
 8007c58:	7cba      	ldrb	r2, [r7, #18]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d002      	beq.n	8007c64 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8007c5e:	23ee      	movs	r3, #238	@ 0xee
 8007c60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	7adb      	ldrb	r3, [r3, #11]
 8007c68:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d002      	beq.n	8007c76 <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8007c70:	23ed      	movs	r3, #237	@ 0xed
 8007c72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	7b5b      	ldrb	r3, [r3, #13]
 8007c7a:	4619      	mov	r1, r3
		expected_stream_count =
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	460b      	mov	r3, r1
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	440b      	add	r3, r1
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	4413      	add	r3, r2
 8007c88:	3302      	adds	r3, #2
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	7b5b      	ldrb	r3, [r3, #13]
 8007c92:	4619      	mov	r1, r3
		expected_gph_id =
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	460b      	mov	r3, r1
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	4413      	add	r3, r2
 8007ca0:	3303      	adds	r3, #3
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 8007ca6:	7c3a      	ldrb	r2, [r7, #16]
 8007ca8:	7cbb      	ldrb	r3, [r7, #18]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d00a      	beq.n	8007cc4 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 8007cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb0:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <VL53LX_check_ll_driver_rd_state+0x136>
 8007cb8:	7cbb      	ldrb	r3, [r7, #18]
 8007cba:	2bff      	cmp	r3, #255	@ 0xff
 8007cbc:	d002      	beq.n	8007cc4 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 8007cbe:	23ec      	movs	r3, #236	@ 0xec
 8007cc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		}



		if (expected_gph_id != device_gph_id)
 8007cc4:	7bfa      	ldrb	r2, [r7, #15]
 8007cc6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d005      	beq.n	8007cda <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8007cce:	23eb      	movs	r3, #235	@ 0xeb
 8007cd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007cd4:	e002      	b.n	8007cdc <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 8007cd6:	bf00      	nop
 8007cd8:	e000      	b.n	8007cdc <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 8007cda:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8007cdc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3734      	adds	r7, #52	@ 0x34
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b088      	sub	sp, #32
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3318      	adds	r3, #24
 8007cfc:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8007d04:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	332c      	adds	r3, #44	@ 0x2c
 8007d0a:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8007d12:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8007d1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d11b      	bne.n	8007d5a <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	2203      	movs	r2, #3
 8007d26:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	2200      	movs	r2, #0
 8007d32:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	2200      	movs	r2, #0
 8007d38:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	2200      	movs	r2, #0
 8007d44:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	773b      	strb	r3, [r7, #28]
 8007d58:	e0b1      	b.n	8007ebe <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	791b      	ldrb	r3, [r3, #4]
 8007d5e:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	799b      	ldrb	r3, [r3, #6]
 8007d64:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	785b      	ldrb	r3, [r3, #1]
 8007d6a:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	2bff      	cmp	r3, #255	@ 0xff
 8007d72:	d103      	bne.n	8007d7c <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	2280      	movs	r2, #128	@ 0x80
 8007d78:	705a      	strb	r2, [r3, #1]
 8007d7a:	e005      	b.n	8007d88 <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	785b      	ldrb	r3, [r3, #1]
 8007d80:	3301      	adds	r3, #1
 8007d82:	b2da      	uxtb	r2, r3
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	7859      	ldrb	r1, [r3, #1]
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	1c9a      	adds	r2, r3, #2
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	3303      	adds	r3, #3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f002 fc04 	bl	800a5a2 <VL53LX_update_internal_stream_counters>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	791b      	ldrb	r3, [r3, #4]
 8007da2:	f083 0302 	eor.w	r3, r3, #2
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b05      	cmp	r3, #5
 8007db2:	d053      	beq.n	8007e5c <VL53LX_update_ll_driver_cfg_state+0x170>
 8007db4:	2b05      	cmp	r3, #5
 8007db6:	dc69      	bgt.n	8007e8c <VL53LX_update_ll_driver_cfg_state+0x1a0>
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d002      	beq.n	8007dc2 <VL53LX_update_ll_driver_cfg_state+0xd6>
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d02d      	beq.n	8007e1c <VL53LX_update_ll_driver_cfg_state+0x130>
 8007dc0:	e064      	b.n	8007e8c <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d909      	bls.n	8007dea <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	795b      	ldrb	r3, [r3, #5]
 8007de0:	f083 0301 	eor.w	r3, r3, #1
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	2201      	movs	r2, #1
 8007dee:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d106      	bne.n	8007e08 <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	2200      	movs	r2, #0
 8007e04:	70da      	strb	r2, [r3, #3]
 8007e06:	e005      	b.n	8007e14 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2201      	movs	r2, #1
 8007e12:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	2204      	movs	r2, #4
 8007e18:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 8007e1a:	e050      	b.n	8007ebe <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	799b      	ldrb	r3, [r3, #6]
 8007e20:	3301      	adds	r3, #1
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d940      	bls.n	8007eb8 <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	795b      	ldrb	r3, [r3, #5]
 8007e40:	f083 0301 	eor.w	r3, r3, #1
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d031      	beq.n	8007eb8 <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	2205      	movs	r2, #5
 8007e58:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 8007e5a:	e02d      	b.n	8007eb8 <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	799b      	ldrb	r3, [r3, #6]
 8007e60:	3301      	adds	r3, #1
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d922      	bls.n	8007ebc <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	795b      	ldrb	r3, [r3, #5]
 8007e80:	f083 0301 	eor.w	r3, r3, #1
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	715a      	strb	r2, [r3, #5]
			}
			break;
 8007e8a:	e017      	b.n	8007ebc <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	2203      	movs	r2, #3
 8007e90:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	2200      	movs	r2, #0
 8007e96:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	2200      	movs	r2, #0
 8007eae:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	719a      	strb	r2, [r3, #6]
			break;
 8007eb6:	e002      	b.n	8007ebe <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007eb8:	bf00      	nop
 8007eba:	e000      	b.n	8007ebe <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007ebc:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d11d      	bne.n	8007f04 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007ec8:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 8007eca:	7f3b      	ldrb	r3, [r7, #28]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	b2d8      	uxtb	r0, r3
 8007ed0:	68f9      	ldr	r1, [r7, #12]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	005b      	lsls	r3, r3, #1
 8007eda:	440b      	add	r3, r1
 8007edc:	3302      	adds	r3, #2
 8007ede:	4602      	mov	r2, r0
 8007ee0:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	7b5b      	ldrb	r3, [r3, #13]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	7f7b      	ldrb	r3, [r7, #29]
 8007eea:	f083 0302 	eor.w	r3, r3, #2
 8007eee:	b2d8      	uxtb	r0, r3
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	440b      	add	r3, r1
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	4413      	add	r3, r2
 8007efc:	3303      	adds	r3, #3
 8007efe:	4602      	mov	r2, r0
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	e013      	b.n	8007f2c <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007f04:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8007f06:	68f9      	ldr	r1, [r7, #12]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	005b      	lsls	r3, r3, #1
 8007f10:	440b      	add	r3, r1
 8007f12:	3302      	adds	r3, #2
 8007f14:	7f3a      	ldrb	r2, [r7, #28]
 8007f16:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8007f18:	7fba      	ldrb	r2, [r7, #30]
 8007f1a:	68f9      	ldr	r1, [r7, #12]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	005b      	lsls	r3, r3, #1
 8007f24:	440b      	add	r3, r1
 8007f26:	3303      	adds	r3, #3
 8007f28:	7f7a      	ldrb	r2, [r7, #29]
 8007f2a:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8007f2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3720      	adds	r7, #32
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	7c1a      	ldrb	r2, [r3, #16]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	7c52      	ldrb	r2, [r2, #17]
 8007f52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	3302      	adds	r3, #2
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	7c92      	ldrb	r2, [r2, #18]
 8007f5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	3303      	adds	r3, #3
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	7cd2      	ldrb	r2, [r2, #19]
 8007f66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	7d12      	ldrb	r2, [r2, #20]
 8007f70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	3305      	adds	r3, #5
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	7d52      	ldrb	r2, [r2, #21]
 8007f7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	3306      	adds	r3, #6
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	7d92      	ldrb	r2, [r2, #22]
 8007f84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	3307      	adds	r3, #7
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	7dd2      	ldrb	r2, [r2, #23]
 8007f8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	3308      	adds	r3, #8
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	7e12      	ldrb	r2, [r2, #24]
 8007f98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	3309      	adds	r3, #9
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	7e52      	ldrb	r2, [r2, #25]
 8007fa2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	330a      	adds	r3, #10
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	7e92      	ldrb	r2, [r2, #26]
 8007fac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	330b      	adds	r3, #11
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	7ed2      	ldrb	r2, [r2, #27]
 8007fb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	330c      	adds	r3, #12
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	7f12      	ldrb	r2, [r2, #28]
 8007fc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	330d      	adds	r3, #13
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	7f52      	ldrb	r2, [r2, #29]
 8007fca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	330e      	adds	r3, #14
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	7f92      	ldrb	r2, [r2, #30]
 8007fd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	330f      	adds	r3, #15
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	7fd2      	ldrb	r2, [r2, #31]
 8007fde:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	3310      	adds	r3, #16
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007fea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	3311      	adds	r3, #17
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8007ff6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	3312      	adds	r3, #18
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8008002:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	3313      	adds	r3, #19
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 800800e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	3314      	adds	r3, #20
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800801a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	3315      	adds	r3, #21
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8008026:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	3316      	adds	r3, #22
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8008032:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	3317      	adds	r3, #23
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 800803e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	3318      	adds	r3, #24
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 800804a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	3319      	adds	r3, #25
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8008056:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	331a      	adds	r3, #26
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8008062:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	331b      	adds	r3, #27
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 800806e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	331c      	adds	r3, #28
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 800807a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	331d      	adds	r3, #29
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 8008086:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	331e      	adds	r3, #30
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8008092:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	331f      	adds	r3, #31
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 800809e:	701a      	strb	r2, [r3, #0]
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	22ff      	movs	r2, #255	@ 0xff
 80080b8:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	22ff      	movs	r2, #255	@ 0xff
 80080be:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	22ff      	movs	r2, #255	@ 0xff
 80080c4:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	22ff      	movs	r2, #255	@ 0xff
 80080ca:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080d2:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080da:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080e2:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080ea:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080f2:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080fa:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008102:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800810a:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008112:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800811a:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008122:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800812a:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008132:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800813a:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008142:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800814a:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008152:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800815a:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008162:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	22ff      	movs	r2, #255	@ 0xff
 8008168:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	4603      	mov	r3, r0
 8008180:	6039      	str	r1, [r7, #0]
 8008182:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2205      	movs	r2, #5
 800818c:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	79fa      	ldrb	r2, [r7, #7]
 8008192:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8008194:	2300      	movs	r3, #0
 8008196:	73fb      	strb	r3, [r7, #15]
 8008198:	e017      	b.n	80081ca <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 800819a:	7bfa      	ldrb	r2, [r7, #15]
 800819c:	4613      	mov	r3, r2
 800819e:	011b      	lsls	r3, r3, #4
 80081a0:	4413      	add	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	4413      	add	r3, r2
 80081a8:	3304      	adds	r3, #4
 80081aa:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2203      	movs	r2, #3
 80081b0:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2203      	movs	r2, #3
 80081b6:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2204      	movs	r2, #4
 80081bc:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2200      	movs	r2, #0
 80081c2:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	3301      	adds	r3, #1
 80081c8:	73fb      	strb	r3, [r7, #15]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	7bfa      	ldrb	r2, [r7, #15]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d3e2      	bcc.n	800819a <V53L1_init_zone_results_structure+0x22>
	}
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b087      	sub	sp, #28
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80081f0:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 80081f6:	2305      	movs	r3, #5
 80081f8:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008200:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 8008202:	2300      	movs	r3, #0
 8008204:	75fb      	strb	r3, [r7, #23]
 8008206:	e016      	b.n	8008236 <V53L1_init_zone_dss_configs+0x54>
		pdata->VL53LX_p_003[z].dss_mode =
 8008208:	7dfa      	ldrb	r2, [r7, #23]
 800820a:	68b9      	ldr	r1, [r7, #8]
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	005b      	lsls	r3, r3, #1
 8008214:	440b      	add	r3, r1
 8008216:	3304      	adds	r3, #4
 8008218:	2201      	movs	r2, #1
 800821a:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 800821c:	7dfa      	ldrb	r2, [r7, #23]
 800821e:	68b9      	ldr	r1, [r7, #8]
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	440b      	add	r3, r1
 800822a:	3306      	adds	r3, #6
 800822c:	2200      	movs	r2, #0
 800822e:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	3301      	adds	r3, #1
 8008234:	75fb      	strb	r3, [r7, #23]
 8008236:	7dfa      	ldrb	r2, [r7, #23]
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	429a      	cmp	r2, r3
 800823c:	d3e4      	bcc.n	8008208 <V53L1_init_zone_dss_configs+0x26>
	}
}
 800823e:	bf00      	nop
 8008240:	bf00      	nop
 8008242:	371c      	adds	r7, #28
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 800824c:	b490      	push	{r4, r7}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	4604      	mov	r4, r0
 8008254:	4608      	mov	r0, r1
 8008256:	4611      	mov	r1, r2
 8008258:	461a      	mov	r2, r3
 800825a:	4623      	mov	r3, r4
 800825c:	71fb      	strb	r3, [r7, #7]
 800825e:	4603      	mov	r3, r0
 8008260:	71bb      	strb	r3, [r7, #6]
 8008262:	460b      	mov	r3, r1
 8008264:	717b      	strb	r3, [r7, #5]
 8008266:	4613      	mov	r3, r2
 8008268:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800826a:	79bb      	ldrb	r3, [r7, #6]
 800826c:	011b      	lsls	r3, r3, #4
 800826e:	b2da      	uxtb	r2, r3
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	4413      	add	r3, r2
 8008274:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8008276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008278:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800827a:	793b      	ldrb	r3, [r7, #4]
 800827c:	011b      	lsls	r3, r3, #4
 800827e:	b2da      	uxtb	r2, r3
 8008280:	797b      	ldrb	r3, [r7, #5]
 8008282:	4413      	add	r3, r2
 8008284:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8008286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008288:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800828a:	7d3b      	ldrb	r3, [r7, #20]
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	b2da      	uxtb	r2, r3
 8008290:	7c3b      	ldrb	r3, [r7, #16]
 8008292:	4413      	add	r3, r2
 8008294:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8008296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008298:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800829a:	7f3b      	ldrb	r3, [r7, #28]
 800829c:	011b      	lsls	r3, r3, #4
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	7e3b      	ldrb	r3, [r7, #24]
 80082a2:	4413      	add	r3, r2
 80082a4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 80082a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a8:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 80082aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80082ae:	011b      	lsls	r3, r3, #4
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082b6:	4413      	add	r3, r2
 80082b8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 80082ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082bc:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 80082be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80082c2:	011b      	lsls	r3, r3, #4
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80082ca:	4413      	add	r3, r2
 80082cc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 80082ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d0:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 80082d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d4:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 80082d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d8:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 80082da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082dc:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 80082de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e0:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 80082e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e4:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 80082ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ec:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 80082ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f0:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 80082f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80082f8:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 80082fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80082fe:	011b      	lsls	r3, r3, #4
 8008300:	b2da      	uxtb	r2, r3
 8008302:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008306:	4413      	add	r3, r2
 8008308:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800830e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008310:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8008314:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8008316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008318:	2200      	movs	r2, #0
 800831a:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800831c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831e:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8008320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008322:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8008324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008326:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8008328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832a:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800832c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832e:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008332:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008336:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8008338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833a:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800833c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833e:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8008340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008342:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8008344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008346:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8008348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834a:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800834c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008352:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008356:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800835a:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800835c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835e:	2200      	movs	r2, #0
 8008360:	701a      	strb	r2, [r3, #0]

}
 8008362:	bf00      	nop
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bc90      	pop	{r4, r7}
 800836a:	4770      	bx	lr

0800836c <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 800836c:	b490      	push	{r4, r7}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	4604      	mov	r4, r0
 8008374:	4608      	mov	r0, r1
 8008376:	4611      	mov	r1, r2
 8008378:	461a      	mov	r2, r3
 800837a:	4623      	mov	r3, r4
 800837c:	71fb      	strb	r3, [r7, #7]
 800837e:	4603      	mov	r3, r0
 8008380:	71bb      	strb	r3, [r7, #6]
 8008382:	460b      	mov	r3, r1
 8008384:	717b      	strb	r3, [r7, #5]
 8008386:	4613      	mov	r3, r2
 8008388:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800838a:	79bb      	ldrb	r3, [r7, #6]
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	b2da      	uxtb	r2, r3
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	4413      	add	r3, r2
 8008394:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8008396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008398:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800839a:	793b      	ldrb	r3, [r7, #4]
 800839c:	011b      	lsls	r3, r3, #4
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	797b      	ldrb	r3, [r7, #5]
 80083a2:	4413      	add	r3, r2
 80083a4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 80083a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a8:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 80083aa:	7d3b      	ldrb	r3, [r7, #20]
 80083ac:	011b      	lsls	r3, r3, #4
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	7c3b      	ldrb	r3, [r7, #16]
 80083b2:	4413      	add	r3, r2
 80083b4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 80083b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b8:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 80083ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083bc:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 80083be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c0:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 80083c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c4:	789a      	ldrb	r2, [r3, #2]
 80083c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c8:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 80083ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083cc:	78da      	ldrb	r2, [r3, #3]
 80083ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d0:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 80083d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d4:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 80083da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083dc:	789a      	ldrb	r2, [r3, #2]
 80083de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e0:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 80083e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e4:	78da      	ldrb	r2, [r3, #3]
 80083e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e8:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 80083ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ec:	791a      	ldrb	r2, [r3, #4]
 80083ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f0:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80083f8:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 80083fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	b2da      	uxtb	r2, r3
 8008402:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008406:	4413      	add	r3, r2
 8008408:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800840a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840c:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800840e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008410:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8008414:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8008416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008418:	2200      	movs	r2, #0
 800841a:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800841c:	7f3b      	ldrb	r3, [r7, #28]
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	b2da      	uxtb	r2, r3
 8008422:	7e3b      	ldrb	r3, [r7, #24]
 8008424:	4413      	add	r3, r2
 8008426:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8008428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842a:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800842c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008430:	011b      	lsls	r3, r3, #4
 8008432:	b2da      	uxtb	r2, r3
 8008434:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008438:	4413      	add	r3, r2
 800843a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800843c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843e:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8008440:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008444:	011b      	lsls	r3, r3, #4
 8008446:	b2da      	uxtb	r2, r3
 8008448:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800844c:	4413      	add	r3, r2
 800844e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008452:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 8008454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008456:	7bda      	ldrb	r2, [r3, #15]
 8008458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845a:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	7c1a      	ldrb	r2, [r3, #16]
 8008460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008462:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 8008464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008466:	7c5a      	ldrb	r2, [r3, #17]
 8008468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846a:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800846c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008472:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008476:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800847a:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800847c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847e:	2200      	movs	r2, #0
 8008480:	701a      	strb	r2, [r3, #0]
}
 8008482:	bf00      	nop
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bc90      	pop	{r4, r7}
 800848a:	4770      	bx	lr

0800848c <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 800848c:	b480      	push	{r7}
 800848e:	b087      	sub	sp, #28
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	460b      	mov	r3, r1
 8008496:	607a      	str	r2, [r7, #4]
 8008498:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	220c      	movs	r2, #12
 80084b4:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 80084b6:	897b      	ldrh	r3, [r7, #10]
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	pdata->cal_config__vcsel_start            = 0;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

	pdata->vcsel_width                        = 0;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_015                = 0;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	pdata->zero_distance_phase                = 0;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80084ec:	2300      	movs	r3, #0
 80084ee:	82fb      	strh	r3, [r7, #22]
 80084f0:	e015      	b.n	800851e <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 80084f2:	8afa      	ldrh	r2, [r7, #22]
 80084f4:	897b      	ldrh	r3, [r7, #10]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d207      	bcs.n	800850a <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 80084fa:	8afb      	ldrh	r3, [r7, #22]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	3302      	adds	r3, #2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	605a      	str	r2, [r3, #4]
 8008508:	e006      	b.n	8008518 <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800850a:	8afb      	ldrh	r3, [r7, #22]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	3302      	adds	r3, #2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	2200      	movs	r2, #0
 8008516:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8008518:	8afb      	ldrh	r3, [r7, #22]
 800851a:	3301      	adds	r3, #1
 800851c:	82fb      	strh	r3, [r7, #22]
 800851e:	8afb      	ldrh	r3, [r7, #22]
 8008520:	2b0b      	cmp	r3, #11
 8008522:	d9e6      	bls.n	80084f2 <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop
 8008528:	371c      	adds	r7, #28
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008532:	b480      	push	{r7}
 8008534:	b085      	sub	sp, #20
 8008536:	af00      	add	r7, sp, #0
 8008538:	4603      	mov	r3, r0
 800853a:	603a      	str	r2, [r7, #0]
 800853c:	80fb      	strh	r3, [r7, #6]
 800853e:	460b      	mov	r3, r1
 8008540:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 800854a:	88fb      	ldrh	r3, [r7, #6]
 800854c:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800854e:	2300      	movs	r3, #0
 8008550:	81fb      	strh	r3, [r7, #14]
 8008552:	e00e      	b.n	8008572 <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008554:	88ba      	ldrh	r2, [r7, #4]
 8008556:	89fb      	ldrh	r3, [r7, #14]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	3b01      	subs	r3, #1
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	4413      	add	r3, r2
 8008560:	89ba      	ldrh	r2, [r7, #12]
 8008562:	b2d2      	uxtb	r2, r2
 8008564:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008566:	89bb      	ldrh	r3, [r7, #12]
 8008568:	0a1b      	lsrs	r3, r3, #8
 800856a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800856c:	89fb      	ldrh	r3, [r7, #14]
 800856e:	3301      	adds	r3, #1
 8008570:	81fb      	strh	r3, [r7, #14]
 8008572:	89fa      	ldrh	r2, [r7, #14]
 8008574:	88bb      	ldrh	r3, [r7, #4]
 8008576:	429a      	cmp	r2, r3
 8008578:	d3ec      	bcc.n	8008554 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 800857a:	bf00      	nop
 800857c:	bf00      	nop
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	4603      	mov	r3, r0
 8008590:	6039      	str	r1, [r7, #0]
 8008592:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 8008594:	2300      	movs	r3, #0
 8008596:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008598:	e00a      	b.n	80085b0 <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800859a:	89fb      	ldrh	r3, [r7, #14]
 800859c:	021b      	lsls	r3, r3, #8
 800859e:	b21a      	sxth	r2, r3
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	1c59      	adds	r1, r3, #1
 80085a4:	6039      	str	r1, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	b21b      	sxth	r3, r3
 80085aa:	4313      	orrs	r3, r2
 80085ac:	b21b      	sxth	r3, r3
 80085ae:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 80085b0:	88fb      	ldrh	r3, [r7, #6]
 80085b2:	1e5a      	subs	r2, r3, #1
 80085b4:	80fa      	strh	r2, [r7, #6]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1ef      	bne.n	800859a <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 80085ba:	89fb      	ldrh	r3, [r7, #14]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4603      	mov	r3, r0
 80085d0:	603a      	str	r2, [r7, #0]
 80085d2:	80fb      	strh	r3, [r7, #6]
 80085d4:	460b      	mov	r3, r1
 80085d6:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 80085d8:	2300      	movs	r3, #0
 80085da:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 80085dc:	2300      	movs	r3, #0
 80085de:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 80085e0:	88fb      	ldrh	r3, [r7, #6]
 80085e2:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 80085e4:	2300      	movs	r3, #0
 80085e6:	81fb      	strh	r3, [r7, #14]
 80085e8:	e00f      	b.n	800860a <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80085ea:	88ba      	ldrh	r2, [r7, #4]
 80085ec:	89fb      	ldrh	r3, [r7, #14]
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	3b01      	subs	r3, #1
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	4413      	add	r3, r2
 80085f6:	89ba      	ldrh	r2, [r7, #12]
 80085f8:	b2d2      	uxtb	r2, r2
 80085fa:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80085fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008600:	121b      	asrs	r3, r3, #8
 8008602:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8008604:	89fb      	ldrh	r3, [r7, #14]
 8008606:	3301      	adds	r3, #1
 8008608:	81fb      	strh	r3, [r7, #14]
 800860a:	89fa      	ldrh	r2, [r7, #14]
 800860c:	88bb      	ldrh	r3, [r7, #4]
 800860e:	429a      	cmp	r2, r3
 8008610:	d3eb      	bcc.n	80085ea <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 8008612:	bf00      	nop
 8008614:	bf00      	nop
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	6039      	str	r1, [r7, #0]
 800862a:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800862c:	2300      	movs	r3, #0
 800862e:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	b25b      	sxtb	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	da0e      	bge.n	8008658 <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800863a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800863e:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008640:	e00a      	b.n	8008658 <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8008642:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008646:	021b      	lsls	r3, r3, #8
 8008648:	b21a      	sxth	r2, r3
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	1c59      	adds	r1, r3, #1
 800864e:	6039      	str	r1, [r7, #0]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	b21b      	sxth	r3, r3
 8008654:	4313      	orrs	r3, r2
 8008656:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8008658:	88fb      	ldrh	r3, [r7, #6]
 800865a:	1e5a      	subs	r2, r3, #1
 800865c:	80fa      	strh	r2, [r7, #6]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1ef      	bne.n	8008642 <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 8008662:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008672:	b480      	push	{r7}
 8008674:	b087      	sub	sp, #28
 8008676:	af00      	add	r7, sp, #0
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	460b      	mov	r3, r1
 800867c:	607a      	str	r2, [r7, #4]
 800867e:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 8008680:	2300      	movs	r3, #0
 8008682:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800868c:	2300      	movs	r3, #0
 800868e:	82fb      	strh	r3, [r7, #22]
 8008690:	e00e      	b.n	80086b0 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008692:	897a      	ldrh	r2, [r7, #10]
 8008694:	8afb      	ldrh	r3, [r7, #22]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	3b01      	subs	r3, #1
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	4413      	add	r3, r2
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	b2d2      	uxtb	r2, r2
 80086a2:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	0a1b      	lsrs	r3, r3, #8
 80086a8:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 80086aa:	8afb      	ldrh	r3, [r7, #22]
 80086ac:	3301      	adds	r3, #1
 80086ae:	82fb      	strh	r3, [r7, #22]
 80086b0:	8afa      	ldrh	r2, [r7, #22]
 80086b2:	897b      	ldrh	r3, [r7, #10]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d3ec      	bcc.n	8008692 <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 80086b8:	bf00      	nop
 80086ba:	bf00      	nop
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b085      	sub	sp, #20
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	4603      	mov	r3, r0
 80086ce:	6039      	str	r1, [r7, #0]
 80086d0:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 80086d2:	2300      	movs	r3, #0
 80086d4:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 80086d6:	e007      	b.n	80086e8 <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	021a      	lsls	r2, r3, #8
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	1c59      	adds	r1, r3, #1
 80086e0:	6039      	str	r1, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 80086e8:	88fb      	ldrh	r3, [r7, #6]
 80086ea:	1e5a      	subs	r2, r3, #1
 80086ec:	80fa      	strh	r2, [r7, #6]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1f2      	bne.n	80086d8 <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 80086f2:	68fb      	ldr	r3, [r7, #12]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	6039      	str	r1, [r7, #0]
 800870a:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800870c:	2300      	movs	r3, #0
 800870e:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	b25b      	sxtb	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	da0b      	bge.n	8008732 <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800871a:	f04f 33ff 	mov.w	r3, #4294967295
 800871e:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8008720:	e007      	b.n	8008732 <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	021a      	lsls	r2, r3, #8
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	1c59      	adds	r1, r3, #1
 800872a:	6039      	str	r1, [r7, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8008732:	88fb      	ldrh	r3, [r7, #6]
 8008734:	1e5a      	subs	r2, r3, #1
 8008736:	80fa      	strh	r2, [r7, #6]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1f2      	bne.n	8008722 <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 800873c:	68fb      	ldr	r3, [r7, #12]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b084      	sub	sp, #16
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	460b      	mov	r3, r1
 8008754:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 800875a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d107      	bne.n	8008772 <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 8008762:	78fb      	ldrb	r3, [r7, #3]
 8008764:	461a      	mov	r2, r3
 8008766:	2127      	movs	r1, #39	@ 0x27
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f009 f901 	bl	8011970 <VL53LX_WrByte>
 800876e:	4603      	mov	r3, r0
 8008770:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	460b      	mov	r3, r1
 8008788:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	3318      	adds	r3, #24
 8008792:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	78fa      	ldrb	r2, [r7, #3]
 8008798:	f883 2362 	strb.w	r2, [r3, #866]	@ 0x362

	status = VL53LX_WrByte(
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f893 3362 	ldrb.w	r3, [r3, #866]	@ 0x362
 80087a2:	461a      	mov	r2, r3
 80087a4:	2185      	movs	r1, #133	@ 0x85
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f009 f8e2 	bl	8011970 <VL53LX_WrByte>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 80087b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 80087c8:	2101      	movs	r1, #1
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff ffd7 	bl	800877e <VL53LX_set_firmware_enable_register>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80087d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80087e8:	2300      	movs	r3, #0
 80087ea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 80087ec:	2100      	movs	r1, #0
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7ff ffc5 	bl	800877e <VL53LX_set_firmware_enable_register>
 80087f4:	4603      	mov	r3, r0
 80087f6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80087f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008810:	2300      	movs	r3, #0
 8008812:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	3318      	adds	r3, #24
 8008818:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	78fa      	ldrb	r2, [r7, #3]
 800881e:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360

	status = VL53LX_WrByte(
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8008828:	461a      	mov	r2, r3
 800882a:	2183      	movs	r1, #131	@ 0x83
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f009 f89f 	bl	8011970 <VL53LX_WrByte>
 8008832:	4603      	mov	r3, r0
 8008834:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 8008836:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 800884e:	2101      	movs	r1, #1
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff ffd7 	bl	8008804 <VL53LX_set_powerforce_register>
 8008856:	4603      	mov	r3, r0
 8008858:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800885a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b084      	sub	sp, #16
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800886e:	2300      	movs	r3, #0
 8008870:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 8008872:	2100      	movs	r1, #0
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7ff ffc5 	bl	8008804 <VL53LX_set_powerforce_register>
 800887a:	4603      	mov	r3, r0
 800887c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800887e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008892:	2300      	movs	r3, #0
 8008894:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	3318      	adds	r3, #24
 800889a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2363 	strb.w	r2, [r3, #867]	@ 0x363

	status = VL53LX_WrByte(
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f893 3363 	ldrb.w	r3, [r3, #867]	@ 0x363
 80088aa:	461a      	mov	r2, r3
 80088ac:	2186      	movs	r1, #134	@ 0x86
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f009 f85e 	bl	8011970 <VL53LX_WrByte>
 80088b4:	4603      	mov	r3, r0
 80088b6:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 80088b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	4603      	mov	r3, r0
 80088cc:	460a      	mov	r2, r1
 80088ce:	80fb      	strh	r3, [r7, #6]
 80088d0:	4613      	mov	r3, r2
 80088d2:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 80088dc:	2300      	movs	r3, #0
 80088de:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 80088e0:	88fb      	ldrh	r3, [r7, #6]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f002 ffcf 	bl	800b886 <VL53LX_calc_pll_period_us>
 80088e8:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 80088ea:	797b      	ldrb	r3, [r7, #5]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f003 fbbb 	bl	800c068 <VL53LX_decode_vcsel_period>
 80088f2:	4603      	mov	r3, r0
 80088f4:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	4613      	mov	r3, r2
 80088fa:	00db      	lsls	r3, r3, #3
 80088fc:	4413      	add	r3, r2
 80088fe:	021b      	lsls	r3, r3, #8
 8008900:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	099b      	lsrs	r3, r3, #6
 8008906:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 8008908:	7cfa      	ldrb	r2, [r7, #19]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	fb02 f303 	mul.w	r3, r2, r3
 8008910:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	099b      	lsrs	r3, r3, #6
 8008916:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 8008918:	68fb      	ldr	r3, [r7, #12]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3718      	adds	r7, #24
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8008924:	b480      	push	{r7}
 8008926:	b089      	sub	sp, #36	@ 0x24
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	4608      	mov	r0, r1
 800892e:	4611      	mov	r1, r2
 8008930:	461a      	mov	r2, r3
 8008932:	4603      	mov	r3, r0
 8008934:	817b      	strh	r3, [r7, #10]
 8008936:	460b      	mov	r3, r1
 8008938:	813b      	strh	r3, [r7, #8]
 800893a:	4613      	mov	r3, r2
 800893c:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8008946:	2300      	movs	r3, #0
 8008948:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	011b      	lsls	r3, r3, #4
 8008956:	4a23      	ldr	r2, [pc, #140]	@ (80089e4 <VL53LX_calc_range_ignore_threshold+0xc0>)
 8008958:	fb82 1203 	smull	r1, r2, r2, r3
 800895c:	1192      	asrs	r2, r2, #6
 800895e:	17db      	asrs	r3, r3, #31
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 8008964:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008968:	2b00      	cmp	r3, #0
 800896a:	da03      	bge.n	8008974 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800896c:	897b      	ldrh	r3, [r7, #10]
 800896e:	425b      	negs	r3, r3
 8008970:	b29b      	uxth	r3, r3
 8008972:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 8008974:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	da03      	bge.n	8008984 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800897c:	893b      	ldrh	r3, [r7, #8]
 800897e:	425b      	negs	r3, r3
 8008980:	b29b      	uxth	r3, r3
 8008982:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 8008984:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008988:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800898c:	4413      	add	r3, r2
 800898e:	015b      	lsls	r3, r3, #5
 8008990:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	4a13      	ldr	r2, [pc, #76]	@ (80089e4 <VL53LX_calc_range_ignore_threshold+0xc0>)
 8008996:	fb82 1203 	smull	r1, r2, r2, r3
 800899a:	1192      	asrs	r2, r2, #6
 800899c:	17db      	asrs	r3, r3, #31
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	4413      	add	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 80089aa:	79fa      	ldrb	r2, [r7, #7]
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	fb02 f303 	mul.w	r3, r2, r3
 80089b2:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	3310      	adds	r3, #16
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	da00      	bge.n	80089be <VL53LX_calc_range_ignore_threshold+0x9a>
 80089bc:	331f      	adds	r3, #31
 80089be:	115b      	asrs	r3, r3, #5
 80089c0:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089c8:	db03      	blt.n	80089d2 <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 80089ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80089ce:	83fb      	strh	r3, [r7, #30]
 80089d0:	e001      	b.n	80089d6 <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 80089d6:	8bfb      	ldrh	r3, [r7, #30]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3724      	adds	r7, #36	@ 0x24
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	10624dd3 	.word	0x10624dd3

080089e8 <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d102      	bne.n	8008a02 <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	e008      	b.n	8008a14 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	031a      	lsls	r2, r3, #12
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	085b      	lsrs	r3, r3, #1
 8008a0a:	441a      	add	r2, r3
		timeout_mclks   =
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a12:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8008a14:	68fb      	ldr	r3, [r7, #12]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8008a30:	2300      	movs	r3, #0
 8008a32:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7ff ffd6 	bl	80089e8 <VL53LX_calc_timeout_mclks>
 8008a3c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 f887 	bl	8008b52 <VL53LX_encode_timeout>
 8008a44:	4603      	mov	r3, r0
 8008a46:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8008a48:	897b      	ldrh	r3, [r7, #10]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8008a52:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 8008a5e:	2100      	movs	r1, #0
 8008a60:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	f04f 0100 	mov.w	r1, #0
 8008a6a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	2000      	movs	r0, #0
 8008a72:	4688      	mov	r8, r1
 8008a74:	4681      	mov	r9, r0
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	2000      	movs	r0, #0
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	fb04 f009 	mul.w	r0, r4, r9
 8008a82:	fb08 f105 	mul.w	r1, r8, r5
 8008a86:	4401      	add	r1, r0
 8008a88:	fba8 2304 	umull	r2, r3, r8, r4
 8008a8c:	4419      	add	r1, r3
 8008a8e:	460b      	mov	r3, r1
 8008a90:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008a94:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8008a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a9c:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8008aa0:	f143 0b00 	adc.w	fp, r3, #0
 8008aa4:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 8008aa8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008aac:	f04f 0200 	mov.w	r2, #0
 8008ab0:	f04f 0300 	mov.w	r3, #0
 8008ab4:	0b02      	lsrs	r2, r0, #12
 8008ab6:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8008aba:	0b0b      	lsrs	r3, r1, #12
 8008abc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 8008ac4:	697b      	ldr	r3, [r7, #20]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	371c      	adds	r7, #28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008ad0:	4770      	bx	lr
	...

08008ad4 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 8008ae8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 8008aec:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 8008aee:	4413      	add	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	da02      	bge.n	8008afe <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	e005      	b.n	8008b0a <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b04:	db01      	blt.n	8008b0a <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 8008b06:	4b05      	ldr	r3, [pc, #20]	@ (8008b1c <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 8008b08:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 8008b0e:	68bb      	ldr	r3, [r7, #8]

}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	0003ffff 	.word	0x0003ffff

08008b20 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	6039      	str	r1, [r7, #0]
 8008b2a:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 8008b34:	88fb      	ldrh	r3, [r7, #6]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 f835 	bl	8008ba6 <VL53LX_decode_timeout>
 8008b3c:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f7ff ff86 	bl	8008a52 <VL53LX_calc_timeout_us>
 8008b46:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8008b48:	68bb      	ldr	r3, [r7, #8]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b087      	sub	sp, #28
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008b62:	2300      	movs	r3, #0
 8008b64:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d015      	beq.n	8008b98 <VL53LX_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008b72:	e005      	b.n	8008b80 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	085b      	lsrs	r3, r3, #1
 8008b78:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008b7a:	89fb      	ldrh	r3, [r7, #14]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	2bff      	cmp	r3, #255	@ 0xff
 8008b84:	d8f6      	bhi.n	8008b74 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008b86:	89fb      	ldrh	r3, [r7, #14]
 8008b88:	021b      	lsls	r3, r3, #8
 8008b8a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008b94:	4413      	add	r3, r2
 8008b96:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008b98:	8afb      	ldrh	r3, [r7, #22]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	371c      	adds	r7, #28
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b085      	sub	sp, #20
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	4603      	mov	r3, r0
 8008bae:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008bb4:	88fb      	ldrh	r3, [r7, #6]
 8008bb6:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008bb8:	88fa      	ldrh	r2, [r7, #6]
 8008bba:	0a12      	lsrs	r2, r2, #8
 8008bbc:	b292      	uxth	r2, r2
 8008bbe:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b088      	sub	sp, #32
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	60b9      	str	r1, [r7, #8]
 8008bdc:	607a      	str	r2, [r7, #4]
 8008bde:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008be0:	2300      	movs	r3, #0
 8008be2:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8008bf0:	887b      	ldrh	r3, [r7, #2]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d102      	bne.n	8008bfc <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8008bf6:	23f1      	movs	r3, #241	@ 0xf1
 8008bf8:	77fb      	strb	r3, [r7, #31]
 8008bfa:	e05d      	b.n	8008cb8 <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 8008bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfe:	799a      	ldrb	r2, [r3, #6]
 8008c00:	887b      	ldrh	r3, [r7, #2]
 8008c02:	4611      	mov	r1, r2
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7ff fe5d 	bl	80088c4 <VL53LX_calc_macro_period_us>
 8008c0a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 8008c0c:	6979      	ldr	r1, [r7, #20]
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f7ff feea 	bl	80089e8 <VL53LX_calc_timeout_mclks>
 8008c14:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	2bff      	cmp	r3, #255	@ 0xff
 8008c1a:	d901      	bls.n	8008c20 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8008c1c:	23ff      	movs	r3, #255	@ 0xff
 8008c1e:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8008c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c26:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008c28:	6979      	ldr	r1, [r7, #20]
 8008c2a:	68b8      	ldr	r0, [r7, #8]
 8008c2c:	f7ff fef9 	bl	8008a22 <VL53LX_calc_encoded_timeout>
 8008c30:	4603      	mov	r3, r0
 8008c32:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008c34:	8a7b      	ldrh	r3, [r7, #18]
 8008c36:	0a1b      	lsrs	r3, r3, #8
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8008c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008c40:	8a7b      	ldrh	r3, [r7, #18]
 8008c42:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8008c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c46:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008c48:	6979      	ldr	r1, [r7, #20]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff fee9 	bl	8008a22 <VL53LX_calc_encoded_timeout>
 8008c50:	4603      	mov	r3, r0
 8008c52:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008c54:	8a7b      	ldrh	r3, [r7, #18]
 8008c56:	0a1b      	lsrs	r3, r3, #8
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8008c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008c60:	8a7b      	ldrh	r3, [r7, #18]
 8008c62:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8008c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c66:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 8008c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6a:	7a5a      	ldrb	r2, [r3, #9]
 8008c6c:	887b      	ldrh	r3, [r7, #2]
 8008c6e:	4611      	mov	r1, r2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7ff fe27 	bl	80088c4 <VL53LX_calc_macro_period_us>
 8008c76:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 8008c78:	6979      	ldr	r1, [r7, #20]
 8008c7a:	68b8      	ldr	r0, [r7, #8]
 8008c7c:	f7ff fed1 	bl	8008a22 <VL53LX_calc_encoded_timeout>
 8008c80:	4603      	mov	r3, r0
 8008c82:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008c84:	8a7b      	ldrh	r3, [r7, #18]
 8008c86:	0a1b      	lsrs	r3, r3, #8
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8008c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c8e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008c90:	8a7b      	ldrh	r3, [r7, #18]
 8008c92:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8008c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c96:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 8008c98:	6979      	ldr	r1, [r7, #20]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7ff fec1 	bl	8008a22 <VL53LX_calc_encoded_timeout>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008ca4:	8a7b      	ldrh	r3, [r7, #18]
 8008ca6:	0a1b      	lsrs	r3, r3, #8
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8008cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cae:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008cb0:	8a7b      	ldrh	r3, [r7, #18]
 8008cb2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8008cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb6:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8008cb8:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3720      	adds	r7, #32
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8008cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cc8:	b09e      	sub	sp, #120	@ 0x78
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6578      	str	r0, [r7, #84]	@ 0x54
 8008cce:	6539      	str	r1, [r7, #80]	@ 0x50


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	int64_t  evts              = 0;
 8008cd6:	f04f 0200 	mov.w	r2, #0
 8008cda:	f04f 0300 	mov.w	r3, #0
 8008cde:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	int64_t  tmpi              = 0;
 8008ce2:	f04f 0200 	mov.w	r2, #0
 8008ce6:	f04f 0300 	mov.w	r3, #0
 8008cea:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	int64_t  tmpo              = 0;
 8008cee:	f04f 0200 	mov.w	r2, #0
 8008cf2:	f04f 0300 	mov.w	r3, #0
 8008cf6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 8008cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cfc:	885b      	ldrh	r3, [r3, #2]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8008d02:	23f1      	movs	r3, #241	@ 0xf1
 8008d04:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8008d08:	e0d6      	b.n	8008eb8 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 8008d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d0c:	785b      	ldrb	r3, [r3, #1]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 80d2 	beq.w	8008eb8 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 8008d14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d16:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f040 80cd 	bne.w	8008eb8 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8008d1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d24:	2200      	movs	r2, #0
 8008d26:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d28:	647a      	str	r2, [r7, #68]	@ 0x44
 8008d2a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008d2e:	460b      	mov	r3, r1
 8008d30:	3301      	adds	r3, #1
 8008d32:	623b      	str	r3, [r7, #32]
 8008d34:	4613      	mov	r3, r2
 8008d36:	f143 0300 	adc.w	r3, r3, #0
 8008d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d3c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d40:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 8008d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d46:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d50:	64fa      	str	r2, [r7, #76]	@ 0x4c
			tmpo   *=
 8008d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d54:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8008d58:	4602      	mov	r2, r0
 8008d5a:	fb02 f203 	mul.w	r2, r2, r3
 8008d5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d60:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 8008d64:	fb01 f303 	mul.w	r3, r1, r3
 8008d68:	441a      	add	r2, r3
 8008d6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d6c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008d6e:	fba3 4501 	umull	r4, r5, r3, r1
 8008d72:	1953      	adds	r3, r2, r5
 8008d74:	461d      	mov	r5, r3
 8008d76:	e9c7 4516 	strd	r4, r5, [r7, #88]	@ 0x58
 8008d7a:	e9c7 4516 	strd	r4, r5, [r7, #88]	@ 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8008d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	2200      	movs	r2, #0
 8008d84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d86:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008d88:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	3301      	adds	r3, #1
 8008d90:	61bb      	str	r3, [r7, #24]
 8008d92:	4613      	mov	r3, r2
 8008d94:	f143 0300 	adc.w	r3, r3, #0
 8008d98:	61fb      	str	r3, [r7, #28]
 8008d9a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008d9e:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 8008da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008da4:	885b      	ldrh	r3, [r3, #2]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	2200      	movs	r2, #0
 8008daa:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dac:	637a      	str	r2, [r7, #52]	@ 0x34
			tmpi   *=
 8008dae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008db0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008db4:	4622      	mov	r2, r4
 8008db6:	fb02 f203 	mul.w	r2, r2, r3
 8008dba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	fb01 f303 	mul.w	r3, r1, r3
 8008dc2:	441a      	add	r2, r3
 8008dc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	fba3 ab01 	umull	sl, fp, r3, r1
 8008dcc:	eb02 030b 	add.w	r3, r2, fp
 8008dd0:	469b      	mov	fp, r3
 8008dd2:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 8008dd6:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8008dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	17da      	asrs	r2, r3, #31
 8008de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008de2:	62fa      	str	r2, [r7, #44]	@ 0x2c
			evts  = tmpo *
 8008de4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008de6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8008dea:	4622      	mov	r2, r4
 8008dec:	fb02 f203 	mul.w	r2, r2, r3
 8008df0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008df2:	4629      	mov	r1, r5
 8008df4:	fb01 f303 	mul.w	r3, r1, r3
 8008df8:	4413      	add	r3, r2
 8008dfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	fba2 8901 	umull	r8, r9, r2, r1
 8008e02:	444b      	add	r3, r9
 8008e04:	4699      	mov	r9, r3
 8008e06:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
 8008e0a:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
			evts += (tmpi/2);
 8008e0e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008e12:	0fd9      	lsrs	r1, r3, #31
 8008e14:	2000      	movs	r0, #0
 8008e16:	6139      	str	r1, [r7, #16]
 8008e18:	6178      	str	r0, [r7, #20]
 8008e1a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008e1e:	4621      	mov	r1, r4
 8008e20:	1889      	adds	r1, r1, r2
 8008e22:	60b9      	str	r1, [r7, #8]
 8008e24:	4629      	mov	r1, r5
 8008e26:	eb43 0101 	adc.w	r1, r3, r1
 8008e2a:	60f9      	str	r1, [r7, #12]
 8008e2c:	f04f 0200 	mov.w	r2, #0
 8008e30:	f04f 0300 	mov.w	r3, #0
 8008e34:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008e38:	4621      	mov	r1, r4
 8008e3a:	084a      	lsrs	r2, r1, #1
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8008e42:	4629      	mov	r1, r5
 8008e44:	104b      	asrs	r3, r1, #1
 8008e46:	4610      	mov	r0, r2
 8008e48:	4619      	mov	r1, r3
 8008e4a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008e4e:	1814      	adds	r4, r2, r0
 8008e50:	603c      	str	r4, [r7, #0]
 8008e52:	414b      	adcs	r3, r1
 8008e54:	607b      	str	r3, [r7, #4]
 8008e56:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008e5a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68


			if (tmpi != 0)
 8008e5e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008e62:	4313      	orrs	r3, r2
 8008e64:	d009      	beq.n	8008e7a <VL53LX_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 8008e66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008e6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008e6e:	f7f7 f9d7 	bl	8000220 <__aeabi_ldivmod>
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

			podata->ambient_events_sum = (int32_t)evts;
 8008e7a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008e7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e7e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 8008e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e84:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			podata->VL53LX_p_028 =
 8008e88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e8a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 +=
 8008e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8008e94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e96:	7852      	ldrb	r2, [r2, #1]
 8008e98:	0852      	lsrs	r2, r2, #1
 8008e9a:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 8008e9c:	441a      	add	r2, r3
 8008e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ea0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 /=
 8008ea4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ea6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8008eaa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008eac:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8008eae:	fb93 f2f2 	sdiv	r2, r3, r2
 8008eb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008eb4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8008eb8:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3778      	adds	r7, #120	@ 0x78
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008ec6 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b087      	sub	sp, #28
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3318      	adds	r3, #24
 8008ed4:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	@ 0x2fa
	amb_thresh_low  = 1024 *
 8008ee8:	029b      	lsls	r3, r3, #10
 8008eea:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	@ 0x2fc
	amb_thresh_high = 1024 *
 8008ef2:	029b      	lsls	r3, r3, #10
 8008ef4:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f040 8095 	bne.w	8009030 <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	f893 32ed 	ldrb.w	r3, [r3, #749]	@ 0x2ed
		pdata->bin_seq[5] =
 8008f0c:	091b      	lsrs	r3, r3, #4
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	f893 32ed 	ldrb.w	r3, [r3, #749]	@ 0x2ed
 8008f1a:	f003 030f 	and.w	r3, r3, #15
 8008f1e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f893 32ec 	ldrb.w	r3, [r3, #748]	@ 0x2ec
		pdata->bin_seq[3] =
 8008f2a:	091b      	lsrs	r3, r3, #4
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f893 32ec 	ldrb.w	r3, [r3, #748]	@ 0x2ec
 8008f38:	f003 030f 	and.w	r3, r3, #15
 8008f3c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f893 32eb 	ldrb.w	r3, [r3, #747]	@ 0x2eb
		pdata->bin_seq[1] =
 8008f48:	091b      	lsrs	r3, r3, #4
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f893 32eb 	ldrb.w	r3, [r3, #747]	@ 0x2eb
 8008f56:	f003 030f 	and.w	r3, r3, #15
 8008f5a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	da2c      	bge.n	8008fc6 <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f893 32f5 	ldrb.w	r3, [r3, #757]	@ 0x2f5
			pdata->bin_seq[5] =
 8008f72:	091b      	lsrs	r3, r3, #4
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f893 32f5 	ldrb.w	r3, [r3, #757]	@ 0x2f5
			& 0x0F;
 8008f80:	f003 030f 	and.w	r3, r3, #15
 8008f84:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
			pdata->bin_seq[3] =
 8008f90:	091b      	lsrs	r3, r3, #4
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
			& 0x0F;
 8008f9e:	f003 030f 	and.w	r3, r3, #15
 8008fa2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f893 32f3 	ldrb.w	r3, [r3, #755]	@ 0x2f3
			pdata->bin_seq[1] =
 8008fae:	091b      	lsrs	r3, r3, #4
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	f893 32f3 	ldrb.w	r3, [r3, #755]	@ 0x2f3
			& 0x0F;
 8008fbc:	f003 030f 	and.w	r3, r3, #15
 8008fc0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	f340 80c2 	ble.w	8009158 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f893 32e7 	ldrb.w	r3, [r3, #743]	@ 0x2e7
			pdata->bin_seq[5] =
 8008fda:	091b      	lsrs	r3, r3, #4
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	f893 32e7 	ldrb.w	r3, [r3, #743]	@ 0x2e7
			& 0x0F;
 8008fe8:	f003 030f 	and.w	r3, r3, #15
 8008fec:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
			pdata->bin_seq[3] =
 8008ff8:	091b      	lsrs	r3, r3, #4
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
			& 0x0F;
 8009006:	f003 030f 	and.w	r3, r3, #15
 800900a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
			pdata->bin_seq[1] =
 8009016:	091b      	lsrs	r3, r3, #4
 8009018:	b2da      	uxtb	r2, r3
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
			& 0x0F;
 8009024:	f003 030f 	and.w	r3, r3, #15
 8009028:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	731a      	strb	r2, [r3, #12]
 800902e:	e093      	b.n	8009158 <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	f893 32f1 	ldrb.w	r3, [r3, #753]	@ 0x2f1
			& 0x0F;
 8009036:	f003 030f 	and.w	r3, r3, #15
 800903a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
			& 0x0F;
 8009046:	f003 030f 	and.w	r3, r3, #15
 800904a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
		pdata->bin_seq[3] =
 8009056:	091b      	lsrs	r3, r3, #4
 8009058:	b2da      	uxtb	r2, r3
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	f893 32ef 	ldrb.w	r3, [r3, #751]	@ 0x2ef
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f893 32ee 	ldrb.w	r3, [r3, #750]	@ 0x2ee
		pdata->bin_seq[1] =
 8009074:	091b      	lsrs	r3, r3, #4
 8009076:	b2da      	uxtb	r2, r3
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f893 32ee 	ldrb.w	r3, [r3, #750]	@ 0x2ee
			& 0x0F;
 8009082:	f003 030f 	and.w	r3, r3, #15
 8009086:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	429a      	cmp	r2, r3
 8009096:	da2c      	bge.n	80090f2 <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
			pdata->bin_seq[5] =
 800909e:	091b      	lsrs	r3, r3, #4
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
			& 0x0F;
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	f893 32f7 	ldrb.w	r3, [r3, #759]	@ 0x2f7
			pdata->bin_seq[3] =
 80090bc:	091b      	lsrs	r3, r3, #4
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f893 32f7 	ldrb.w	r3, [r3, #759]	@ 0x2f7
			& 0x0F;
 80090ca:	f003 030f 	and.w	r3, r3, #15
 80090ce:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f893 32f6 	ldrb.w	r3, [r3, #758]	@ 0x2f6
			pdata->bin_seq[1] =
 80090da:	091b      	lsrs	r3, r3, #4
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f893 32f6 	ldrb.w	r3, [r3, #758]	@ 0x2f6
			& 0x0F;
 80090e8:	f003 030f 	and.w	r3, r3, #15
 80090ec:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	dd2c      	ble.n	8009158 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	f893 32ea 	ldrb.w	r3, [r3, #746]	@ 0x2ea
			pdata->bin_seq[5] =
 8009104:	091b      	lsrs	r3, r3, #4
 8009106:	b2da      	uxtb	r2, r3
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f893 32ea 	ldrb.w	r3, [r3, #746]	@ 0x2ea
			& 0x0F;
 8009112:	f003 030f 	and.w	r3, r3, #15
 8009116:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
			pdata->bin_seq[3] =
 8009122:	091b      	lsrs	r3, r3, #4
 8009124:	b2da      	uxtb	r2, r3
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
			& 0x0F;
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
			pdata->bin_seq[1] =
 8009140:	091b      	lsrs	r3, r3, #4
 8009142:	b2da      	uxtb	r2, r3
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
			& 0x0F;
 800914e:	f003 030f 	and.w	r3, r3, #15
 8009152:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8009158:	2300      	movs	r3, #0
 800915a:	75fb      	strb	r3, [r7, #23]
 800915c:	e007      	b.n	800916e <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800915e:	7dfb      	ldrb	r3, [r7, #23]
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	4413      	add	r3, r2
 8009164:	2201      	movs	r2, #1
 8009166:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8009168:	7dfb      	ldrb	r3, [r7, #23]
 800916a:	3301      	adds	r3, #1
 800916c:	75fb      	strb	r3, [r7, #23]
 800916e:	7dfb      	ldrb	r3, [r7, #23]
 8009170:	2b05      	cmp	r3, #5
 8009172:	d9f4      	bls.n	800915e <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	371c      	adds	r7, #28
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 8009182:	b590      	push	{r4, r7, lr}
 8009184:	b093      	sub	sp, #76	@ 0x4c
 8009186:	af04      	add	r7, sp, #16
 8009188:	60f8      	str	r0, [r7, #12]
 800918a:	60b9      	str	r1, [r7, #8]
 800918c:	607a      	str	r2, [r7, #4]
 800918e:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009190:	2300      	movs	r3, #0
 8009192:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_LLDriverData_t *pdev =
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3318      	adds	r3, #24
 800919a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800919c:	2300      	movs	r3, #0
 800919e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t   p = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	uint16_t  phase_delta      = 0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t  phase_tolerance  = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	857b      	strh	r3, [r7, #42]	@ 0x2a

	int32_t   events_delta     = 0;
 80091b0:	2300      	movs	r3, #0
 80091b2:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 80091b4:	2300      	movs	r3, #0
 80091b6:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 80091b8:	2300      	movs	r3, #0
 80091ba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 80091bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091be:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80091c2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 80091c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c8:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 80091cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 80091ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d0:	f8b3 323a 	ldrh.w	r3, [r3, #570]	@ 0x23a
 80091d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 80091d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d8:	f893 3236 	ldrb.w	r3, [r3, #566]	@ 0x236
 80091dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	phase_tolerance = (uint16_t)pht;
 80091e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80091e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
	phase_tolerance = phase_tolerance << 8;
 80091e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80091e8:	021b      	lsls	r3, r3, #8
 80091ea:	857b      	strh	r3, [r7, #42]	@ 0x2a



	if (prange_prev->rd_device_state !=
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	785b      	ldrb	r3, [r3, #1]
 80091f0:	2b07      	cmp	r3, #7
 80091f2:	d006      	beq.n	8009202 <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 80091f8:	2b08      	cmp	r3, #8
 80091fa:	d002      	beq.n	8009202 <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 80091fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8009200:	e0ec      	b.n	80093dc <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 8009202:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009204:	2b00      	cmp	r3, #0
 8009206:	d102      	bne.n	800920e <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 8009208:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800920c:	e0e6      	b.n	80093dc <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800920e:	2300      	movs	r3, #0
 8009210:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8009214:	e0d9      	b.n	80093ca <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8009216:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	214c      	movs	r1, #76	@ 0x4c
 800921e:	fb01 f303 	mul.w	r3, r1, r3
 8009222:	4413      	add	r3, r2
 8009224:	335e      	adds	r3, #94	@ 0x5e
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b09      	cmp	r3, #9
 800922a:	d00b      	beq.n	8009244 <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 800922c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	214c      	movs	r1, #76	@ 0x4c
 8009234:	fb01 f303 	mul.w	r3, r1, r3
 8009238:	4413      	add	r3, r2
 800923a:	335e      	adds	r3, #94	@ 0x5e
 800923c:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 800923e:	2b13      	cmp	r3, #19
 8009240:	f040 80bd 	bne.w	80093be <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	795b      	ldrb	r3, [r3, #5]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10a      	bne.n	8009262 <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 800924c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	214c      	movs	r1, #76	@ 0x4c
 8009254:	fb01 f303 	mul.w	r3, r1, r3
 8009258:	4413      	add	r3, r2
 800925a:	335e      	adds	r3, #94	@ 0x5e
 800925c:	2217      	movs	r2, #23
 800925e:	701a      	strb	r2, [r3, #0]
 8009260:	e009      	b.n	8009276 <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 8009262:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	214c      	movs	r1, #76	@ 0x4c
 800926a:	fb01 f303 	mul.w	r3, r1, r3
 800926e:	4413      	add	r3, r2
 8009270:	335e      	adds	r3, #94	@ 0x5e
 8009272:	2207      	movs	r2, #7
 8009274:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 8009276:	2300      	movs	r3, #0
 8009278:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800927c:	e097      	b.n	80093ae <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 800927e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	214c      	movs	r1, #76	@ 0x4c
 8009286:	fb01 f303 	mul.w	r3, r1, r3
 800928a:	4413      	add	r3, r2
 800928c:	3354      	adds	r3, #84	@ 0x54
 800928e:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8009290:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	4613      	mov	r3, r2
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	4413      	add	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4403      	add	r3, r0
 80092a0:	3310      	adds	r3, #16
 80092a2:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 80092a4:	4299      	cmp	r1, r3
 80092a6:	d915      	bls.n	80092d4 <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 80092a8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	214c      	movs	r1, #76	@ 0x4c
 80092b0:	fb01 f303 	mul.w	r3, r1, r3
 80092b4:	4413      	add	r3, r2
 80092b6:	3354      	adds	r3, #84	@ 0x54
 80092b8:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 80092ba:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	4613      	mov	r3, r2
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4403      	add	r3, r0
 80092ca:	3310      	adds	r3, #16
 80092cc:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 80092ce:	1acb      	subs	r3, r1, r3
 80092d0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80092d2:	e014      	b.n	80092fe <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 80092d4:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 80092d8:	6879      	ldr	r1, [r7, #4]
 80092da:	4613      	mov	r3, r2
 80092dc:	005b      	lsls	r3, r3, #1
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	440b      	add	r3, r1
 80092e4:	3310      	adds	r3, #16
 80092e6:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 80092e8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	204c      	movs	r0, #76	@ 0x4c
 80092f0:	fb00 f303 	mul.w	r3, r0, r3
 80092f4:	440b      	add	r3, r1
 80092f6:	3354      	adds	r3, #84	@ 0x54
 80092f8:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	867b      	strh	r3, [r7, #50]	@ 0x32
			}

			if (phase_delta < phase_tolerance) {
 80092fe:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8009300:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009302:	429a      	cmp	r2, r3
 8009304:	d24e      	bcs.n	80093a4 <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 8009306:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800930a:	2b00      	cmp	r3, #0
 800930c:	d125      	bne.n	800935a <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 800930e:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
					VL53LX_hist_events_consistency_check(
 8009312:	4613      	mov	r3, r2
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	4413      	add	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	3308      	adds	r3, #8
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 8009320:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_events_consistency_check(
 8009324:	224c      	movs	r2, #76	@ 0x4c
 8009326:	fb02 f303 	mul.w	r3, r2, r3
 800932a:	3310      	adds	r3, #16
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	4413      	add	r3, r2
 8009330:	3304      	adds	r3, #4
 8009332:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8009334:	f897 0029 	ldrb.w	r0, [r7, #41]	@ 0x29
 8009338:	f107 0217 	add.w	r2, r7, #23
 800933c:	9203      	str	r2, [sp, #12]
 800933e:	f107 021c 	add.w	r2, r7, #28
 8009342:	9202      	str	r2, [sp, #8]
 8009344:	f107 0218 	add.w	r2, r7, #24
 8009348:	9201      	str	r2, [sp, #4]
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	4623      	mov	r3, r4
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	f000 f848 	bl	80093e4 <VL53LX_hist_events_consistency_check>
 8009354:	4603      	mov	r3, r0
 8009356:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 800935a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800935e:	2b00      	cmp	r3, #0
 8009360:	d115      	bne.n	800938e <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 8009362:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 8009364:	2b09      	cmp	r3, #9
 8009366:	d112      	bne.n	800938e <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 8009368:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 800936c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_merged_pulse_check(
 8009370:	224c      	movs	r2, #76	@ 0x4c
 8009372:	fb02 f303 	mul.w	r3, r2, r3
 8009376:	3310      	adds	r3, #16
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	4413      	add	r3, r2
 800937c:	3304      	adds	r3, #4
 800937e:	f107 0217 	add.w	r2, r7, #23
 8009382:	4619      	mov	r1, r3
 8009384:	f000 fb44 	bl	8009a10 <VL53LX_hist_merged_pulse_check>
 8009388:	4603      	mov	r3, r0
 800938a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 800938e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009392:	7df8      	ldrb	r0, [r7, #23]
 8009394:	683a      	ldr	r2, [r7, #0]
 8009396:	214c      	movs	r1, #76	@ 0x4c
 8009398:	fb01 f303 	mul.w	r3, r1, r3
 800939c:	4413      	add	r3, r2
 800939e:	335e      	adds	r3, #94	@ 0x5e
 80093a0:	4602      	mov	r2, r0
 80093a2:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 80093a4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80093a8:	3301      	adds	r3, #1
 80093aa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	795b      	ldrb	r3, [r3, #5]
 80093b2:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 80093b6:	429a      	cmp	r2, r3
 80093b8:	f4ff af61 	bcc.w	800927e <VL53LX_hist_phase_consistency_check+0xfc>
 80093bc:	e000      	b.n	80093c0 <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 80093be:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 80093c0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80093c4:	3301      	adds	r3, #1
 80093c6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	7c9b      	ldrb	r3, [r3, #18]
 80093ce:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80093d2:	429a      	cmp	r2, r3
 80093d4:	f4ff af1f 	bcc.w	8009216 <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 80093d8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80093dc:	4618      	mov	r0, r3
 80093de:	373c      	adds	r7, #60	@ 0x3c
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd90      	pop	{r4, r7, pc}

080093e4 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 80093e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093e8:	b0d4      	sub	sp, #336	@ 0x150
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80093f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80093f4:	4603      	mov	r3, r0
 80093f6:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 80093fa:	460b      	mov	r3, r1
 80093fc:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009400:	2300      	movs	r3, #0
 8009402:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	int64_t   tmpp                   = 0;
 8009406:	f04f 0200 	mov.w	r2, #0
 800940a:	f04f 0300 	mov.w	r3, #0
 800940e:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	int64_t   tmpc                   = 0;
 8009412:	f04f 0200 	mov.w	r2, #0
 8009416:	f04f 0300 	mov.w	r3, #0
 800941a:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	int64_t   events_scaler          = 0;
 800941e:	f04f 0200 	mov.w	r2, #0
 8009422:	f04f 0300 	mov.w	r3, #0
 8009426:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	int64_t   events_scaler_sq       = 0;
 800942a:	f04f 0200 	mov.w	r2, #0
 800942e:	f04f 0300 	mov.w	r3, #0
 8009432:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	int64_t   c_signal_events        = 0;
 8009436:	f04f 0200 	mov.w	r2, #0
 800943a:	f04f 0300 	mov.w	r3, #0
 800943e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	int64_t   c_sig_noise_sq         = 0;
 8009442:	f04f 0200 	mov.w	r2, #0
 8009446:	f04f 0300 	mov.w	r3, #0
 800944a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	int64_t   c_amb_noise_sq         = 0;
 800944e:	f04f 0200 	mov.w	r2, #0
 8009452:	f04f 0300 	mov.w	r3, #0
 8009456:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	int64_t   p_amb_noise_sq         = 0;
 800945a:	f04f 0200 	mov.w	r2, #0
 800945e:	f04f 0300 	mov.w	r3, #0
 8009462:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108

	int32_t   p_signal_events        = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	uint32_t  noise_sq_sum           = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100



	if (event_sigma == 0) {
 8009472:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8009476:	2b00      	cmp	r3, #0
 8009478:	d106      	bne.n	8009488 <VL53LX_hist_events_consistency_check+0xa4>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800947a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800947e:	2209      	movs	r2, #9
 8009480:	701a      	strb	r2, [r3, #0]
		return status;
 8009482:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8009486:	e2bd      	b.n	8009a04 <VL53LX_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 8009488:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	2200      	movs	r2, #0
 8009490:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009494:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8009498:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800949c:	460b      	mov	r3, r1
 800949e:	3301      	adds	r3, #1
 80094a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094a4:	4613      	mov	r3, r2
 80094a6:	f143 0300 	adc.w	r3, r3, #0
 80094aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094ae:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80094b2:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 80094b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80094ba:	885b      	ldrh	r3, [r3, #2]
 80094bc:	b29b      	uxth	r3, r3
 80094be:	2200      	movs	r2, #0
 80094c0:	469a      	mov	sl, r3
 80094c2:	4693      	mov	fp, r2
 80094c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80094c8:	fb0a f203 	mul.w	r2, sl, r3
 80094cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80094d0:	fb0b f303 	mul.w	r3, fp, r3
 80094d4:	441a      	add	r2, r3
 80094d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80094da:	fba3 450a 	umull	r4, r5, r3, sl
 80094de:	1953      	adds	r3, r2, r5
 80094e0:	461d      	mov	r5, r3
 80094e2:	e9c7 454e 	strd	r4, r5, [r7, #312]	@ 0x138
 80094e6:	e9c7 454e 	strd	r4, r5, [r7, #312]	@ 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 80094ea:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80094f6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80094fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80094fe:	460b      	mov	r3, r1
 8009500:	3301      	adds	r3, #1
 8009502:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009506:	4613      	mov	r3, r2
 8009508:	f143 0300 	adc.w	r3, r3, #0
 800950c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009510:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8009514:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 8009518:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800951c:	8adb      	ldrh	r3, [r3, #22]
 800951e:	b29b      	uxth	r3, r3
 8009520:	2200      	movs	r2, #0
 8009522:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009526:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800952a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800952e:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8009532:	4622      	mov	r2, r4
 8009534:	fb02 f203 	mul.w	r2, r2, r3
 8009538:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800953c:	4629      	mov	r1, r5
 800953e:	fb01 f303 	mul.w	r3, r1, r3
 8009542:	441a      	add	r2, r3
 8009544:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009548:	4621      	mov	r1, r4
 800954a:	fba3 8901 	umull	r8, r9, r3, r1
 800954e:	eb02 0309 	add.w	r3, r2, r9
 8009552:	4699      	mov	r9, r3
 8009554:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130
 8009558:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130



	events_scaler  = tmpp * 4096;
 800955c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8009560:	f04f 0000 	mov.w	r0, #0
 8009564:	f04f 0100 	mov.w	r1, #0
 8009568:	0319      	lsls	r1, r3, #12
 800956a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800956e:	0310      	lsls	r0, r2, #12
 8009570:	e9c7 0152 	strd	r0, r1, [r7, #328]	@ 0x148
	if (tmpc != 0) {
 8009574:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8009578:	4313      	orrs	r3, r2
 800957a:	d035      	beq.n	80095e8 <VL53LX_hist_events_consistency_check+0x204>
		events_scaler += (tmpc/2);
 800957c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8009580:	0fd9      	lsrs	r1, r3, #31
 8009582:	2000      	movs	r0, #0
 8009584:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8009588:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800958c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8009590:	4621      	mov	r1, r4
 8009592:	1889      	adds	r1, r1, r2
 8009594:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8009598:	4629      	mov	r1, r5
 800959a:	eb43 0101 	adc.w	r1, r3, r1
 800959e:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 80095a2:	f04f 0200 	mov.w	r2, #0
 80095a6:	f04f 0300 	mov.w	r3, #0
 80095aa:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80095ae:	4621      	mov	r1, r4
 80095b0:	084a      	lsrs	r2, r1, #1
 80095b2:	4629      	mov	r1, r5
 80095b4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80095b8:	4629      	mov	r1, r5
 80095ba:	104b      	asrs	r3, r1, #1
 80095bc:	4610      	mov	r0, r2
 80095be:	4619      	mov	r1, r3
 80095c0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80095c4:	1814      	adds	r4, r2, r0
 80095c6:	67bc      	str	r4, [r7, #120]	@ 0x78
 80095c8:	414b      	adcs	r3, r1
 80095ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80095cc:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80095d0:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
		events_scaler  = do_division_s(events_scaler, tmpc);
 80095d4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80095d8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80095dc:	f7f6 fe20 	bl	8000220 <__aeabi_ldivmod>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	}

	events_scaler_sq  = events_scaler * events_scaler;
 80095e8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80095ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80095f0:	fb03 f102 	mul.w	r1, r3, r2
 80095f4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80095f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80095fc:	fb02 f303 	mul.w	r3, r2, r3
 8009600:	18ca      	adds	r2, r1, r3
 8009602:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8009606:	fba3 1303 	umull	r1, r3, r3, r3
 800960a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800960e:	460b      	mov	r3, r1
 8009610:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009614:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009618:	18d3      	adds	r3, r2, r3
 800961a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800961e:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 8009622:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
 8009626:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	events_scaler_sq += 2048;
 800962a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800962e:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 8009632:	6739      	str	r1, [r7, #112]	@ 0x70
 8009634:	f143 0300 	adc.w	r3, r3, #0
 8009638:	677b      	str	r3, [r7, #116]	@ 0x74
 800963a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 800963e:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	events_scaler_sq /= 4096;
 8009642:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8009646:	2b00      	cmp	r3, #0
 8009648:	da08      	bge.n	800965c <VL53LX_hist_events_consistency_check+0x278>
 800964a:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800964e:	1851      	adds	r1, r2, r1
 8009650:	66b9      	str	r1, [r7, #104]	@ 0x68
 8009652:	f143 0300 	adc.w	r3, r3, #0
 8009656:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009658:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800965c:	f04f 0000 	mov.w	r0, #0
 8009660:	f04f 0100 	mov.w	r1, #0
 8009664:	0b10      	lsrs	r0, r2, #12
 8009666:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800966a:	1319      	asrs	r1, r3, #12
 800966c:	e9c7 014a 	strd	r0, r1, [r7, #296]	@ 0x128



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 8009670:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8009674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009676:	2200      	movs	r2, #0
 8009678:	663b      	str	r3, [r7, #96]	@ 0x60
 800967a:	667a      	str	r2, [r7, #100]	@ 0x64
 800967c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 8009680:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 8009684:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8009688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968a:	2200      	movs	r2, #0
 800968c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009690:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8009694:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009698:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800969c:	4621      	mov	r1, r4
 800969e:	1a51      	subs	r1, r2, r1
 80096a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80096a2:	4629      	mov	r1, r5
 80096a4:	eb63 0301 	sbc.w	r3, r3, r1
 80096a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096aa:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80096ae:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events *= (int64_t)events_scaler;
 80096b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80096b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80096ba:	fb03 f102 	mul.w	r1, r3, r2
 80096be:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80096c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80096c6:	fb02 f303 	mul.w	r3, r2, r3
 80096ca:	4419      	add	r1, r3
 80096cc:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80096d0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80096d4:	fba2 2303 	umull	r2, r3, r2, r3
 80096d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80096dc:	4613      	mov	r3, r2
 80096de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80096e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096e6:	18cb      	adds	r3, r1, r3
 80096e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80096ec:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80096f0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80096f4:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events += 2048;
 80096f8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80096fc:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 8009700:	6539      	str	r1, [r7, #80]	@ 0x50
 8009702:	f143 0300 	adc.w	r3, r3, #0
 8009706:	657b      	str	r3, [r7, #84]	@ 0x54
 8009708:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800970c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events /= 4096;
 8009710:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009714:	2b00      	cmp	r3, #0
 8009716:	da08      	bge.n	800972a <VL53LX_hist_events_consistency_check+0x346>
 8009718:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800971c:	1851      	adds	r1, r2, r1
 800971e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009720:	f143 0300 	adc.w	r3, r3, #0
 8009724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009726:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800972a:	f04f 0000 	mov.w	r0, #0
 800972e:	f04f 0100 	mov.w	r1, #0
 8009732:	0b10      	lsrs	r0, r2, #12
 8009734:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009738:	1319      	asrs	r1, r3, #12
 800973a:	e9c7 0148 	strd	r0, r1, [r7, #288]	@ 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800973e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8009742:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 8009746:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800974a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800974c:	2200      	movs	r2, #0
 800974e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009752:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009756:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800975a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800975e:	4622      	mov	r2, r4
 8009760:	fb02 f203 	mul.w	r2, r2, r3
 8009764:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009768:	4629      	mov	r1, r5
 800976a:	fb01 f303 	mul.w	r3, r1, r3
 800976e:	441a      	add	r2, r3
 8009770:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009774:	4621      	mov	r1, r4
 8009776:	fba3 1301 	umull	r1, r3, r3, r1
 800977a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800977e:	460b      	mov	r3, r1
 8009780:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009788:	18d3      	adds	r3, r2, r3
 800978a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800978e:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 8009792:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8009796:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_sig_noise_sq += 2048;
 800979a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800979e:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 80097a2:	6439      	str	r1, [r7, #64]	@ 0x40
 80097a4:	f143 0300 	adc.w	r3, r3, #0
 80097a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80097aa:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80097ae:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_sig_noise_sq /= 4096;
 80097b2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	da08      	bge.n	80097cc <VL53LX_hist_events_consistency_check+0x3e8>
 80097ba:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80097be:	1851      	adds	r1, r2, r1
 80097c0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80097c2:	f143 0300 	adc.w	r3, r3, #0
 80097c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80097cc:	f04f 0000 	mov.w	r0, #0
 80097d0:	f04f 0100 	mov.w	r1, #0
 80097d4:	0b10      	lsrs	r0, r2, #12
 80097d6:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80097da:	1319      	asrs	r1, r3, #12
 80097dc:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 80097e0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80097e4:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 80097e8:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80097ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ee:	2200      	movs	r2, #0
 80097f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80097f4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80097f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097fc:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8009800:	4622      	mov	r2, r4
 8009802:	fb02 f203 	mul.w	r2, r2, r3
 8009806:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800980a:	4629      	mov	r1, r5
 800980c:	fb01 f303 	mul.w	r3, r1, r3
 8009810:	441a      	add	r2, r3
 8009812:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009816:	4621      	mov	r1, r4
 8009818:	fba3 1301 	umull	r1, r3, r3, r1
 800981c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009820:	460b      	mov	r3, r1
 8009822:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800982a:	18d3      	adds	r3, r2, r3
 800982c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009830:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8009834:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8009838:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq += 2048;
 800983c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8009840:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 8009844:	6339      	str	r1, [r7, #48]	@ 0x30
 8009846:	f143 0300 	adc.w	r3, r3, #0
 800984a:	637b      	str	r3, [r7, #52]	@ 0x34
 800984c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8009850:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq /= 4096;
 8009854:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8009858:	4610      	mov	r0, r2
 800985a:	4619      	mov	r1, r3
 800985c:	2900      	cmp	r1, #0
 800985e:	da08      	bge.n	8009872 <VL53LX_hist_events_consistency_check+0x48e>
 8009860:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8009864:	18c3      	adds	r3, r0, r3
 8009866:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009868:	f141 0300 	adc.w	r3, r1, #0
 800986c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800986e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009872:	f04f 0200 	mov.w	r2, #0
 8009876:	f04f 0300 	mov.w	r3, #0
 800987a:	0b02      	lsrs	r2, r0, #12
 800987c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8009880:	130b      	asrs	r3, r1, #12
 8009882:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110


	c_amb_noise_sq += 2;
 8009886:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800988a:	1c91      	adds	r1, r2, #2
 800988c:	6239      	str	r1, [r7, #32]
 800988e:	f143 0300 	adc.w	r3, r3, #0
 8009892:	627b      	str	r3, [r7, #36]	@ 0x24
 8009894:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009898:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq /= 4;
 800989c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	da06      	bge.n	80098b2 <VL53LX_hist_events_consistency_check+0x4ce>
 80098a4:	1cd1      	adds	r1, r2, #3
 80098a6:	61b9      	str	r1, [r7, #24]
 80098a8:	f143 0300 	adc.w	r3, r3, #0
 80098ac:	61fb      	str	r3, [r7, #28]
 80098ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098b2:	f04f 0000 	mov.w	r0, #0
 80098b6:	f04f 0100 	mov.w	r1, #0
 80098ba:	0890      	lsrs	r0, r2, #2
 80098bc:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80098c0:	1099      	asrs	r1, r3, #2
 80098c2:	e9c7 0144 	strd	r0, r1, [r7, #272]	@ 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 80098c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ca:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 80098cc:	2200      	movs	r2, #0
 80098ce:	613b      	str	r3, [r7, #16]
 80098d0:	617a      	str	r2, [r7, #20]
 80098d2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80098d6:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108


	p_amb_noise_sq += 2;
 80098da:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80098de:	1c91      	adds	r1, r2, #2
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	f143 0300 	adc.w	r3, r3, #0
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80098ec:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
	p_amb_noise_sq /= 4;
 80098f0:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	da06      	bge.n	8009906 <VL53LX_hist_events_consistency_check+0x522>
 80098f8:	1cd1      	adds	r1, r2, #3
 80098fa:	6039      	str	r1, [r7, #0]
 80098fc:	f143 0300 	adc.w	r3, r3, #0
 8009900:	607b      	str	r3, [r7, #4]
 8009902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009906:	f04f 0000 	mov.w	r0, #0
 800990a:	f04f 0100 	mov.w	r1, #0
 800990e:	0890      	lsrs	r0, r2, #2
 8009910:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009914:	1099      	asrs	r1, r3, #2
 8009916:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 800991a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800991e:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 8009920:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009924:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 8009926:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
		(uint32_t)c_sig_noise_sq +
 800992a:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800992c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
	noise_sq_sum =
 8009930:	4413      	add	r3, r2
 8009932:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 8009936:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800993a:	011b      	lsls	r3, r3, #4
 800993c:	4618      	mov	r0, r3
 800993e:	f002 f8ab 	bl	800ba98 <VL53LX_isqrt>
 8009942:	4603      	mov	r3, r0
 8009944:	461a      	mov	r2, r3
	*pevents_tolerance =
 8009946:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800994a:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800994c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 8009956:	fb03 f202 	mul.w	r2, r3, r2
 800995a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800995e:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 8009960:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f103 0220 	add.w	r2, r3, #32
 800996a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800996e:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 8009970:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	da00      	bge.n	800997c <VL53LX_hist_events_consistency_check+0x598>
 800997a:	333f      	adds	r3, #63	@ 0x3f
 800997c:	119b      	asrs	r3, r3, #6
 800997e:	461a      	mov	r2, r3
 8009980:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009984:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 8009986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 8009990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800999c:	1a9b      	subs	r3, r3, r2
 800999e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 80099a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80099a6:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80099aa:	429a      	cmp	r2, r3
 80099ac:	da08      	bge.n	80099c0 <VL53LX_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 80099ae:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80099b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b6:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 80099b8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	e007      	b.n	80099d0 <VL53LX_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 80099c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80099c4:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80099c8:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 80099ca:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80099ce:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 80099d0:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	429a      	cmp	r2, r3
 80099de:	dd0b      	ble.n	80099f8 <VL53LX_hist_events_consistency_check+0x614>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 80099e0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80099e4:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 80099e6:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	@ 0xfc
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d204      	bcs.n	80099f8 <VL53LX_hist_events_consistency_check+0x614>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 80099ee:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80099f2:	2214      	movs	r2, #20
 80099f4:	701a      	strb	r2, [r3, #0]
 80099f6:	e003      	b.n	8009a00 <VL53LX_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80099f8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80099fc:	2209      	movs	r2, #9
 80099fe:	701a      	strb	r2, [r3, #0]





	return status;
 8009a00:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009a10 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
 8009a1c:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8009a32:	429a      	cmp	r2, r3
 8009a34:	dd0b      	ble.n	8009a4e <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	b29b      	uxth	r3, r3
		delta_mm =
 8009a4a:	82fb      	strh	r3, [r7, #22]
 8009a4c:	e00a      	b.n	8009a64 <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	b29b      	uxth	r3, r3
		delta_mm =
 8009a62:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 8009a64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	dd09      	ble.n	8009a80 <VL53LX_hist_merged_pulse_check+0x70>
 8009a6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009a70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	dd03      	ble.n	8009a80 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2216      	movs	r2, #22
 8009a7c:	701a      	strb	r2, [r3, #0]
 8009a7e:	e002      	b.n	8009a86 <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2209      	movs	r2, #9
 8009a84:	701a      	strb	r2, [r3, #0]

	return status;
 8009a86:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	371c      	adds	r7, #28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b08e      	sub	sp, #56	@ 0x38
 8009a9a:	af04      	add	r7, sp, #16
 8009a9c:	60f8      	str	r0, [r7, #12]
 8009a9e:	60b9      	str	r1, [r7, #8]
 8009aa0:	607a      	str	r2, [r7, #4]
 8009aa2:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_LLDriverData_t *pdev =
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	3318      	adds	r3, #24
 8009aae:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 8009ab8:	6a3b      	ldr	r3, [r7, #32]
 8009aba:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 8009abe:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 8009ac0:	6a3b      	ldr	r3, [r7, #32]
 8009ac2:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 8009ac6:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8009ace:	2b09      	cmp	r3, #9
 8009ad0:	d009      	beq.n	8009ae6 <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009ad8:	2b13      	cmp	r3, #19
 8009ada:	d004      	beq.n	8009ae6 <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8009ae2:	2b14      	cmp	r3, #20
 8009ae4:	d129      	bne.n	8009b3a <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009aec:	2b09      	cmp	r3, #9
 8009aee:	d009      	beq.n	8009b04 <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009af6:	2b13      	cmp	r3, #19
 8009af8:	d004      	beq.n	8009b04 <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8009b00:	2b14      	cmp	r3, #20
 8009b02:	d11a      	bne.n	8009b3a <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	2209      	movs	r2, #9
 8009b08:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	334a      	adds	r3, #74	@ 0x4a
				VL53LX_hist_events_consistency_check(
 8009b16:	8bb9      	ldrh	r1, [r7, #28]
 8009b18:	7ff8      	ldrb	r0, [r7, #31]
 8009b1a:	9303      	str	r3, [sp, #12]
 8009b1c:	f107 0318 	add.w	r3, r7, #24
 8009b20:	9302      	str	r3, [sp, #8]
 8009b22:	f107 0314 	add.w	r3, r7, #20
 8009b26:	9301      	str	r3, [sp, #4]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	f7ff fc58 	bl	80093e4 <VL53LX_hist_events_consistency_check>
 8009b34:	4603      	mov	r3, r0
 8009b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		}
	}

	return status;
 8009b3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3728      	adds	r7, #40	@ 0x28
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b088      	sub	sp, #32
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	60f8      	str	r0, [r7, #12]
 8009b4e:	60b9      	str	r1, [r7, #8]
 8009b50:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009b52:	2300      	movs	r3, #0
 8009b54:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d019      	beq.n	8009ba6 <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f002 f8f4 	bl	800bd66 <VL53LX_calc_pll_period_mm>
 8009b7e:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
		wrap_dmax_phase =
 8009b86:	021b      	lsls	r3, r3, #8
 8009b88:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	69ba      	ldr	r2, [r7, #24]
 8009b8e:	fb02 f303 	mul.w	r3, r2, r3
 8009b92:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009b9a:	0bdb      	lsrs	r3, r3, #15
 8009b9c:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	b21a      	sxth	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 8009ba6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3720      	adds	r7, #32
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 8009bb2:	b590      	push	{r4, r7, lr}
 8009bb4:	b08d      	sub	sp, #52	@ 0x34
 8009bb6:	af04      	add	r7, sp, #16
 8009bb8:	4604      	mov	r4, r0
 8009bba:	4608      	mov	r0, r1
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	4623      	mov	r3, r4
 8009bc2:	80fb      	strh	r3, [r7, #6]
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	80bb      	strh	r3, [r7, #4]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	70fb      	strb	r3, [r7, #3]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 8009be0:	2300      	movs	r3, #0
 8009be2:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 8009bf0:	78b9      	ldrb	r1, [r7, #2]
 8009bf2:	78f8      	ldrb	r0, [r7, #3]
 8009bf4:	f107 030c 	add.w	r3, r7, #12
 8009bf8:	9303      	str	r3, [sp, #12]
 8009bfa:	f107 030e 	add.w	r3, r7, #14
 8009bfe:	9302      	str	r3, [sp, #8]
 8009c00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	23ff      	movs	r3, #255	@ 0xff
 8009c0c:	22c7      	movs	r2, #199	@ 0xc7
 8009c0e:	f000 fa01 	bl	800a014 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 8009c12:	89fb      	ldrh	r3, [r7, #14]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d050      	beq.n	8009cba <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 8009c18:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d04d      	beq.n	8009cba <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 8009c1e:	f897 4034 	ldrb.w	r4, [r7, #52]	@ 0x34
 8009c22:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8009c26:	78b9      	ldrb	r1, [r7, #2]
 8009c28:	78f8      	ldrb	r0, [r7, #3]
 8009c2a:	f107 0308 	add.w	r3, r7, #8
 8009c2e:	9303      	str	r3, [sp, #12]
 8009c30:	f107 030a 	add.w	r3, r7, #10
 8009c34:	9302      	str	r3, [sp, #8]
 8009c36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009c3a:	9301      	str	r3, [sp, #4]
 8009c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	4623      	mov	r3, r4
 8009c42:	f000 f9e7 	bl	800a014 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 8009c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c48:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 8009c4a:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 8009c4c:	897b      	ldrh	r3, [r7, #10]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	fb02 f303 	mul.w	r3, r2, r3
 8009c56:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 8009c58:	89fb      	ldrh	r3, [r7, #14]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c62:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 8009c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c66:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 8009c68:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 8009c6a:	893b      	ldrh	r3, [r7, #8]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	fb02 f303 	mul.w	r3, r2, r3
 8009c74:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 8009c76:	89bb      	ldrh	r3, [r7, #12]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c80:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 8009c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c86:	69ba      	ldr	r2, [r7, #24]
 8009c88:	fb02 f303 	mul.w	r3, r2, r3
 8009c8c:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 8009c8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	fb02 f303 	mul.w	r3, r2, r3
 8009c98:	69fa      	ldr	r2, [r7, #28]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8009c9e:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 8009ca0:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8009ca2:	4413      	add	r3, r2
 8009ca4:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d008      	beq.n	8009cbe <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	009a      	lsls	r2, r3, #2
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8009cb6:	61fb      	str	r3, [r7, #28]
 8009cb8:	e002      	b.n	8009cc0 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 8009cba:	bf00      	nop
 8009cbc:	e000      	b.n	8009cc0 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 8009cbe:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	b21a      	sxth	r2, r3
 8009cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cc6:	801a      	strh	r2, [r3, #0]

}
 8009cc8:	bf00      	nop
 8009cca:	3724      	adds	r7, #36	@ 0x24
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd90      	pop	{r4, r7, pc}

08009cd0 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	607a      	str	r2, [r7, #4]
 8009cda:	603b      	str	r3, [r7, #0]
 8009cdc:	4603      	mov	r3, r0
 8009cde:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 8009ce0:	7bfb      	ldrb	r3, [r7, #15]
 8009ce2:	08db      	lsrs	r3, r3, #3
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
 8009cec:	f003 0307 	and.w	r3, r3, #7
 8009cf0:	b2da      	uxtb	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	4093      	lsls	r3, r2
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	701a      	strb	r2, [r3, #0]

}
 8009d06:	bf00      	nop
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr

08009d12 <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8009d12:	b480      	push	{r7}
 8009d14:	b083      	sub	sp, #12
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	4603      	mov	r3, r0
 8009d1a:	603a      	str	r2, [r7, #0]
 8009d1c:	71fb      	strb	r3, [r7, #7]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 8009d22:	79fb      	ldrb	r3, [r7, #7]
 8009d24:	2b07      	cmp	r3, #7
 8009d26:	d90a      	bls.n	8009d3e <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8009d28:	79bb      	ldrb	r3, [r7, #6]
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	79fb      	ldrb	r3, [r7, #7]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	3b71      	subs	r3, #113	@ 0x71
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 8009d3c:	e00a      	b.n	8009d54 <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8009d3e:	79bb      	ldrb	r3, [r7, #6]
 8009d40:	f1c3 030f 	rsb	r3, r3, #15
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	00db      	lsls	r3, r3, #3
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	79fb      	ldrb	r3, [r7, #7]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	701a      	strb	r2, [r3, #0]
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	4603      	mov	r3, r0
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 8009d6e:	7bfb      	ldrb	r3, [r7, #15]
 8009d70:	091b      	lsrs	r3, r3, #4
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
 8009d7a:	f003 030f 	and.w	r3, r3, #15
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	701a      	strb	r2, [r3, #0]

}
 8009d84:	bf00      	nop
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	4603      	mov	r3, r0
 8009d98:	603a      	str	r2, [r7, #0]
 8009d9a:	71fb      	strb	r3, [r7, #7]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 8009da0:	79bb      	ldrb	r3, [r7, #6]
 8009da2:	011b      	lsls	r3, r3, #4
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	79fb      	ldrb	r3, [r7, #7]
 8009da8:	4413      	add	r3, r2
 8009daa:	b2da      	uxtb	r2, r3
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	701a      	strb	r2, [r3, #0]

}
 8009db0:	bf00      	nop
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60ba      	str	r2, [r7, #8]
 8009dc4:	607b      	str	r3, [r7, #4]
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73fb      	strb	r3, [r7, #15]
 8009dca:	460b      	mov	r3, r1
 8009dcc:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 8009dde:	f107 0217 	add.w	r2, r7, #23
 8009de2:	f107 0116 	add.w	r1, r7, #22
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f002 fa37 	bl	800c25c <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 8009dee:	f107 0214 	add.w	r2, r7, #20
 8009df2:	f107 0115 	add.w	r1, r7, #21
 8009df6:	7bbb      	ldrb	r3, [r7, #14]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7ff ffb1 	bl	8009d60 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8009dfe:	7dfb      	ldrb	r3, [r7, #23]
 8009e00:	4619      	mov	r1, r3
 8009e02:	7d7b      	ldrb	r3, [r7, #21]
 8009e04:	3301      	adds	r3, #1
 8009e06:	0fda      	lsrs	r2, r3, #31
 8009e08:	4413      	add	r3, r2
 8009e0a:	105b      	asrs	r3, r3, #1
 8009e0c:	425b      	negs	r3, r3
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	440b      	add	r3, r1
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	b21a      	sxth	r2, r3
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	da02      	bge.n	8009e2a <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	2200      	movs	r2, #0
 8009e28:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	7d7a      	ldrb	r2, [r7, #21]
 8009e34:	4413      	add	r3, r2
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	b21a      	sxth	r2, r3
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e44:	2b0f      	cmp	r3, #15
 8009e46:	dd02      	ble.n	8009e4e <VL53LX_decode_zone_limits+0x92>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 8009e48:	6a3b      	ldr	r3, [r7, #32]
 8009e4a:	220f      	movs	r2, #15
 8009e4c:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8009e4e:	7dbb      	ldrb	r3, [r7, #22]
 8009e50:	4619      	mov	r1, r3
 8009e52:	7d3b      	ldrb	r3, [r7, #20]
 8009e54:	3301      	adds	r3, #1
 8009e56:	0fda      	lsrs	r2, r3, #31
 8009e58:	4413      	add	r3, r2
 8009e5a:	105b      	asrs	r3, r3, #1
 8009e5c:	425b      	negs	r3, r3
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	440b      	add	r3, r1
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	b21a      	sxth	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	da02      	bge.n	8009e7a <VL53LX_decode_zone_limits+0xbe>
		*py_ll = 0;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	7d3a      	ldrb	r2, [r7, #20]
 8009e84:	4413      	add	r3, r2
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	b21a      	sxth	r2, r3
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8c:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e94:	2b0f      	cmp	r3, #15
 8009e96:	dd02      	ble.n	8009e9e <VL53LX_decode_zone_limits+0xe2>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 8009e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9a:	220f      	movs	r2, #15
 8009e9c:	801a      	strh	r2, [r3, #0]
}
 8009e9e:	bf00      	nop
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b085      	sub	sp, #20
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	4603      	mov	r3, r0
 8009eae:	460a      	mov	r2, r1
 8009eb0:	71fb      	strb	r3, [r7, #7]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 8009eba:	79fb      	ldrb	r3, [r7, #7]
 8009ebc:	f003 0303 	and.w	r3, r3, #3
 8009ec0:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 8009ec2:	79bb      	ldrb	r3, [r7, #6]
 8009ec4:	f003 0303 	and.w	r3, r3, #3
 8009ec8:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 8009eca:	7bbb      	ldrb	r3, [r7, #14]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d104      	bne.n	8009eda <VL53LX_is_aperture_location+0x34>
 8009ed0:	7b7b      	ldrb	r3, [r7, #13]
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d101      	bne.n	8009eda <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 8009eda:	7bbb      	ldrb	r3, [r7, #14]
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d104      	bne.n	8009eea <VL53LX_is_aperture_location+0x44>
 8009ee0:	7b7b      	ldrb	r3, [r7, #13]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d101      	bne.n	8009eea <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3714      	adds	r7, #20
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8009ef8:	b590      	push	{r4, r7, lr}
 8009efa:	b08b      	sub	sp, #44	@ 0x2c
 8009efc:	af02      	add	r7, sp, #8
 8009efe:	603a      	str	r2, [r7, #0]
 8009f00:	461a      	mov	r2, r3
 8009f02:	4603      	mov	r3, r0
 8009f04:	71fb      	strb	r3, [r7, #7]
 8009f06:	460b      	mov	r3, r1
 8009f08:	71bb      	strb	r3, [r7, #6]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 8009f12:	2300      	movs	r3, #0
 8009f14:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 8009f26:	2300      	movs	r3, #0
 8009f28:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 8009f32:	2300      	movs	r3, #0
 8009f34:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 8009f3a:	f107 0416 	add.w	r4, r7, #22
 8009f3e:	f107 0218 	add.w	r2, r7, #24
 8009f42:	79b9      	ldrb	r1, [r7, #6]
 8009f44:	79f8      	ldrb	r0, [r7, #7]
 8009f46:	f107 0312 	add.w	r3, r7, #18
 8009f4a:	9301      	str	r3, [sp, #4]
 8009f4c:	f107 0314 	add.w	r3, r7, #20
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	4623      	mov	r3, r4
 8009f54:	f7ff ff32 	bl	8009dbc <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8009f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009f5e:	8afb      	ldrh	r3, [r7, #22]
 8009f60:	83bb      	strh	r3, [r7, #28]
 8009f62:	e04c      	b.n	8009ffe <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009f64:	8b3b      	ldrh	r3, [r7, #24]
 8009f66:	83fb      	strh	r3, [r7, #30]
 8009f68:	e03d      	b.n	8009fe6 <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 8009f6a:	8bbb      	ldrh	r3, [r7, #28]
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	8bfa      	ldrh	r2, [r7, #30]
 8009f70:	b2d1      	uxtb	r1, r2
 8009f72:	f107 0211 	add.w	r2, r7, #17
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7ff fecb 	bl	8009d12 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009f7c:	7c78      	ldrb	r0, [r7, #17]
 8009f7e:	f107 030e 	add.w	r3, r7, #14
 8009f82:	f107 020f 	add.w	r2, r7, #15
 8009f86:	f107 0110 	add.w	r1, r7, #16
 8009f8a:	f7ff fea1 	bl	8009cd0 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009f8e:	7c3b      	ldrb	r3, [r7, #16]
 8009f90:	461a      	mov	r2, r3
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	4413      	add	r3, r2
 8009f96:	781a      	ldrb	r2, [r3, #0]
 8009f98:	7bbb      	ldrb	r3, [r7, #14]
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d01b      	beq.n	8009fda <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 8009fa2:	8bbb      	ldrh	r3, [r7, #28]
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	8bfa      	ldrh	r2, [r7, #30]
 8009fa8:	b2d2      	uxtb	r2, r2
 8009faa:	4611      	mov	r1, r2
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7ff ff7a 	bl	8009ea6 <VL53LX_is_aperture_location>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009fb6:	7efb      	ldrb	r3, [r7, #27]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d007      	beq.n	8009fcc <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fbe:	881a      	ldrh	r2, [r3, #0]
 8009fc0:	88bb      	ldrh	r3, [r7, #4]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc8:	801a      	strh	r2, [r3, #0]
 8009fca:	e006      	b.n	8009fda <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 8009fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fce:	881b      	ldrh	r3, [r3, #0]
 8009fd0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd8:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009fda:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	83fb      	strh	r3, [r7, #30]
 8009fe6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009fea:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	ddbb      	ble.n	8009f6a <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009ff2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	83bb      	strh	r3, [r7, #28]
 8009ffe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a002:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800a006:	429a      	cmp	r2, r3
 800a008:	ddac      	ble.n	8009f64 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800a00a:	bf00      	nop
 800a00c:	bf00      	nop
 800a00e:	3724      	adds	r7, #36	@ 0x24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd90      	pop	{r4, r7, pc}

0800a014 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800a014:	b590      	push	{r4, r7, lr}
 800a016:	b08d      	sub	sp, #52	@ 0x34
 800a018:	af02      	add	r7, sp, #8
 800a01a:	4604      	mov	r4, r0
 800a01c:	4608      	mov	r0, r1
 800a01e:	4611      	mov	r1, r2
 800a020:	461a      	mov	r2, r3
 800a022:	4623      	mov	r3, r4
 800a024:	71fb      	strb	r3, [r7, #7]
 800a026:	4603      	mov	r3, r0
 800a028:	71bb      	strb	r3, [r7, #6]
 800a02a:	460b      	mov	r3, r1
 800a02c:	717b      	strb	r3, [r7, #5]
 800a02e:	4613      	mov	r3, r2
 800a030:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800a032:	2300      	movs	r3, #0
 800a034:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t   y         = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	84bb      	strh	r3, [r7, #36]	@ 0x24

	int16_t   mm_x_ll   = 0;
 800a03a:	2300      	movs	r3, #0
 800a03c:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800a042:	2300      	movs	r3, #0
 800a044:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800a046:	2300      	movs	r3, #0
 800a048:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800a052:	2300      	movs	r3, #0
 800a054:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800a056:	2300      	movs	r3, #0
 800a058:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800a05e:	2300      	movs	r3, #0
 800a060:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800a062:	2300      	movs	r3, #0
 800a064:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint16_t  spad_attenuation = 0;
 800a070:	2300      	movs	r3, #0
 800a072:	847b      	strh	r3, [r7, #34]	@ 0x22



	VL53LX_decode_zone_limits(
 800a074:	f107 041c 	add.w	r4, r7, #28
 800a078:	f107 021e 	add.w	r2, r7, #30
 800a07c:	79b9      	ldrb	r1, [r7, #6]
 800a07e:	79f8      	ldrb	r0, [r7, #7]
 800a080:	f107 0318 	add.w	r3, r7, #24
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	f107 031a 	add.w	r3, r7, #26
 800a08a:	9300      	str	r3, [sp, #0]
 800a08c:	4623      	mov	r3, r4
 800a08e:	f7ff fe95 	bl	8009dbc <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 800a092:	f107 0414 	add.w	r4, r7, #20
 800a096:	f107 0216 	add.w	r2, r7, #22
 800a09a:	7939      	ldrb	r1, [r7, #4]
 800a09c:	7978      	ldrb	r0, [r7, #5]
 800a09e:	f107 0310 	add.w	r3, r7, #16
 800a0a2:	9301      	str	r3, [sp, #4]
 800a0a4:	f107 0312 	add.w	r3, r7, #18
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	4623      	mov	r3, r4
 800a0ac:	f7ff fe86 	bl	8009dbc <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800a0b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800a0b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a0bc:	8abb      	ldrh	r3, [r7, #20]
 800a0be:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a0c0:	e06c      	b.n	800a19c <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a0c2:	8afb      	ldrh	r3, [r7, #22]
 800a0c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a0c6:	e05d      	b.n	800a184 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 800a0c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a0ce:	b2d1      	uxtb	r1, r2
 800a0d0:	f107 020f 	add.w	r2, r7, #15
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7ff fe1c 	bl	8009d12 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800a0da:	7bf8      	ldrb	r0, [r7, #15]
 800a0dc:	f107 030c 	add.w	r3, r7, #12
 800a0e0:	f107 020d 	add.w	r2, r7, #13
 800a0e4:	f107 010e 	add.w	r1, r7, #14
 800a0e8:	f7ff fdf2 	bl	8009cd0 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f2:	4413      	add	r3, r2
 800a0f4:	781a      	ldrb	r2, [r3, #0]
 800a0f6:	7b3b      	ldrb	r3, [r7, #12]
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d03b      	beq.n	800a178 <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 800a100:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a102:	b2db      	uxtb	r3, r3
 800a104:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a106:	b2d2      	uxtb	r2, r2
 800a108:	4611      	mov	r1, r2
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7ff fecb 	bl	8009ea6 <VL53LX_is_aperture_location>
 800a110:	4603      	mov	r3, r0
 800a112:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800a116:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d002      	beq.n	800a124 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800a11e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a120:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a122:	e002      	b.n	800a12a <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800a124:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a128:	847b      	strh	r3, [r7, #34]	@ 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800a12a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a12e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800a132:	429a      	cmp	r2, r3
 800a134:	db19      	blt.n	800a16a <VL53LX_calc_mm_effective_spads+0x156>
 800a136:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a13a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800a13e:	429a      	cmp	r2, r3
 800a140:	dc13      	bgt.n	800a16a <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800a142:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800a146:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800a14a:	429a      	cmp	r2, r3
 800a14c:	db0d      	blt.n	800a16a <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800a14e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a152:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800a156:	429a      	cmp	r2, r3
 800a158:	dc07      	bgt.n	800a16a <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800a15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a15c:	881a      	ldrh	r2, [r3, #0]
 800a15e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a160:	4413      	add	r3, r2
 800a162:	b29a      	uxth	r2, r3
 800a164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a166:	801a      	strh	r2, [r3, #0]
 800a168:	e006      	b.n	800a178 <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800a16a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a16c:	881a      	ldrh	r2, [r3, #0]
 800a16e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a170:	4413      	add	r3, r2
 800a172:	b29a      	uxth	r2, r3
 800a174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a176:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a178:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	3301      	adds	r3, #1
 800a180:	b29b      	uxth	r3, r3
 800a182:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a184:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a188:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800a18c:	429a      	cmp	r2, r3
 800a18e:	dd9b      	ble.n	800a0c8 <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a190:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800a194:	b29b      	uxth	r3, r3
 800a196:	3301      	adds	r3, #1
 800a198:	b29b      	uxth	r3, r3
 800a19a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a19c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a1a0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	dd8c      	ble.n	800a0c2 <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800a1a8:	bf00      	nop
 800a1aa:	bf00      	nop
 800a1ac:	372c      	adds	r7, #44	@ 0x2c
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd90      	pop	{r4, r7, pc}

0800a1b2 <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b086      	sub	sp, #24
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	60f8      	str	r0, [r7, #12]
 800a1ba:	60b9      	str	r1, [r7, #8]
 800a1bc:	607a      	str	r2, [r7, #4]
 800a1be:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7fd ff71 	bl	80080ac <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	7c9a      	ldrb	r2, [r3, #18]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f893 207a 	ldrb.w	r2, [r3, #122]	@ 0x7a
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	3314      	adds	r3, #20
 800a1f4:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	75fb      	strb	r3, [r7, #23]
 800a1fa:	e06b      	b.n	800a2d4 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800a1fc:	7dfb      	ldrb	r3, [r7, #23]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d002      	beq.n	800a208 <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 800a202:	2b01      	cmp	r3, #1
 800a204:	d034      	beq.n	800a270 <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 800a206:	e05f      	b.n	800a2c8 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 800a240:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	8a9a      	ldrh	r2, [r3, #20]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	601a      	str	r2, [r3, #0]

			break;
 800a26e:	e02b      	b.n	800a2c8 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 800a2a0:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	845a      	strh	r2, [r3, #34]	@ 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	611a      	str	r2, [r3, #16]
			break;
 800a2c6:	bf00      	nop
		}

		pdata++;
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	334c      	adds	r3, #76	@ 0x4c
 800a2cc:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800a2ce:	7dfb      	ldrb	r3, [r7, #23]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	75fb      	strb	r3, [r7, #23]
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	7c9b      	ldrb	r3, [r3, #18]
 800a2d8:	7dfa      	ldrb	r2, [r7, #23]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d38e      	bcc.n	800a1fc <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800a2de:	bf00      	nop
 800a2e0:	bf00      	nop
 800a2e2:	3718      	adds	r7, #24
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b089      	sub	sp, #36	@ 0x24
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	3318      	adds	r3, #24
 800a2f8:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800a300:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800a308:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a310:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800a312:	4613      	mov	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	005b      	lsls	r3, r3, #1
 800a31a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	4413      	add	r3, r2
 800a322:	3302      	adds	r3, #2
 800a324:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
	pzone_dyn_cfg->expected_gph_id =
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800a34a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3724      	adds	r7, #36	@ 0x24
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 800a35a:	b480      	push	{r7}
 800a35c:	b08b      	sub	sp, #44	@ 0x2c
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a364:	2300      	movs	r3, #0
 800a366:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	3318      	adds	r3, #24
 800a36c:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800a374:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800a37c:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a384:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 800a38c:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800a38e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a392:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 800a394:	7bfa      	ldrb	r2, [r7, #15]
 800a396:	6939      	ldr	r1, [r7, #16]
 800a398:	4613      	mov	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	005b      	lsls	r3, r3, #1
 800a3a0:	440b      	add	r3, r1
 800a3a2:	3306      	adds	r3, #6
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800a3ae:	84bb      	strh	r3, [r7, #36]	@ 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a3b6:	e01a      	b.n	800a3ee <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 800a3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	214c      	movs	r1, #76	@ 0x4c
 800a3c0:	fb01 f303 	mul.w	r3, r1, r3
 800a3c4:	4413      	add	r3, r2
 800a3c6:	334a      	adds	r3, #74	@ 0x4a
 800a3c8:	881b      	ldrh	r3, [r3, #0]
 800a3ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d209      	bcs.n	800a3e4 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 800a3d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			max_total_rate_per_spads =
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	214c      	movs	r1, #76	@ 0x4c
 800a3d8:	fb01 f303 	mul.w	r3, r1, r3
 800a3dc:	4413      	add	r3, r2
 800a3de:	334a      	adds	r3, #74	@ 0x4a
 800a3e0:	881b      	ldrh	r3, [r3, #0]
 800a3e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (i = 1; i < presults->active_results; i++) {
 800a3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	7c9b      	ldrb	r3, [r3, #18]
 800a3f2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d3de      	bcc.n	800a3b8 <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 800a3fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d103      	bne.n	800a408 <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 800a400:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a404:	623b      	str	r3, [r7, #32]
 800a406:	e00e      	b.n	800a426 <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 800a408:	89bb      	ldrh	r3, [r7, #12]
 800a40a:	039b      	lsls	r3, r3, #14
 800a40c:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800a40e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a410:	6a3a      	ldr	r2, [r7, #32]
 800a412:	fbb2 f3f3 	udiv	r3, r2, r3
 800a416:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800a418:	6a3b      	ldr	r3, [r7, #32]
 800a41a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a41e:	d302      	bcc.n	800a426 <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800a420:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a424:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a426:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800a428:	6a3b      	ldr	r3, [r7, #32]
 800a42a:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a42c:	6939      	ldr	r1, [r7, #16]
 800a42e:	4613      	mov	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4413      	add	r3, r2
 800a434:	005b      	lsls	r3, r3, #1
 800a436:	440b      	add	r3, r1
 800a438:	3306      	adds	r3, #6
 800a43a:	4602      	mov	r2, r0
 800a43c:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800a43e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a442:	4618      	mov	r0, r3
 800a444:	372c      	adds	r7, #44	@ 0x2c
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr

0800a44e <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b08a      	sub	sp, #40	@ 0x28
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a456:	2300      	movs	r3, #0
 800a458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	3318      	adds	r3, #24
 800a460:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a462:	6a3b      	ldr	r3, [r7, #32]
 800a464:	332c      	adds	r3, #44	@ 0x2c
 800a466:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800a468:	6a3b      	ldr	r3, [r7, #32]
 800a46a:	33c2      	adds	r3, #194	@ 0xc2
 800a46c:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800a46e:	6a3b      	ldr	r3, [r7, #32]
 800a470:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800a474:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	3302      	adds	r3, #2
 800a47a:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	785b      	ldrb	r3, [r3, #1]
 800a480:	f003 0301 	and.w	r3, r3, #1
 800a484:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a486:	6a3b      	ldr	r3, [r7, #32]
 800a488:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a48c:	461a      	mov	r2, r3
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	4413      	add	r3, r2
 800a492:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a496:	2b01      	cmp	r3, #1
 800a498:	d11e      	bne.n	800a4d8 <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800a49a:	7bfb      	ldrb	r3, [r7, #15]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10b      	bne.n	800a4b8 <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d05d      	beq.n	800a57a <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	719a      	strb	r2, [r3, #6]
 800a4d6:	e050      	b.n	800a57a <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a4de:	461a      	mov	r2, r3
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d11e      	bne.n	800a52a <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10b      	bne.n	800a50a <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a50a:	7bfb      	ldrb	r3, [r7, #15]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d034      	beq.n	800a57a <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	719a      	strb	r2, [r3, #6]
 800a528:	e027      	b.n	800a57a <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a52a:	6a3b      	ldr	r3, [r7, #32]
 800a52c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a530:	461a      	mov	r2, r3
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	4413      	add	r3, r2
 800a536:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a53a:	2b03      	cmp	r3, #3
 800a53c:	d11d      	bne.n	800a57a <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10b      	bne.n	800a55c <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00b      	beq.n	800a57a <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800a57a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d109      	bne.n	800a596 <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800a582:	6a3b      	ldr	r3, [r7, #32]
 800a584:	f203 21fe 	addw	r1, r3, #766	@ 0x2fe
 800a588:	6a3b      	ldr	r3, [r7, #32]
 800a58a:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800a58e:	461a      	mov	r2, r3
 800a590:	6978      	ldr	r0, [r7, #20]
 800a592:	f7fd f961 	bl	8007858 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800a596:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3728      	adds	r7, #40	@ 0x28
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b089      	sub	sp, #36	@ 0x24
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	603b      	str	r3, [r7, #0]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	3318      	adds	r3, #24
 800a5ba:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a5c2:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800a5c4:	7dfb      	ldrb	r3, [r7, #23]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d103      	bne.n	800a5d2 <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	7afa      	ldrb	r2, [r7, #11]
 800a5ce:	701a      	strb	r2, [r3, #0]
 800a5d0:	e01e      	b.n	800a610 <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d111      	bne.n	800a604 <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	2bff      	cmp	r3, #255	@ 0xff
 800a5e6:	d103      	bne.n	800a5f0 <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2280      	movs	r2, #128	@ 0x80
 800a5ec:	701a      	strb	r2, [r3, #0]
 800a5ee:	e005      	b.n	800a5fc <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	2200      	movs	r2, #0
 800a600:	701a      	strb	r2, [r3, #0]
 800a602:	e005      	b.n	800a610 <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	3301      	adds	r3, #1
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800a610:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3724      	adds	r7, #36	@ 0x24
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b08a      	sub	sp, #40	@ 0x28
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	607a      	str	r2, [r7, #4]
 800a62a:	461a      	mov	r2, r3
 800a62c:	460b      	mov	r3, r1
 800a62e:	72fb      	strb	r3, [r7, #11]
 800a630:	4613      	mov	r3, r2
 800a632:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a634:	2300      	movs	r3, #0
 800a636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3318      	adds	r3, #24
 800a63e:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800a648:	7afa      	ldrb	r2, [r7, #11]
 800a64a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a64c:	4611      	mov	r1, r2
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fe f938 	bl	80088c4 <VL53LX_calc_macro_period_us>
 800a654:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800a65c:	2301      	movs	r3, #1
 800a65e:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	031b      	lsls	r3, r3, #12
 800a664:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	085b      	lsrs	r3, r3, #1
 800a66a:	69ba      	ldr	r2, [r7, #24]
 800a66c:	4413      	add	r3, r2
 800a66e:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800a670:	69ba      	ldr	r2, [r7, #24]
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	fbb2 f3f3 	udiv	r3, r2, r3
 800a678:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	2bff      	cmp	r3, #255	@ 0xff
 800a67e:	d904      	bls.n	800a68a <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	22ff      	movs	r2, #255	@ 0xff
 800a684:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325
 800a688:	e004      	b.n	800a694 <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	7afa      	ldrb	r2, [r7, #11]
 800a698:	f883 233a 	strb.w	r2, [r3, #826]	@ 0x33a



	if (status == VL53LX_ERROR_NONE)
 800a69c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10a      	bne.n	800a6ba <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	214b      	movs	r1, #75	@ 0x4b
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f007 f95e 	bl	8011970 <VL53LX_WrByte>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800a6ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10a      	bne.n	800a6d8 <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	2160      	movs	r1, #96	@ 0x60
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f007 f94f 	bl	8011970 <VL53LX_WrByte>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800a6de:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800a6e6:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800a6e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d109      	bne.n	800a704 <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800a6f0:	f107 0214 	add.w	r2, r7, #20
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	2178      	movs	r1, #120	@ 0x78
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f007 f8cd 	bl	8011898 <VL53LX_WriteMulti>
 800a6fe:	4603      	mov	r3, r0
 800a700:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	893a      	ldrh	r2, [r7, #8]
 800a708:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800a70c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a710:	2b00      	cmp	r3, #0
 800a712:	d108      	bne.n	800a726 <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800a714:	893b      	ldrh	r3, [r7, #8]
 800a716:	461a      	mov	r2, r3
 800a718:	211c      	movs	r1, #28
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f007 f952 	bl	80119c4 <VL53LX_WrWord>
 800a720:	4603      	mov	r3, r0
 800a722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a726:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d108      	bne.n	800a740 <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800a72e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a730:	461a      	mov	r2, r3
 800a732:	2164      	movs	r1, #100	@ 0x64
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f007 f945 	bl	80119c4 <VL53LX_WrWord>
 800a73a:	4603      	mov	r3, r0
 800a73c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a740:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a744:	2b00      	cmp	r3, #0
 800a746:	d108      	bne.n	800a75a <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800a748:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a74a:	461a      	mov	r2, r3
 800a74c:	2166      	movs	r1, #102	@ 0x66
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f007 f938 	bl	80119c4 <VL53LX_WrWord>
 800a754:	4603      	mov	r3, r0
 800a756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800a75a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3728      	adds	r7, #40	@ 0x28
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800a766:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a76a:	b0a2      	sub	sp, #136	@ 0x88
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	64f8      	str	r0, [r7, #76]	@ 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a770:	2300      	movs	r3, #0
 800a772:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a778:	3318      	adds	r3, #24
 800a77a:	673b      	str	r3, [r7, #112]	@ 0x70
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a77c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a77e:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800a782:	66fb      	str	r3, [r7, #108]	@ 0x6c
	VL53LX_smudge_corrector_config_t *pconfig =
 800a784:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a786:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800a78a:	3314      	adds	r3, #20
 800a78c:	66bb      	str	r3, [r7, #104]	@ 0x68
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a78e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a790:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 800a794:	3318      	adds	r3, #24
 800a796:	667b      	str	r3, [r7, #100]	@ 0x64
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800a798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a79a:	663b      	str	r3, [r7, #96]	@ 0x60
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800a79c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a79e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a7a2:	65fb      	str	r3, [r7, #92]	@ 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800a7a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7a6:	69db      	ldr	r3, [r3, #28]
 800a7a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800a7ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
		pxmonitor->VL53LX_p_016;
 800a7b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800a7b4:	4413      	add	r3, r2
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	461c      	mov	r4, r3
 800a7ba:	4615      	mov	r5, r2
 800a7bc:	e9c7 4514 	strd	r4, r5, [r7, #80]	@ 0x50
	if (peak_duration_us == 0)
 800a7c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d103      	bne.n	800a7d0 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x6a>
		peak_duration_us = 1000;
 800a7c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a7cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a7d0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	462b      	mov	r3, r5
 800a7d8:	f04f 0000 	mov.w	r0, #0
 800a7dc:	f04f 0100 	mov.w	r1, #0
 800a7e0:	0159      	lsls	r1, r3, #5
 800a7e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a7e6:	0150      	lsls	r0, r2, #5
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	ebb2 0804 	subs.w	r8, r2, r4
 800a7f0:	eb63 0905 	sbc.w	r9, r3, r5
 800a7f4:	f04f 0200 	mov.w	r2, #0
 800a7f8:	f04f 0300 	mov.w	r3, #0
 800a7fc:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800a800:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800a804:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800a808:	4690      	mov	r8, r2
 800a80a:	4699      	mov	r9, r3
 800a80c:	eb18 0304 	adds.w	r3, r8, r4
 800a810:	633b      	str	r3, [r7, #48]	@ 0x30
 800a812:	eb49 0305 	adc.w	r3, r9, r5
 800a816:	637b      	str	r3, [r7, #52]	@ 0x34
 800a818:	f04f 0200 	mov.w	r2, #0
 800a81c:	f04f 0300 	mov.w	r3, #0
 800a820:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a824:	4629      	mov	r1, r5
 800a826:	00cb      	lsls	r3, r1, #3
 800a828:	4621      	mov	r1, r4
 800a82a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a82e:	4621      	mov	r1, r4
 800a830:	00ca      	lsls	r2, r1, #3
 800a832:	4610      	mov	r0, r2
 800a834:	4619      	mov	r1, r3
 800a836:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a83a:	2200      	movs	r2, #0
 800a83c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a83e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a840:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a844:	f7f5 fd3c 	bl	80002c0 <__aeabi_uldivmod>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a850:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800a854:	4622      	mov	r2, r4
 800a856:	462b      	mov	r3, r5
 800a858:	f04f 0000 	mov.w	r0, #0
 800a85c:	f04f 0100 	mov.w	r1, #0
 800a860:	0159      	lsls	r1, r3, #5
 800a862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a866:	0150      	lsls	r0, r2, #5
 800a868:	4602      	mov	r2, r0
 800a86a:	460b      	mov	r3, r1
 800a86c:	ebb2 0a04 	subs.w	sl, r2, r4
 800a870:	eb63 0b05 	sbc.w	fp, r3, r5
 800a874:	f04f 0200 	mov.w	r2, #0
 800a878:	f04f 0300 	mov.w	r3, #0
 800a87c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a880:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800a884:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800a888:	4692      	mov	sl, r2
 800a88a:	469b      	mov	fp, r3
 800a88c:	eb1a 0304 	adds.w	r3, sl, r4
 800a890:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a892:	eb4b 0305 	adc.w	r3, fp, r5
 800a896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a898:	f04f 0200 	mov.w	r2, #0
 800a89c:	f04f 0300 	mov.w	r3, #0
 800a8a0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	00cb      	lsls	r3, r1, #3
 800a8a8:	4621      	mov	r1, r4
 800a8aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	00ca      	lsls	r2, r1, #3
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8be:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a8c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a8c4:	f7f5 fcfc 	bl	80002c0 <__aeabi_uldivmod>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800a8d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a8d6:	8ad2      	ldrh	r2, [r2, #22]
 800a8d8:	fb02 f303 	mul.w	r3, r2, r3
 800a8dc:	2200      	movs	r2, #0
 800a8de:	623b      	str	r3, [r7, #32]
 800a8e0:	627a      	str	r2, [r7, #36]	@ 0x24
 800a8e2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a8e6:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
	if (temp64z == 0)
 800a8ea:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	d105      	bne.n	800a8fe <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800a8f2:	f04f 0201 	mov.w	r2, #1
 800a8f6:	f04f 0300 	mov.w	r3, #0
 800a8fa:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	temp64a = temp64a * 1000 * 256;
 800a8fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a902:	4602      	mov	r2, r0
 800a904:	460b      	mov	r3, r1
 800a906:	f04f 0400 	mov.w	r4, #0
 800a90a:	f04f 0500 	mov.w	r5, #0
 800a90e:	015d      	lsls	r5, r3, #5
 800a910:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a914:	0154      	lsls	r4, r2, #5
 800a916:	4622      	mov	r2, r4
 800a918:	462b      	mov	r3, r5
 800a91a:	1a14      	subs	r4, r2, r0
 800a91c:	61bc      	str	r4, [r7, #24]
 800a91e:	eb63 0301 	sbc.w	r3, r3, r1
 800a922:	61fb      	str	r3, [r7, #28]
 800a924:	f04f 0200 	mov.w	r2, #0
 800a928:	f04f 0300 	mov.w	r3, #0
 800a92c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800a930:	464c      	mov	r4, r9
 800a932:	00a3      	lsls	r3, r4, #2
 800a934:	4644      	mov	r4, r8
 800a936:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800a93a:	4644      	mov	r4, r8
 800a93c:	00a2      	lsls	r2, r4, #2
 800a93e:	4614      	mov	r4, r2
 800a940:	461d      	mov	r5, r3
 800a942:	4623      	mov	r3, r4
 800a944:	181b      	adds	r3, r3, r0
 800a946:	613b      	str	r3, [r7, #16]
 800a948:	462b      	mov	r3, r5
 800a94a:	eb41 0303 	adc.w	r3, r1, r3
 800a94e:	617b      	str	r3, [r7, #20]
 800a950:	f04f 0200 	mov.w	r2, #0
 800a954:	f04f 0300 	mov.w	r3, #0
 800a958:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a95c:	4629      	mov	r1, r5
 800a95e:	02cb      	lsls	r3, r1, #11
 800a960:	4621      	mov	r1, r4
 800a962:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800a966:	4621      	mov	r1, r4
 800a968:	02ca      	lsls	r2, r1, #11
 800a96a:	461c      	mov	r4, r3
 800a96c:	4613      	mov	r3, r2
 800a96e:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800a972:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a976:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a97a:	f7f5 fca1 	bl	80002c0 <__aeabi_uldivmod>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = temp64a * 1000 * 256;
 800a986:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a98a:	4602      	mov	r2, r0
 800a98c:	460b      	mov	r3, r1
 800a98e:	f04f 0400 	mov.w	r4, #0
 800a992:	f04f 0500 	mov.w	r5, #0
 800a996:	015d      	lsls	r5, r3, #5
 800a998:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a99c:	0154      	lsls	r4, r2, #5
 800a99e:	4622      	mov	r2, r4
 800a9a0:	462b      	mov	r3, r5
 800a9a2:	1a14      	subs	r4, r2, r0
 800a9a4:	60bc      	str	r4, [r7, #8]
 800a9a6:	eb63 0301 	sbc.w	r3, r3, r1
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	f04f 0200 	mov.w	r2, #0
 800a9b0:	f04f 0300 	mov.w	r3, #0
 800a9b4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800a9b8:	464c      	mov	r4, r9
 800a9ba:	00a3      	lsls	r3, r4, #2
 800a9bc:	4644      	mov	r4, r8
 800a9be:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800a9c2:	4644      	mov	r4, r8
 800a9c4:	00a2      	lsls	r2, r4, #2
 800a9c6:	4614      	mov	r4, r2
 800a9c8:	461d      	mov	r5, r3
 800a9ca:	4623      	mov	r3, r4
 800a9cc:	181b      	adds	r3, r3, r0
 800a9ce:	603b      	str	r3, [r7, #0]
 800a9d0:	462b      	mov	r3, r5
 800a9d2:	eb41 0303 	adc.w	r3, r1, r3
 800a9d6:	607b      	str	r3, [r7, #4]
 800a9d8:	f04f 0200 	mov.w	r2, #0
 800a9dc:	f04f 0300 	mov.w	r3, #0
 800a9e0:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	02cb      	lsls	r3, r1, #11
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	02ca      	lsls	r2, r1, #11
 800a9f2:	461c      	mov	r4, r3
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800a9fa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a9fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800aa02:	f7f5 fc5d 	bl	80002c0 <__aeabi_uldivmod>
 800aa06:	4602      	mov	r2, r0
 800aa08:	460b      	mov	r3, r1
 800aa0a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	pint->required_samples = (uint32_t)temp64a;
 800aa0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa12:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800aa14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d802      	bhi.n	800aa22 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800aa1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa1e:	2202      	movs	r2, #2
 800aa20:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800aa22:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3788      	adds	r7, #136	@ 0x88
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800aa30 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b096      	sub	sp, #88	@ 0x58
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
 800aa3c:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	3318      	adds	r3, #24
 800aa48:	637b      	str	r3, [r7, #52]	@ 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	long int SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800aa4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800aa50:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800aa52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa54:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800aa58:	331c      	adds	r3, #28
 800aa5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800aa5c:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d107      	bne.n	800aa74 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	889b      	ldrh	r3, [r3, #4]
 800aa68:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	609a      	str	r2, [r3, #8]
 800aa72:	e002      	b.n	800aa7a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	653b      	str	r3, [r7, #80]	@ 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800aa80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa82:	899b      	ldrh	r3, [r3, #12]
 800aa84:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800aa88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa8a:	89db      	ldrh	r3, [r3, #14]
 800aa8c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d004      	beq.n	800aaa4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d126      	bne.n	800aaf2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800aaa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa6:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d022      	beq.n	800aaf2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800aaac:	f107 0317 	add.w	r3, r7, #23
 800aab0:	4619      	mov	r1, r3
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f000 fea7 	bl	800b806 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800aab8:	7dfb      	ldrb	r3, [r7, #23]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800aabe:	2301      	movs	r3, #1
 800aac0:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800aac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac4:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d003      	beq.n	800aad4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800aacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	653b      	str	r3, [r7, #80]	@ 0x50
 800aad2:	e006      	b.n	800aae2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800aad4:	7dfb      	ldrb	r3, [r7, #23]
 800aad6:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800aad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aada:	3202      	adds	r2, #2
 800aadc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae0:	653b      	str	r3, [r7, #80]	@ 0x50

		orig_x_gradient =
 800aae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae4:	889b      	ldrh	r3, [r3, #4]
 800aae6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800aaea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaec:	88db      	ldrh	r3, [r3, #6]
 800aaee:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d10a      	bne.n	800ab12 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800aafc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d106      	bne.n	800ab12 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	795b      	ldrb	r3, [r3, #5]
 800ab08:	f043 0301 	orr.w	r3, r3, #1
 800ab0c:	b2da      	uxtb	r2, r3
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d10a      	bne.n	800ab32 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800ab1c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d106      	bne.n	800ab32 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	795b      	ldrb	r3, [r3, #5]
 800ab28:	f043 0302 	orr.w	r3, r3, #2
 800ab2c:	b2da      	uxtb	r2, r3
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800ab32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d101      	bne.n	800ab3c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	653b      	str	r3, [r7, #80]	@ 0x50



	if (pconfig->user_scaler_set == 1) {
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d108      	bne.n	800ab58 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab4a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab52:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 800ab56:	e017      	b.n	800ab88 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x158>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800ab58:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800ab5c:	019a      	lsls	r2, r3, #6
 800ab5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab64:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800ab6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800ab70:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800ab74:	019a      	lsls	r2, r3, #6
 800ab76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab7c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800ab86:	859a      	strh	r2, [r3, #44]	@ 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d12a      	bne.n	800abe8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b8>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 800ab9a:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800ab9e:	647b      	str	r3, [r7, #68]	@ 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800aba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aba2:	119b      	asrs	r3, r3, #6
 800aba4:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800aba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abac:	db02      	blt.n	800abb4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x184>
			itemp32 = 0xFFFF;
 800abae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800abb2:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800abb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abb6:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 800abc4:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800abc8:	647b      	str	r3, [r7, #68]	@ 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800abca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abcc:	119b      	asrs	r3, r3, #6
 800abce:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800abd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abd6:	db02      	blt.n	800abde <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1ae>
			itemp32 = 0xFFFF;
 800abd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800abdc:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800abde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abe0:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	81da      	strh	r2, [r3, #14]
 800abe6:	e042      	b.n	800ac6e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23e>
	} else if (pconfig->scaler_calc_method == 1) {
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d13d      	bne.n	800ac6e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23e>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800abf6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800abfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	da00      	bge.n	800ac04 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d4>
 800ac02:	330f      	adds	r3, #15
 800ac04:	111b      	asrs	r3, r3, #4
 800ac06:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 800ac08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800ac0e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800ac12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac14:	4413      	add	r3, r2
 800ac16:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800ac18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac1e:	db02      	blt.n	800ac26 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
			itemp32 = 0xFFFF;
 800ac20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ac24:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800ac26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac28:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800ac32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ac34:	1ad3      	subs	r3, r2, r3
 800ac36:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800ac38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac3a:	4a55      	ldr	r2, [pc, #340]	@ (800ad90 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x360>)
 800ac3c:	fb82 1203 	smull	r1, r2, r2, r3
 800ac40:	1152      	asrs	r2, r2, #5
 800ac42:	17db      	asrs	r3, r3, #31
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 800ac48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800ac4e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800ac52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac54:	4413      	add	r3, r2
 800ac56:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800ac58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac5e:	db02      	blt.n	800ac66 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x236>
			itemp32 = 0xFFFF;
 800ac60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ac64:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800ac66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac68:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	785b      	ldrb	r3, [r3, #1]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d17f      	bne.n	800ad76 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>
 800ac76:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d07b      	beq.n	800ad76 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	2201      	movs	r2, #1
 800ac82:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	62bb      	str	r3, [r7, #40]	@ 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800ac8a:	f107 0317 	add.w	r3, r7, #23
 800ac8e:	4619      	mov	r1, r3
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 fdb8 	bl	800b806 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800ac96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac98:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 800ac9c:	627b      	str	r3, [r7, #36]	@ 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800ac9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca0:	3308      	adds	r3, #8
 800aca2:	643b      	str	r3, [r7, #64]	@ 0x40
		if ((histo_merge_nb > 0) &&
 800aca4:	7dfb      	ldrb	r3, [r7, #23]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d049      	beq.n	800ad3e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800acaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acac:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
		if ((histo_merge_nb > 0) &&
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d144      	bne.n	800ad3e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800acb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d041      	beq.n	800ad3e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(nXtalk != 0)) {
			cXtalk =
 800acba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = ((long int)(nXtalk) - (long int)(cXtalk))/512;
 800acc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acc2:	6a3b      	ldr	r3, [r7, #32]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	da01      	bge.n	800acce <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x29e>
 800acca:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800acce:	125b      	asrs	r3, r3, #9
 800acd0:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800acd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d005      	beq.n	800ace4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b4>
				(SmudgeFactor >= (long int)(pconfig->max_smudge_factor)))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acdc:	461a      	mov	r2, r3
			if ((max ==  0)||
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	4293      	cmp	r3, r2
 800ace2:	db03      	blt.n	800acec <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2bc>
				pout->new_xtalk_applied_flag = 0;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	2200      	movs	r2, #0
 800ace8:	719a      	strb	r2, [r3, #6]
 800acea:	e028      	b.n	800ad3e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			else {
				incXtalk = nXtalk / max;
 800acec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf4:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
				for (i = 0; i < max-1; i++) {
 800acfa:	2300      	movs	r3, #0
 800acfc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800ad00:	e014      	b.n	800ad2c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2fc>
					cval += incXtalk;
 800ad02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	4413      	add	r3, r2
 800ad08:	63fb      	str	r3, [r7, #60]	@ 0x3c
					*pcpo = cval + cval/100;
 800ad0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad0c:	4a21      	ldr	r2, [pc, #132]	@ (800ad94 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x364>)
 800ad0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad12:	095a      	lsrs	r2, r3, #5
 800ad14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad16:	441a      	add	r2, r3
 800ad18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad1a:	601a      	str	r2, [r3, #0]
					pcpo++;
 800ad1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad1e:	3304      	adds	r3, #4
 800ad20:	643b      	str	r3, [r7, #64]	@ 0x40
				for (i = 0; i < max-1; i++) {
 800ad22:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800ad26:	3301      	adds	r3, #1
 800ad28:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800ad2c:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800ad30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad32:	3b01      	subs	r3, #1
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d3e4      	bcc.n	800ad02 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				}
				*pcpo = nXtalk;
 800ad38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad3c:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	799b      	ldrb	r3, [r3, #6]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d017      	beq.n	800ad76 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4c:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ad54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad56:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ad5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad60:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	789b      	ldrb	r3, [r3, #2]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d105      	bne.n	800ad76 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>

			pconfig->smudge_corr_apply_enabled = 0;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800ad76:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d002      	beq.n	800ad84 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x354>
		pout->smudge_corr_valid = 1;
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	2201      	movs	r2, #1
 800ad82:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800ad84:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3758      	adds	r7, #88	@ 0x58
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	66666667 	.word	0x66666667
 800ad94:	51eb851f 	.word	0x51eb851f

0800ad98 <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800ad98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad9c:	b0a2      	sub	sp, #136	@ 0x88
 800ad9e:	af02      	add	r7, sp, #8
 800ada0:	6278      	str	r0, [r7, #36]	@ 0x24



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ada2:	2300      	movs	r3, #0
 800ada4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ada8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adaa:	3318      	adds	r3, #24
 800adac:	66bb      	str	r3, [r7, #104]	@ 0x68
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800adae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb0:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800adb4:	667b      	str	r3, [r7, #100]	@ 0x64
	VL53LX_smudge_corrector_config_t *pconfig =
 800adb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800adb8:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800adbc:	3314      	adds	r3, #20
 800adbe:	663b      	str	r3, [r7, #96]	@ 0x60
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800adc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800adc2:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 800adc6:	3318      	adds	r3, #24
 800adc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800adca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adcc:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800add0:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800add2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800add4:	657b      	str	r3, [r7, #84]	@ 0x54
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800add6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800add8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800addc:	653b      	str	r3, [r7, #80]	@ 0x50

	uint8_t	run_smudge_detection = 0;
 800adde:	2300      	movs	r3, #0
 800ade0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t merging_complete = 0;
 800ade4:	2300      	movs	r3, #0
 800ade6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint8_t	run_nodetect = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t ambient_check = 0;
 800adf0:	2300      	movs	r3, #0
 800adf2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	int32_t itemp32 = 0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint64_t utemp64 = 0;
 800adfa:	f04f 0200 	mov.w	r2, #0
 800adfe:	f04f 0300 	mov.w	r3, #0
 800ae02:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800ae06:	2300      	movs	r3, #0
 800ae08:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint32_t xtalk_offset_out = 0;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	673b      	str	r3, [r7, #112]	@ 0x70
	uint32_t xtalk_offset_in = 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t current_xtalk = 0;
 800ae14:	2300      	movs	r3, #0
 800ae16:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t smudge_margin_adjusted = 0;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t i = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t nodetect_index = 0;
 800ae22:	2300      	movs	r3, #0
 800ae24:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800ae28:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae30:	f000 fce9 	bl	800b806 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800ae34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d004      	beq.n	800ae46 <VL53LX_dynamic_xtalk_correction_corrector+0xae>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800ae3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae3e:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
	if ((histo_merge_nb == 0) ||
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d002      	beq.n	800ae4c <VL53LX_dynamic_xtalk_correction_corrector+0xb4>
		histo_merge_nb = 1;
 800ae46:	2301      	movs	r3, #1
 800ae48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800ae4c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ae4e:	f000 fb10 	bl	800b472 <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800ae52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800ae5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae62:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800ae66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae68:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d901      	bls.n	800ae74 <VL53LX_dynamic_xtalk_correction_corrector+0xdc>
 800ae70:	2301      	movs	r3, #1
 800ae72:	e000      	b.n	800ae76 <VL53LX_dynamic_xtalk_correction_corrector+0xde>
 800ae74:	2300      	movs	r3, #0
 800ae76:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800ae7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae7c:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d106      	bne.n	800ae92 <VL53LX_dynamic_xtalk_correction_corrector+0xfa>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800ae84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae86:	f893 2184 	ldrb.w	r2, [r3, #388]	@ 0x184
 800ae8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d101      	bne.n	800ae96 <VL53LX_dynamic_xtalk_correction_corrector+0xfe>
 800ae92:	2301      	movs	r3, #1
 800ae94:	e000      	b.n	800ae98 <VL53LX_dynamic_xtalk_correction_corrector+0x100>
 800ae96:	2300      	movs	r3, #0
	merging_complete =
 800ae98:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800ae9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae9e:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d10e      	bne.n	800aec2 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pconfig->smudge_corr_enabled == 1) &&
 800aea4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00a      	beq.n	800aec2 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pR->xmonitor.range_status
 800aeac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aeae:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
		ambient_check &&
 800aeb2:	2b09      	cmp	r3, #9
 800aeb4:	d105      	bne.n	800aec2 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800aeb6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
 800aebe:	2301      	movs	r3, #1
 800aec0:	e000      	b.n	800aec4 <VL53LX_dynamic_xtalk_correction_corrector+0x12c>
 800aec2:	2300      	movs	r3, #0
	run_smudge_detection =
 800aec4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800aec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aeca:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
 800aece:	2b09      	cmp	r3, #9
 800aed0:	f000 80a6 	beq.w	800b020 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800aed4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aed6:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	f040 80a1 	bne.w	800b020 <VL53LX_dynamic_xtalk_correction_corrector+0x288>

		run_nodetect = 2;
 800aede:	2302      	movs	r3, #2
 800aee0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800aee4:	2300      	movs	r3, #0
 800aee6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800aeea:	e02d      	b.n	800af48 <VL53LX_dynamic_xtalk_correction_corrector+0x1b0>
			if (pR->VL53LX_p_003[i].range_status ==
 800aeec:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800aef0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aef2:	234c      	movs	r3, #76	@ 0x4c
 800aef4:	fb01 f303 	mul.w	r3, r1, r3
 800aef8:	4413      	add	r3, r2
 800aefa:	335e      	adds	r3, #94	@ 0x5e
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	2b09      	cmp	r3, #9
 800af00:	d11d      	bne.n	800af3e <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800af02:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800af06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800af08:	234c      	movs	r3, #76	@ 0x4c
 800af0a:	fb01 f303 	mul.w	r3, r1, r3
 800af0e:	4413      	add	r3, r2
 800af10:	335a      	adds	r3, #90	@ 0x5a
 800af12:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af16:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800af18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af1a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800af1c:	429a      	cmp	r2, r3
 800af1e:	dc03      	bgt.n	800af28 <VL53LX_dynamic_xtalk_correction_corrector+0x190>
					run_nodetect = 0;
 800af20:	2300      	movs	r3, #0
 800af22:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800af26:	e00a      	b.n	800af3e <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				} else {
					if (run_nodetect == 2) {
 800af28:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d106      	bne.n	800af3e <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
						run_nodetect = 1;
 800af30:	2301      	movs	r3, #1
 800af32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						nodetect_index = i;
 800af36:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800af3a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800af3e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800af42:	3301      	adds	r3, #1
 800af44:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800af48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af4a:	7c9a      	ldrb	r2, [r3, #18]
 800af4c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800af50:	4293      	cmp	r3, r2
 800af52:	d3cb      	bcc.n	800aeec <VL53LX_dynamic_xtalk_correction_corrector+0x154>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800af54:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800af58:	2b02      	cmp	r3, #2
 800af5a:	d102      	bne.n	800af62 <VL53LX_dynamic_xtalk_correction_corrector+0x1ca>

			run_nodetect = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800af62:	f897 106e 	ldrb.w	r1, [r7, #110]	@ 0x6e
		amr =
 800af66:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800af68:	234c      	movs	r3, #76	@ 0x4c
 800af6a:	fb01 f303 	mul.w	r3, r1, r3
 800af6e:	4413      	add	r3, r2
 800af70:	3348      	adds	r3, #72	@ 0x48
 800af72:	881b      	ldrh	r3, [r3, #0]
 800af74:	867b      	strh	r3, [r7, #50]	@ 0x32

		if (run_nodetect == 1) {
 800af76:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d150      	bne.n	800b020 <VL53LX_dynamic_xtalk_correction_corrector+0x288>




			utemp64 = 1000 * ((uint64_t)amr);
 800af7e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800af80:	2200      	movs	r2, #0
 800af82:	469a      	mov	sl, r3
 800af84:	4693      	mov	fp, r2
 800af86:	4652      	mov	r2, sl
 800af88:	465b      	mov	r3, fp
 800af8a:	f04f 0000 	mov.w	r0, #0
 800af8e:	f04f 0100 	mov.w	r1, #0
 800af92:	0159      	lsls	r1, r3, #5
 800af94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800af98:	0150      	lsls	r0, r2, #5
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	ebb2 040a 	subs.w	r4, r2, sl
 800afa2:	eb63 050b 	sbc.w	r5, r3, fp
 800afa6:	f04f 0200 	mov.w	r2, #0
 800afaa:	f04f 0300 	mov.w	r3, #0
 800afae:	00ab      	lsls	r3, r5, #2
 800afb0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800afb4:	00a2      	lsls	r2, r4, #2
 800afb6:	4614      	mov	r4, r2
 800afb8:	461d      	mov	r5, r3
 800afba:	eb14 080a 	adds.w	r8, r4, sl
 800afbe:	eb45 090b 	adc.w	r9, r5, fp
 800afc2:	f04f 0200 	mov.w	r2, #0
 800afc6:	f04f 0300 	mov.w	r3, #0
 800afca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800afce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800afd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800afd6:	4690      	mov	r8, r2
 800afd8:	4699      	mov	r9, r3
 800afda:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40


			utemp64 = utemp64 << 9;
 800afde:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800afe2:	f04f 0200 	mov.w	r2, #0
 800afe6:	f04f 0300 	mov.w	r3, #0
 800afea:	024b      	lsls	r3, r1, #9
 800afec:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800aff0:	0242      	lsls	r2, r0, #9
 800aff2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800aff6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800affa:	2200      	movs	r2, #0
 800affc:	61bb      	str	r3, [r7, #24]
 800affe:	61fa      	str	r2, [r7, #28]
 800b000:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b004:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800b008:	4621      	mov	r1, r4
 800b00a:	428a      	cmp	r2, r1
 800b00c:	4629      	mov	r1, r5
 800b00e:	418b      	sbcs	r3, r1
 800b010:	d203      	bcs.n	800b01a <VL53LX_dynamic_xtalk_correction_corrector+0x282>
				run_nodetect = 1;
 800b012:	2301      	movs	r3, #1
 800b014:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800b018:	e002      	b.n	800b020 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
			else
				run_nodetect = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		}
	}


	if (run_smudge_detection) {
 800b020:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 810b 	beq.w	800b240 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>

		pint->nodetect_counter = 0;
 800b02a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b02c:	2200      	movs	r2, #0
 800b02e:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800b030:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b032:	f7ff fb98 	bl	800a766 <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800b036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b038:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800b03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800b03e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	62fb      	str	r3, [r7, #44]	@ 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800b044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	63bb      	str	r3, [r7, #56]	@ 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800b04a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b04c:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	637b      	str	r3, [r7, #52]	@ 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800b052:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b056:	1ad2      	subs	r2, r2, r3
 800b058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b05a:	4413      	add	r3, r2
 800b05c:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800b05e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b060:	2b00      	cmp	r3, #0
 800b062:	da02      	bge.n	800b06a <VL53LX_dynamic_xtalk_correction_corrector+0x2d2>
			itemp32 = itemp32 * (-1);
 800b064:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b066:	425b      	negs	r3, r3
 800b068:	67bb      	str	r3, [r7, #120]	@ 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800b06a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	461a      	mov	r2, r3
 800b070:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b072:	4293      	cmp	r3, r2
 800b074:	dd0c      	ble.n	800b090 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800b076:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted)) {
 800b078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 800b07a:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800b07c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b07e:	429a      	cmp	r2, r3
 800b080:	da03      	bge.n	800b08a <VL53LX_dynamic_xtalk_correction_corrector+0x2f2>
				pout->single_xtalk_delta_flag = 1;
 800b082:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b084:	2201      	movs	r2, #1
 800b086:	709a      	strb	r2, [r3, #2]
 800b088:	e002      	b.n	800b090 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800b08a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b08c:	2202      	movs	r2, #2
 800b08e:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800b090:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	1c5a      	adds	r2, r3, #1
 800b096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b098:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800b09a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d906      	bls.n	800b0b4 <VL53LX_dynamic_xtalk_correction_corrector+0x31c>
			pout->sample_limit_exceeded_flag = 1;
 800b0a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800b0b2:	e014      	b.n	800b0de <VL53LX_dynamic_xtalk_correction_corrector+0x346>
		} else {
			pint->accumulator = pint->accumulator +
 800b0b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b0ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0bc:	2000      	movs	r0, #0
 800b0be:	6139      	str	r1, [r7, #16]
 800b0c0:	6178      	str	r0, [r7, #20]
 800b0c2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b0c6:	4621      	mov	r1, r4
 800b0c8:	1851      	adds	r1, r2, r1
 800b0ca:	60b9      	str	r1, [r7, #8]
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	eb43 0101 	adc.w	r1, r3, r1
 800b0d2:	60f9      	str	r1, [r7, #12]
 800b0d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b0da:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800b0de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d202      	bcs.n	800b0f0 <VL53LX_dynamic_xtalk_correction_corrector+0x358>
			continue_processing = CONT_NEXT_LOOP;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800b0f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0f2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b0f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	603b      	str	r3, [r7, #0]
 800b0fe:	607a      	str	r2, [r7, #4]
 800b100:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b104:	f7f5 f8dc 	bl	80002c0 <__aeabi_uldivmod>
 800b108:	4602      	mov	r2, r0
 800b10a:	460b      	mov	r3, r1
		xtalk_offset_out =
 800b10c:	4613      	mov	r3, r2
 800b10e:	673b      	str	r3, [r7, #112]	@ 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800b110:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b114:	1ad2      	subs	r2, r2, r3
 800b116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b118:	4413      	add	r3, r2
 800b11a:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800b11c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b11e:	2b00      	cmp	r3, #0
 800b120:	da02      	bge.n	800b128 <VL53LX_dynamic_xtalk_correction_corrector+0x390>
			itemp32 = itemp32 * (-1);
 800b122:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b124:	425b      	negs	r3, r3
 800b126:	67bb      	str	r3, [r7, #120]	@ 0x78

		if (continue_processing == CONT_CONTINUE &&
 800b128:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d112      	bne.n	800b156 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800b130:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800b136:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b138:	4293      	cmp	r3, r2
 800b13a:	db0c      	blt.n	800b156 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800b13c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted))
 800b13e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 800b140:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800b142:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b144:	429a      	cmp	r2, r3
 800b146:	da03      	bge.n	800b150 <VL53LX_dynamic_xtalk_correction_corrector+0x3b8>
				pout->averaged_xtalk_delta_flag = 1;
 800b148:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b14a:	2201      	movs	r2, #1
 800b14c:	70da      	strb	r2, [r3, #3]
 800b14e:	e002      	b.n	800b156 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800b150:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b152:	2202      	movs	r2, #2
 800b154:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800b156:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d108      	bne.n	800b170 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800b15e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b160:	69db      	ldr	r3, [r3, #28]
 800b162:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800b164:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b166:	4293      	cmp	r3, r2
 800b168:	da02      	bge.n	800b170 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			)

			continue_processing = CONT_RESET;
 800b16a:	2302      	movs	r3, #2
 800b16c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77



		pout->smudge_corr_clipped = 0;
 800b170:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b172:	2200      	movs	r2, #0
 800b174:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800b176:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d112      	bne.n	800b1a4 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800b17e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b180:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00e      	beq.n	800b1a4 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800b186:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b188:	6a1b      	ldr	r3, [r3, #32]
 800b18a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800b18e:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800b192:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b194:	429a      	cmp	r2, r3
 800b196:	d905      	bls.n	800b1a4 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
				pout->smudge_corr_clipped = 1;
 800b198:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b19a:	2201      	movs	r2, #1
 800b19c:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800b19e:	2302      	movs	r3, #2
 800b1a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800b1a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1a6:	7c1b      	ldrb	r3, [r3, #16]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d007      	beq.n	800b1bc <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800b1ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1ae:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800b1b0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d902      	bls.n	800b1bc <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			xtalk_offset_out =
 800b1b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800b1bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1be:	7c1b      	ldrb	r3, [r3, #16]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d107      	bne.n	800b1d4 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800b1c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1c6:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800b1c8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d202      	bcs.n	800b1d4 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			xtalk_offset_out =
 800b1ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800b1d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1d6:	089b      	lsrs	r3, r3, #2
 800b1d8:	673b      	str	r3, [r7, #112]	@ 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800b1da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b1e0:	d301      	bcc.n	800b1e6 <VL53LX_dynamic_xtalk_correction_corrector+0x44e>
			xtalk_offset_out = 0x3FFFF;
 800b1e2:	4b3f      	ldr	r3, [pc, #252]	@ (800b2e0 <VL53LX_dynamic_xtalk_correction_corrector+0x548>)
 800b1e4:	673b      	str	r3, [r7, #112]	@ 0x70


		if (continue_processing == CONT_CONTINUE) {
 800b1e6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10d      	bne.n	800b20a <VL53LX_dynamic_xtalk_correction_corrector+0x472>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	9301      	str	r3, [sp, #4]
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b1fa:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b1fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b1fe:	f7ff fc17 	bl	800aa30 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800b202:	2302      	movs	r3, #2
 800b204:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800b208:	e009      	b.n	800b21e <VL53LX_dynamic_xtalk_correction_corrector+0x486>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b20a:	2301      	movs	r3, #1
 800b20c:	9301      	str	r3, [sp, #4]
 800b20e:	2301      	movs	r3, #1
 800b210:	9300      	str	r3, [sp, #0]
 800b212:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b214:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b216:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b218:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b21a:	f7ff fc09 	bl	800aa30 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800b21e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b222:	2b02      	cmp	r3, #2
 800b224:	d10c      	bne.n	800b240 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>
			pint->accumulator = 0;
 800b226:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800b228:	f04f 0200 	mov.w	r2, #0
 800b22c:	f04f 0300 	mov.w	r3, #0
 800b230:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800b234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b236:	2200      	movs	r2, #0
 800b238:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800b23a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b23c:	2200      	movs	r2, #0
 800b23e:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800b240:	2300      	movs	r3, #0
 800b242:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (run_nodetect == 1) {
 800b246:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d140      	bne.n	800b2d0 <VL53LX_dynamic_xtalk_correction_corrector+0x538>

		pint->nodetect_counter += 1;
 800b24e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	1c5a      	adds	r2, r3, #1
 800b254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b256:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800b258:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b25a:	691a      	ldr	r2, [r3, #16]
 800b25c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b25e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b260:	429a      	cmp	r2, r3
 800b262:	d202      	bcs.n	800b26a <VL53LX_dynamic_xtalk_correction_corrector+0x4d2>
			continue_processing = CONT_NEXT_LOOP;
 800b264:	2301      	movs	r3, #1
 800b266:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800b26a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b26c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b26e:	673b      	str	r3, [r7, #112]	@ 0x70

		if (continue_processing == CONT_CONTINUE) {
 800b270:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b274:	2b00      	cmp	r3, #0
 800b276:	d110      	bne.n	800b29a <VL53LX_dynamic_xtalk_correction_corrector+0x502>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b278:	2300      	movs	r3, #0
 800b27a:	9301      	str	r3, [sp, #4]
 800b27c:	2300      	movs	r3, #0
 800b27e:	9300      	str	r3, [sp, #0]
 800b280:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b282:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b284:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b286:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b288:	f7ff fbd2 	bl	800aa30 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800b28c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b28e:	2202      	movs	r2, #2
 800b290:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800b292:	2302      	movs	r3, #2
 800b294:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800b298:	e009      	b.n	800b2ae <VL53LX_dynamic_xtalk_correction_corrector+0x516>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b29a:	2301      	movs	r3, #1
 800b29c:	9301      	str	r3, [sp, #4]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	9300      	str	r3, [sp, #0]
 800b2a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b2a6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b2a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b2aa:	f7ff fbc1 	bl	800aa30 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800b2ae:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b2b2:	2b02      	cmp	r3, #2
 800b2b4:	d10c      	bne.n	800b2d0 <VL53LX_dynamic_xtalk_correction_corrector+0x538>
			pint->accumulator = 0;
 800b2b6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800b2b8:	f04f 0200 	mov.w	r2, #0
 800b2bc:	f04f 0300 	mov.w	r3, #0
 800b2c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800b2c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800b2ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800b2d0:	f997 306d 	ldrsb.w	r3, [r7, #109]	@ 0x6d
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3780      	adds	r7, #128	@ 0x80
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2de:	bf00      	nop
 800b2e0:	0003ffff 	.word	0x0003ffff

0800b2e4 <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	3318      	adds	r3, #24
 800b2f4:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800b2fc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b304:	2201      	movs	r2, #1
 800b306:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b310:	2201      	movs	r2, #1
 800b312:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b328:	2200      	movs	r2, #0
 800b32a:	f8a3 2398 	strh.w	r2, [r3, #920]	@ 0x398
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b334:	461a      	mov	r2, r3
 800b336:	2364      	movs	r3, #100	@ 0x64
 800b338:	f8c2 339c 	str.w	r3, [r2, #924]	@ 0x39c
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b342:	461a      	mov	r2, r3
 800b344:	2300      	movs	r3, #0
 800b346:	f8c2 33a0 	str.w	r3, [r2, #928]	@ 0x3a0
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b350:	2200      	movs	r2, #0
 800b352:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b35c:	461a      	mov	r2, r3
 800b35e:	23c8      	movs	r3, #200	@ 0xc8
 800b360:	f8c2 33a8 	str.w	r3, [r2, #936]	@ 0x3a8
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b36a:	461a      	mov	r2, r3
 800b36c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b370:	f8c2 33ac 	str.w	r3, [r2, #940]	@ 0x3ac
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b37a:	461a      	mov	r2, r3
 800b37c:	f44f 739a 	mov.w	r3, #308	@ 0x134
 800b380:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b38a:	461a      	mov	r2, r3
 800b38c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800b390:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b39a:	461a      	mov	r2, r3
 800b39c:	2380      	movs	r3, #128	@ 0x80
 800b39e:	f8c2 33b8 	str.w	r3, [r2, #952]	@ 0x3b8
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b3b8:	f8a3 23be 	strh.w	r2, [r3, #958]	@ 0x3be
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b3c6:	f8a3 23c0 	strh.w	r2, [r3, #960]	@ 0x3c0
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 23c2 	strb.w	r2, [r3, #962]	@ 0x3c2
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3dc:	461a      	mov	r2, r3
 800b3de:	f04f 735c 	mov.w	r3, #57671680	@ 0x3700000
 800b3e2:	f8c2 33c4 	str.w	r3, [r2, #964]	@ 0x3c4
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	2328      	movs	r3, #40	@ 0x28
 800b3f0:	f8c2 33c8 	str.w	r3, [r2, #968]	@ 0x3c8
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	f44f 73cd 	mov.w	r3, #410	@ 0x19a
 800b400:	f8c2 33cc 	str.w	r3, [r2, #972]	@ 0x3cc
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b40a:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800b40e:	f8a3 23d0 	strh.w	r2, [r3, #976]	@ 0x3d0
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b418:	461a      	mov	r2, r3
 800b41a:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800b41e:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b428:	461a      	mov	r2, r3
 800b42a:	2300      	movs	r3, #0
 800b42c:	f8c2 33d8 	str.w	r3, [r2, #984]	@ 0x3d8
	pdev->smudge_corrector_internals.required_samples = 0;
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b436:	461a      	mov	r2, r3
 800b438:	2300      	movs	r3, #0
 800b43a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
	pdev->smudge_corrector_internals.accumulator = 0;
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	f503 539f 	add.w	r3, r3, #5088	@ 0x13e0
 800b444:	4619      	mov	r1, r3
 800b446:	f04f 0200 	mov.w	r2, #0
 800b44a:	f04f 0300 	mov.w	r3, #0
 800b44e:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b458:	461a      	mov	r2, r3
 800b45a:	2300      	movs	r3, #0
 800b45c:	f8c2 33e8 	str.w	r3, [r2, #1000]	@ 0x3e8


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f000 f806 	bl	800b472 <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800b466:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3718      	adds	r7, #24
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800b472:	b480      	push	{r7}
 800b474:	b085      	sub	sp, #20
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b47a:	2300      	movs	r3, #0
 800b47c:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800b484:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	2200      	movs	r2, #0
 800b48a:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	2200      	movs	r2, #0
 800b490:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	2200      	movs	r2, #0
 800b496:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	2200      	movs	r2, #0
 800b49c:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800b4c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3714      	adds	r7, #20
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr

0800b4d2 <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b084      	sub	sp, #16
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3318      	adds	r3, #24
 800b4e2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	f8c2 323c 	str.w	r3, [r2, #572]	@ 0x23c
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f8a3 2240 	strh.w	r2, [r3, #576]	@ 0x240
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b504:	2200      	movs	r2, #0
 800b506:	f8a3 2242 	strh.w	r2, [r3, #578]	@ 0x242
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 800b510:	3304      	adds	r3, #4
 800b512:	2218      	movs	r2, #24
 800b514:	2100      	movs	r1, #0
 800b516:	4618      	mov	r0, r3
 800b518:	f00f fa44 	bl	801a9a4 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800b51c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b520:	4618      	mov	r0, r3
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b530:	2300      	movs	r3, #0
 800b532:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3318      	adds	r3, #24
 800b538:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b540:	2203      	movs	r2, #3
 800b542:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b558:	2200      	movs	r2, #0
 800b55a:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b564:	2200      	movs	r2, #0
 800b566:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b570:	2200      	movs	r2, #0
 800b572:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b57c:	2200      	movs	r2, #0
 800b57e:	f883 23f5 	strb.w	r2, [r3, #1013]	@ 0x3f5
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b588:	2200      	movs	r2, #0
 800b58a:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b594:	461a      	mov	r2, r3
 800b596:	2300      	movs	r3, #0
 800b598:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc

	LOG_FUNCTION_END(status);

	return status;
 800b5a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3714      	adds	r7, #20
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	3318      	adds	r3, #24
 800b5c8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5d0:	22ff      	movs	r2, #255	@ 0xff
 800b5d2:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b602:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 800b606:	2b00      	cmp	r3, #0
 800b608:	d007      	beq.n	800b61a <VL53LX_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b610:	f893 23f4 	ldrb.w	r2, [r3, #1012]	@ 0x3f4
		pdev->stat_nvm.vhv_config__init =
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b620:	f893 33f5 	ldrb.w	r3, [r3, #1013]	@ 0x3f5
 800b624:	2b00      	cmp	r3, #0
 800b626:	d007      	beq.n	800b638 <VL53LX_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b62e:	f893 23f5 	ldrb.w	r2, [r3, #1013]	@ 0x3f5
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327

	LOG_FUNCTION_END(status);

	return status;
 800b640:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3714      	adds	r7, #20
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	3318      	adds	r3, #24
 800b65c:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b65e:	2300      	movs	r3, #0
 800b660:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f893 22e3 	ldrb.w	r2, [r3, #739]	@ 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b66e:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f893 22e0 	ldrb.w	r2, [r3, #736]	@ 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b67e:	f883 23f5 	strb.w	r2, [r3, #1013]	@ 0x3f5


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f893 32e3 	ldrb.w	r3, [r3, #739]	@ 0x2e3
 800b688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b68c:	b2da      	uxtb	r2, r3
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 800b69a:	f003 0303 	and.w	r3, r3, #3
 800b69e:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6a6:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b6ae:	4413      	add	r3, r2
 800b6b0:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6c6:	f893 235e 	ldrb.w	r2, [r3, #862]	@ 0x35e
	pdev->low_power_auto_data.first_run_phasecal_result =
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6d0:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6da:	f893 23f6 	ldrb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->gen_cfg.cal_config__vcsel_start =
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

	LOG_FUNCTION_END(status);

	return status;
 800b6e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3714      	adds	r7, #20
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	3318      	adds	r3, #24
 800b700:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f203 3366 	addw	r3, r3, #870	@ 0x366
 800b708:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b70a:	2300      	movs	r3, #0
 800b70c:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	8a1b      	ldrh	r3, [r3, #16]
 800b712:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	891b      	ldrh	r3, [r3, #8]
 800b718:	4413      	add	r3, r2
	utemp32a =
 800b71a:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b722:	d302      	bcc.n	800b72a <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800b724:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b728:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	041b      	lsls	r3, r3, #16
 800b72e:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f8b3 336a 	ldrh.w	r3, [r3, #874]	@ 0x36a
 800b736:	2b00      	cmp	r3, #0
 800b738:	d102      	bne.n	800b740 <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b73a:	23f1      	movs	r3, #241	@ 0xf1
 800b73c:	75fb      	strb	r3, [r7, #23]
 800b73e:	e040      	b.n	800b7c2 <VL53LX_low_power_auto_update_DSS+0xce>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f8b3 336a 	ldrh.w	r3, [r3, #874]	@ 0x36a
 800b746:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b74e:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b756:	461a      	mov	r2, r3
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 800b764:	041b      	lsls	r3, r3, #16
 800b766:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b76e:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 800b772:	2b00      	cmp	r3, #0
 800b774:	d102      	bne.n	800b77c <VL53LX_low_power_auto_update_DSS+0x88>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b776:	23f1      	movs	r3, #241	@ 0xf1
 800b778:	75fb      	strb	r3, [r7, #23]
 800b77a:	e022      	b.n	800b7c2 <VL53LX_low_power_auto_update_DSS+0xce>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b782:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
			utemp32a = utemp32a /
 800b786:	693a      	ldr	r2, [r7, #16]
 800b788:	fbb2 f3f3 	udiv	r3, r2, r3
 800b78c:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b794:	d302      	bcc.n	800b79c <VL53LX_low_power_auto_update_DSS+0xa8>
				utemp32a = 0xFFFF;
 800b796:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b79a:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7a6:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7b0:	f8b3 23fc 	ldrh.w	r2, [r3, #1020]	@ 0x3fc
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2202      	movs	r2, #2
 800b7be:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800b7c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7c6:	f113 0f0f 	cmn.w	r3, #15
 800b7ca:	d114      	bne.n	800b7f6 <VL53LX_low_power_auto_update_DSS+0x102>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7d2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800b7d6:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7e0:	f8b3 23fc 	ldrh.w	r2, [r3, #1020]	@ 0x3fc
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2202      	movs	r2, #2
 800b7ee:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b7f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	371c      	adds	r7, #28
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800b806:	b480      	push	{r7}
 800b808:	b087      	sub	sp, #28
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	3318      	adds	r3, #24
 800b814:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b816:	2300      	movs	r3, #0
 800b818:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800b81a:	2300      	movs	r3, #0
 800b81c:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	f893 33d0 	ldrb.w	r3, [r3, #976]	@ 0x3d0
 800b824:	2b07      	cmp	r3, #7
 800b826:	bf0c      	ite	eq
 800b828:	2301      	moveq	r3, #1
 800b82a:	2300      	movne	r3, #0
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b830:	2300      	movs	r3, #0
 800b832:	75fb      	strb	r3, [r7, #23]
 800b834:	e019      	b.n	800b86a <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800b836:	7df9      	ldrb	r1, [r7, #23]
 800b838:	7bbb      	ldrb	r3, [r7, #14]
 800b83a:	6938      	ldr	r0, [r7, #16]
 800b83c:	461a      	mov	r2, r3
 800b83e:	0052      	lsls	r2, r2, #1
 800b840:	441a      	add	r2, r3
 800b842:	0153      	lsls	r3, r2, #5
 800b844:	461a      	mov	r2, r3
 800b846:	460b      	mov	r3, r1
 800b848:	005b      	lsls	r3, r3, #1
 800b84a:	440b      	add	r3, r1
 800b84c:	019b      	lsls	r3, r3, #6
 800b84e:	4413      	add	r3, r2
 800b850:	4403      	add	r3, r0
 800b852:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 800b856:	330c      	adds	r3, #12
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	dd02      	ble.n	800b864 <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800b85e:	7dbb      	ldrb	r3, [r7, #22]
 800b860:	3301      	adds	r3, #1
 800b862:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b864:	7dfb      	ldrb	r3, [r7, #23]
 800b866:	3301      	adds	r3, #1
 800b868:	75fb      	strb	r3, [r7, #23]
 800b86a:	7dfb      	ldrb	r3, [r7, #23]
 800b86c:	2b05      	cmp	r3, #5
 800b86e:	d9e2      	bls.n	800b836 <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	7dba      	ldrb	r2, [r7, #22]
 800b874:	701a      	strb	r2, [r3, #0]

	return status;
 800b876:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	371c      	adds	r7, #28
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800b886:	b480      	push	{r7}
 800b888:	b085      	sub	sp, #20
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	4603      	mov	r3, r0
 800b88e:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800b894:	88fb      	ldrh	r3, [r7, #6]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d005      	beq.n	800b8a6 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b89a:	88fb      	ldrh	r3, [r7, #6]
 800b89c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b8a0:	fb92 f3f3 	sdiv	r3, r2, r3
 800b8a4:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3714      	adds	r7, #20
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800b8b4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b8b8:	b089      	sub	sp, #36	@ 0x24
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	60f8      	str	r0, [r7, #12]
 800b8be:	60b9      	str	r1, [r7, #8]
 800b8c0:	607a      	str	r2, [r7, #4]
 800b8c2:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800b8c4:	f04f 0200 	mov.w	r2, #0
 800b8c8:	f04f 0300 	mov.w	r3, #0
 800b8cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	fb02 f303 	mul.w	r3, r2, r3
 800b8dc:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	0b1b      	lsrs	r3, r3, #12
 800b8e2:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	469a      	mov	sl, r3
 800b8ea:	4693      	mov	fp, r2
 800b8ec:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	68ba      	ldr	r2, [r7, #8]
 800b8f4:	fb02 f303 	mul.w	r3, r2, r3
 800b8f8:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	091b      	lsrs	r3, r3, #4
 800b8fe:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	2200      	movs	r2, #0
 800b904:	4698      	mov	r8, r3
 800b906:	4691      	mov	r9, r2
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	fb08 f203 	mul.w	r2, r8, r3
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	fb09 f303 	mul.w	r3, r9, r3
 800b914:	4413      	add	r3, r2
 800b916:	69ba      	ldr	r2, [r7, #24]
 800b918:	fba2 4508 	umull	r4, r5, r2, r8
 800b91c:	442b      	add	r3, r5
 800b91e:	461d      	mov	r5, r3
 800b920:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800b924:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800b928:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b92c:	f04f 0200 	mov.w	r2, #0
 800b930:	f04f 0300 	mov.w	r3, #0
 800b934:	0b02      	lsrs	r2, r0, #12
 800b936:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b93a:	0b0b      	lsrs	r3, r1, #12
 800b93c:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800b940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d305      	bcc.n	800b954 <VL53LX_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800b948:	f04f 32ff 	mov.w	r2, #4294967295
 800b94c:	f04f 0300 	mov.w	r3, #0
 800b950:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	617b      	str	r3, [r7, #20]

	return duration_us;
 800b958:	697b      	ldr	r3, [r7, #20]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3724      	adds	r7, #36	@ 0x24
 800b95e:	46bd      	mov	sp, r7
 800b960:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b964:	4770      	bx	lr

0800b966 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800b966:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b96a:	b096      	sub	sp, #88	@ 0x58
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b970:	460b      	mov	r3, r1
 800b972:	627a      	str	r2, [r7, #36]	@ 0x24
 800b974:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint64_t total_hist_counts  = 0;
 800b976:	f04f 0200 	mov.w	r2, #0
 800b97a:	f04f 0300 	mov.w	r3, #0
 800b97e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_per_spad     = 0;
 800b982:	f04f 0200 	mov.w	r2, #0
 800b986:	f04f 0300 	mov.w	r3, #0
 800b98a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	uint32_t rate_per_spad_kcps = 0;
 800b98e:	2300      	movs	r3, #0
 800b990:	647b      	str	r3, [r7, #68]	@ 0x44





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800b992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b994:	17da      	asrs	r2, r3, #31
 800b996:	469a      	mov	sl, r3
 800b998:	4693      	mov	fp, r2
 800b99a:	4652      	mov	r2, sl
 800b99c:	465b      	mov	r3, fp
 800b99e:	f04f 0000 	mov.w	r0, #0
 800b9a2:	f04f 0100 	mov.w	r1, #0
 800b9a6:	0159      	lsls	r1, r3, #5
 800b9a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b9ac:	0150      	lsls	r0, r2, #5
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	ebb2 040a 	subs.w	r4, r2, sl
 800b9b6:	eb63 050b 	sbc.w	r5, r3, fp
 800b9ba:	f04f 0200 	mov.w	r2, #0
 800b9be:	f04f 0300 	mov.w	r3, #0
 800b9c2:	00ab      	lsls	r3, r5, #2
 800b9c4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800b9c8:	00a2      	lsls	r2, r4, #2
 800b9ca:	4614      	mov	r4, r2
 800b9cc:	461d      	mov	r5, r3
 800b9ce:	eb14 080a 	adds.w	r8, r4, sl
 800b9d2:	eb45 090b 	adc.w	r9, r5, fp
 800b9d6:	f04f 0200 	mov.w	r2, #0
 800b9da:	f04f 0300 	mov.w	r3, #0
 800b9de:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800b9e2:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800b9e6:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800b9ea:	4690      	mov	r8, r2
 800b9ec:	4699      	mov	r9, r3
 800b9ee:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800b9f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00d      	beq.n	800ba14 <VL53LX_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800b9f8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	61bb      	str	r3, [r7, #24]
 800b9fe:	61fa      	str	r2, [r7, #28]
 800ba00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba04:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800ba08:	f7f4 fc5a 	bl	80002c0 <__aeabi_uldivmod>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	460b      	mov	r3, r1
 800ba10:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800ba14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d02a      	beq.n	800ba70 <VL53LX_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800ba1a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800ba1e:	f04f 0200 	mov.w	r2, #0
 800ba22:	f04f 0300 	mov.w	r3, #0
 800ba26:	02cb      	lsls	r3, r1, #11
 800ba28:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ba2c:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800ba2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ba30:	0849      	lsrs	r1, r1, #1
 800ba32:	2000      	movs	r0, #0
 800ba34:	6139      	str	r1, [r7, #16]
 800ba36:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800ba38:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	1851      	adds	r1, r2, r1
 800ba40:	6039      	str	r1, [r7, #0]
 800ba42:	4629      	mov	r1, r5
 800ba44:	eb43 0101 	adc.w	r1, r3, r1
 800ba48:	6079      	str	r1, [r7, #4]
 800ba4a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ba4e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800ba52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba54:	2200      	movs	r2, #0
 800ba56:	60bb      	str	r3, [r7, #8]
 800ba58:	60fa      	str	r2, [r7, #12]
 800ba5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba5e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800ba62:	f7f4 fc2d 	bl	80002c0 <__aeabi_uldivmod>
 800ba66:	4602      	mov	r2, r0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800ba6e:	e00b      	b.n	800ba88 <VL53LX_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800ba70:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800ba74:	f04f 0200 	mov.w	r2, #0
 800ba78:	f04f 0300 	mov.w	r3, #0
 800ba7c:	02cb      	lsls	r3, r1, #11
 800ba7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ba82:	02c2      	lsls	r2, r0, #11
 800ba84:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800ba88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba8a:	647b      	str	r3, [r7, #68]	@ 0x44

	return rate_per_spad_kcps;
 800ba8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3758      	adds	r7, #88	@ 0x58
 800ba92:	46bd      	mov	sp, r7
 800ba94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ba98 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800baa0:	2300      	movs	r3, #0
 800baa2:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800baa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800baa8:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800baaa:	e002      	b.n	800bab2 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	089b      	lsrs	r3, r3, #2
 800bab0:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800bab2:	68ba      	ldr	r2, [r7, #8]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d8f8      	bhi.n	800baac <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800baba:	e017      	b.n	800baec <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	4413      	add	r3, r2
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d30b      	bcc.n	800bae0 <VL53LX_isqrt+0x48>
			num -= res + bit;
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	4413      	add	r3, r2
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	085b      	lsrs	r3, r3, #1
 800bad8:	68ba      	ldr	r2, [r7, #8]
 800bada:	4413      	add	r3, r2
 800badc:	60fb      	str	r3, [r7, #12]
 800bade:	e002      	b.n	800bae6 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	085b      	lsrs	r3, r3, #1
 800bae4:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	089b      	lsrs	r3, r3, #2
 800baea:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d1e4      	bne.n	800babc <VL53LX_isqrt+0x24>
	}

	return res;
 800baf2:	68fb      	ldr	r3, [r7, #12]
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3714      	adds	r7, #20
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb16:	4618      	mov	r0, r3
 800bb18:	f000 faa6 	bl	800c068 <VL53LX_decode_vcsel_period>
 800bb1c:	4603      	mov	r3, r0
	period = 2048 *
 800bb1e:	02db      	lsls	r3, r3, #11
 800bb20:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	4413      	add	r3, r2
 800bb32:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bb3a:	02db      	lsls	r3, r3, #11
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	4413      	add	r3, r2
 800bb40:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb48:	02db      	lsls	r3, r3, #11
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d009      	beq.n	800bb6a <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb5e:	68b9      	ldr	r1, [r7, #8]
 800bb60:	fb01 f202 	mul.w	r2, r1, r2
 800bb64:	1a9b      	subs	r3, r3, r2
 800bb66:	60fb      	str	r3, [r7, #12]
 800bb68:	e001      	b.n	800bb6e <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	b29a      	uxth	r2, r3
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	LOG_FUNCTION_END(0);
}
 800bb78:	bf00      	nop
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800bb92:	6838      	ldr	r0, [r7, #0]
 800bb94:	f000 fb91 	bl	800c2ba <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7ff ff7a 	bl	800ba98 <VL53LX_isqrt>
 800bba4:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800bba6:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	fb02 f303 	mul.w	r3, r2, r3
 800bbb0:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	3307      	adds	r3, #7
 800bbb6:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	111b      	asrs	r3, r3, #4
 800bbbc:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bbc4:	68ba      	ldr	r2, [r7, #8]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum        = 0;
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800bbda:	2300      	movs	r3, #0
 800bbdc:	73fb      	strb	r3, [r7, #15]
 800bbde:	e01e      	b.n	800bc1e <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800bbe0:	7bfa      	ldrb	r2, [r7, #15]
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	3206      	adds	r2, #6
 800bbe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbea:	68ba      	ldr	r2, [r7, #8]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	dd13      	ble.n	800bc18 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800bbf6:	7bf9      	ldrb	r1, [r7, #15]
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	3106      	adds	r1, #6
 800bbfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc00:	441a      	add	r2, r3
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			pdata->number_of_ambient_samples++;
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800bc0e:	3301      	adds	r3, #1
 800bc10:	b2da      	uxtb	r2, r3
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800bc18:	7bfb      	ldrb	r3, [r7, #15]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	73fb      	strb	r3, [r7, #15]
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	7a9b      	ldrb	r3, [r3, #10]
 800bc22:	7bfa      	ldrb	r2, [r7, #15]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d3db      	bcc.n	800bbe0 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d01c      	beq.n	800bc6c <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
		pdata->VL53LX_p_028 =
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800bc44:	683a      	ldr	r2, [r7, #0]
 800bc46:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
 800bc4a:	0852      	lsrs	r2, r2, #1
 800bc4c:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800bc4e:	441a      	add	r2, r3
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800bc5c:	683a      	ldr	r2, [r7, #0]
 800bc5e:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
		pdata->VL53LX_p_028 /=
 800bc62:	fb93 f2f2 	sdiv	r2, r3, r2
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800bc6c:	bf00      	nop
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800bc80:	2300      	movs	r3, #0
 800bc82:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800bc84:	2300      	movs	r3, #0
 800bc86:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	7b1b      	ldrb	r3, [r3, #12]
 800bc8c:	f003 0307 	and.w	r3, r3, #7
 800bc90:	2b07      	cmp	r3, #7
 800bc92:	d13a      	bne.n	800bd0a <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800bc94:	2300      	movs	r3, #0
 800bc96:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800bc98:	2300      	movs	r3, #0
 800bc9a:	73bb      	strb	r3, [r7, #14]
 800bc9c:	e01f      	b.n	800bcde <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800bc9e:	7bbb      	ldrb	r3, [r7, #14]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	4413      	add	r3, r2
 800bca4:	7b1b      	ldrb	r3, [r3, #12]
 800bca6:	f003 0307 	and.w	r3, r3, #7
 800bcaa:	2b07      	cmp	r3, #7
 800bcac:	d014      	beq.n	800bcd8 <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800bcae:	7bba      	ldrb	r2, [r7, #14]
 800bcb0:	7b7b      	ldrb	r3, [r7, #13]
 800bcb2:	6879      	ldr	r1, [r7, #4]
 800bcb4:	440a      	add	r2, r1
 800bcb6:	7b11      	ldrb	r1, [r2, #12]
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	4413      	add	r3, r2
 800bcbc:	460a      	mov	r2, r1
 800bcbe:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800bcc0:	7bba      	ldrb	r2, [r7, #14]
 800bcc2:	7b7b      	ldrb	r3, [r7, #13]
 800bcc4:	6879      	ldr	r1, [r7, #4]
 800bcc6:	440a      	add	r2, r1
 800bcc8:	7c91      	ldrb	r1, [r2, #18]
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	4413      	add	r3, r2
 800bcce:	460a      	mov	r2, r1
 800bcd0:	749a      	strb	r2, [r3, #18]
				i++;
 800bcd2:	7b7b      	ldrb	r3, [r7, #13]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800bcd8:	7bbb      	ldrb	r3, [r7, #14]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	73bb      	strb	r3, [r7, #14]
 800bcde:	7bbb      	ldrb	r3, [r7, #14]
 800bce0:	2b05      	cmp	r3, #5
 800bce2:	d9dc      	bls.n	800bc9e <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800bce4:	7b7b      	ldrb	r3, [r7, #13]
 800bce6:	73bb      	strb	r3, [r7, #14]
 800bce8:	e00c      	b.n	800bd04 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800bcea:	7bbb      	ldrb	r3, [r7, #14]
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	4413      	add	r3, r2
 800bcf0:	2210      	movs	r2, #16
 800bcf2:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800bcf4:	7bbb      	ldrb	r3, [r7, #14]
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800bcfe:	7bbb      	ldrb	r3, [r7, #14]
 800bd00:	3301      	adds	r3, #1
 800bd02:	73bb      	strb	r3, [r7, #14]
 800bd04:	7bbb      	ldrb	r3, [r7, #14]
 800bd06:	2b05      	cmp	r3, #5
 800bd08:	d9ef      	bls.n	800bcea <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	7adb      	ldrb	r3, [r3, #11]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d023      	beq.n	800bd5a <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	7adb      	ldrb	r3, [r3, #11]
 800bd16:	73fb      	strb	r3, [r7, #15]
 800bd18:	e00f      	b.n	800bd3a <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800bd1a:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	7ad2      	ldrb	r2, [r2, #11]
 800bd22:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	3106      	adds	r1, #6
 800bd28:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	3206      	adds	r2, #6
 800bd30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	3301      	adds	r3, #1
 800bd38:	73fb      	strb	r3, [r7, #15]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	7a5b      	ldrb	r3, [r3, #9]
 800bd3e:	7bfa      	ldrb	r2, [r7, #15]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d3ea      	bcc.n	800bd1a <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800bd4c:	1ad3      	subs	r3, r2, r3
 800bd4e:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	72da      	strb	r2, [r3, #11]
	}
}
 800bd5a:	bf00      	nop
 800bd5c:	3714      	adds	r7, #20
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b084      	sub	sp, #16
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800bd70:	2300      	movs	r3, #0
 800bd72:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800bd74:	2300      	movs	r3, #0
 800bd76:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800bd78:	88fb      	ldrh	r3, [r7, #6]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7ff fd83 	bl	800b886 <VL53LX_calc_pll_period_us>
 800bd80:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800bd86:	f249 2257 	movw	r2, #37463	@ 0x9257
 800bd8a:	fb02 f303 	mul.w	r3, r2, r3
 800bd8e:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800bd96:	0c1b      	lsrs	r3, r3, #16
 800bd98:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800bd9a:	68bb      	ldr	r3, [r7, #8]
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b087      	sub	sp, #28
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800bdb2:	2307      	movs	r3, #7
 800bdb4:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdc0:	db03      	blt.n	800bdca <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800bdc2:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800bdc6:	617b      	str	r3, [r7, #20]
 800bdc8:	e004      	b.n	800bdd4 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	dd01      	ble.n	800bdd4 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bdda:	dd02      	ble.n	800bde2 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800bddc:	2303      	movs	r3, #3
 800bdde:	613b      	str	r3, [r7, #16]
 800bde0:	e001      	b.n	800bde6 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800bde2:	2307      	movs	r3, #7
 800bde4:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d009      	beq.n	800be00 <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800bdec:	697a      	ldr	r2, [r7, #20]
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	409a      	lsls	r2, r3
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	085b      	lsrs	r3, r3, #1
 800bdf6:	441a      	add	r2, r3
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdfe:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be06:	dd02      	ble.n	800be0e <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	011b      	lsls	r3, r3, #4
 800be0c:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be14:	d302      	bcc.n	800be1c <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800be16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800be1a:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800be20:	89fb      	ldrh	r3, [r7, #14]
}
 800be22:	4618      	mov	r0, r3
 800be24:	371c      	adds	r7, #28
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr

0800be2e <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800be2e:	b480      	push	{r7}
 800be30:	b087      	sub	sp, #28
 800be32:	af00      	add	r7, sp, #0
 800be34:	60f8      	str	r0, [r7, #12]
 800be36:	60b9      	str	r1, [r7, #8]
 800be38:	603b      	str	r3, [r7, #0]
 800be3a:	4613      	mov	r3, r2
 800be3c:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800be3e:	2300      	movs	r3, #0
 800be40:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800be42:	2300      	movs	r3, #0
 800be44:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800be46:	88fb      	ldrh	r3, [r7, #6]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d010      	beq.n	800be6e <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	021a      	lsls	r2, r3, #8
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	fa02 f303 	lsl.w	r3, r2, r3
 800be56:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800be58:	88fb      	ldrh	r3, [r7, #6]
 800be5a:	085b      	lsrs	r3, r3, #1
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800be64:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800be66:	fbb2 f3f3 	udiv	r3, r2, r3
 800be6a:	617b      	str	r3, [r7, #20]
 800be6c:	e004      	b.n	800be78 <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800be6e:	68ba      	ldr	r2, [r7, #8]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	fa02 f303 	lsl.w	r3, r2, r3
 800be76:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800be78:	697a      	ldr	r2, [r7, #20]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d901      	bls.n	800be84 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800be88:	8a7b      	ldrh	r3, [r7, #18]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	371c      	adds	r7, #28
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr
	...

0800be98 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800be98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9c:	b093      	sub	sp, #76	@ 0x4c
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	461e      	mov	r6, r3
 800bea2:	4603      	mov	r3, r0
 800bea4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800bea6:	460b      	mov	r3, r1
 800bea8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800beaa:	4613      	mov	r3, r2
 800beac:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800beae:	4633      	mov	r3, r6
 800beb0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29


	uint32_t    pll_period_us = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	643b      	str	r3, [r7, #64]	@ 0x40
	int64_t     tmp_long_int  = 0;
 800beb8:	f04f 0200 	mov.w	r2, #0
 800bebc:	f04f 0300 	mov.w	r3, #0
 800bec0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	int32_t     range_mm      = 0;
 800bec4:	2300      	movs	r3, #0
 800bec6:	647b      	str	r3, [r7, #68]	@ 0x44
	int32_t     range_mm_10   = 0;
 800bec8:	2300      	movs	r3, #0
 800beca:	637b      	str	r3, [r7, #52]	@ 0x34



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800becc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff fcd9 	bl	800b886 <VL53LX_calc_pll_period_us>
 800bed4:	6438      	str	r0, [r7, #64]	@ 0x40



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800bed6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bed8:	2200      	movs	r2, #0
 800beda:	623b      	str	r3, [r7, #32]
 800bedc:	627a      	str	r2, [r7, #36]	@ 0x24
 800bede:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bee0:	2200      	movs	r2, #0
 800bee2:	61bb      	str	r3, [r7, #24]
 800bee4:	61fa      	str	r2, [r7, #28]
 800bee6:	6a3b      	ldr	r3, [r7, #32]
 800bee8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800beec:	4602      	mov	r2, r0
 800beee:	1a9b      	subs	r3, r3, r2
 800bef0:	613b      	str	r3, [r7, #16]
 800bef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef4:	460a      	mov	r2, r1
 800bef6:	eb63 0302 	sbc.w	r3, r3, r2
 800befa:	617b      	str	r3, [r7, #20]
 800befc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bf00:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800bf04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf06:	2200      	movs	r2, #0
 800bf08:	469a      	mov	sl, r3
 800bf0a:	4693      	mov	fp, r2
 800bf0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf0e:	fb0a f203 	mul.w	r2, sl, r3
 800bf12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf14:	fb0b f303 	mul.w	r3, fp, r3
 800bf18:	4413      	add	r3, r2
 800bf1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf1c:	fba2 890a 	umull	r8, r9, r2, sl
 800bf20:	444b      	add	r3, r9
 800bf22:	4699      	mov	r9, r3
 800bf24:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
 800bf28:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800bf2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	da08      	bge.n	800bf46 <VL53LX_range_maths+0xae>
 800bf34:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800bf38:	1851      	adds	r1, r2, r1
 800bf3a:	60b9      	str	r1, [r7, #8]
 800bf3c:	f143 0300 	adc.w	r3, r3, #0
 800bf40:	60fb      	str	r3, [r7, #12]
 800bf42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bf46:	f04f 0000 	mov.w	r0, #0
 800bf4a:	f04f 0100 	mov.w	r1, #0
 800bf4e:	0a50      	lsrs	r0, r2, #9
 800bf50:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bf54:	1259      	asrs	r1, r3, #9
 800bf56:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800bf5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf5c:	f249 2257 	movw	r2, #37463	@ 0x9257
 800bf60:	fb03 f202 	mul.w	r2, r3, r2
 800bf64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf66:	2100      	movs	r1, #0
 800bf68:	fb01 f303 	mul.w	r3, r1, r3
 800bf6c:	4413      	add	r3, r2
 800bf6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf70:	f249 2157 	movw	r1, #37463	@ 0x9257
 800bf74:	fba2 4501 	umull	r4, r5, r2, r1
 800bf78:	442b      	add	r3, r5
 800bf7a:	461d      	mov	r5, r3
 800bf7c:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 800bf80:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800bf84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	da07      	bge.n	800bf9c <VL53LX_range_maths+0x104>
 800bf8c:	4934      	ldr	r1, [pc, #208]	@ (800c060 <VL53LX_range_maths+0x1c8>)
 800bf8e:	1851      	adds	r1, r2, r1
 800bf90:	6039      	str	r1, [r7, #0]
 800bf92:	f143 0300 	adc.w	r3, r3, #0
 800bf96:	607b      	str	r3, [r7, #4]
 800bf98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf9c:	f04f 0000 	mov.w	r0, #0
 800bfa0:	f04f 0100 	mov.w	r1, #0
 800bfa4:	0d90      	lsrs	r0, r2, #22
 800bfa6:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800bfaa:	1599      	asrs	r1, r3, #22
 800bfac:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800bfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800bfb4:	4413      	add	r3, r2
 800bfb6:	647b      	str	r3, [r7, #68]	@ 0x44


	range_mm *= gain_factor;
 800bfb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800bfbc:	fb02 f303 	mul.w	r3, r2, r3
 800bfc0:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm += 0x0400;
 800bfc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bfc8:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm /= 0x0800;
 800bfca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	da01      	bge.n	800bfd4 <VL53LX_range_maths+0x13c>
 800bfd0:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800bfd4:	12db      	asrs	r3, r3, #11
 800bfd6:	647b      	str	r3, [r7, #68]	@ 0x44


	if (fractional_bits == 0) {
 800bfd8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d130      	bne.n	800c042 <VL53LX_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800bfe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4413      	add	r3, r2
 800bfe8:	005b      	lsls	r3, r3, #1
 800bfea:	637b      	str	r3, [r7, #52]	@ 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800bfec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	da00      	bge.n	800bff4 <VL53LX_range_maths+0x15c>
 800bff2:	3303      	adds	r3, #3
 800bff4:	109b      	asrs	r3, r3, #2
 800bff6:	637b      	str	r3, [r7, #52]	@ 0x34
		if ((range_mm_10 % 10) < 5)
 800bff8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bffa:	4b1a      	ldr	r3, [pc, #104]	@ (800c064 <VL53LX_range_maths+0x1cc>)
 800bffc:	fb83 2301 	smull	r2, r3, r3, r1
 800c000:	109a      	asrs	r2, r3, #2
 800c002:	17cb      	asrs	r3, r1, #31
 800c004:	1ad2      	subs	r2, r2, r3
 800c006:	4613      	mov	r3, r2
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4413      	add	r3, r2
 800c00c:	005b      	lsls	r3, r3, #1
 800c00e:	1aca      	subs	r2, r1, r3
 800c010:	2a04      	cmp	r2, #4
 800c012:	dc09      	bgt.n	800c028 <VL53LX_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800c014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c016:	4a13      	ldr	r2, [pc, #76]	@ (800c064 <VL53LX_range_maths+0x1cc>)
 800c018:	fb82 1203 	smull	r1, r2, r2, r3
 800c01c:	1092      	asrs	r2, r2, #2
 800c01e:	17db      	asrs	r3, r3, #31
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	b21b      	sxth	r3, r3
 800c024:	647b      	str	r3, [r7, #68]	@ 0x44
 800c026:	e015      	b.n	800c054 <VL53LX_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800c028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c02a:	4a0e      	ldr	r2, [pc, #56]	@ (800c064 <VL53LX_range_maths+0x1cc>)
 800c02c:	fb82 1203 	smull	r1, r2, r2, r3
 800c030:	1092      	asrs	r2, r2, #2
 800c032:	17db      	asrs	r3, r3, #31
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	b29b      	uxth	r3, r3
 800c038:	3301      	adds	r3, #1
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	b21b      	sxth	r3, r3
 800c03e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c040:	e008      	b.n	800c054 <VL53LX_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800c042:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c046:	2b01      	cmp	r3, #1
 800c048:	d104      	bne.n	800c054 <VL53LX_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800c04a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c04c:	0fda      	lsrs	r2, r3, #31
 800c04e:	4413      	add	r3, r2
 800c050:	105b      	asrs	r3, r3, #1
 800c052:	647b      	str	r3, [r7, #68]	@ 0x44

	return range_mm;
 800c054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800c056:	4618      	mov	r0, r3
 800c058:	374c      	adds	r7, #76	@ 0x4c
 800c05a:	46bd      	mov	sp, r7
 800c05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c060:	003fffff 	.word	0x003fffff
 800c064:	66666667 	.word	0x66666667

0800c068 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800c068:	b480      	push	{r7}
 800c06a:	b085      	sub	sp, #20
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	4603      	mov	r3, r0
 800c070:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800c072:	2300      	movs	r3, #0
 800c074:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800c076:	79fb      	ldrb	r3, [r7, #7]
 800c078:	3301      	adds	r3, #1
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	005b      	lsls	r3, r3, #1
 800c07e:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800c080:	7bfb      	ldrb	r3, [r7, #15]
}
 800c082:	4618      	mov	r0, r3
 800c084:	3714      	adds	r7, #20
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr

0800c08e <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800c08e:	b480      	push	{r7}
 800c090:	b083      	sub	sp, #12
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
 800c096:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
	phist->cal_config__vcsel_start =
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
	phist->VL53LX_p_015 =
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
	phist->phasecal_result__reference_phase   =
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
	phist->phasecal_result__vcsel_start       =
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
	phist->vcsel_width =
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
	phist->zero_distance_phase =
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	781a      	ldrb	r2, [r3, #0]
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	7a5a      	ldrb	r2, [r3, #9]
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	685a      	ldr	r2, [r3, #4]
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	605a      	str	r2, [r3, #4]
}
 800c0fe:	bf00      	nop
 800c100:	370c      	adds	r7, #12
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr

0800c10a <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800c10a:	b480      	push	{r7}
 800c10c:	b087      	sub	sp, #28
 800c10e:	af00      	add	r7, sp, #0
 800c110:	60f8      	str	r0, [r7, #12]
 800c112:	460b      	mov	r3, r1
 800c114:	607a      	str	r2, [r7, #4]
 800c116:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800c118:	2300      	movs	r3, #0
 800c11a:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2203      	movs	r2, #3
 800c120:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2203      	movs	r2, #3
 800c126:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2218      	movs	r2, #24
 800c13e:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800c140:	897b      	ldrh	r3, [r7, #10]
 800c142:	b2da      	uxtb	r2, r3
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status               = 0;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status              = 0;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count               = 0;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	pdata->cal_config__vcsel_start            = 0;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

	pdata->vcsel_width                        = 0;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->VL53LX_p_005                       = 0;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	pdata->VL53LX_p_015                = 0;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	pdata->total_periods_elapsed              = 0;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	pdata->min_bin_value                      = 0;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	pdata->max_bin_value                      = 0;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	pdata->zero_distance_phase                = 0;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	pdata->number_of_ambient_samples          = 0;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum                 = 0;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	pdata->VL53LX_p_028             = 0;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c1de:	2300      	movs	r3, #0
 800c1e0:	82fb      	strh	r3, [r7, #22]
 800c1e2:	e009      	b.n	800c1f8 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800c1e4:	8afb      	ldrh	r3, [r7, #22]
 800c1e6:	8afa      	ldrh	r2, [r7, #22]
 800c1e8:	b2d1      	uxtb	r1, r2
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	460a      	mov	r2, r1
 800c1f0:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c1f2:	8afb      	ldrh	r3, [r7, #22]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	82fb      	strh	r3, [r7, #22]
 800c1f8:	8afb      	ldrh	r3, [r7, #22]
 800c1fa:	2b05      	cmp	r3, #5
 800c1fc:	d9f2      	bls.n	800c1e4 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c1fe:	2300      	movs	r3, #0
 800c200:	82fb      	strh	r3, [r7, #22]
 800c202:	e007      	b.n	800c214 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800c204:	8afb      	ldrh	r3, [r7, #22]
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	4413      	add	r3, r2
 800c20a:	2201      	movs	r2, #1
 800c20c:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c20e:	8afb      	ldrh	r3, [r7, #22]
 800c210:	3301      	adds	r3, #1
 800c212:	82fb      	strh	r3, [r7, #22]
 800c214:	8afb      	ldrh	r3, [r7, #22]
 800c216:	2b05      	cmp	r3, #5
 800c218:	d9f4      	bls.n	800c204 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800c21a:	2300      	movs	r3, #0
 800c21c:	82fb      	strh	r3, [r7, #22]
 800c21e:	e013      	b.n	800c248 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800c220:	8afa      	ldrh	r2, [r7, #22]
 800c222:	897b      	ldrh	r3, [r7, #10]
 800c224:	429a      	cmp	r2, r3
 800c226:	d206      	bcs.n	800c236 <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800c228:	8afa      	ldrh	r2, [r7, #22]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	3206      	adds	r2, #6
 800c22e:	68f9      	ldr	r1, [r7, #12]
 800c230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c234:	e005      	b.n	800c242 <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800c236:	8afa      	ldrh	r2, [r7, #22]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	3206      	adds	r2, #6
 800c23c:	2100      	movs	r1, #0
 800c23e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800c242:	8afb      	ldrh	r3, [r7, #22]
 800c244:	3301      	adds	r3, #1
 800c246:	82fb      	strh	r3, [r7, #22]
 800c248:	8afb      	ldrh	r3, [r7, #22]
 800c24a:	2b17      	cmp	r3, #23
 800c24c:	d9e8      	bls.n	800c220 <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800c24e:	bf00      	nop
 800c250:	bf00      	nop
 800c252:	371c      	adds	r7, #28
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	4603      	mov	r3, r0
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	607a      	str	r2, [r7, #4]
 800c268:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800c26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	da10      	bge.n	800c294 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800c272:	7bfb      	ldrb	r3, [r7, #15]
 800c274:	43db      	mvns	r3, r3
 800c276:	b2db      	uxtb	r3, r3
 800c278:	f003 0307 	and.w	r3, r3, #7
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	3308      	adds	r3, #8
 800c280:	b2da      	uxtb	r2, r3
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800c286:	7bfb      	ldrb	r3, [r7, #15]
 800c288:	3b80      	subs	r3, #128	@ 0x80
 800c28a:	10db      	asrs	r3, r3, #3
 800c28c:	b2da      	uxtb	r2, r3
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800c292:	e00c      	b.n	800c2ae <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800c294:	7bfb      	ldrb	r3, [r7, #15]
 800c296:	f003 0307 	and.w	r3, r3, #7
 800c29a:	b2da      	uxtb	r2, r3
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
 800c2a2:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800c2a6:	10db      	asrs	r3, r3, #3
 800c2a8:	b2da      	uxtb	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	701a      	strb	r2, [r3, #0]
}
 800c2ae:	bf00      	nop
 800c2b0:	3714      	adds	r7, #20
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr

0800c2ba <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c2ba:	b480      	push	{r7}
 800c2bc:	b085      	sub	sp, #20
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	73fb      	strb	r3, [r7, #15]
 800c2ca:	e02c      	b.n	800c326 <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d009      	beq.n	800c2e6 <VL53LX_hist_find_min_max_bin_values+0x2c>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800c2d8:	7bf9      	ldrb	r1, [r7, #15]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	3106      	adds	r1, #6
 800c2de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	db07      	blt.n	800c2f6 <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800c2e6:	7bfa      	ldrb	r2, [r7, #15]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	3206      	adds	r2, #6
 800c2ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800c2f6:	7bfb      	ldrb	r3, [r7, #15]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d009      	beq.n	800c310 <VL53LX_hist_find_min_max_bin_values+0x56>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800c302:	7bf9      	ldrb	r1, [r7, #15]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	3106      	adds	r1, #6
 800c308:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	dc07      	bgt.n	800c320 <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800c310:	7bfa      	ldrb	r2, [r7, #15]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	3206      	adds	r2, #6
 800c316:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800c320:	7bfb      	ldrb	r3, [r7, #15]
 800c322:	3301      	adds	r3, #1
 800c324:	73fb      	strb	r3, [r7, #15]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	7a9b      	ldrb	r3, [r3, #10]
 800c32a:	7bfa      	ldrb	r2, [r7, #15]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d3cd      	bcc.n	800c2cc <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800c330:	bf00      	nop
 800c332:	bf00      	nop
 800c334:	3714      	adds	r7, #20
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr

0800c33e <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c33e:	b480      	push	{r7}
 800c340:	b085      	sub	sp, #20
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800c346:	2300      	movs	r3, #0
 800c348:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	7adb      	ldrb	r3, [r3, #11]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d03a      	beq.n	800c3c8 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e



		pdata->ambient_events_sum = 0;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c364:	2300      	movs	r3, #0
 800c366:	73fb      	strb	r3, [r7, #15]
 800c368:	e00e      	b.n	800c388 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800c370:	7bf9      	ldrb	r1, [r7, #15]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	3106      	adds	r1, #6
 800c376:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c37a:	441a      	add	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c382:	7bfb      	ldrb	r3, [r7, #15]
 800c384:	3301      	adds	r3, #1
 800c386:	73fb      	strb	r3, [r7, #15]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	7adb      	ldrb	r3, [r3, #11]
 800c38c:	7bfa      	ldrb	r2, [r7, #15]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d3eb      	bcc.n	800c36a <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	7ad2      	ldrb	r2, [r2, #11]
 800c3a8:	0852      	lsrs	r2, r2, #1
 800c3aa:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800c3ac:	441a      	add	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800c3be:	fb93 f2f2 	sdiv	r2, r3, r2
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800c3c8:	bf00      	nop
 800c3ca:	3714      	adds	r7, #20
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800c3d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c3d8:	b0ca      	sub	sp, #296	@ 0x128
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 800c3e0:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800c3e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

	uint32_t    pll_period_us       = 0;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t    periods_elapsed     = 0;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint32_t    tmp32               = 0;
 800c400:	2300      	movs	r3, #0
 800c402:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint64_t    tmp64               = 0;
 800c406:	f04f 0200 	mov.w	r2, #0
 800c40a:	f04f 0300 	mov.w	r3, #0
 800c40e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	uint32_t    amb_thres_delta     = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800c418:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c41c:	2300      	movs	r3, #0
 800c41e:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800c420:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c424:	2300      	movs	r3, #0
 800c426:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800c428:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c42c:	2300      	movs	r3, #0
 800c42e:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800c430:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c434:	2300      	movs	r3, #0
 800c436:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800c438:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c43c:	2300      	movs	r3, #0
 800c43e:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800c440:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c444:	2300      	movs	r3, #0
 800c446:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800c448:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c44c:	2300      	movs	r3, #0
 800c44e:	8493      	strh	r3, [r2, #36]	@ 0x24
	pdata->VL53LX_p_022            = 0;
 800c450:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c454:	2300      	movs	r3, #0
 800c456:	84d3      	strh	r3, [r2, #38]	@ 0x26

	*pambient_dmax_mm  = 0;
 800c458:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800c45c:	2300      	movs	r3, #0
 800c45e:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800c460:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c464:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f000 80e1 	beq.w	800c630 <VL53LX_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800c46e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800c476:	2b00      	cmp	r3, #0
 800c478:	f000 80da 	beq.w	800c630 <VL53LX_f_001+0x25c>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800c47c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c480:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800c484:	4618      	mov	r0, r3
 800c486:	f7ff f9fe 	bl	800b886 <VL53LX_calc_pll_period_us>
 800c48a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800c48e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c496:	3301      	adds	r3, #1
 800c498:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800c49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c4a4:	2110      	movs	r1, #16
 800c4a6:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800c4aa:	f7ff fa03 	bl	800b8b4 <VL53LX_duration_maths>
 800c4ae:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800c4b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c4b4:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800c4b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c4ba:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800c4be:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	4610      	mov	r0, r2
 800c4c8:	f7ff fc6c 	bl	800bda4 <VL53LX_rate_maths>
 800c4cc:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800c4ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c4d2:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800c4d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c4d8:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800c4dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c4e0:	f8b3 107c 	ldrh.w	r1, [r3, #124]	@ 0x7c
 800c4e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	f7ff fa3b 	bl	800b966 <VL53LX_events_per_spad_maths>
 800c4f0:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800c4f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c4f6:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800c4f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c4fc:	8adb      	ldrh	r3, [r3, #22]
 800c4fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c502:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800c504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c508:	8adb      	ldrh	r3, [r3, #22]
 800c50a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c50e:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800c510:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c514:	695b      	ldr	r3, [r3, #20]
 800c516:	2b00      	cmp	r3, #0
 800c518:	f000 808a 	beq.w	800c630 <VL53LX_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800c51c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c520:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800c522:	b29b      	uxth	r3, r3
 800c524:	2200      	movs	r2, #0
 800c526:	461c      	mov	r4, r3
 800c528:	4615      	mov	r5, r2
 800c52a:	e9c7 4546 	strd	r4, r5, [r7, #280]	@ 0x118
			tmp64  *= 1000;
 800c52e:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800c532:	4622      	mov	r2, r4
 800c534:	462b      	mov	r3, r5
 800c536:	f04f 0000 	mov.w	r0, #0
 800c53a:	f04f 0100 	mov.w	r1, #0
 800c53e:	0159      	lsls	r1, r3, #5
 800c540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c544:	0150      	lsls	r0, r2, #5
 800c546:	4602      	mov	r2, r0
 800c548:	460b      	mov	r3, r1
 800c54a:	ebb2 0804 	subs.w	r8, r2, r4
 800c54e:	eb63 0905 	sbc.w	r9, r3, r5
 800c552:	f04f 0200 	mov.w	r2, #0
 800c556:	f04f 0300 	mov.w	r3, #0
 800c55a:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800c55e:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800c562:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800c566:	4690      	mov	r8, r2
 800c568:	4699      	mov	r9, r3
 800c56a:	eb18 0a04 	adds.w	sl, r8, r4
 800c56e:	eb49 0b05 	adc.w	fp, r9, r5
 800c572:	f04f 0200 	mov.w	r2, #0
 800c576:	f04f 0300 	mov.w	r3, #0
 800c57a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c57e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c582:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c586:	4692      	mov	sl, r2
 800c588:	469b      	mov	fp, r3
 800c58a:	e9c7 ab46 	strd	sl, fp, [r7, #280]	@ 0x118
			tmp64 <<= (11+1);
 800c58e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c592:	f04f 0000 	mov.w	r0, #0
 800c596:	f04f 0100 	mov.w	r1, #0
 800c59a:	0319      	lsls	r1, r3, #12
 800c59c:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c5a0:	0310      	lsls	r0, r2, #12
 800c5a2:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
			tmp32 = pdata->VL53LX_p_033/2;
 800c5a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c5aa:	695b      	ldr	r3, [r3, #20]
 800c5ac:	085b      	lsrs	r3, r3, #1
 800c5ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			tmp64 += (uint64_t)tmp32;
 800c5b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c5bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c5c0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c5c4:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	1851      	adds	r1, r2, r1
 800c5cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c5ce:	4629      	mov	r1, r5
 800c5d0:	eb43 0101 	adc.w	r1, r3, r1
 800c5d4:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800c5d6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800c5da:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
			tmp64 = do_division_u(tmp64,
 800c5de:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c5e2:	695b      	ldr	r3, [r3, #20]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c5ea:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c5ee:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800c5f2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c5f6:	f7f3 fe63 	bl	80002c0 <__aeabi_uldivmod>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800c602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c606:	8adb      	ldrh	r3, [r3, #22]
 800c608:	b29b      	uxth	r3, r3
 800c60a:	2200      	movs	r2, #0
 800c60c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c610:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800c614:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c618:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800c61c:	4621      	mov	r1, r4
 800c61e:	428a      	cmp	r2, r1
 800c620:	4629      	mov	r1, r5
 800c622:	418b      	sbcs	r3, r1
 800c624:	d204      	bcs.n	800c630 <VL53LX_f_001+0x25c>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800c626:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800c62a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c62e:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800c630:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c634:	881b      	ldrh	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	f000 82e9 	beq.w	800cc0e <VL53LX_f_001+0x83a>
		(pbins->VL53LX_p_015        != 0) &&
 800c63c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c640:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800c644:	2b00      	cmp	r3, #0
 800c646:	f000 82e2 	beq.w	800cc0e <VL53LX_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800c64a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c64e:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800c650:	2b00      	cmp	r3, #0
 800c652:	f000 82dc 	beq.w	800cc0e <VL53LX_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800c656:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c65a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f000 82d5 	beq.w	800cc0e <VL53LX_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800c664:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c668:	885b      	ldrh	r3, [r3, #2]
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	2200      	movs	r2, #0
 800c66e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c670:	657a      	str	r2, [r7, #84]	@ 0x54
 800c672:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800c676:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 *= (1000 * 256);
 800c67a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800c67e:	4622      	mov	r2, r4
 800c680:	462b      	mov	r3, r5
 800c682:	f04f 0000 	mov.w	r0, #0
 800c686:	f04f 0100 	mov.w	r1, #0
 800c68a:	0159      	lsls	r1, r3, #5
 800c68c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c690:	0150      	lsls	r0, r2, #5
 800c692:	4602      	mov	r2, r0
 800c694:	460b      	mov	r3, r1
 800c696:	1b11      	subs	r1, r2, r4
 800c698:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c69a:	eb63 0305 	sbc.w	r3, r3, r5
 800c69e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6a0:	f04f 0200 	mov.w	r2, #0
 800c6a4:	f04f 0300 	mov.w	r3, #0
 800c6a8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800c6ac:	4649      	mov	r1, r9
 800c6ae:	008b      	lsls	r3, r1, #2
 800c6b0:	4641      	mov	r1, r8
 800c6b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c6b6:	4641      	mov	r1, r8
 800c6b8:	008a      	lsls	r2, r1, #2
 800c6ba:	4611      	mov	r1, r2
 800c6bc:	461a      	mov	r2, r3
 800c6be:	460b      	mov	r3, r1
 800c6c0:	191b      	adds	r3, r3, r4
 800c6c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6c4:	4613      	mov	r3, r2
 800c6c6:	eb45 0303 	adc.w	r3, r5, r3
 800c6ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6cc:	f04f 0200 	mov.w	r2, #0
 800c6d0:	f04f 0300 	mov.w	r3, #0
 800c6d4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800c6d8:	4629      	mov	r1, r5
 800c6da:	02cb      	lsls	r3, r1, #11
 800c6dc:	4621      	mov	r1, r4
 800c6de:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800c6e2:	4621      	mov	r1, r4
 800c6e4:	02ca      	lsls	r2, r1, #11
 800c6e6:	461c      	mov	r4, r3
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800c6ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c6f2:	881b      	ldrh	r3, [r3, #0]
 800c6f4:	085b      	lsrs	r3, r3, #1
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp64 += (uint64_t)tmp32;
 800c6fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c700:	2200      	movs	r2, #0
 800c702:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c706:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c70a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c70e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800c712:	4621      	mov	r1, r4
 800c714:	1851      	adds	r1, r2, r1
 800c716:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c718:	4629      	mov	r1, r5
 800c71a:	eb43 0101 	adc.w	r1, r3, r1
 800c71e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800c720:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800c724:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800c728:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c72c:	881b      	ldrh	r3, [r3, #0]
 800c72e:	b29b      	uxth	r3, r3
 800c730:	2200      	movs	r2, #0
 800c732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c736:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c73a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800c73e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c742:	f7f3 fdbd 	bl	80002c0 <__aeabi_uldivmod>
 800c746:	4602      	mov	r2, r0
 800c748:	460b      	mov	r3, r1
 800c74a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800c74e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c752:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c756:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800c758:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	011a      	lsls	r2, r3, #4
 800c760:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c764:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c766:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2200      	movs	r2, #0
 800c76e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c770:	637a      	str	r2, [r7, #52]	@ 0x34
 800c772:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800c776:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800c77a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c77e:	695b      	ldr	r3, [r3, #20]
 800c780:	2200      	movs	r2, #0
 800c782:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c786:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800c78a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c78e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800c792:	4622      	mov	r2, r4
 800c794:	fb02 f203 	mul.w	r2, r2, r3
 800c798:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c79c:	4629      	mov	r1, r5
 800c79e:	fb01 f303 	mul.w	r3, r1, r3
 800c7a2:	441a      	add	r2, r3
 800c7a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	fba3 1301 	umull	r1, r3, r3, r1
 800c7ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c7b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c7bc:	18d3      	adds	r3, r2, r3
 800c7be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c7c2:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 800c7c6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c7ca:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c7ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c7d2:	8b5b      	ldrh	r3, [r3, #26]
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c7dc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c7e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c7e4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c7e8:	4622      	mov	r2, r4
 800c7ea:	fb02 f203 	mul.w	r2, r2, r3
 800c7ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	fb01 f303 	mul.w	r3, r1, r3
 800c7f8:	441a      	add	r2, r3
 800c7fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c7fe:	4621      	mov	r1, r4
 800c800:	fba3 1301 	umull	r1, r3, r3, r1
 800c804:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c808:	460b      	mov	r3, r1
 800c80a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c80e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c812:	18d3      	adds	r3, r2, r3
 800c814:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c818:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800c81c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c820:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800c824:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c828:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800c82c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c82e:	f143 0300 	adc.w	r3, r3, #0
 800c832:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c834:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800c838:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800c83c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c840:	f04f 0000 	mov.w	r0, #0
 800c844:	f04f 0100 	mov.w	r1, #0
 800c848:	0cd0      	lsrs	r0, r2, #19
 800c84a:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800c84e:	0cd9      	lsrs	r1, r3, #19
 800c850:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
		tmp64  +=  500;
 800c854:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c858:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800c85c:	6239      	str	r1, [r7, #32]
 800c85e:	f143 0300 	adc.w	r3, r3, #0
 800c862:	627b      	str	r3, [r7, #36]	@ 0x24
 800c864:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c868:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800c86c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c870:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c874:	f04f 0300 	mov.w	r3, #0
 800c878:	f7f3 fd22 	bl	80002c0 <__aeabi_uldivmod>
 800c87c:	4602      	mov	r2, r0
 800c87e:	460b      	mov	r3, r1
 800c880:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800c884:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c888:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800c88c:	f173 0300 	sbcs.w	r3, r3, #0
 800c890:	d305      	bcc.n	800c89e <VL53LX_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800c892:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800c896:	f04f 0300 	mov.w	r3, #0
 800c89a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800c89e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c8a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c8a6:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c8a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	61bb      	str	r3, [r7, #24]
 800c8b2:	61fa      	str	r2, [r7, #28]
 800c8b4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c8b8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800c8bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c8c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c8cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c8d0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800c8d4:	4622      	mov	r2, r4
 800c8d6:	fb02 f203 	mul.w	r2, r2, r3
 800c8da:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c8de:	4629      	mov	r1, r5
 800c8e0:	fb01 f303 	mul.w	r3, r1, r3
 800c8e4:	441a      	add	r2, r3
 800c8e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c8ea:	4621      	mov	r1, r4
 800c8ec:	fba3 1301 	umull	r1, r3, r3, r1
 800c8f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c8fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8fe:	18d3      	adds	r3, r2, r3
 800c900:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c904:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 800c908:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c90c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c910:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c914:	8b5b      	ldrh	r3, [r3, #26]
 800c916:	b29b      	uxth	r3, r3
 800c918:	2200      	movs	r2, #0
 800c91a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c91e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c922:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c926:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800c92a:	4622      	mov	r2, r4
 800c92c:	fb02 f203 	mul.w	r2, r2, r3
 800c930:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c934:	4629      	mov	r1, r5
 800c936:	fb01 f303 	mul.w	r3, r1, r3
 800c93a:	441a      	add	r2, r3
 800c93c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c940:	4621      	mov	r1, r4
 800c942:	fba3 1301 	umull	r1, r3, r3, r1
 800c946:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c94a:	460b      	mov	r3, r1
 800c94c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c950:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c954:	18d3      	adds	r3, r2, r3
 800c956:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c95a:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800c95e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c962:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800c966:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c96a:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800c96e:	6139      	str	r1, [r7, #16]
 800c970:	f143 0300 	adc.w	r3, r3, #0
 800c974:	617b      	str	r3, [r7, #20]
 800c976:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c97a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800c97e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c982:	f04f 0000 	mov.w	r0, #0
 800c986:	f04f 0100 	mov.w	r1, #0
 800c98a:	0cd0      	lsrs	r0, r2, #19
 800c98c:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800c990:	0cd9      	lsrs	r1, r3, #19
 800c992:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800c996:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800c99a:	2200      	movs	r2, #0
 800c99c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c99e:	67fa      	str	r2, [r7, #124]	@ 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800c9a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c9a4:	891b      	ldrh	r3, [r3, #8]
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	673b      	str	r3, [r7, #112]	@ 0x70
 800c9ac:	677a      	str	r2, [r7, #116]	@ 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800c9ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800c9b2:	462b      	mov	r3, r5
 800c9b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c9b8:	4642      	mov	r2, r8
 800c9ba:	fb02 f203 	mul.w	r2, r2, r3
 800c9be:	464b      	mov	r3, r9
 800c9c0:	4621      	mov	r1, r4
 800c9c2:	fb01 f303 	mul.w	r3, r1, r3
 800c9c6:	4413      	add	r3, r2
 800c9c8:	4622      	mov	r2, r4
 800c9ca:	4641      	mov	r1, r8
 800c9cc:	fba2 1201 	umull	r1, r2, r2, r1
 800c9d0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800c9d4:	460a      	mov	r2, r1
 800c9d6:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800c9da:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800c9de:	4413      	add	r3, r2
 800c9e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c9e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c9e8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800c9ec:	4622      	mov	r2, r4
 800c9ee:	fb02 f203 	mul.w	r2, r2, r3
 800c9f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c9f6:	4629      	mov	r1, r5
 800c9f8:	fb01 f303 	mul.w	r3, r1, r3
 800c9fc:	4413      	add	r3, r2
 800c9fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800ca02:	4621      	mov	r1, r4
 800ca04:	fba2 1201 	umull	r1, r2, r2, r1
 800ca08:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800ca0c:	460a      	mov	r2, r1
 800ca0e:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800ca12:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800ca16:	4413      	add	r3, r2
 800ca18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ca1c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800ca20:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800ca24:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800ca28:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ca2c:	88db      	ldrh	r3, [r3, #6]
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	2200      	movs	r2, #0
 800ca32:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca34:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ca36:	f04f 0200 	mov.w	r2, #0
 800ca3a:	f04f 0300 	mov.w	r3, #0
 800ca3e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800ca42:	4629      	mov	r1, r5
 800ca44:	01cb      	lsls	r3, r1, #7
 800ca46:	4621      	mov	r1, r4
 800ca48:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800ca4c:	4621      	mov	r1, r4
 800ca4e:	01ca      	lsls	r2, r1, #7
 800ca50:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800ca54:	1884      	adds	r4, r0, r2
 800ca56:	60bc      	str	r4, [r7, #8]
 800ca58:	eb41 0303 	adc.w	r3, r1, r3
 800ca5c:	60fb      	str	r3, [r7, #12]
 800ca5e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ca62:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800ca66:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ca6a:	88db      	ldrh	r3, [r3, #6]
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	2200      	movs	r2, #0
 800ca70:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca72:	667a      	str	r2, [r7, #100]	@ 0x64
 800ca74:	f04f 0200 	mov.w	r2, #0
 800ca78:	f04f 0300 	mov.w	r3, #0
 800ca7c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800ca80:	4629      	mov	r1, r5
 800ca82:	020b      	lsls	r3, r1, #8
 800ca84:	4621      	mov	r1, r4
 800ca86:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800ca8a:	4621      	mov	r1, r4
 800ca8c:	020a      	lsls	r2, r1, #8
 800ca8e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800ca92:	f7f3 fc15 	bl	80002c0 <__aeabi_uldivmod>
 800ca96:	4602      	mov	r2, r0
 800ca98:	460b      	mov	r3, r1
 800ca9a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800ca9e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800caa2:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800caa6:	6039      	str	r1, [r7, #0]
 800caa8:	f143 0300 	adc.w	r3, r3, #0
 800caac:	607b      	str	r3, [r7, #4]
 800caae:	e9d7 3400 	ldrd	r3, r4, [r7]
 800cab2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64, 1000);
 800cab6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800caba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cabe:	f04f 0300 	mov.w	r3, #0
 800cac2:	f7f3 fbfd 	bl	80002c0 <__aeabi_uldivmod>
 800cac6:	4602      	mov	r2, r0
 800cac8:	460b      	mov	r3, r1
 800caca:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800cace:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800cad2:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800cad6:	f173 0300 	sbcs.w	r3, r3, #0
 800cada:	d305      	bcc.n	800cae8 <VL53LX_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800cadc:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800cae0:	f04f 0300 	mov.w	r3, #0
 800cae4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800cae8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800caec:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800caf0:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800caf2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800caf6:	69db      	ldr	r3, [r3, #28]
 800caf8:	021b      	lsls	r3, r3, #8
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fe ffcc 	bl	800ba98 <VL53LX_isqrt>
 800cb00:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800cb04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cb08:	785b      	ldrb	r3, [r3, #1]
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800cb10:	fb02 f303 	mul.w	r3, r2, r3
 800cb14:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124



		if (pdata->VL53LX_p_028 <
 800cb18:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800cb1c:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800cb1e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800cb22:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d218      	bcs.n	800cb5a <VL53LX_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800cb28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800cb30:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800cb34:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800cb36:	1ad3      	subs	r3, r2, r3
 800cb38:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108


			amb_thres_delta <<= 8;
 800cb3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800cb40:	021b      	lsls	r3, r3, #8
 800cb42:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

			if (tmp32 < amb_thres_delta)
 800cb46:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800cb4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d203      	bcs.n	800cb5a <VL53LX_f_001+0x786>
				tmp32 = amb_thres_delta;
 800cb52:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800cb56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800cb5a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800cb5e:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800cb60:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cb64:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800cb66:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800cb68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cb6c:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800cb6e:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800cb72:	f000 f854 	bl	800cc1e <VL53LX_f_002>
 800cb76:	4603      	mov	r3, r0
 800cb78:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800cb7a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800cb7e:	84da      	strh	r2, [r3, #38]	@ 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800cb80:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800cb84:	6a1b      	ldr	r3, [r3, #32]
 800cb86:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800cb8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cb8e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800cb92:	461a      	mov	r2, r3
 800cb94:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800cb98:	fb02 f303 	mul.w	r3, r2, r3
 800cb9c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 += (1 << 3);
 800cba0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800cba4:	3308      	adds	r3, #8
 800cba6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 /= (1 << 4);
 800cbaa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800cbae:	091b      	lsrs	r3, r3, #4
 800cbb0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800cbb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cbb8:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800cbba:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800cbbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cbc0:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800cbc2:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800cbc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cbc8:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800cbca:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800cbce:	f000 f826 	bl	800cc1e <VL53LX_f_002>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800cbd6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800cbda:	849a      	strh	r2, [r3, #36]	@ 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800cbdc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800cbe0:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800cbe4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800cbe8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800cbec:	429a      	cmp	r2, r3
 800cbee:	da07      	bge.n	800cc00 <VL53LX_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800cbf0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800cbf4:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800cbf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cbfc:	801a      	strh	r2, [r3, #0]
 800cbfe:	e006      	b.n	800cc0e <VL53LX_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800cc00:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800cc04:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
 800cc08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cc0c:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800cc0e:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117

}
 800cc12:	4618      	mov	r0, r3
 800cc14:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cc1e <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b086      	sub	sp, #24
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	60f8      	str	r0, [r7, #12]
 800cc26:	60b9      	str	r1, [r7, #8]
 800cc28:	607a      	str	r2, [r7, #4]
 800cc2a:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800cc30:	2300      	movs	r3, #0
 800cc32:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	fb03 f303 	mul.w	r3, r3, r3
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	4413      	add	r3, r2
 800cc44:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800cc46:	6938      	ldr	r0, [r7, #16]
 800cc48:	f7fe ff26 	bl	800ba98 <VL53LX_isqrt>
 800cc4c:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800cc4e:	693a      	ldr	r2, [r7, #16]
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	4413      	add	r3, r2
 800cc54:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	011b      	lsls	r3, r3, #4
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7fe ff1c 	bl	800ba98 <VL53LX_isqrt>
 800cc60:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	fb02 f303 	mul.w	r3, r2, r3
 800cc6a:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d009      	beq.n	800cc86 <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800cc72:	697a      	ldr	r2, [r7, #20]
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	4413      	add	r3, r2
 800cc78:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	005b      	lsls	r3, r3, #1
 800cc7e:	697a      	ldr	r2, [r7, #20]
 800cc80:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc84:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800cc86:	697b      	ldr	r3, [r7, #20]

}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3718      	adds	r7, #24
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2218      	movs	r2, #24
 800cca0:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2200      	movs	r2, #0
 800cca6:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	73fb      	strb	r3, [r7, #15]
 800ccc6:	e01f      	b.n	800cd08 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800ccc8:	7bfb      	ldrb	r3, [r7, #15]
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	4413      	add	r3, r2
 800ccce:	2200      	movs	r2, #0
 800ccd0:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800ccd2:	7bfb      	ldrb	r3, [r7, #15]
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	2200      	movs	r2, #0
 800ccda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800ccde:	7bfb      	ldrb	r3, [r7, #15]
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	4413      	add	r3, r2
 800cce4:	2200      	movs	r2, #0
 800cce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800ccea:	7bfa      	ldrb	r2, [r7, #15]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	322e      	adds	r2, #46	@ 0x2e
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800ccf6:	7bfa      	ldrb	r2, [r7, #15]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	3246      	adds	r2, #70	@ 0x46
 800ccfc:	2100      	movs	r1, #0
 800ccfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800cd02:	7bfb      	ldrb	r3, [r7, #15]
 800cd04:	3301      	adds	r3, #1
 800cd06:	73fb      	strb	r3, [r7, #15]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	785b      	ldrb	r3, [r3, #1]
 800cd0c:	7bfa      	ldrb	r2, [r7, #15]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d3da      	bcc.n	800ccc8 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2200      	movs	r2, #0
 800cd16:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2208      	movs	r2, #8
 800cd1e:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
	palgo->VL53LX_p_046             = 0;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800cd30:	461a      	mov	r2, r3
 800cd32:	2118      	movs	r1, #24
 800cd34:	2000      	movs	r0, #0
 800cd36:	f7ff f9e8 	bl	800c10a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800cd40:	461a      	mov	r2, r3
 800cd42:	2118      	movs	r1, #24
 800cd44:	2000      	movs	r0, #0
 800cd46:	f7ff f9e0 	bl	800c10a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800cd50:	461a      	mov	r2, r3
 800cd52:	2118      	movs	r1, #24
 800cd54:	2000      	movs	r0, #0
 800cd56:	f7ff f9d8 	bl	800c10a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800cd60:	461a      	mov	r2, r3
 800cd62:	2118      	movs	r1, #24
 800cd64:	2000      	movs	r0, #0
 800cd66:	f7ff f9d0 	bl	800c10a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800cd70:	461a      	mov	r2, r3
 800cd72:	2118      	movs	r1, #24
 800cd74:	2000      	movs	r0, #0
 800cd76:	f7ff f9c8 	bl	800c10a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800cd7a:	bf00      	nop
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cd82:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd86:	b090      	sub	sp, #64	@ 0x40
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	61b9      	str	r1, [r7, #24]
 800cd8c:	617a      	str	r2, [r7, #20]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	4603      	mov	r3, r0
 800cd92:	83fb      	strh	r3, [r7, #30]
 800cd94:	4613      	mov	r3, r2
 800cd96:	777b      	strb	r3, [r7, #29]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t  lb            = 0;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t  VL53LX_p_001            = 0;
 800cda4:	2300      	movs	r3, #0
 800cda6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	int64_t  tmp          = 0;
 800cdaa:	f04f 0200 	mov.w	r2, #0
 800cdae:	f04f 0300 	mov.w	r3, #0
 800cdb2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	int32_t  amb_events   = 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  VL53LX_p_018       = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	63bb      	str	r3, [r7, #56]	@ 0x38
	int32_t  samples      = 0;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800cdc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cdc4:	7a5a      	ldrb	r2, [r3, #9]
 800cdc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cdc8:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800cdca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cdcc:	7a1a      	ldrb	r2, [r3, #8]
 800cdce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cdd0:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800cdd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cdd4:	7a9a      	ldrb	r2, [r3, #10]
 800cdd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cdd8:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800cdda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cddc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800cde0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cde2:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800cde4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cde6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7ff f93c 	bl	800c068 <VL53LX_decode_vcsel_period>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800cdf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cdf6:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800cdf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cdfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cdfe:	17da      	asrs	r2, r3, #31
 800ce00:	60bb      	str	r3, [r7, #8]
 800ce02:	60fa      	str	r2, [r7, #12]
 800ce04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce08:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800ce0c:	8bfb      	ldrh	r3, [r7, #30]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	4698      	mov	r8, r3
 800ce12:	4691      	mov	r9, r2
 800ce14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce16:	fb08 f203 	mul.w	r2, r8, r3
 800ce1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce1c:	fb09 f303 	mul.w	r3, r9, r3
 800ce20:	4413      	add	r3, r2
 800ce22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce24:	fba2 4508 	umull	r4, r5, r2, r8
 800ce28:	442b      	add	r3, r5
 800ce2a:	461d      	mov	r5, r3
 800ce2c:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
 800ce30:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
	tmp += 2048;
 800ce34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ce38:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 800ce3c:	f143 0b00 	adc.w	fp, r3, #0
 800ce40:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
	tmp = do_division_s(tmp, 4096);
 800ce44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	da08      	bge.n	800ce5e <VL53LX_f_006+0xdc>
 800ce4c:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800ce50:	1851      	adds	r1, r2, r1
 800ce52:	6039      	str	r1, [r7, #0]
 800ce54:	f143 0300 	adc.w	r3, r3, #0
 800ce58:	607b      	str	r3, [r7, #4]
 800ce5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce5e:	f04f 0000 	mov.w	r0, #0
 800ce62:	f04f 0100 	mov.w	r1, #0
 800ce66:	0b10      	lsrs	r0, r2, #12
 800ce68:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800ce6c:	1319      	asrs	r1, r3, #12
 800ce6e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	amb_events = (int32_t)tmp;
 800ce72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce74:	627b      	str	r3, [r7, #36]	@ 0x24



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800ce76:	2300      	movs	r3, #0
 800ce78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ce7c:	e062      	b.n	800cf44 <VL53LX_f_006+0x1c2>

		VL53LX_p_001 = lb >> 2;
 800ce7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ce82:	089b      	lsrs	r3, r3, #2
 800ce84:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800ce88:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ce8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ce8e:	4413      	add	r3, r2
 800ce90:	7c9b      	ldrb	r3, [r3, #18]
 800ce92:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800ce94:	6a3b      	ldr	r3, [r7, #32]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	dd4f      	ble.n	800cf3a <VL53LX_f_006+0x1b8>

			if (lb < pxtalk->VL53LX_p_021 &&
 800ce9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce9c:	7a9b      	ldrb	r3, [r3, #10]
 800ce9e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d20f      	bcs.n	800cec6 <VL53LX_f_006+0x144>
 800cea6:	7f7b      	ldrb	r3, [r7, #29]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00c      	beq.n	800cec6 <VL53LX_f_006+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800ceac:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ceb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ceb2:	3206      	adds	r2, #6
 800ceb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceba:	441a      	add	r2, r3
 800cebc:	6a3b      	ldr	r3, [r7, #32]
 800cebe:	fb02 f303 	mul.w	r3, r2, r3
 800cec2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cec4:	e004      	b.n	800ced0 <VL53LX_f_006+0x14e>
			else
				VL53LX_p_018 = samples *  amb_events;
 800cec6:	6a3b      	ldr	r3, [r7, #32]
 800cec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ceca:	fb02 f303 	mul.w	r3, r2, r3
 800cece:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800ced0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fe fde0 	bl	800ba98 <VL53LX_isqrt>
 800ced8:	4603      	mov	r3, r0
 800ceda:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018 += (samples/2);
 800cedc:	6a3b      	ldr	r3, [r7, #32]
 800cede:	0fda      	lsrs	r2, r3, #31
 800cee0:	4413      	add	r3, r2
 800cee2:	105b      	asrs	r3, r3, #1
 800cee4:	461a      	mov	r2, r3
 800cee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee8:	4413      	add	r3, r2
 800ceea:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= samples;
 800ceec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ceee:	6a3b      	ldr	r3, [r7, #32]
 800cef0:	fb92 f3f3 	sdiv	r3, r2, r3
 800cef4:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 *= ambient_threshold_sigma;
 800cef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef8:	69ba      	ldr	r2, [r7, #24]
 800cefa:	fb02 f303 	mul.w	r3, r2, r3
 800cefe:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += 8;
 800cf00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf02:	3308      	adds	r3, #8
 800cf04:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= 16;
 800cf06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	da00      	bge.n	800cf0e <VL53LX_f_006+0x18c>
 800cf0c:	330f      	adds	r3, #15
 800cf0e:	111b      	asrs	r3, r3, #4
 800cf10:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += amb_events;
 800cf12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf16:	4413      	add	r3, r2
 800cf18:	63bb      	str	r3, [r7, #56]	@ 0x38

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800cf1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	da01      	bge.n	800cf26 <VL53LX_f_006+0x1a4>
				VL53LX_p_018 = min_ambient_threshold_events;
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	63bb      	str	r3, [r7, #56]	@ 0x38

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800cf26:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cf2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf2c:	3216      	adds	r2, #22
 800cf2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cf30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800cf34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf38:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800cf3a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cf3e:	3301      	adds	r3, #1
 800cf40:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cf44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf46:	7a9b      	ldrb	r3, [r3, #10]
 800cf48:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d396      	bcc.n	800ce7e <VL53LX_f_006+0xfc>

	}



	palgo->VL53LX_p_039 = 0;
 800cf50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf52:	2200      	movs	r2, #0
 800cf54:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800cf56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf58:	7a1b      	ldrb	r3, [r3, #8]
 800cf5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cf5e:	e033      	b.n	800cfc8 <VL53LX_f_006+0x246>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800cf60:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cf64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf66:	3206      	adds	r2, #6
 800cf68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cf6c:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800cf70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf72:	3116      	adds	r1, #22
 800cf74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	dd13      	ble.n	800cfa4 <VL53LX_f_006+0x222>
			palgo->VL53LX_p_040[lb]      = 1;
 800cf7c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cf80:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cf82:	4413      	add	r3, r2
 800cf84:	2201      	movs	r2, #1
 800cf86:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800cf88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cf8c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cf8e:	4413      	add	r3, r2
 800cf90:	2201      	movs	r2, #1
 800cf92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			palgo->VL53LX_p_039++;
 800cf96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf98:	791b      	ldrb	r3, [r3, #4]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	b2da      	uxtb	r2, r3
 800cf9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cfa0:	711a      	strb	r2, [r3, #4]
 800cfa2:	e00c      	b.n	800cfbe <VL53LX_f_006+0x23c>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800cfa4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cfa8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cfaa:	4413      	add	r3, r2
 800cfac:	2200      	movs	r2, #0
 800cfae:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800cfb0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cfb4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cfb6:	4413      	add	r3, r2
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800cfbe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cfc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cfca:	7a9b      	ldrb	r3, [r3, #10]
 800cfcc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d3c5      	bcc.n	800cf60 <VL53LX_f_006+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cfd4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37

}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3740      	adds	r7, #64	@ 0x40
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cfe2 <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cfe2:	b480      	push	{r7}
 800cfe4:	b085      	sub	sp, #20
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cfea:	2300      	movs	r3, #0
 800cfec:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800cfee:	2300      	movs	r3, #0
 800cff0:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800cff6:	2300      	movs	r3, #0
 800cff8:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800d002:	2300      	movs	r3, #0
 800d004:	73fb      	strb	r3, [r7, #15]
 800d006:	e02d      	b.n	800d064 <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800d008:	7bfb      	ldrb	r3, [r7, #15]
 800d00a:	3301      	adds	r3, #1
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	78d2      	ldrb	r2, [r2, #3]
 800d010:	fb93 f1f2 	sdiv	r1, r3, r2
 800d014:	fb01 f202 	mul.w	r2, r1, r2
 800d018:	1a9b      	subs	r3, r3, r2
 800d01a:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	789b      	ldrb	r3, [r3, #2]
 800d020:	7bfa      	ldrb	r2, [r7, #15]
 800d022:	429a      	cmp	r2, r3
 800d024:	d21b      	bcs.n	800d05e <VL53LX_f_007+0x7c>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	789b      	ldrb	r3, [r3, #2]
 800d02a:	7b3a      	ldrb	r2, [r7, #12]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d216      	bcs.n	800d05e <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800d030:	7bfb      	ldrb	r3, [r7, #15]
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	4413      	add	r3, r2
 800d036:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d10f      	bne.n	800d05e <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800d03e:	7b3b      	ldrb	r3, [r7, #12]
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	4413      	add	r3, r2
 800d044:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d108      	bne.n	800d05e <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800d04c:	7bbb      	ldrb	r3, [r7, #14]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d105      	bne.n	800d05e <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	7bfa      	ldrb	r2, [r7, #15]
 800d056:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
				found = 1;
 800d05a:	2301      	movs	r3, #1
 800d05c:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800d05e:	7bfb      	ldrb	r3, [r7, #15]
 800d060:	3301      	adds	r3, #1
 800d062:	73fb      	strb	r3, [r7, #15]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	78db      	ldrb	r3, [r3, #3]
 800d068:	7bfa      	ldrb	r2, [r7, #15]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d3cc      	bcc.n	800d008 <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d06e:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800d072:	4618      	mov	r0, r3
 800d074:	3714      	adds	r7, #20
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr

0800d07e <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d07e:	b480      	push	{r7}
 800d080:	b085      	sub	sp, #20
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d086:	2300      	movs	r3, #0
 800d088:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800d08a:	2300      	movs	r3, #0
 800d08c:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800d08e:	2300      	movs	r3, #0
 800d090:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800d092:	2300      	movs	r3, #0
 800d094:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800d09c:	73fb      	strb	r3, [r7, #15]
 800d09e:	e05a      	b.n	800d156 <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	78da      	ldrb	r2, [r3, #3]
 800d0a4:	7bfb      	ldrb	r3, [r7, #15]
 800d0a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0aa:	fb01 f202 	mul.w	r2, r1, r2
 800d0ae:	1a9b      	subs	r3, r3, r2
 800d0b0:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800d0b2:	7bfb      	ldrb	r3, [r7, #15]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	78d2      	ldrb	r2, [r2, #3]
 800d0ba:	fb93 f1f2 	sdiv	r1, r3, r2
 800d0be:	fb01 f202 	mul.w	r2, r1, r2
 800d0c2:	1a9b      	subs	r3, r3, r2
 800d0c4:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	789b      	ldrb	r3, [r3, #2]
 800d0ca:	7b7a      	ldrb	r2, [r7, #13]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d23f      	bcs.n	800d150 <VL53LX_f_008+0xd2>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	789b      	ldrb	r3, [r3, #2]
 800d0d4:	7b3a      	ldrb	r2, [r7, #12]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d23a      	bcs.n	800d150 <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800d0da:	7b7b      	ldrb	r3, [r7, #13]
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	4413      	add	r3, r2
 800d0e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10e      	bne.n	800d106 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800d0e8:	7b3b      	ldrb	r3, [r7, #12]
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d107      	bne.n	800d106 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	b2da      	uxtb	r2, r3
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f893 217a 	ldrb.w	r2, [r3, #378]	@ 0x17a
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800d112:	429a      	cmp	r2, r3
 800d114:	d905      	bls.n	800d122 <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f893 2179 	ldrb.w	r2, [r3, #377]	@ 0x179
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800d122:	7b7b      	ldrb	r3, [r7, #13]
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	4413      	add	r3, r2
 800d128:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d009      	beq.n	800d144 <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800d130:	7b7b      	ldrb	r3, [r7, #13]
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	f892 117a 	ldrb.w	r1, [r2, #378]	@ 0x17a
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	4413      	add	r3, r2
 800d13c:	460a      	mov	r2, r1
 800d13e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d142:	e005      	b.n	800d150 <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800d144:	7b7b      	ldrb	r3, [r7, #13]
 800d146:	687a      	ldr	r2, [r7, #4]
 800d148:	4413      	add	r3, r2
 800d14a:	2200      	movs	r2, #0
 800d14c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		lb++) {
 800d150:	7bfb      	ldrb	r3, [r7, #15]
 800d152:	3301      	adds	r3, #1
 800d154:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800d156:	7bfa      	ldrb	r2, [r7, #15]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800d15e:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800d164:	440b      	add	r3, r1
 800d166:	429a      	cmp	r2, r3
 800d168:	db9a      	blt.n	800d0a0 <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800d16a:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800d16e:	4618      	mov	r0, r3
 800d170:	3714      	adds	r7, #20
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr

0800d17a <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d17a:	b480      	push	{r7}
 800d17c:	b087      	sub	sp, #28
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d182:	2300      	movs	r3, #0
 800d184:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d186:	2300      	movs	r3, #0
 800d188:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800d18e:	2300      	movs	r3, #0
 800d190:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800d192:	2300      	movs	r3, #0
 800d194:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800d196:	2300      	movs	r3, #0
 800d198:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	78db      	ldrb	r3, [r3, #3]
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800d1a2:	7cbb      	ldrb	r3, [r7, #18]
 800d1a4:	085b      	lsrs	r3, r3, #1
 800d1a6:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800d1ae:	75fb      	strb	r3, [r7, #23]
 800d1b0:	e0a2      	b.n	800d2f8 <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	78da      	ldrb	r2, [r3, #3]
 800d1b6:	7dfb      	ldrb	r3, [r7, #23]
 800d1b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1bc:	fb01 f202 	mul.w	r2, r1, r2
 800d1c0:	1a9b      	subs	r3, r3, r2
 800d1c2:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800d1c4:	7dfb      	ldrb	r3, [r7, #23]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	78d2      	ldrb	r2, [r2, #3]
 800d1cc:	fb93 f1f2 	sdiv	r1, r3, r2
 800d1d0:	fb01 f202 	mul.w	r2, r1, r2
 800d1d4:	1a9b      	subs	r3, r3, r2
 800d1d6:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	789b      	ldrb	r3, [r3, #2]
 800d1dc:	7d7a      	ldrb	r2, [r7, #21]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	f080 8087 	bcs.w	800d2f2 <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800d1e8:	7d3a      	ldrb	r2, [r7, #20]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	f080 8081 	bcs.w	800d2f2 <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800d1f0:	7d7b      	ldrb	r3, [r7, #21]
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d12f      	bne.n	800d25e <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800d1fe:	7d3b      	ldrb	r3, [r7, #20]
 800d200:	687a      	ldr	r2, [r7, #4]
 800d202:	4413      	add	r3, r2
 800d204:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d028      	beq.n	800d25e <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800d20c:	7d3b      	ldrb	r3, [r7, #20]
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	4413      	add	r3, r2
 800d212:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d216:	3b01      	subs	r3, #1
 800d218:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800d220:	7cfa      	ldrb	r2, [r7, #19]
 800d222:	429a      	cmp	r2, r3
 800d224:	d21b      	bcs.n	800d25e <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d226:	7cfa      	ldrb	r2, [r7, #19]
 800d228:	4613      	mov	r3, r2
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	4413      	add	r3, r2
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	4413      	add	r3, r2
 800d238:	3304      	adds	r3, #4
 800d23a:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	7dfa      	ldrb	r2, [r7, #23]
 800d240:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800d242:	7dfb      	ldrb	r3, [r7, #23]
 800d244:	3301      	adds	r3, #1
 800d246:	b2da      	uxtb	r2, r3
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	22ff      	movs	r2, #255	@ 0xff
 800d250:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2200      	movs	r2, #0
 800d256:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2200      	movs	r2, #0
 800d25c:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800d25e:	7d7b      	ldrb	r3, [r7, #21]
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	4413      	add	r3, r2
 800d264:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d042      	beq.n	800d2f2 <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800d26c:	7d3b      	ldrb	r3, [r7, #20]
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	4413      	add	r3, r2
 800d272:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d276:	2b00      	cmp	r3, #0
 800d278:	d13b      	bne.n	800d2f2 <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800d27a:	7d7b      	ldrb	r3, [r7, #21]
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	4413      	add	r3, r2
 800d280:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d284:	3b01      	subs	r3, #1
 800d286:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800d28e:	7cfa      	ldrb	r2, [r7, #19]
 800d290:	429a      	cmp	r2, r3
 800d292:	d22e      	bcs.n	800d2f2 <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d294:	7cfa      	ldrb	r2, [r7, #19]
 800d296:	4613      	mov	r3, r2
 800d298:	00db      	lsls	r3, r3, #3
 800d29a:	4413      	add	r3, r2
 800d29c:	009b      	lsls	r3, r3, #2
 800d29e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	3304      	adds	r3, #4
 800d2a8:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	7dfa      	ldrb	r2, [r7, #23]
 800d2ae:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800d2b0:	7dfb      	ldrb	r3, [r7, #23]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800d2c2:	1ad3      	subs	r3, r2, r3
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800d2d6:	1ad3      	subs	r3, r2, r3
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	3301      	adds	r3, #1
 800d2dc:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	799b      	ldrb	r3, [r3, #6]
 800d2e6:	7cba      	ldrb	r2, [r7, #18]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d202      	bcs.n	800d2f2 <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	7cba      	ldrb	r2, [r7, #18]
 800d2f0:	719a      	strb	r2, [r3, #6]
		blb++) {
 800d2f2:	7dfb      	ldrb	r3, [r7, #23]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800d2f8:	7dfa      	ldrb	r2, [r7, #23]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800d300:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800d306:	440b      	add	r3, r1
 800d308:	429a      	cmp	r2, r3
 800d30a:	f6ff af52 	blt.w	800d1b2 <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d30e:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800d312:	4618      	mov	r0, r3
 800d314:	371c      	adds	r7, #28
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr

0800d31e <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b090      	sub	sp, #64	@ 0x40
 800d322:	af00      	add	r7, sp, #0
 800d324:	4603      	mov	r3, r0
 800d326:	6039      	str	r1, [r7, #0]
 800d328:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d32a:	2300      	movs	r3, #0
 800d32c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800d330:	f107 030c 	add.w	r3, r7, #12
 800d334:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800d336:	2300      	movs	r3, #0
 800d338:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t swapped = 1;
 800d33c:	2301      	movs	r3, #1
 800d33e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d965      	bls.n	800d418 <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800d34c:	e05f      	b.n	800d40e <VL53LX_f_016+0xf0>

		swapped = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800d354:	2301      	movs	r3, #1
 800d356:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d35a:	e051      	b.n	800d400 <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800d35c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d360:	1e5a      	subs	r2, r3, #1
 800d362:	4613      	mov	r3, r2
 800d364:	00db      	lsls	r3, r3, #3
 800d366:	4413      	add	r3, r2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d36e:	683a      	ldr	r2, [r7, #0]
 800d370:	4413      	add	r3, r2
 800d372:	3304      	adds	r3, #4
 800d374:	637b      	str	r3, [r7, #52]	@ 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800d376:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d37a:	4613      	mov	r3, r2
 800d37c:	00db      	lsls	r3, r3, #3
 800d37e:	4413      	add	r3, r2
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d386:	683a      	ldr	r2, [r7, #0]
 800d388:	4413      	add	r3, r2
 800d38a:	3304      	adds	r3, #4
 800d38c:	633b      	str	r3, [r7, #48]	@ 0x30



			if (target_order
 800d38e:	79fb      	ldrb	r3, [r7, #7]
 800d390:	2b02      	cmp	r3, #2
 800d392:	d118      	bne.n	800d3c6 <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800d394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d396:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800d398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39a:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800d39c:	429a      	cmp	r2, r3
 800d39e:	da2a      	bge.n	800d3f6 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800d3a0:	2224      	movs	r2, #36	@ 0x24
 800d3a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d3a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d3a6:	f00d fbe2 	bl	801ab6e <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800d3aa:	2224      	movs	r2, #36	@ 0x24
 800d3ac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d3ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3b0:	f00d fbdd 	bl	801ab6e <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800d3b4:	2224      	movs	r2, #36	@ 0x24
 800d3b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d3b8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d3ba:	f00d fbd8 	bl	801ab6e <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800d3c4:	e017      	b.n	800d3f6 <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800d3c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3c8:	699a      	ldr	r2, [r3, #24]
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3cc:	699b      	ldr	r3, [r3, #24]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d911      	bls.n	800d3f6 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800d3d2:	2224      	movs	r2, #36	@ 0x24
 800d3d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d3d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d3d8:	f00d fbc9 	bl	801ab6e <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800d3dc:	2224      	movs	r2, #36	@ 0x24
 800d3de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d3e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3e2:	f00d fbc4 	bl	801ab6e <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800d3e6:	2224      	movs	r2, #36	@ 0x24
 800d3e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d3ea:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d3ec:	f00d fbbf 	bl	801ab6e <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800d3f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800d406:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d3a6      	bcc.n	800d35c <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800d40e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800d412:	2b00      	cmp	r3, #0
 800d414:	d19b      	bne.n	800d34e <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800d416:	e000      	b.n	800d41a <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800d418:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800d41a:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d

}
 800d41e:	4618      	mov	r0, r3
 800d420:	3740      	adds	r7, #64	@ 0x40
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}

0800d426 <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d426:	b480      	push	{r7}
 800d428:	b087      	sub	sp, #28
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	4603      	mov	r3, r0
 800d42e:	60b9      	str	r1, [r7, #8]
 800d430:	607a      	str	r2, [r7, #4]
 800d432:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d434:	2300      	movs	r3, #0
 800d436:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d438:	2300      	movs	r3, #0
 800d43a:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d43c:	2300      	movs	r3, #0
 800d43e:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d440:	7bfa      	ldrb	r2, [r7, #15]
 800d442:	4613      	mov	r3, r2
 800d444:	00db      	lsls	r3, r3, #3
 800d446:	4413      	add	r3, r2
 800d448:	009b      	lsls	r3, r3, #2
 800d44a:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	4413      	add	r3, r2
 800d452:	3304      	adds	r3, #4
 800d454:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	2200      	movs	r2, #0
 800d45a:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	2200      	movs	r2, #0
 800d460:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	75fb      	strb	r3, [r7, #23]
 800d468:	e01c      	b.n	800d4a4 <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	78da      	ldrb	r2, [r3, #3]
 800d46e:	7dfb      	ldrb	r3, [r7, #23]
 800d470:	fbb3 f1f2 	udiv	r1, r3, r2
 800d474:	fb01 f202 	mul.w	r2, r1, r2
 800d478:	1a9b      	subs	r3, r3, r2
 800d47a:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	68da      	ldr	r2, [r3, #12]
 800d480:	7d79      	ldrb	r1, [r7, #21]
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	3106      	adds	r1, #6
 800d486:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d48a:	441a      	add	r2, r3
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	689a      	ldr	r2, [r3, #8]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	441a      	add	r2, r3
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d49e:	7dfb      	ldrb	r3, [r7, #23]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	75fb      	strb	r3, [r7, #23]
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	791b      	ldrb	r3, [r3, #4]
 800d4a8:	7dfa      	ldrb	r2, [r7, #23]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d9dd      	bls.n	800d46a <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	68da      	ldr	r2, [r3, #12]
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800d4bc:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	371c      	adds	r7, #28
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d4cc:	b590      	push	{r4, r7, lr}
 800d4ce:	b08d      	sub	sp, #52	@ 0x34
 800d4d0:	af02      	add	r7, sp, #8
 800d4d2:	60ba      	str	r2, [r7, #8]
 800d4d4:	607b      	str	r3, [r7, #4]
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	73fb      	strb	r3, [r7, #15]
 800d4da:	460b      	mov	r3, r1
 800d4dc:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	uint8_t   i            = 0;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	int16_t   VL53LX_p_012 = 0;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint32_t  tmp_phase    = 0;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d4fa:	7bfa      	ldrb	r2, [r7, #15]
 800d4fc:	4613      	mov	r3, r2
 800d4fe:	00db      	lsls	r3, r3, #3
 800d500:	4413      	add	r3, r2
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	4413      	add	r3, r2
 800d50c:	3304      	adds	r3, #4
 800d50e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	789b      	ldrb	r3, [r3, #2]
 800d514:	2bff      	cmp	r3, #255	@ 0xff
 800d516:	d102      	bne.n	800d51e <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	2201      	movs	r2, #1
 800d51c:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	789b      	ldrb	r3, [r3, #2]
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	78d2      	ldrb	r2, [r2, #3]
 800d526:	fbb3 f1f2 	udiv	r1, r3, r2
 800d52a:	fb01 f202 	mul.w	r2, r1, r2
 800d52e:	1a9b      	subs	r3, r3, r2
 800d530:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	VL53LX_p_012  = (int16_t)i;
 800d534:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d538:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	461a      	mov	r2, r3
 800d540:	8c3b      	ldrh	r3, [r7, #32]
 800d542:	4413      	add	r3, r2
 800d544:	b29b      	uxth	r3, r3
 800d546:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800d548:	8c3b      	ldrh	r3, [r7, #32]
 800d54a:	697a      	ldr	r2, [r7, #20]
 800d54c:	7892      	ldrb	r2, [r2, #2]
 800d54e:	1a9b      	subs	r3, r3, r2
 800d550:	b29b      	uxth	r3, r3
 800d552:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800d554:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d558:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	791b      	ldrb	r3, [r3, #4]
 800d55e:	461a      	mov	r2, r3
 800d560:	8bfb      	ldrh	r3, [r7, #30]
 800d562:	4413      	add	r3, r2
 800d564:	b29b      	uxth	r3, r3
 800d566:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800d568:	8bfb      	ldrh	r3, [r7, #30]
 800d56a:	697a      	ldr	r2, [r7, #20]
 800d56c:	7892      	ldrb	r2, [r2, #2]
 800d56e:	1a9b      	subs	r3, r3, r2
 800d570:	b29b      	uxth	r3, r3
 800d572:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800d574:	8bfa      	ldrh	r2, [r7, #30]
 800d576:	8c3b      	ldrh	r3, [r7, #32]
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	if (window_width > 3)
 800d57e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d582:	2b03      	cmp	r3, #3
 800d584:	dd01      	ble.n	800d58a <VL53LX_f_015+0xbe>
		window_width = 3;
 800d586:	2303      	movs	r3, #3
 800d588:	84bb      	strh	r3, [r7, #36]	@ 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800d58a:	8c3a      	ldrh	r2, [r7, #32]
 800d58c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d58e:	4413      	add	r3, r2
 800d590:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800d592:	b219      	sxth	r1, r3
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	78da      	ldrb	r2, [r3, #3]
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	3314      	adds	r3, #20
 800d59c:	7bbc      	ldrb	r4, [r7, #14]
 800d59e:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800d5a2:	9301      	str	r3, [sp, #4]
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	4623      	mov	r3, r4
 800d5aa:	f000 f846 	bl	800d63a <VL53LX_f_020>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800d5b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d114      	bne.n	800d5e6 <VL53LX_f_015+0x11a>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800d5bc:	8bfa      	ldrh	r2, [r7, #30]
 800d5be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d5c0:	1ad3      	subs	r3, r2, r3
 800d5c2:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800d5c4:	b218      	sxth	r0, r3
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	78da      	ldrb	r2, [r3, #3]
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	331c      	adds	r3, #28
 800d5ce:	7bbc      	ldrb	r4, [r7, #14]
 800d5d0:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d5d4:	9301      	str	r3, [sp, #4]
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	4623      	mov	r3, r4
 800d5dc:	f000 f82d 	bl	800d63a <VL53LX_f_020>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	695a      	ldr	r2, [r3, #20]
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	69db      	ldr	r3, [r3, #28]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d909      	bls.n	800d606 <VL53LX_f_015+0x13a>
		tmp_phase        = pdata->VL53LX_p_026;
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	695b      	ldr	r3, [r3, #20]
 800d5f6:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	69da      	ldr	r2, [r3, #28]
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	69ba      	ldr	r2, [r7, #24]
 800d604:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	699a      	ldr	r2, [r3, #24]
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	695b      	ldr	r3, [r3, #20]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d203      	bcs.n	800d61a <VL53LX_f_015+0x14e>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	699a      	ldr	r2, [r3, #24]
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	699a      	ldr	r2, [r3, #24]
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	69db      	ldr	r3, [r3, #28]
 800d622:	429a      	cmp	r2, r3
 800d624:	d903      	bls.n	800d62e <VL53LX_f_015+0x162>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	699a      	ldr	r2, [r3, #24]
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800d62e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d632:	4618      	mov	r0, r3
 800d634:	372c      	adds	r7, #44	@ 0x2c
 800d636:	46bd      	mov	sp, r7
 800d638:	bd90      	pop	{r4, r7, pc}

0800d63a <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800d63a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d63e:	b09d      	sub	sp, #116	@ 0x74
 800d640:	af00      	add	r7, sp, #0
 800d642:	461c      	mov	r4, r3
 800d644:	4603      	mov	r3, r0
 800d646:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d64a:	460b      	mov	r3, r1
 800d64c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d650:	4613      	mov	r3, r2
 800d652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d656:	4623      	mov	r3, r4
 800d658:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d65c:	2300      	movs	r3, #0
 800d65e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	int16_t  i            = 0;
 800d662:	2300      	movs	r3, #0
 800d664:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	int16_t  lb            = 0;
 800d668:	2300      	movs	r3, #0
 800d66a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

	int64_t VL53LX_p_018        = 0;
 800d66e:	f04f 0200 	mov.w	r2, #0
 800d672:	f04f 0300 	mov.w	r3, #0
 800d676:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	int64_t event_sum     = 0;
 800d67a:	f04f 0200 	mov.w	r2, #0
 800d67e:	f04f 0300 	mov.w	r3, #0
 800d682:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	int64_t weighted_sum  = 0;
 800d686:	f04f 0200 	mov.w	r2, #0
 800d68a:	f04f 0300 	mov.w	r3, #0
 800d68e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800d692:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800d696:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d69a:	6013      	str	r3, [r2, #0]

	if (VL53LX_p_030 != 0)
 800d69c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f000 809c 	beq.w	800d7de <VL53LX_f_020+0x1a4>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d6a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d6aa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d6ae:	e08f      	b.n	800d7d0 <VL53LX_f_020+0x196>

		if (lb < 0)
 800d6b0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	da09      	bge.n	800d6cc <VL53LX_f_020+0x92>
			i = lb + (int16_t)VL53LX_p_030;
 800d6b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d6bc:	b29a      	uxth	r2, r3
 800d6be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d6c2:	4413      	add	r3, r2
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800d6ca:	e00a      	b.n	800d6e2 <VL53LX_f_020+0xa8>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800d6cc:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	@ 0x6c
 800d6d0:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800d6d4:	fb91 f3f2 	sdiv	r3, r1, r2
 800d6d8:	fb02 f303 	mul.w	r3, r2, r3
 800d6dc:	1acb      	subs	r3, r1, r3
 800d6de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800d6e2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	db6b      	blt.n	800d7c2 <VL53LX_f_020+0x188>
 800d6ea:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800d6ee:	2b17      	cmp	r3, #23
 800d6f0:	dc67      	bgt.n	800d7c2 <VL53LX_f_020+0x188>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800d6f2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800d6f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d6fa:	3306      	adds	r3, #6
 800d6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d700:	17da      	asrs	r2, r3, #31
 800d702:	633b      	str	r3, [r7, #48]	@ 0x30
 800d704:	637a      	str	r2, [r7, #52]	@ 0x34
				(int64_t)pbins->VL53LX_p_028;
 800d706:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d70a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d70e:	17da      	asrs	r2, r3, #31
 800d710:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d712:	62fa      	str	r2, [r7, #44]	@ 0x2c
			VL53LX_p_018 =
 800d714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d716:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800d71a:	4602      	mov	r2, r0
 800d71c:	1a9b      	subs	r3, r3, r2
 800d71e:	623b      	str	r3, [r7, #32]
 800d720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d722:	460a      	mov	r2, r1
 800d724:	eb63 0302 	sbc.w	r3, r3, r2
 800d728:	627b      	str	r3, [r7, #36]	@ 0x24
 800d72a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d72e:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800d732:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800d736:	2b00      	cmp	r3, #0
 800d738:	d009      	beq.n	800d74e <VL53LX_f_020+0x114>
 800d73a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800d73e:	2b00      	cmp	r3, #0
 800d740:	da05      	bge.n	800d74e <VL53LX_f_020+0x114>
				VL53LX_p_018 = 0;
 800d742:	f04f 0200 	mov.w	r2, #0
 800d746:	f04f 0300 	mov.w	r3, #0
 800d74a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
			event_sum += VL53LX_p_018;
 800d74e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800d752:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800d756:	1884      	adds	r4, r0, r2
 800d758:	61bc      	str	r4, [r7, #24]
 800d75a:	eb41 0303 	adc.w	r3, r1, r3
 800d75e:	61fb      	str	r3, [r7, #28]
 800d760:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d764:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800d768:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800d76c:	17da      	asrs	r2, r3, #31
 800d76e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d770:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d772:	f04f 0200 	mov.w	r2, #0
 800d776:	f04f 0300 	mov.w	r3, #0
 800d77a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d77c:	02cb      	lsls	r3, r1, #11
 800d77e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d780:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d784:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d786:	02ca      	lsls	r2, r1, #11
 800d788:	f512 6580 	adds.w	r5, r2, #1024	@ 0x400
 800d78c:	f143 0600 	adc.w	r6, r3, #0
 800d790:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d792:	fb06 f203 	mul.w	r2, r6, r3
 800d796:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d798:	fb05 f303 	mul.w	r3, r5, r3
 800d79c:	441a      	add	r2, r3
 800d79e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d7a0:	fba3 ab05 	umull	sl, fp, r3, r5
 800d7a4:	eb02 030b 	add.w	r3, r2, fp
 800d7a8:	469b      	mov	fp, r3
			weighted_sum +=
 800d7aa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d7ae:	eb12 010a 	adds.w	r1, r2, sl
 800d7b2:	6139      	str	r1, [r7, #16]
 800d7b4:	eb43 030b 	adc.w	r3, r3, fp
 800d7b8:	617b      	str	r3, [r7, #20]
 800d7ba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d7be:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d7c2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d7d0:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	@ 0x6c
 800d7d4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	f77f af69 	ble.w	800d6b0 <VL53LX_f_020+0x76>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800d7de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d7e2:	2a01      	cmp	r2, #1
 800d7e4:	f173 0300 	sbcs.w	r3, r3, #0
 800d7e8:	db3b      	blt.n	800d862 <VL53LX_f_020+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 800d7ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d7ee:	0fd9      	lsrs	r1, r3, #31
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	60b9      	str	r1, [r7, #8]
 800d7f4:	60f8      	str	r0, [r7, #12]
 800d7f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d7fa:	4621      	mov	r1, r4
 800d7fc:	eb11 0802 	adds.w	r8, r1, r2
 800d800:	4629      	mov	r1, r5
 800d802:	eb41 0903 	adc.w	r9, r1, r3
 800d806:	f04f 0200 	mov.w	r2, #0
 800d80a:	f04f 0300 	mov.w	r3, #0
 800d80e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800d812:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 800d816:	ea4f 0369 	mov.w	r3, r9, asr #1
 800d81a:	4610      	mov	r0, r2
 800d81c:	4619      	mov	r1, r3
 800d81e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d822:	1814      	adds	r4, r2, r0
 800d824:	603c      	str	r4, [r7, #0]
 800d826:	414b      	adcs	r3, r1
 800d828:	607b      	str	r3, [r7, #4]
 800d82a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d82e:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800d832:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d836:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800d83a:	f7f2 fcf1 	bl	8000220 <__aeabi_ldivmod>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		if (weighted_sum < 0)
 800d846:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	da05      	bge.n	800d85a <VL53LX_f_020+0x220>
			weighted_sum = 0;
 800d84e:	f04f 0200 	mov.w	r2, #0
 800d852:	f04f 0300 	mov.w	r3, #0
 800d856:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		*pphase = (uint32_t)weighted_sum;
 800d85a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d85c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d860:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d862:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800d866:	4618      	mov	r0, r3
 800d868:	3774      	adds	r7, #116	@ 0x74
 800d86a:	46bd      	mov	sp, r7
 800d86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d870 <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b086      	sub	sp, #24
 800d874:	af00      	add	r7, sp, #0
 800d876:	60b9      	str	r1, [r7, #8]
 800d878:	607a      	str	r2, [r7, #4]
 800d87a:	603b      	str	r3, [r7, #0]
 800d87c:	4603      	mov	r3, r0
 800d87e:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d880:	2300      	movs	r3, #0
 800d882:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d884:	2300      	movs	r3, #0
 800d886:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d888:	2300      	movs	r3, #0
 800d88a:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d88c:	7bfa      	ldrb	r2, [r7, #15]
 800d88e:	4613      	mov	r3, r2
 800d890:	00db      	lsls	r3, r3, #3
 800d892:	4413      	add	r3, r2
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	4413      	add	r3, r2
 800d89e:	3304      	adds	r3, #4
 800d8a0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800d8a2:	22ac      	movs	r2, #172	@ 0xac
 800d8a4:	68b9      	ldr	r1, [r7, #8]
 800d8a6:	6a38      	ldr	r0, [r7, #32]
 800d8a8:	f00d f961 	bl	801ab6e <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800d8b2:	75fb      	strb	r3, [r7, #23]
 800d8b4:	e020      	b.n	800d8f8 <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	7dfa      	ldrb	r2, [r7, #23]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d304      	bcc.n	800d8ca <VL53LX_f_011+0x5a>
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	791b      	ldrb	r3, [r3, #4]
 800d8c4:	7dfa      	ldrb	r2, [r7, #23]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d913      	bls.n	800d8f2 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	78da      	ldrb	r2, [r3, #3]
 800d8ce:	7dfb      	ldrb	r3, [r7, #23]
 800d8d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8d4:	fb01 f202 	mul.w	r2, r1, r2
 800d8d8:	1a9b      	subs	r3, r3, r2
 800d8da:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800d8dc:	6a3b      	ldr	r3, [r7, #32]
 800d8de:	7a9b      	ldrb	r3, [r3, #10]
 800d8e0:	7d7a      	ldrb	r2, [r7, #21]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d205      	bcs.n	800d8f2 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800d8e6:	7d7a      	ldrb	r2, [r7, #21]
 800d8e8:	6a3b      	ldr	r3, [r7, #32]
 800d8ea:	3206      	adds	r2, #6
 800d8ec:	6839      	ldr	r1, [r7, #0]
 800d8ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800d8f2:	7dfb      	ldrb	r3, [r7, #23]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800d8f8:	7dfa      	ldrb	r2, [r7, #23]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800d900:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800d906:	440b      	add	r3, r1
 800d908:	429a      	cmp	r2, r3
 800d90a:	dbd4      	blt.n	800d8b6 <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d90c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3718      	adds	r7, #24
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800d918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d91c:	b096      	sub	sp, #88	@ 0x58
 800d91e:	af08      	add	r7, sp, #32
 800d920:	4604      	mov	r4, r0
 800d922:	4608      	mov	r0, r1
 800d924:	4611      	mov	r1, r2
 800d926:	461a      	mov	r2, r3
 800d928:	4623      	mov	r3, r4
 800d92a:	73fb      	strb	r3, [r7, #15]
 800d92c:	4603      	mov	r3, r0
 800d92e:	73bb      	strb	r3, [r7, #14]
 800d930:	460b      	mov	r3, r1
 800d932:	737b      	strb	r3, [r7, #13]
 800d934:	4613      	mov	r3, r2
 800d936:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800d938:	2300      	movs	r3, #0
 800d93a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800d93e:	2300      	movs	r3, #0
 800d940:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	uint8_t  i    = 0;
 800d944:	2300      	movs	r3, #0
 800d946:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	int32_t  VL53LX_p_007    = 0;
 800d94a:	2300      	movs	r3, #0
 800d94c:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t  VL53LX_p_032    = 0;
 800d94e:	2300      	movs	r3, #0
 800d950:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t  VL53LX_p_001    = 0;
 800d952:	2300      	movs	r3, #0
 800d954:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t  a_zp = 0;
 800d956:	2300      	movs	r3, #0
 800d958:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  c_zp = 0;
 800d95a:	2300      	movs	r3, #0
 800d95c:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800d95e:	2300      	movs	r3, #0
 800d960:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800d962:	2300      	movs	r3, #0
 800d964:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800d966:	2300      	movs	r3, #0
 800d968:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800d96a:	7b7b      	ldrb	r3, [r7, #13]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d106      	bne.n	800d97e <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800d970:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d976:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800d978:	f06f 030e 	mvn.w	r3, #14
 800d97c:	e06f      	b.n	800da5e <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800d97e:	7bfb      	ldrb	r3, [r7, #15]
 800d980:	7b7a      	ldrb	r2, [r7, #13]
 800d982:	fbb3 f1f2 	udiv	r1, r3, r2
 800d986:	fb01 f202 	mul.w	r2, r1, r2
 800d98a:	1a9b      	subs	r3, r3, r2
 800d98c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35



	VL53LX_f_022(
 800d990:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d994:	7b39      	ldrb	r1, [r7, #12]
 800d996:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800d99a:	f107 0320 	add.w	r3, r7, #32
 800d99e:	9301      	str	r3, [sp, #4]
 800d9a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d9a4:	9300      	str	r3, [sp, #0]
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d9aa:	f000 fddb 	bl	800e564 <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800d9ae:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d9b2:	7b39      	ldrb	r1, [r7, #12]
 800d9b4:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800d9b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d9bc:	9301      	str	r3, [sp, #4]
 800d9be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d9c2:	9300      	str	r3, [sp, #0]
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d9c8:	f000 fdcc 	bl	800e564 <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800d9cc:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d00e      	beq.n	800d9f2 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800d9d4:	f107 021c 	add.w	r2, r7, #28
 800d9d8:	7b39      	ldrb	r1, [r7, #12]
 800d9da:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800d9de:	f107 0314 	add.w	r3, r7, #20
 800d9e2:	9301      	str	r3, [sp, #4]
 800d9e4:	f107 0318 	add.w	r3, r7, #24
 800d9e8:	9300      	str	r3, [sp, #0]
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d9ee:	f000 fdb9 	bl	800e564 <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800d9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f4:	469c      	mov	ip, r3
 800d9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f8:	469e      	mov	lr, r3
 800d9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9fc:	4698      	mov	r8, r3
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da00:	4619      	mov	r1, r3
 800da02:	6a3b      	ldr	r3, [r7, #32]
 800da04:	461c      	mov	r4, r3
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	461d      	mov	r5, r3
 800da0a:	69fb      	ldr	r3, [r7, #28]
 800da0c:	461e      	mov	r6, r3
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800da12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
		VL53LX_f_023(
 800da18:	607b      	str	r3, [r7, #4]
 800da1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da1c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800da20:	7bb8      	ldrb	r0, [r7, #14]
 800da22:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800da24:	9207      	str	r2, [sp, #28]
 800da26:	9306      	str	r3, [sp, #24]
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	9205      	str	r2, [sp, #20]
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	9304      	str	r3, [sp, #16]
 800da30:	9603      	str	r6, [sp, #12]
 800da32:	9502      	str	r5, [sp, #8]
 800da34:	9401      	str	r4, [sp, #4]
 800da36:	9100      	str	r1, [sp, #0]
 800da38:	4643      	mov	r3, r8
 800da3a:	4672      	mov	r2, lr
 800da3c:	4661      	mov	r1, ip
 800da3e:	f002 ff7a 	bl	8010936 <VL53LX_f_023>
 800da42:	4603      	mov	r3, r0
 800da44:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800da48:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 800da4c:	f113 0f0f 	cmn.w	r3, #15
 800da50:	d103      	bne.n	800da5a <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800da52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800da54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da58:	801a      	strh	r2, [r3, #0]


	return status;
 800da5a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3738      	adds	r7, #56	@ 0x38
 800da62:	46bd      	mov	sp, r7
 800da64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800da68 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800da68:	b490      	push	{r4, r7}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	4604      	mov	r4, r0
 800da70:	4608      	mov	r0, r1
 800da72:	4611      	mov	r1, r2
 800da74:	461a      	mov	r2, r3
 800da76:	4623      	mov	r3, r4
 800da78:	71fb      	strb	r3, [r7, #7]
 800da7a:	4603      	mov	r3, r0
 800da7c:	71bb      	strb	r3, [r7, #6]
 800da7e:	460b      	mov	r3, r1
 800da80:	717b      	strb	r3, [r7, #5]
 800da82:	4613      	mov	r3, r2
 800da84:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800da86:	2300      	movs	r3, #0
 800da88:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800da8a:	2300      	movs	r3, #0
 800da8c:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800da8e:	6a3b      	ldr	r3, [r7, #32]
 800da90:	79fa      	ldrb	r2, [r7, #7]
 800da92:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800da94:	6a3b      	ldr	r3, [r7, #32]
 800da96:	2200      	movs	r2, #0
 800da98:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800da9a:	69fb      	ldr	r3, [r7, #28]
 800da9c:	781a      	ldrb	r2, [r3, #0]
 800da9e:	6a3b      	ldr	r3, [r7, #32]
 800daa0:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	785a      	ldrb	r2, [r3, #1]
 800daa6:	6a3b      	ldr	r3, [r7, #32]
 800daa8:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800daaa:	69fb      	ldr	r3, [r7, #28]
 800daac:	789a      	ldrb	r2, [r3, #2]
 800daae:	6a3b      	ldr	r3, [r7, #32]
 800dab0:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800dab2:	69fb      	ldr	r3, [r7, #28]
 800dab4:	78da      	ldrb	r2, [r3, #3]
 800dab6:	6a3b      	ldr	r3, [r7, #32]
 800dab8:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	791a      	ldrb	r2, [r3, #4]
 800dabe:	6a3b      	ldr	r3, [r7, #32]
 800dac0:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800dac2:	69fb      	ldr	r3, [r7, #28]
 800dac4:	795a      	ldrb	r2, [r3, #5]
 800dac6:	6a3b      	ldr	r3, [r7, #32]
 800dac8:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	791a      	ldrb	r2, [r3, #4]
 800dace:	69fb      	ldr	r3, [r7, #28]
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	1ad3      	subs	r3, r2, r3
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	3301      	adds	r3, #1
 800dad8:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800dada:	6a3b      	ldr	r3, [r7, #32]
 800dadc:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800dade:	69bb      	ldr	r3, [r7, #24]
 800dae0:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800dae4:	6a3b      	ldr	r3, [r7, #32]
 800dae6:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800dae8:	69fb      	ldr	r3, [r7, #28]
 800daea:	8c1a      	ldrh	r2, [r3, #32]
 800daec:	6a3b      	ldr	r3, [r7, #32]
 800daee:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	695b      	ldr	r3, [r3, #20]
 800daf4:	b29a      	uxth	r2, r3
 800daf6:	6a3b      	ldr	r3, [r7, #32]
 800daf8:	87da      	strh	r2, [r3, #62]	@ 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800dafa:	69fb      	ldr	r3, [r7, #28]
 800dafc:	699b      	ldr	r3, [r3, #24]
 800dafe:	b29a      	uxth	r2, r3
 800db00:	6a3b      	ldr	r3, [r7, #32]
 800db02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	69db      	ldr	r3, [r3, #28]
 800db0a:	b29a      	uxth	r2, r3
 800db0c:	6a3b      	ldr	r3, [r7, #32]
 800db0e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	461a      	mov	r2, r3
 800db18:	6a3b      	ldr	r3, [r7, #32]
 800db1a:	629a      	str	r2, [r3, #40]	@ 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	691a      	ldr	r2, [r3, #16]
 800db20:	6a3b      	ldr	r3, [r7, #32]
 800db22:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	689b      	ldr	r3, [r3, #8]
 800db28:	461a      	mov	r2, r3
 800db2a:	6a3b      	ldr	r3, [r7, #32]
 800db2c:	625a      	str	r2, [r3, #36]	@ 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800db34:	6a3b      	ldr	r3, [r7, #32]
 800db36:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800db38:	6a3b      	ldr	r3, [r7, #32]
 800db3a:	2213      	movs	r2, #19
 800db3c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a


	if (sigma_thres > 0 &&
 800db40:	887b      	ldrh	r3, [r7, #2]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d00a      	beq.n	800db5c <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	8c1b      	ldrh	r3, [r3, #32]
 800db4a:	461a      	mov	r2, r3
 800db4c:	887b      	ldrh	r3, [r7, #2]
 800db4e:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800db50:	429a      	cmp	r2, r3
 800db52:	d903      	bls.n	800db5c <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800db54:	6a3b      	ldr	r3, [r7, #32]
 800db56:	2206      	movs	r2, #6
 800db58:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800db5c:	79bb      	ldrb	r3, [r7, #6]
 800db5e:	b29b      	uxth	r3, r3
 800db60:	021b      	lsls	r3, r3, #8
 800db62:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	8a9b      	ldrh	r3, [r3, #20]
 800db68:	89fa      	ldrh	r2, [r7, #14]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d205      	bcs.n	800db7a <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800db6e:	6a3b      	ldr	r3, [r7, #32]
 800db70:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800db72:	89fb      	ldrh	r3, [r7, #14]
 800db74:	1ad3      	subs	r3, r2, r3
 800db76:	81fb      	strh	r3, [r7, #14]
 800db78:	e001      	b.n	800db7e <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800db7a:	2300      	movs	r3, #0
 800db7c:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800db7e:	797b      	ldrb	r3, [r7, #5]
 800db80:	b29b      	uxth	r3, r3
 800db82:	021b      	lsls	r3, r3, #8
 800db84:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800db86:	69bb      	ldr	r3, [r7, #24]
 800db88:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800db8c:	89bb      	ldrh	r3, [r7, #12]
 800db8e:	4413      	add	r3, r2
 800db90:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800db92:	6a3b      	ldr	r3, [r7, #32]
 800db94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800db98:	89fa      	ldrh	r2, [r7, #14]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d805      	bhi.n	800dbaa <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800db9e:	6a3b      	ldr	r3, [r7, #32]
 800dba0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800dba4:	89ba      	ldrh	r2, [r7, #12]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d203      	bcs.n	800dbb2 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800dbaa:	6a3b      	ldr	r3, [r7, #32]
 800dbac:	2205      	movs	r2, #5
 800dbae:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

}
 800dbb2:	bf00      	nop
 800dbb4:	3710      	adds	r7, #16
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bc90      	pop	{r4, r7}
 800dbba:	4770      	bx	lr

0800dbbc <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800dbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbbe:	b08f      	sub	sp, #60	@ 0x3c
 800dbc0:	af06      	add	r7, sp, #24
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	607a      	str	r2, [r7, #4]
 800dbc8:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800dbd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbd4:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800dbd8:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800dbda:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800dbdc:	f7ff f858 	bl	800cc90 <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800dbe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbe2:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
	memcpy(
 800dbe6:	22ac      	movs	r2, #172	@ 0xac
 800dbe8:	6839      	ldr	r1, [r7, #0]
 800dbea:	4618      	mov	r0, r3
 800dbec:	f00c ffbf 	bl	801ab6e <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	781a      	ldrb	r2, [r3, #0]
 800dbf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbf6:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	785a      	ldrb	r2, [r3, #1]
 800dbfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbfe:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	789a      	ldrb	r2, [r3, #2]
 800dc04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc06:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 800dc0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc10:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800dc12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc14:	2200      	movs	r2, #0
 800dc16:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800dc18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc1a:	2204      	movs	r2, #4
 800dc1c:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800dc1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc20:	2200      	movs	r2, #0
 800dc22:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800dc24:	2300      	movs	r3, #0
 800dc26:	77bb      	strb	r3, [r7, #30]
 800dc28:	e008      	b.n	800dc3c <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800dc2a:	7fbb      	ldrb	r3, [r7, #30]
 800dc2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc2e:	005b      	lsls	r3, r3, #1
 800dc30:	4413      	add	r3, r2
 800dc32:	2200      	movs	r2, #0
 800dc34:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800dc36:	7fbb      	ldrb	r3, [r7, #30]
 800dc38:	3301      	adds	r3, #1
 800dc3a:	77bb      	strb	r3, [r7, #30]
 800dc3c:	7fbb      	ldrb	r3, [r7, #30]
 800dc3e:	2b04      	cmp	r3, #4
 800dc40:	d9f3      	bls.n	800dc2a <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800dc42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc44:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7fd ff59 	bl	800bb00 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800dc52:	461a      	mov	r2, r3
 800dc54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc56:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	4610      	mov	r0, r2
 800dc5e:	f7fd ff8f 	bl	800bb80 <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800dc62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc64:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fe fb68 	bl	800c33e <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800dc6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc70:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fd fffd 	bl	800bc74 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d009      	beq.n	800dc98 <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800dc84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc86:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800dc8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc8c:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800dc90:	461a      	mov	r2, r3
 800dc92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dc94:	f000 fdae 	bl	800e7f4 <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800dca0:	2300      	movs	r3, #0
 800dca2:	77bb      	strb	r3, [r7, #30]
 800dca4:	e01e      	b.n	800dce4 <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800dca6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d117      	bne.n	800dcde <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800dcae:	7fbb      	ldrb	r3, [r7, #30]
 800dcb0:	68ba      	ldr	r2, [r7, #8]
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	005b      	lsls	r3, r3, #1
 800dcb6:	4413      	add	r3, r2
 800dcb8:	8898      	ldrh	r0, [r3, #4]
 800dcba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcbc:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800dcc0:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800dcc2:	005b      	lsls	r3, r3, #1
 800dcc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dcc6:	4413      	add	r3, r2
 800dcc8:	3304      	adds	r3, #4
 800dcca:	9301      	str	r3, [sp, #4]
 800dccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcce:	9300      	str	r3, [sp, #0]
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	68ba      	ldr	r2, [r7, #8]
 800dcd4:	68f9      	ldr	r1, [r7, #12]
 800dcd6:	f7fe fb7d 	bl	800c3d4 <VL53LX_f_001>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800dcde:	7fbb      	ldrb	r3, [r7, #30]
 800dce0:	3301      	adds	r3, #1
 800dce2:	77bb      	strb	r3, [r7, #30]
 800dce4:	7fbb      	ldrb	r3, [r7, #30]
 800dce6:	2b04      	cmp	r3, #4
 800dce8:	d9dd      	bls.n	800dca6 <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800dcea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d11a      	bne.n	800dd28 <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800dcfa:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f893 5028 	ldrb.w	r5, [r3, #40]	@ 0x28
 800dd06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd08:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800dd0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dd0e:	f502 7252 	add.w	r2, r2, #840	@ 0x348
 800dd12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dd14:	9102      	str	r1, [sp, #8]
 800dd16:	9201      	str	r2, [sp, #4]
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	462b      	mov	r3, r5
 800dd1c:	4622      	mov	r2, r4
 800dd1e:	4631      	mov	r1, r6
 800dd20:	f7ff f82f 	bl	800cd82 <VL53LX_f_006>
 800dd24:	4603      	mov	r3, r0
 800dd26:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800dd28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d104      	bne.n	800dd3a <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800dd30:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800dd32:	f7ff f956 	bl	800cfe2 <VL53LX_f_007>
 800dd36:	4603      	mov	r3, r0
 800dd38:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800dd3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d104      	bne.n	800dd4c <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800dd42:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800dd44:	f7ff f99b 	bl	800d07e <VL53LX_f_008>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800dd4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d104      	bne.n	800dd5e <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800dd54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800dd56:	f7ff fa10 	bl	800d17a <VL53LX_f_009>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dd5e:	2300      	movs	r3, #0
 800dd60:	77bb      	strb	r3, [r7, #30]
 800dd62:	e0a6      	b.n	800deb2 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800dd64:	7fba      	ldrb	r2, [r7, #30]
 800dd66:	4613      	mov	r3, r2
 800dd68:	00db      	lsls	r3, r3, #3
 800dd6a:	4413      	add	r3, r2
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800dd72:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dd74:	4413      	add	r3, r2
 800dd76:	3304      	adds	r3, #4
 800dd78:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800dd7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d109      	bne.n	800dd96 <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800dd82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd84:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800dd88:	7fbb      	ldrb	r3, [r7, #30]
 800dd8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7ff fb4a 	bl	800d426 <VL53LX_f_010>
 800dd92:	4603      	mov	r3, r0
 800dd94:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800dd96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d110      	bne.n	800ddc0 <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800dd9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dda0:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800ddaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddac:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800ddb0:	7fb8      	ldrb	r0, [r7, #30]
 800ddb2:	9300      	str	r3, [sp, #0]
 800ddb4:	4613      	mov	r3, r2
 800ddb6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ddb8:	f7ff fd5a 	bl	800d870 <VL53LX_f_011>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800ddc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d10d      	bne.n	800dde4 <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800ddc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddca:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800ddce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddd0:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800ddd4:	7fb8      	ldrb	r0, [r7, #30]
 800ddd6:	9300      	str	r3, [sp, #0]
 800ddd8:	2300      	movs	r3, #0
 800ddda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dddc:	f7ff fd48 	bl	800d870 <VL53LX_f_011>
 800dde0:	4603      	mov	r3, r0
 800dde2:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800dde4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d10d      	bne.n	800de08 <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800ddec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddee:	f503 7152 	add.w	r1, r3, #840	@ 0x348
 800ddf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddf4:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800ddf8:	7fb8      	ldrb	r0, [r7, #30]
 800ddfa:	9300      	str	r3, [sp, #0]
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800de00:	f7ff fd36 	bl	800d870 <VL53LX_f_011>
 800de04:	4603      	mov	r3, r0
 800de06:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800de08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d109      	bne.n	800de24 <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800de10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de12:	f503 717d 	add.w	r1, r3, #1012	@ 0x3f4
 800de16:	7fb8      	ldrb	r0, [r7, #30]
 800de18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800de1c:	f000 f8dd 	bl	800dfda <VL53LX_f_026>
 800de20:	4603      	mov	r3, r0
 800de22:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800de24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d108      	bne.n	800de3e <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	8a19      	ldrh	r1, [r3, #16]
 800de30:	7fb8      	ldrb	r0, [r7, #30]
 800de32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800de36:	f000 f95c 	bl	800e0f2 <VL53LX_f_027>
 800de3a:	4603      	mov	r3, r0
 800de3c:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800de3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d124      	bne.n	800de90 <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	789d      	ldrb	r5, [r3, #2]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	7e1e      	ldrb	r6, [r3, #24]
 800de4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de50:	f893 c003 	ldrb.w	ip, [r3, #3]
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	f893 e006 	ldrb.w	lr, [r3, #6]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800de62:	f502 727d 	add.w	r2, r2, #1012	@ 0x3f4
 800de66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800de68:	f501 6194 	add.w	r1, r1, #1184	@ 0x4a0
 800de6c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800de6e:	f200 504c 	addw	r0, r0, #1356	@ 0x54c
 800de72:	697c      	ldr	r4, [r7, #20]
 800de74:	3420      	adds	r4, #32
 800de76:	9404      	str	r4, [sp, #16]
 800de78:	9003      	str	r0, [sp, #12]
 800de7a:	9102      	str	r1, [sp, #8]
 800de7c:	9201      	str	r2, [sp, #4]
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	4673      	mov	r3, lr
 800de82:	4662      	mov	r2, ip
 800de84:	4631      	mov	r1, r6
 800de86:	4628      	mov	r0, r5
 800de88:	f7ff fd46 	bl	800d918 <VL53LX_f_014>
 800de8c:	4603      	mov	r3, r0
 800de8e:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800de90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d109      	bne.n	800deac <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800de98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de9a:	f503 7227 	add.w	r2, r3, #668	@ 0x29c
 800de9e:	7fb8      	ldrb	r0, [r7, #30]
 800dea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dea2:	2101      	movs	r1, #1
 800dea4:	f7ff fb12 	bl	800d4cc <VL53LX_f_015>
 800dea8:	4603      	mov	r3, r0
 800deaa:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800deac:	7fbb      	ldrb	r3, [r7, #30]
 800deae:	3301      	adds	r3, #1
 800deb0:	77bb      	strb	r3, [r7, #30]
 800deb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deb4:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800deb8:	7fba      	ldrb	r2, [r7, #30]
 800deba:	429a      	cmp	r2, r3
 800debc:	f4ff af52 	bcc.w	800dd64 <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800dec0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d107      	bne.n	800ded8 <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	785b      	ldrb	r3, [r3, #1]
 800decc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dece:	4618      	mov	r0, r3
 800ded0:	f7ff fa25 	bl	800d31e <VL53LX_f_016>
 800ded4:	4603      	mov	r3, r0
 800ded6:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800ded8:	2300      	movs	r3, #0
 800deda:	77bb      	strb	r3, [r7, #30]
 800dedc:	e071      	b.n	800dfc2 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800dede:	7fba      	ldrb	r2, [r7, #30]
 800dee0:	4613      	mov	r3, r2
 800dee2:	00db      	lsls	r3, r3, #3
 800dee4:	4413      	add	r3, r2
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800deec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800deee:	4413      	add	r3, r2
 800def0:	3304      	adds	r3, #4
 800def2:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800def4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800def6:	7c9a      	ldrb	r2, [r3, #18]
 800def8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800defa:	7c5b      	ldrb	r3, [r3, #17]
 800defc:	429a      	cmp	r2, r3
 800defe:	d25c      	bcs.n	800dfba <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800df08:	429a      	cmp	r2, r3
 800df0a:	dd57      	ble.n	800dfbc <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800df10:	2bff      	cmp	r3, #255	@ 0xff
 800df12:	d053      	beq.n	800dfbc <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800df14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df16:	7c9b      	ldrb	r3, [r3, #18]
 800df18:	461a      	mov	r2, r3
			prange_data =
 800df1a:	234c      	movs	r3, #76	@ 0x4c
 800df1c:	fb02 f303 	mul.w	r3, r2, r3
 800df20:	3310      	adds	r3, #16
 800df22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df24:	4413      	add	r3, r2
 800df26:	3304      	adds	r3, #4
 800df28:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800df2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d115      	bne.n	800df5e <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800df32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df34:	7c98      	ldrb	r0, [r3, #18]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f893 1020 	ldrb.w	r1, [r3, #32]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f893 4021 	ldrb.w	r4, [r3, #33]	@ 0x21
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	8b5d      	ldrh	r5, [r3, #26]
 800df46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df48:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800df4c:	693a      	ldr	r2, [r7, #16]
 800df4e:	9202      	str	r2, [sp, #8]
 800df50:	697a      	ldr	r2, [r7, #20]
 800df52:	9201      	str	r2, [sp, #4]
 800df54:	9300      	str	r3, [sp, #0]
 800df56:	462b      	mov	r3, r5
 800df58:	4622      	mov	r2, r4
 800df5a:	f7ff fd85 	bl	800da68 <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800df5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d115      	bne.n	800df92 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800df66:	69bb      	ldr	r3, [r7, #24]
 800df68:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800df6c:	69bb      	ldr	r3, [r7, #24]
 800df6e:	f8b3 1086 	ldrh.w	r1, [r3, #134]	@ 0x86
 800df72:	69bb      	ldr	r3, [r7, #24]
 800df74:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800df78:	69bb      	ldr	r3, [r7, #24]
 800df7a:	f8b3 407c 	ldrh.w	r4, [r3, #124]	@ 0x7c
 800df7e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800df82:	9301      	str	r3, [sp, #4]
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	9300      	str	r3, [sp, #0]
 800df88:	4623      	mov	r3, r4
 800df8a:	f000 fb44 	bl	800e616 <VL53LX_f_018>
 800df8e:	4603      	mov	r3, r0
 800df90:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800df92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d108      	bne.n	800dfac <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	8bd8      	ldrh	r0, [r3, #30]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800dfa4:	693a      	ldr	r2, [r7, #16]
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	f000 fbda 	bl	800e760 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800dfac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfae:	7c9b      	ldrb	r3, [r3, #18]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfb6:	749a      	strb	r2, [r3, #18]
 800dfb8:	e000      	b.n	800dfbc <VL53LX_f_025+0x400>
			continue;
 800dfba:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dfbc:	7fbb      	ldrb	r3, [r7, #30]
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	77bb      	strb	r3, [r7, #30]
 800dfc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfc4:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800dfc8:	7fba      	ldrb	r2, [r7, #30]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d387      	bcc.n	800dede <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800dfce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3724      	adds	r7, #36	@ 0x24
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dfda <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800dfda:	b580      	push	{r7, lr}
 800dfdc:	b08c      	sub	sp, #48	@ 0x30
 800dfde:	af02      	add	r7, sp, #8
 800dfe0:	60b9      	str	r1, [r7, #8]
 800dfe2:	607a      	str	r2, [r7, #4]
 800dfe4:	603b      	str	r3, [r7, #0]
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800dfea:	2300      	movs	r3, #0
 800dfec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800dff0:	7bfa      	ldrb	r2, [r7, #15]
 800dff2:	4613      	mov	r3, r2
 800dff4:	00db      	lsls	r3, r3, #3
 800dff6:	4413      	add	r3, r2
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	4413      	add	r3, r2
 800e002:	3304      	adds	r3, #4
 800e004:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800e006:	2300      	movs	r3, #0
 800e008:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t  i     = 0;
 800e00c:	2300      	movs	r3, #0
 800e00e:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800e010:	2300      	movs	r3, #0
 800e012:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800e014:	2300      	movs	r3, #0
 800e016:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800e018:	2300      	movs	r3, #0
 800e01a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	785a      	ldrb	r2, [r3, #1]
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	781a      	ldrb	r2, [r3, #0]
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	789a      	ldrb	r2, [r3, #2]
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800e034:	6a3b      	ldr	r3, [r7, #32]
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e03c:	e04d      	b.n	800e0da <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	78da      	ldrb	r2, [r3, #3]
 800e042:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e046:	fbb3 f1f2 	udiv	r1, r3, r2
 800e04a:	fb01 f202 	mul.w	r2, r1, r2
 800e04e:	1a9b      	subs	r3, r3, r2
 800e050:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800e052:	6a3b      	ldr	r3, [r7, #32]
 800e054:	7999      	ldrb	r1, [r3, #6]
 800e056:	f107 0218 	add.w	r2, r7, #24
 800e05a:	7ff8      	ldrb	r0, [r7, #31]
 800e05c:	f107 0310 	add.w	r3, r7, #16
 800e060:	9301      	str	r3, [sp, #4]
 800e062:	f107 0314 	add.w	r3, r7, #20
 800e066:	9300      	str	r3, [sp, #0]
 800e068:	4613      	mov	r3, r2
 800e06a:	68ba      	ldr	r2, [r7, #8]
 800e06c:	f000 fa7a 	bl	800e564 <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800e070:	7ffb      	ldrb	r3, [r7, #31]
 800e072:	69ba      	ldr	r2, [r7, #24]
 800e074:	6839      	ldr	r1, [r7, #0]
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	440b      	add	r3, r1
 800e07a:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800e07c:	7ffb      	ldrb	r3, [r7, #31]
 800e07e:	697a      	ldr	r2, [r7, #20]
 800e080:	6839      	ldr	r1, [r7, #0]
 800e082:	3318      	adds	r3, #24
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	440b      	add	r3, r1
 800e088:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800e08a:	7ffb      	ldrb	r3, [r7, #31]
 800e08c:	693a      	ldr	r2, [r7, #16]
 800e08e:	6839      	ldr	r1, [r7, #0]
 800e090:	3330      	adds	r3, #48	@ 0x30
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	440b      	add	r3, r1
 800e096:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800e098:	69ba      	ldr	r2, [r7, #24]
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	689a      	ldr	r2, [r3, #8]
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800e0a6:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800e0a8:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800e0aa:	6839      	ldr	r1, [r7, #0]
 800e0ac:	3348      	adds	r3, #72	@ 0x48
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	440b      	add	r3, r1
 800e0b2:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800e0b4:	697a      	ldr	r2, [r7, #20]
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	689a      	ldr	r2, [r3, #8]
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800e0c2:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800e0c4:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800e0c6:	6839      	ldr	r1, [r7, #0]
 800e0c8:	3360      	adds	r3, #96	@ 0x60
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	440b      	add	r3, r1
 800e0ce:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800e0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e0da:	6a3b      	ldr	r3, [r7, #32]
 800e0dc:	791b      	ldrb	r3, [r3, #4]
 800e0de:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d9ab      	bls.n	800e03e <VL53LX_f_026+0x64>
	}

	return status;
 800e0e6:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3728      	adds	r7, #40	@ 0x28
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800e0f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0f4:	b08f      	sub	sp, #60	@ 0x3c
 800e0f6:	af06      	add	r7, sp, #24
 800e0f8:	60ba      	str	r2, [r7, #8]
 800e0fa:	607b      	str	r3, [r7, #4]
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	73fb      	strb	r3, [r7, #15]
 800e100:	460b      	mov	r3, r1
 800e102:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800e104:	2300      	movs	r3, #0
 800e106:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800e108:	2300      	movs	r3, #0
 800e10a:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800e10c:	7bfa      	ldrb	r2, [r7, #15]
 800e10e:	4613      	mov	r3, r2
 800e110:	00db      	lsls	r3, r3, #3
 800e112:	4413      	add	r3, r2
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	4413      	add	r3, r2
 800e11e:	3304      	adds	r3, #4
 800e120:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800e122:	2300      	movs	r3, #0
 800e124:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800e126:	2300      	movs	r3, #0
 800e128:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800e12a:	2300      	movs	r3, #0
 800e12c:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	77fb      	strb	r3, [r7, #31]
 800e134:	e0b9      	b.n	800e2aa <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	78da      	ldrb	r2, [r3, #3]
 800e13a:	7ffb      	ldrb	r3, [r7, #31]
 800e13c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e140:	fb01 f202 	mul.w	r2, r1, r2
 800e144:	1a9b      	subs	r3, r3, r2
 800e146:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800e148:	7ffb      	ldrb	r3, [r7, #31]
 800e14a:	3301      	adds	r3, #1
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	78d2      	ldrb	r2, [r2, #3]
 800e150:	fb93 f1f2 	sdiv	r1, r3, r2
 800e154:	fb01 f202 	mul.w	r2, r1, r2
 800e158:	1a9b      	subs	r3, r3, r2
 800e15a:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	789b      	ldrb	r3, [r3, #2]
 800e160:	7dfa      	ldrb	r2, [r7, #23]
 800e162:	429a      	cmp	r2, r3
 800e164:	f080 809e 	bcs.w	800e2a4 <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800e16c:	7dba      	ldrb	r2, [r7, #22]
 800e16e:	429a      	cmp	r2, r3
 800e170:	f080 8098 	bcs.w	800e2a4 <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800e174:	7dfb      	ldrb	r3, [r7, #23]
 800e176:	68ba      	ldr	r2, [r7, #8]
 800e178:	3348      	adds	r3, #72	@ 0x48
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	4413      	add	r3, r2
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d10e      	bne.n	800e1a2 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800e184:	7dfb      	ldrb	r3, [r7, #23]
 800e186:	68ba      	ldr	r2, [r7, #8]
 800e188:	3360      	adds	r3, #96	@ 0x60
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	4413      	add	r3, r2
 800e18e:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800e190:	2b00      	cmp	r3, #0
 800e192:	d106      	bne.n	800e1a2 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800e194:	7dfb      	ldrb	r3, [r7, #23]
 800e196:	68ba      	ldr	r2, [r7, #8]
 800e198:	4413      	add	r3, r2
 800e19a:	2200      	movs	r2, #0
 800e19c:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800e1a0:	e043      	b.n	800e22a <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800e1a2:	7dfb      	ldrb	r3, [r7, #23]
 800e1a4:	68ba      	ldr	r2, [r7, #8]
 800e1a6:	3348      	adds	r3, #72	@ 0x48
 800e1a8:	009b      	lsls	r3, r3, #2
 800e1aa:	4413      	add	r3, r2
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	db0e      	blt.n	800e1d0 <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800e1b2:	7dfb      	ldrb	r3, [r7, #23]
 800e1b4:	68ba      	ldr	r2, [r7, #8]
 800e1b6:	3360      	adds	r3, #96	@ 0x60
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	4413      	add	r3, r2
 800e1bc:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	db06      	blt.n	800e1d0 <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800e1c2:	7dfb      	ldrb	r3, [r7, #23]
 800e1c4:	68ba      	ldr	r2, [r7, #8]
 800e1c6:	4413      	add	r3, r2
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800e1ce:	e02c      	b.n	800e22a <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800e1d0:	7dfb      	ldrb	r3, [r7, #23]
 800e1d2:	68ba      	ldr	r2, [r7, #8]
 800e1d4:	3348      	adds	r3, #72	@ 0x48
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	4413      	add	r3, r2
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	da1e      	bge.n	800e21e <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800e1e0:	7dfb      	ldrb	r3, [r7, #23]
 800e1e2:	68ba      	ldr	r2, [r7, #8]
 800e1e4:	3360      	adds	r3, #96	@ 0x60
 800e1e6:	009b      	lsls	r3, r3, #2
 800e1e8:	4413      	add	r3, r2
 800e1ea:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	db16      	blt.n	800e21e <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800e1f0:	7dbb      	ldrb	r3, [r7, #22]
 800e1f2:	68ba      	ldr	r2, [r7, #8]
 800e1f4:	3348      	adds	r3, #72	@ 0x48
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	4413      	add	r3, r2
 800e1fa:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	db0e      	blt.n	800e21e <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800e200:	7dbb      	ldrb	r3, [r7, #22]
 800e202:	68ba      	ldr	r2, [r7, #8]
 800e204:	3360      	adds	r3, #96	@ 0x60
 800e206:	009b      	lsls	r3, r3, #2
 800e208:	4413      	add	r3, r2
 800e20a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	da06      	bge.n	800e21e <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800e210:	7dfb      	ldrb	r3, [r7, #23]
 800e212:	68ba      	ldr	r2, [r7, #8]
 800e214:	4413      	add	r3, r2
 800e216:	2201      	movs	r2, #1
 800e218:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800e21c:	e005      	b.n	800e22a <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800e21e:	7dfb      	ldrb	r3, [r7, #23]
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	4413      	add	r3, r2
 800e224:	2200      	movs	r2, #0
 800e226:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800e22a:	7dfb      	ldrb	r3, [r7, #23]
 800e22c:	68ba      	ldr	r2, [r7, #8]
 800e22e:	4413      	add	r3, r2
 800e230:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800e234:	2b00      	cmp	r3, #0
 800e236:	d035      	beq.n	800e2a4 <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	7ffa      	ldrb	r2, [r7, #31]
 800e23c:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800e23e:	7dfb      	ldrb	r3, [r7, #23]
 800e240:	68ba      	ldr	r2, [r7, #8]
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	4413      	add	r3, r2
 800e246:	685c      	ldr	r4, [r3, #4]
 800e248:	7dfb      	ldrb	r3, [r7, #23]
 800e24a:	68ba      	ldr	r2, [r7, #8]
 800e24c:	3318      	adds	r3, #24
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	4413      	add	r3, r2
 800e252:	685d      	ldr	r5, [r3, #4]
 800e254:	7dfb      	ldrb	r3, [r7, #23]
 800e256:	68ba      	ldr	r2, [r7, #8]
 800e258:	3330      	adds	r3, #48	@ 0x30
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	4413      	add	r3, r2
 800e25e:	685e      	ldr	r6, [r3, #4]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	78d2      	ldrb	r2, [r2, #3]
 800e268:	69b9      	ldr	r1, [r7, #24]
 800e26a:	3118      	adds	r1, #24
 800e26c:	7ff8      	ldrb	r0, [r7, #31]
 800e26e:	9105      	str	r1, [sp, #20]
 800e270:	9204      	str	r2, [sp, #16]
 800e272:	9303      	str	r3, [sp, #12]
 800e274:	2300      	movs	r3, #0
 800e276:	9302      	str	r3, [sp, #8]
 800e278:	2300      	movs	r3, #0
 800e27a:	9301      	str	r3, [sp, #4]
 800e27c:	2300      	movs	r3, #0
 800e27e:	9300      	str	r3, [sp, #0]
 800e280:	4633      	mov	r3, r6
 800e282:	462a      	mov	r2, r5
 800e284:	4621      	mov	r1, r4
 800e286:	f000 f81c 	bl	800e2c2 <VL53LX_f_028>
 800e28a:	4603      	mov	r3, r0
 800e28c:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800e28e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e292:	f113 0f0f 	cmn.w	r3, #15
 800e296:	d105      	bne.n	800e2a4 <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800e298:	7dfb      	ldrb	r3, [r7, #23]
 800e29a:	68ba      	ldr	r2, [r7, #8]
 800e29c:	4413      	add	r3, r2
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800e2a4:	7ffb      	ldrb	r3, [r7, #31]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	77fb      	strb	r3, [r7, #31]
 800e2aa:	69bb      	ldr	r3, [r7, #24]
 800e2ac:	791b      	ldrb	r3, [r3, #4]
 800e2ae:	7ffa      	ldrb	r2, [r7, #31]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	f4ff af40 	bcc.w	800e136 <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800e2b6:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3724      	adds	r7, #36	@ 0x24
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e2c2 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800e2c2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e2c6:	b0b2      	sub	sp, #200	@ 0xc8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800e2ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e2d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e2dc:	23f1      	movs	r3, #241	@ 0xf1
 800e2de:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800e2e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e2e6:	f04f 0300 	mov.w	r3, #0
 800e2ea:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800e2ee:	f04f 0200 	mov.w	r2, #0
 800e2f2:	f04f 0300 	mov.w	r3, #0
 800e2f6:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	int64_t  half_b_minus_amb = 0;
 800e2fa:	f04f 0200 	mov.w	r2, #0
 800e2fe:	f04f 0300 	mov.w	r3, #0
 800e302:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e306:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e30a:	17da      	asrs	r2, r3, #31
 800e30c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e310:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800e314:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e318:	17da      	asrs	r2, r3, #31
 800e31a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e31e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e322:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e326:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e32a:	4602      	mov	r2, r0
 800e32c:	ebb3 0802 	subs.w	r8, r3, r2
 800e330:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e334:	460a      	mov	r2, r1
 800e336:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800e33a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e33e:	17da      	asrs	r2, r3, #31
 800e340:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e342:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e344:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e348:	460b      	mov	r3, r1
 800e34a:	ebb8 0a03 	subs.w	sl, r8, r3
 800e34e:	4613      	mov	r3, r2
 800e350:	eb69 0b03 	sbc.w	fp, r9, r3
 800e354:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e358:	17da      	asrs	r2, r3, #31
 800e35a:	673b      	str	r3, [r7, #112]	@ 0x70
 800e35c:	677a      	str	r2, [r7, #116]	@ 0x74
 800e35e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e362:	460b      	mov	r3, r1
 800e364:	ebba 0403 	subs.w	r4, sl, r3
 800e368:	4613      	mov	r3, r2
 800e36a:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e36e:	f04f 0200 	mov.w	r2, #0
 800e372:	f04f 0300 	mov.w	r3, #0
 800e376:	032b      	lsls	r3, r5, #12
 800e378:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800e37c:	0322      	lsls	r2, r4, #12
 800e37e:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e382:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e386:	17da      	asrs	r2, r3, #31
 800e388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e38a:	66fa      	str	r2, [r7, #108]	@ 0x6c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800e38c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e390:	17da      	asrs	r2, r3, #31
 800e392:	663b      	str	r3, [r7, #96]	@ 0x60
 800e394:	667a      	str	r2, [r7, #100]	@ 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e396:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800e39a:	4623      	mov	r3, r4
 800e39c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	1a9b      	subs	r3, r3, r2
 800e3a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e3a6:	462b      	mov	r3, r5
 800e3a8:	460a      	mov	r2, r1
 800e3aa:	eb63 0302 	sbc.w	r3, r3, r2
 800e3ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800e3b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e3b4:	17da      	asrs	r2, r3, #31
 800e3b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800e3b8:	657a      	str	r2, [r7, #84]	@ 0x54
 800e3ba:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800e3be:	4623      	mov	r3, r4
 800e3c0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	1a9b      	subs	r3, r3, r2
 800e3c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3ca:	462b      	mov	r3, r5
 800e3cc:	460a      	mov	r2, r1
 800e3ce:	eb63 0302 	sbc.w	r3, r3, r2
 800e3d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e3d4:	f04f 0200 	mov.w	r2, #0
 800e3d8:	f04f 0300 	mov.w	r3, #0
 800e3dc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800e3e0:	4629      	mov	r1, r5
 800e3e2:	030b      	lsls	r3, r1, #12
 800e3e4:	4621      	mov	r1, r4
 800e3e6:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800e3ea:	4621      	mov	r1, r4
 800e3ec:	030a      	lsls	r2, r1, #12
 800e3ee:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

	if (half_b_minus_amb != 0) {
 800e3f2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	f000 80a8 	beq.w	800e54c <VL53LX_f_028+0x28a>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800e3fc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800e400:	f04f 0000 	mov.w	r0, #0
 800e404:	f04f 0100 	mov.w	r1, #0
 800e408:	0319      	lsls	r1, r3, #12
 800e40a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800e40e:	0310      	lsls	r0, r2, #12
 800e410:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e414:	1814      	adds	r4, r2, r0
 800e416:	633c      	str	r4, [r7, #48]	@ 0x30
 800e418:	414b      	adcs	r3, r1
 800e41a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e41c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800e420:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800e424:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e428:	1891      	adds	r1, r2, r2
 800e42a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e42c:	415b      	adcs	r3, r3
 800e42e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e430:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e434:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800e438:	f7f1 fef2 	bl	8000220 <__aeabi_ldivmod>
 800e43c:	4602      	mov	r2, r0
 800e43e:	460b      	mov	r3, r1
 800e440:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

		mean_phase  +=  2048;
 800e444:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e448:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800e44c:	6239      	str	r1, [r7, #32]
 800e44e:	f143 0300 	adc.w	r3, r3, #0
 800e452:	627b      	str	r3, [r7, #36]	@ 0x24
 800e454:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e458:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
		mean_phase  += (4096 * (int64_t)bin);
 800e45c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e460:	2200      	movs	r2, #0
 800e462:	643b      	str	r3, [r7, #64]	@ 0x40
 800e464:	647a      	str	r2, [r7, #68]	@ 0x44
 800e466:	f04f 0200 	mov.w	r2, #0
 800e46a:	f04f 0300 	mov.w	r3, #0
 800e46e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800e472:	4629      	mov	r1, r5
 800e474:	030b      	lsls	r3, r1, #12
 800e476:	4621      	mov	r1, r4
 800e478:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800e47c:	4621      	mov	r1, r4
 800e47e:	030a      	lsls	r2, r1, #12
 800e480:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800e484:	1884      	adds	r4, r0, r2
 800e486:	61bc      	str	r4, [r7, #24]
 800e488:	eb41 0303 	adc.w	r3, r1, r3
 800e48c:	61fb      	str	r3, [r7, #28]
 800e48e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e492:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800e496:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e49a:	1c51      	adds	r1, r2, #1
 800e49c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e49e:	f143 0300 	adc.w	r3, r3, #0
 800e4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e4a4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	0fdb      	lsrs	r3, r3, #31
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	613b      	str	r3, [r7, #16]
 800e4b0:	617a      	str	r2, [r7, #20]
 800e4b2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e4b6:	4623      	mov	r3, r4
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	189b      	adds	r3, r3, r2
 800e4bc:	60bb      	str	r3, [r7, #8]
 800e4be:	460b      	mov	r3, r1
 800e4c0:	462a      	mov	r2, r5
 800e4c2:	eb42 0303 	adc.w	r3, r2, r3
 800e4c6:	60fb      	str	r3, [r7, #12]
 800e4c8:	f04f 0200 	mov.w	r2, #0
 800e4cc:	f04f 0300 	mov.w	r3, #0
 800e4d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e4d4:	4621      	mov	r1, r4
 800e4d6:	084a      	lsrs	r2, r1, #1
 800e4d8:	4629      	mov	r1, r5
 800e4da:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e4de:	4629      	mov	r1, r5
 800e4e0:	104b      	asrs	r3, r1, #1
 800e4e2:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8


		if (mean_phase  < 0)
 800e4e6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	da05      	bge.n	800e4fa <VL53LX_f_028+0x238>
			mean_phase = 0;
 800e4ee:	f04f 0200 	mov.w	r2, #0
 800e4f2:	f04f 0300 	mov.w	r3, #0
 800e4f6:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800e4fa:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800e4fe:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e502:	f173 0300 	sbcs.w	r3, r3, #0
 800e506:	db05      	blt.n	800e514 <VL53LX_f_028+0x252>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800e508:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e50c:	f04f 0300 	mov.w	r3, #0
 800e510:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8


		mean_phase32 = (int32_t)mean_phase;
 800e514:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e518:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800e51c:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 800e520:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800e522:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e526:	fb93 f1f2 	sdiv	r1, r3, r2
 800e52a:	fb01 f202 	mul.w	r2, r1, r2
 800e52e:	1a9b      	subs	r3, r3, r2
 800e530:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		mean_phase = mean_phase32;
 800e534:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e538:	17da      	asrs	r2, r3, #31
 800e53a:	603b      	str	r3, [r7, #0]
 800e53c:	607a      	str	r2, [r7, #4]
 800e53e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e542:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8

		status = VL53LX_ERROR_NONE;
 800e546:	2300      	movs	r3, #0
 800e548:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	}

	*pmean_phase = (uint32_t)mean_phase;
 800e54c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e554:	601a      	str	r2, [r3, #0]

	return status;
 800e556:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	37c8      	adds	r7, #200	@ 0xc8
 800e55e:	46bd      	mov	sp, r7
 800e560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e564 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800e564:	b480      	push	{r7}
 800e566:	b087      	sub	sp, #28
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60ba      	str	r2, [r7, #8]
 800e56c:	607b      	str	r3, [r7, #4]
 800e56e:	4603      	mov	r3, r0
 800e570:	73fb      	strb	r3, [r7, #15]
 800e572:	460b      	mov	r3, r1
 800e574:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800e576:	2300      	movs	r3, #0
 800e578:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800e57a:	2300      	movs	r3, #0
 800e57c:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2200      	movs	r2, #0
 800e582:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800e584:	7bfa      	ldrb	r2, [r7, #15]
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	3206      	adds	r2, #6
 800e58a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e58e:	6a3b      	ldr	r3, [r7, #32]
 800e590:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800e592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e594:	2200      	movs	r2, #0
 800e596:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e598:	2300      	movs	r3, #0
 800e59a:	75fb      	strb	r3, [r7, #23]
 800e59c:	e02f      	b.n	800e5fe <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e59e:	7bfa      	ldrb	r2, [r7, #15]
 800e5a0:	7dfb      	ldrb	r3, [r7, #23]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	68ba      	ldr	r2, [r7, #8]
 800e5a6:	7a92      	ldrb	r2, [r2, #10]
 800e5a8:	441a      	add	r2, r3
 800e5aa:	7bbb      	ldrb	r3, [r7, #14]
 800e5ac:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800e5ae:	68ba      	ldr	r2, [r7, #8]
 800e5b0:	7a92      	ldrb	r2, [r2, #10]
 800e5b2:	fb93 f1f2 	sdiv	r1, r3, r2
 800e5b6:	fb01 f202 	mul.w	r2, r1, r2
 800e5ba:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e5bc:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800e5be:	7dfa      	ldrb	r2, [r7, #23]
 800e5c0:	7bbb      	ldrb	r3, [r7, #14]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d20a      	bcs.n	800e5dc <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	7db9      	ldrb	r1, [r7, #22]
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	3106      	adds	r1, #6
 800e5d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5d4:	441a      	add	r2, r3
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	601a      	str	r2, [r3, #0]
 800e5da:	e00d      	b.n	800e5f8 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800e5dc:	7dfa      	ldrb	r2, [r7, #23]
 800e5de:	7bbb      	ldrb	r3, [r7, #14]
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d909      	bls.n	800e5f8 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5e6:	681a      	ldr	r2, [r3, #0]
 800e5e8:	7db9      	ldrb	r1, [r7, #22]
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	3106      	adds	r1, #6
 800e5ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5f2:	441a      	add	r2, r3
 800e5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5f6:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e5f8:	7dfb      	ldrb	r3, [r7, #23]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	75fb      	strb	r3, [r7, #23]
 800e5fe:	7bbb      	ldrb	r3, [r7, #14]
 800e600:	005a      	lsls	r2, r3, #1
 800e602:	7dfb      	ldrb	r3, [r7, #23]
 800e604:	429a      	cmp	r2, r3
 800e606:	daca      	bge.n	800e59e <VL53LX_f_022+0x3a>
	}
}
 800e608:	bf00      	nop
 800e60a:	bf00      	nop
 800e60c:	371c      	adds	r7, #28
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr

0800e616 <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800e616:	b580      	push	{r7, lr}
 800e618:	b088      	sub	sp, #32
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	60ba      	str	r2, [r7, #8]
 800e61e:	461a      	mov	r2, r3
 800e620:	4603      	mov	r3, r0
 800e622:	81fb      	strh	r3, [r7, #14]
 800e624:	460b      	mov	r3, r1
 800e626:	81bb      	strh	r3, [r7, #12]
 800e628:	4613      	mov	r3, r2
 800e62a:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800e62c:	2300      	movs	r3, #0
 800e62e:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800e630:	2300      	movs	r3, #0
 800e632:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800e634:	2300      	movs	r3, #0
 800e636:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800e638:	2300      	movs	r3, #0
 800e63a:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800e63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e63e:	89fa      	ldrh	r2, [r7, #14]
 800e640:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800e642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e644:	89ba      	ldrh	r2, [r7, #12]
 800e646:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800e648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e64a:	68ba      	ldr	r2, [r7, #8]
 800e64c:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800e64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e650:	88fa      	ldrh	r2, [r7, #6]
 800e652:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800e654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e656:	8a5b      	ldrh	r3, [r3, #18]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d101      	bne.n	800e660 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e65c:	23f1      	movs	r3, #241	@ 0xf1
 800e65e:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800e660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e662:	699b      	ldr	r3, [r3, #24]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d101      	bne.n	800e66c <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e668:	23f1      	movs	r3, #241	@ 0xf1
 800e66a:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800e66c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d16f      	bne.n	800e754 <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800e674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e676:	8a5b      	ldrh	r3, [r3, #18]
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fd f904 	bl	800b886 <VL53LX_calc_pll_period_us>
 800e67e:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800e680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e682:	699b      	ldr	r3, [r3, #24]
 800e684:	3301      	adds	r3, #1
 800e686:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800e688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e68a:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800e68c:	4619      	mov	r1, r3
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e694:	6978      	ldr	r0, [r7, #20]
 800e696:	f7fd f90d 	bl	800b8b4 <VL53LX_duration_maths>
 800e69a:	4602      	mov	r2, r0
 800e69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e69e:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800e6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6a2:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800e6a4:	0119      	lsls	r1, r3, #4
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e6ac:	6978      	ldr	r0, [r7, #20]
 800e6ae:	f7fd f901 	bl	800b8b4 <VL53LX_duration_maths>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6b6:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800e6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6be:	69db      	ldr	r3, [r3, #28]
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	4610      	mov	r0, r2
 800e6c4:	f7fd fb6e 	bl	800bda4 <VL53LX_rate_maths>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ce:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800e6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d6:	6a1b      	ldr	r3, [r3, #32]
 800e6d8:	4619      	mov	r1, r3
 800e6da:	4610      	mov	r0, r2
 800e6dc:	f7fd fb62 	bl	800bda4 <VL53LX_rate_maths>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6e6:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800e6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6f0:	6a1b      	ldr	r3, [r3, #32]
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	4610      	mov	r0, r2
 800e6f6:	f7fd fb55 	bl	800bda4 <VL53LX_rate_maths>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e700:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800e702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e704:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800e706:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800e708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e70a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
		count_rate_total =
 800e70c:	4413      	add	r3, r2
 800e70e:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800e710:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e714:	2b01      	cmp	r3, #1
 800e716:	d905      	bls.n	800e724 <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800e718:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e71c:	69ba      	ldr	r2, [r7, #24]
 800e71e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e722:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800e724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e726:	8ada      	ldrh	r2, [r3, #22]
 800e728:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e72c:	69b9      	ldr	r1, [r7, #24]
 800e72e:	2006      	movs	r0, #6
 800e730:	f7fd fb7d 	bl	800be2e <VL53LX_rate_per_spad_maths>
 800e734:	4603      	mov	r3, r0
 800e736:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800e738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e73a:	86da      	strh	r2, [r3, #54]	@ 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800e73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e73e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800e740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e742:	8ad9      	ldrh	r1, [r3, #22]
 800e744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e746:	69db      	ldr	r3, [r3, #28]
 800e748:	461a      	mov	r2, r3
 800e74a:	f7fd f90c 	bl	800b966 <VL53LX_events_per_spad_maths>
 800e74e:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800e750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e752:	639a      	str	r2, [r3, #56]	@ 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800e754:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3720      	adds	r7, #32
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800e760:	b590      	push	{r4, r7, lr}
 800e762:	b085      	sub	sp, #20
 800e764:	af02      	add	r7, sp, #8
 800e766:	4603      	mov	r3, r0
 800e768:	603a      	str	r2, [r7, #0]
 800e76a:	80fb      	strh	r3, [r7, #6]
 800e76c:	460b      	mov	r3, r1
 800e76e:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	8a58      	ldrh	r0, [r3, #18]
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	8a9c      	ldrh	r4, [r3, #20]
 800e77c:	88fb      	ldrh	r3, [r7, #6]
 800e77e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e782:	9201      	str	r2, [sp, #4]
 800e784:	9300      	str	r3, [sp, #0]
 800e786:	2300      	movs	r3, #0
 800e788:	4622      	mov	r2, r4
 800e78a:	f7fd fb85 	bl	800be98 <VL53LX_range_maths>
 800e78e:	4603      	mov	r3, r0
 800e790:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	8a58      	ldrh	r0, [r3, #18]
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	8a9c      	ldrh	r4, [r3, #20]
 800e7a6:	88fb      	ldrh	r3, [r7, #6]
 800e7a8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e7ac:	9201      	str	r2, [sp, #4]
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	4622      	mov	r2, r4
 800e7b4:	f7fd fb70 	bl	800be98 <VL53LX_range_maths>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	8a58      	ldrh	r0, [r3, #18]
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	f8b3 1042 	ldrh.w	r1, [r3, #66]	@ 0x42
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	8a9c      	ldrh	r4, [r3, #20]
 800e7d0:	88fb      	ldrh	r3, [r7, #6]
 800e7d2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e7d6:	9201      	str	r2, [sp, #4]
 800e7d8:	9300      	str	r3, [sp, #0]
 800e7da:	2300      	movs	r3, #0
 800e7dc:	4622      	mov	r2, r4
 800e7de:	f7fd fb5b 	bl	800be98 <VL53LX_range_maths>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48




	LOG_FUNCTION_END(0);
}
 800e7ec:	bf00      	nop
 800e7ee:	370c      	adds	r7, #12
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd90      	pop	{r4, r7, pc}

0800e7f4 <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b086      	sub	sp, #24
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800e800:	2300      	movs	r3, #0
 800e802:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800e804:	2300      	movs	r3, #0
 800e806:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800e808:	2300      	movs	r3, #0
 800e80a:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800e80c:	2300      	movs	r3, #0
 800e80e:	757b      	strb	r3, [r7, #21]





	memcpy(
 800e810:	22ac      	movs	r2, #172	@ 0xac
 800e812:	68b9      	ldr	r1, [r7, #8]
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f00c f9aa 	bl	801ab6e <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e81a:	2300      	movs	r3, #0
 800e81c:	75fb      	strb	r3, [r7, #23]
 800e81e:	e008      	b.n	800e832 <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800e820:	7dfa      	ldrb	r2, [r7, #23]
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	3206      	adds	r2, #6
 800e826:	2100      	movs	r1, #0
 800e828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e82c:	7dfb      	ldrb	r3, [r7, #23]
 800e82e:	3301      	adds	r3, #1
 800e830:	75fb      	strb	r3, [r7, #23]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	7a5b      	ldrb	r3, [r3, #9]
 800e836:	7dfa      	ldrb	r2, [r7, #23]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d3f1      	bcc.n	800e820 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800e83c:	68f9      	ldr	r1, [r7, #12]
 800e83e:	68b8      	ldr	r0, [r7, #8]
 800e840:	f000 f878 	bl	800e934 <VL53LX_f_030>
 800e844:	4603      	mov	r3, r0
 800e846:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	7a9a      	ldrb	r2, [r3, #10]
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	7a9b      	ldrb	r3, [r3, #10]
 800e850:	429a      	cmp	r2, r3
 800e852:	d203      	bcs.n	800e85c <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	7a9b      	ldrb	r3, [r3, #10]
 800e858:	75bb      	strb	r3, [r7, #22]
 800e85a:	e002      	b.n	800e862 <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	7a9b      	ldrb	r3, [r3, #10]
 800e860:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800e862:	2300      	movs	r3, #0
 800e864:	75fb      	strb	r3, [r7, #23]
 800e866:	e05c      	b.n	800e922 <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800e868:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	db0f      	blt.n	800e890 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e870:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e874:	461a      	mov	r2, r3
 800e876:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e87a:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800e87c:	68ba      	ldr	r2, [r7, #8]
 800e87e:	7a92      	ldrb	r2, [r2, #10]
 800e880:	b252      	sxtb	r2, r2
 800e882:	fb93 f1f2 	sdiv	r1, r3, r2
 800e886:	fb01 f202 	mul.w	r2, r1, r2
 800e88a:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e88c:	757b      	strb	r3, [r7, #21]
 800e88e:	e013      	b.n	800e8b8 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	7a9b      	ldrb	r3, [r3, #10]
 800e894:	b25b      	sxtb	r3, r3
 800e896:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800e898:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e89c:	4619      	mov	r1, r3
 800e89e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e8a2:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e8a4:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800e8a6:	68ba      	ldr	r2, [r7, #8]
 800e8a8:	7a92      	ldrb	r2, [r2, #10]
 800e8aa:	b252      	sxtb	r2, r2
 800e8ac:	fb93 f1f2 	sdiv	r1, r3, r2
 800e8b0:	fb01 f202 	mul.w	r2, r1, r2
 800e8b4:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e8b6:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800e8b8:	7d7b      	ldrb	r3, [r7, #21]
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	3206      	adds	r2, #6
 800e8c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800e8c4:	7df9      	ldrb	r1, [r7, #23]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	3106      	adds	r1, #6
 800e8ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	dd12      	ble.n	800e8f8 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800e8d2:	7d7b      	ldrb	r3, [r7, #21]
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	3206      	adds	r2, #6
 800e8da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800e8de:	7df9      	ldrb	r1, [r7, #23]
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	3106      	adds	r1, #6
 800e8e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800e8e8:	7d79      	ldrb	r1, [r7, #21]
 800e8ea:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800e8ec:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	1d82      	adds	r2, r0, #6
 800e8f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e8f6:	e006      	b.n	800e906 <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800e8f8:	7d7b      	ldrb	r3, [r7, #21]
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	3206      	adds	r2, #6
 800e900:	2100      	movs	r1, #0
 800e902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800e906:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e908:	7d7b      	ldrb	r3, [r7, #21]
 800e90a:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	3206      	adds	r2, #6
 800e910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	1d82      	adds	r2, r0, #6
 800e918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800e91c:	7dfb      	ldrb	r3, [r7, #23]
 800e91e:	3301      	adds	r3, #1
 800e920:	75fb      	strb	r3, [r7, #23]
 800e922:	7dfa      	ldrb	r2, [r7, #23]
 800e924:	7dbb      	ldrb	r3, [r7, #22]
 800e926:	429a      	cmp	r2, r3
 800e928:	d39e      	bcc.n	800e868 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800e92a:	bf00      	nop
 800e92c:	bf00      	nop
 800e92e:	3718      	adds	r7, #24
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b086      	sub	sp, #24
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800e93e:	2300      	movs	r3, #0
 800e940:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800e942:	2300      	movs	r3, #0
 800e944:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800e946:	2300      	movs	r3, #0
 800e948:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800e94a:	2300      	movs	r3, #0
 800e94c:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e954:	4618      	mov	r0, r3
 800e956:	f7fd fb87 	bl	800c068 <VL53LX_decode_vcsel_period>
 800e95a:	4603      	mov	r3, r0
	period = 2048 *
 800e95c:	02db      	lsls	r3, r3, #11
 800e95e:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d00a      	beq.n	800e97c <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		remapped_phase =
 800e96c:	68ba      	ldr	r2, [r7, #8]
 800e96e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e972:	68b9      	ldr	r1, [r7, #8]
 800e974:	fb01 f202 	mul.w	r2, r1, r2
 800e978:	1a9b      	subs	r3, r3, r2
 800e97a:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800e982:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800e984:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e986:	1ad3      	subs	r3, r2, r3
 800e988:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	dd09      	ble.n	800e9a4 <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e996:	2b00      	cmp	r3, #0
 800e998:	da01      	bge.n	800e99e <VL53LX_f_030+0x6a>
 800e99a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800e99e:	12db      	asrs	r3, r3, #11
 800e9a0:	75fb      	strb	r3, [r7, #23]
 800e9a2:	e008      	b.n	800e9b6 <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	da01      	bge.n	800e9b2 <VL53LX_f_030+0x7e>
 800e9ae:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800e9b2:	12db      	asrs	r3, r3, #11
 800e9b4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800e9b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3718      	adds	r7, #24
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b08e      	sub	sp, #56	@ 0x38
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t  bin_seq_length = 0;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t  repeat_count   = 0;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t  lc       = 0;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t  i       = 0;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800e9f4:	22ac      	movs	r2, #172	@ 0xac
 800e9f6:	6879      	ldr	r1, [r7, #4]
 800e9f8:	6838      	ldr	r0, [r7, #0]
 800e9fa:	f00c f8b8 	bl	801ab6e <memcpy>


	podata->VL53LX_p_021 = 0;
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	2200      	movs	r2, #0
 800ea02:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800ea04:	2300      	movs	r3, #0
 800ea06:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800ea0a:	e00a      	b.n	800ea22 <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800ea0c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ea10:	683a      	ldr	r2, [r7, #0]
 800ea12:	4413      	add	r3, r2
 800ea14:	2210      	movs	r2, #16
 800ea16:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800ea18:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800ea22:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ea26:	2b05      	cmp	r3, #5
 800ea28:	d9f0      	bls.n	800ea0c <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800ea30:	e00b      	b.n	800ea4a <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800ea32:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	3206      	adds	r2, #6
 800ea3a:	2100      	movs	r1, #0
 800ea3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800ea40:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ea44:	3301      	adds	r3, #1
 800ea46:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	7a5b      	ldrb	r3, [r3, #9]
 800ea4e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d3ed      	bcc.n	800ea32 <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800ea56:	2300      	movs	r3, #0
 800ea58:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800ea5c:	e012      	b.n	800ea84 <VL53LX_f_031+0xc2>
		bin_initial_index[lc] = 0x00;
 800ea5e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ea62:	3338      	adds	r3, #56	@ 0x38
 800ea64:	443b      	add	r3, r7
 800ea66:	2200      	movs	r2, #0
 800ea68:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800ea6c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ea70:	3338      	adds	r3, #56	@ 0x38
 800ea72:	443b      	add	r3, r7
 800ea74:	2200      	movs	r2, #0
 800ea76:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800ea7a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ea7e:	3301      	adds	r3, #1
 800ea80:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800ea84:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ea88:	2b0f      	cmp	r3, #15
 800ea8a:	d9e8      	bls.n	800ea5e <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800ea92:	2300      	movs	r3, #0
 800ea94:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800ea98:	e068      	b.n	800eb6c <VL53LX_f_031+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 800ea9a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	7b1b      	ldrb	r3, [r3, #12]
 800eaa4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800eaa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800eaac:	3338      	adds	r3, #56	@ 0x38
 800eaae:	443b      	add	r3, r7
 800eab0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d115      	bne.n	800eae4 <VL53LX_f_031+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800eab8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800eabc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800eac0:	0092      	lsls	r2, r2, #2
 800eac2:	b2d2      	uxtb	r2, r2
 800eac4:	3338      	adds	r3, #56	@ 0x38
 800eac6:	443b      	add	r3, r7
 800eac8:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800eacc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ead0:	683a      	ldr	r2, [r7, #0]
 800ead2:	4413      	add	r3, r2
 800ead4:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800ead8:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800eada:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eade:	3301      	adds	r3, #1
 800eae0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800eae4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800eae8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800eaec:	443a      	add	r2, r7
 800eaee:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800eaf2:	3201      	adds	r2, #1
 800eaf4:	b2d2      	uxtb	r2, r2
 800eaf6:	3338      	adds	r3, #56	@ 0x38
 800eaf8:	443b      	add	r3, r7
 800eafa:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800eafe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800eb02:	3338      	adds	r3, #56	@ 0x38
 800eb04:	443b      	add	r3, r7
 800eb06:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800eb0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		for (i = 0 ; i < 4 ; i++)
 800eb0e:	2300      	movs	r3, #0
 800eb10:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800eb14:	e021      	b.n	800eb5a <VL53LX_f_031+0x198>
			podata->bin_data[VL53LX_p_032+i] +=
 800eb16:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800eb1a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800eb1e:	441a      	add	r2, r3
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	3206      	adds	r2, #6
 800eb24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800eb28:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800eb2c:	009a      	lsls	r2, r3, #2
 800eb2e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800eb32:	441a      	add	r2, r3
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	3206      	adds	r2, #6
 800eb38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800eb3c:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 800eb40:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800eb44:	4402      	add	r2, r0
 800eb46:	4419      	add	r1, r3
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	3206      	adds	r2, #6
 800eb4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800eb50:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800eb54:	3301      	adds	r3, #1
 800eb56:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800eb5a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800eb5e:	2b03      	cmp	r3, #3
 800eb60:	d9d9      	bls.n	800eb16 <VL53LX_f_031+0x154>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800eb62:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800eb66:	3301      	adds	r3, #1
 800eb68:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800eb6c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800eb70:	2b05      	cmp	r3, #5
 800eb72:	d992      	bls.n	800ea9a <VL53LX_f_031+0xd8>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800eb74:	2300      	movs	r3, #0
 800eb76:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800eb7a:	e022      	b.n	800ebc2 <VL53LX_f_031+0x200>

		bin_cfg = podata->bin_seq[lc];
 800eb7c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800eb80:	683a      	ldr	r2, [r7, #0]
 800eb82:	4413      	add	r3, r2
 800eb84:	7b1b      	ldrb	r3, [r3, #12]
 800eb86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800eb8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800eb8e:	2b0f      	cmp	r3, #15
 800eb90:	d80c      	bhi.n	800ebac <VL53LX_f_031+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800eb92:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
			podata->bin_rep[lc] =
 800eb96:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
				bin_repeat_count[bin_cfg];
 800eb9a:	3238      	adds	r2, #56	@ 0x38
 800eb9c:	443a      	add	r2, r7
 800eb9e:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800eba2:	683a      	ldr	r2, [r7, #0]
 800eba4:	4413      	add	r3, r2
 800eba6:	460a      	mov	r2, r1
 800eba8:	749a      	strb	r2, [r3, #18]
 800ebaa:	e005      	b.n	800ebb8 <VL53LX_f_031+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 800ebac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ebb0:	683a      	ldr	r2, [r7, #0]
 800ebb2:	4413      	add	r3, r2
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800ebb8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800ebc2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ebc6:	2b05      	cmp	r3, #5
 800ebc8:	d9d8      	bls.n	800eb7c <VL53LX_f_031+0x1ba>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800ebca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	b2da      	uxtb	r2, r3
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800ebdc:	e050      	b.n	800ec80 <VL53LX_f_031+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800ebde:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ebe2:	3338      	adds	r3, #56	@ 0x38
 800ebe4:	443b      	add	r3, r7
 800ebe6:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800ebea:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if (repeat_count > 0) {
 800ebec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	dd41      	ble.n	800ec76 <VL53LX_f_031+0x2b4>

			VL53LX_p_032 = bin_initial_index[lc];
 800ebf2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ebf6:	3338      	adds	r3, #56	@ 0x38
 800ebf8:	443b      	add	r3, r7
 800ebfa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ebfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800ec02:	2300      	movs	r3, #0
 800ec04:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800ec08:	e031      	b.n	800ec6e <VL53LX_f_031+0x2ac>
				podata->bin_data[VL53LX_p_032+i] +=
 800ec0a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800ec0e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800ec12:	441a      	add	r2, r3
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	3206      	adds	r2, #6
 800ec18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800ec1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec1e:	0fda      	lsrs	r2, r3, #31
 800ec20:	4413      	add	r3, r2
 800ec22:	105b      	asrs	r3, r3, #1
 800ec24:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800ec26:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800ec2a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800ec2e:	441a      	add	r2, r3
 800ec30:	4401      	add	r1, r0
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	3206      	adds	r2, #6
 800ec36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800ec3a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800ec3e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800ec42:	441a      	add	r2, r3
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	3206      	adds	r2, #6
 800ec48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec4c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800ec50:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800ec54:	441a      	add	r2, r3
 800ec56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec58:	fb91 f1f3 	sdiv	r1, r1, r3
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	3206      	adds	r2, #6
 800ec60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800ec64:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800ec68:	3301      	adds	r3, #1
 800ec6a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800ec6e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800ec72:	2b03      	cmp	r3, #3
 800ec74:	d9c9      	bls.n	800ec0a <VL53LX_f_031+0x248>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800ec76:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800ec80:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ec84:	2b0f      	cmp	r3, #15
 800ec86:	d9aa      	bls.n	800ebde <VL53LX_f_031+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800ec8e:	7bfb      	ldrb	r3, [r7, #15]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d102      	bne.n	800ec9a <VL53LX_f_031+0x2d8>
		(bin_repeat_count[15] > 0))
 800ec94:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d002      	beq.n	800eca0 <VL53LX_f_031+0x2de>
		podata->number_of_ambient_bins = 4;
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	2204      	movs	r2, #4
 800ec9e:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800eca0:	f997 3034 	ldrsb.w	r3, [r7, #52]	@ 0x34
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3738      	adds	r7, #56	@ 0x38
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800ecac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecae:	b0cb      	sub	sp, #300	@ 0x12c
 800ecb0:	af06      	add	r7, sp, #24
 800ecb2:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800ecb6:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800ecba:	6020      	str	r0, [r4, #0]
 800ecbc:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800ecc0:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 800ecc4:	6001      	str	r1, [r0, #0]
 800ecc6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800ecca:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800ecce:	600a      	str	r2, [r1, #0]
 800ecd0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800ecd4:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800ecd8:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800ece0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ece4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800ece8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ecec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800ecf0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800ecf4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800ecf8:	f107 0318 	add.w	r3, r7, #24
 800ecfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800ed00:	2300      	movs	r3, #0
 800ed02:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800ed04:	2300      	movs	r3, #0
 800ed06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	uint8_t  xtalk_enable                  = 0;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	uint8_t  r                             = 0;
 800ed10:	2300      	movs	r3, #0
 800ed12:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
	uint8_t  t                             = 0;
 800ed16:	2300      	movs	r3, #0
 800ed18:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0


	int16_t  delta_mm                      = 0;
 800ed22:	2300      	movs	r3, #0
 800ed24:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800ed28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ed2c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ed30:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800ed34:	6818      	ldr	r0, [r3, #0]
 800ed36:	f7ff fe44 	bl	800e9c2 <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800ed3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed3e:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800ed40:	4619      	mov	r1, r3
 800ed42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed46:	3348      	adds	r3, #72	@ 0x48
 800ed48:	461a      	mov	r2, r3
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	f7fd f9dd 	bl	800c10a <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800ed50:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ed54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed58:	3348      	adds	r3, #72	@ 0x48
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	4610      	mov	r0, r2
 800ed5e:	f7fd f996 	bl	800c08e <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800ed62:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d142      	bne.n	800edf0 <VL53LX_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800ed6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ed6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d039      	beq.n	800edf0 <VL53LX_hist_process_data+0x144>
		status =
		VL53LX_f_032(
 800ed7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ed80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800ed88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ed8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	@ 0x30
 800ed96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ed9a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	@ 0x32
 800eda4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eda8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800edb2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800edb6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800edba:	6812      	ldr	r2, [r2, #0]
 800edbc:	f892 20a8 	ldrb.w	r2, [r2, #168]	@ 0xa8
 800edc0:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800edc4:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800edc8:	6809      	ldr	r1, [r1, #0]
 800edca:	f891 10a9 	ldrb.w	r1, [r1, #169]	@ 0xa9
 800edce:	f107 0014 	add.w	r0, r7, #20
 800edd2:	9004      	str	r0, [sp, #16]
 800edd4:	9103      	str	r1, [sp, #12]
 800edd6:	9202      	str	r2, [sp, #8]
 800edd8:	9301      	str	r3, [sp, #4]
 800edda:	2300      	movs	r3, #0
 800eddc:	9300      	str	r3, [sp, #0]
 800edde:	2300      	movs	r3, #0
 800ede0:	4632      	mov	r2, r6
 800ede2:	4629      	mov	r1, r5
 800ede4:	4620      	mov	r0, r4
 800ede6:	f002 f9d6 	bl	8011196 <VL53LX_f_032>
 800edea:	4603      	mov	r3, r0
 800edec:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800edf0:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d115      	bne.n	800ee24 <VL53LX_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800edf8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800edfc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d00c      	beq.n	800ee24 <VL53LX_hist_process_data+0x178>
		status =
			VL53LX_f_033(
 800ee0a:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800ee0e:	697a      	ldr	r2, [r7, #20]
 800ee10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee14:	3348      	adds	r3, #72	@ 0x48
 800ee16:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800ee1a:	f002 fc2b 	bl	8011674 <VL53LX_f_033>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800ee24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ee28:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
	presults->xmonitor.total_periods_elapsed =
 800ee2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee30:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800ee34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ee38:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800ee3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee40:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800ee44:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee48:	2200      	movs	r2, #0
 800ee4a:	f8a3 2174 	strh.w	r2, [r3, #372]	@ 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800ee4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee52:	2200      	movs	r2, #0
 800ee54:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c

	presults->xmonitor.range_id     = 0;
 800ee58:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800ee62:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee66:	2200      	movs	r2, #0
 800ee68:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e



	xtalk_enable = 0;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800ee72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ee76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d002      	beq.n	800ee8a <VL53LX_hist_process_data+0x1de>
		xtalk_enable = 1;
 800ee84:	2301      	movs	r3, #1
 800ee86:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800ee90:	e108      	b.n	800f0a4 <VL53LX_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800ee92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ee96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 800eea0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28



		status =
		VL53LX_f_025(
 800eea4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eea8:	3348      	adds	r3, #72	@ 0x48
 800eeaa:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 800eeae:	7814      	ldrb	r4, [r2, #0]
 800eeb0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800eeb4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800eeb8:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800eebc:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 800eec0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800eec4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800eec8:	9405      	str	r4, [sp, #20]
 800eeca:	f8d7 4134 	ldr.w	r4, [r7, #308]	@ 0x134
 800eece:	9404      	str	r4, [sp, #16]
 800eed0:	f8d7 40fc 	ldr.w	r4, [r7, #252]	@ 0xfc
 800eed4:	9403      	str	r4, [sp, #12]
 800eed6:	f8d7 4100 	ldr.w	r4, [r7, #256]	@ 0x100
 800eeda:	9402      	str	r4, [sp, #8]
 800eedc:	f8d7 4104 	ldr.w	r4, [r7, #260]	@ 0x104
 800eee0:	9401      	str	r4, [sp, #4]
 800eee2:	9300      	str	r3, [sp, #0]
 800eee4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800eee8:	6812      	ldr	r2, [r2, #0]
 800eeea:	6809      	ldr	r1, [r1, #0]
 800eeec:	6800      	ldr	r0, [r0, #0]
 800eeee:	f7fe fe65 	bl	800dbbc <VL53LX_f_025>
 800eef2:	4603      	mov	r3, r0
 800eef4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800eef8:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	f040 80cb 	bne.w	800f098 <VL53LX_hist_process_data+0x3ec>
 800ef02:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f040 80c6 	bne.w	800f098 <VL53LX_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 800ef0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ef10:	7c9b      	ldrb	r3, [r3, #18]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d110      	bne.n	800ef38 <VL53LX_hist_process_data+0x28c>
			pdata = &(presults->VL53LX_p_003[0]);
 800ef16:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ef1a:	3314      	adds	r3, #20
 800ef1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800ef20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ef24:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800ef26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ef2a:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800ef2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ef30:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800ef32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ef36:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800ef38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ef3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800ef44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800ef48:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	461a      	mov	r2, r3
 800ef50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef54:	fb02 f303 	mul.w	r3, r2, r3
 800ef58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800ef5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef60:	011b      	lsls	r3, r3, #4
 800ef62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800ef66:	2300      	movs	r3, #0
 800ef68:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800ef6c:	e08b      	b.n	800f086 <VL53LX_hist_process_data+0x3da>

			pdata = &(presults->VL53LX_p_003[t]);
 800ef6e:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800ef72:	224c      	movs	r2, #76	@ 0x4c
 800ef74:	fb02 f303 	mul.w	r3, r2, r3
 800ef78:	3310      	adds	r3, #16
 800ef7a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800ef7e:	4413      	add	r3, r2
 800ef80:	3304      	adds	r3, #4
 800ef82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800ef86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ef8a:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 800ef8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ef92:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800ef96:	429a      	cmp	r2, r3
 800ef98:	dd0e      	ble.n	800efb8 <VL53LX_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 800ef9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ef9e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800efa2:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800efa4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800efa8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800efac:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	b29b      	uxth	r3, r3
				delta_mm =
 800efb2:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 800efb6:	e00d      	b.n	800efd4 <VL53LX_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 800efb8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800efbc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800efc0:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800efc2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800efc6:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800efca:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800efcc:	1ad3      	subs	r3, r2, r3
 800efce:	b29b      	uxth	r3, r3
				delta_mm =
 800efd0:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800efd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800efd8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
			XtalkDetectMaxSigma =
 800efe0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800efe4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800efe8:	781b      	ldrb	r3, [r3, #0]
 800efea:	461a      	mov	r2, r3
 800efec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800eff0:	fb02 f303 	mul.w	r3, r2, r3
 800eff4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma <<= 5;
 800eff8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800effc:	015b      	lsls	r3, r3, #5
 800effe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			if (pdata->median_range_mm  >
 800f002:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f006:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800f00a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f00e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
			if (pdata->median_range_mm  >
 800f018:	429a      	cmp	r2, r3
 800f01a:	dd2f      	ble.n	800f07c <VL53LX_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 800f01c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f020:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800f024:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f028:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800f032:	429a      	cmp	r2, r3
 800f034:	da22      	bge.n	800f07c <VL53LX_hist_process_data+0x3d0>
			pdata->VL53LX_p_009 <
 800f036:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800f03c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800f040:	429a      	cmp	r2, r3
 800f042:	d91b      	bls.n	800f07c <VL53LX_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800f044:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f048:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800f04a:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800f04c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f050:	4293      	cmp	r3, r2
 800f052:	d913      	bls.n	800f07c <VL53LX_hist_process_data+0x3d0>
			delta_mm <
 800f054:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	@ 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800f058:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800f05c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800f060:	6812      	ldr	r2, [r2, #0]
 800f062:	8fd2      	ldrh	r2, [r2, #62]	@ 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800f064:	4293      	cmp	r3, r2
 800f066:	da09      	bge.n	800f07c <VL53LX_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 800f068:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f06c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
				memcpy(
 800f070:	224c      	movs	r2, #76	@ 0x4c
 800f072:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 800f076:	4618      	mov	r0, r3
 800f078:	f00b fd79 	bl	801ab6e <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800f07c:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800f080:	3301      	adds	r3, #1
 800f082:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800f086:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f08a:	7c9b      	ldrb	r3, [r3, #18]
 800f08c:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 800f090:	429a      	cmp	r2, r3
 800f092:	f4ff af6c 	bcc.w	800ef6e <VL53LX_hist_process_data+0x2c2>
 800f096:	e000      	b.n	800f09a <VL53LX_hist_process_data+0x3ee>
			continue;
 800f098:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800f09a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800f09e:	3301      	adds	r3, #1
 800f0a0:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800f0a4:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 800f0a8:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	f67f aef0 	bls.w	800ee92 <VL53LX_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800f0b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f0b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 800f0c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	LOG_FUNCTION_END(status);

	return status;
 800f0c4:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0d2 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800f0d2:	b580      	push	{r7, lr}
 800f0d4:	b086      	sub	sp, #24
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	60f8      	str	r0, [r7, #12]
 800f0da:	460b      	mov	r3, r1
 800f0dc:	607a      	str	r2, [r7, #4]
 800f0de:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800f0e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d104      	bne.n	800f0f6 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800f0ec:	68f8      	ldr	r0, [r7, #12]
 800f0ee:	f7f9 fb77 	bl	80087e0 <VL53LX_disable_firmware>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800f0f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d104      	bne.n	800f108 <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f7f9 fb9f 	bl	8008842 <VL53LX_enable_powerforce>
 800f104:	4603      	mov	r3, r0
 800f106:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800f108:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d105      	bne.n	800f11c <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800f110:	21fa      	movs	r1, #250	@ 0xfa
 800f112:	68f8      	ldr	r0, [r7, #12]
 800f114:	f002 fd1e 	bl	8011b54 <VL53LX_WaitUs>
 800f118:	4603      	mov	r3, r0
 800f11a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800f11c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d107      	bne.n	800f134 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800f124:	2201      	movs	r2, #1
 800f126:	f240 7181 	movw	r1, #1921	@ 0x781
 800f12a:	68f8      	ldr	r0, [r7, #12]
 800f12c:	f002 fc20 	bl	8011970 <VL53LX_WrByte>
 800f130:	4603      	mov	r3, r0
 800f132:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800f134:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d107      	bne.n	800f14c <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800f13c:	2205      	movs	r2, #5
 800f13e:	f240 6183 	movw	r1, #1667	@ 0x683
 800f142:	68f8      	ldr	r0, [r7, #12]
 800f144:	f002 fc14 	bl	8011970 <VL53LX_WrByte>
 800f148:	4603      	mov	r3, r0
 800f14a:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800f14c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d105      	bne.n	800f160 <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800f154:	6879      	ldr	r1, [r7, #4]
 800f156:	68f8      	ldr	r0, [r7, #12]
 800f158:	f002 fcfc 	bl	8011b54 <VL53LX_WaitUs>
 800f15c:	4603      	mov	r3, r0
 800f15e:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800f160:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d107      	bne.n	800f178 <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800f168:	2201      	movs	r2, #1
 800f16a:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 800f16e:	68f8      	ldr	r0, [r7, #12]
 800f170:	f002 fbfe 	bl	8011970 <VL53LX_WrByte>
 800f174:	4603      	mov	r3, r0
 800f176:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800f178:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d108      	bne.n	800f192 <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800f180:	897b      	ldrh	r3, [r7, #10]
 800f182:	461a      	mov	r2, r3
 800f184:	f240 7184 	movw	r1, #1924	@ 0x784
 800f188:	68f8      	ldr	r0, [r7, #12]
 800f18a:	f002 fc1b 	bl	80119c4 <VL53LX_WrWord>
 800f18e:	4603      	mov	r3, r0
 800f190:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800f192:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f196:	4618      	mov	r0, r3
 800f198:	3718      	adds	r7, #24
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}

0800f19e <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800f19e:	b580      	push	{r7, lr}
 800f1a0:	b086      	sub	sp, #24
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	60f8      	str	r0, [r7, #12]
 800f1a6:	607b      	str	r3, [r7, #4]
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	72fb      	strb	r3, [r7, #11]
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800f1b8:	7afb      	ldrb	r3, [r7, #11]
 800f1ba:	75bb      	strb	r3, [r7, #22]
 800f1bc:	e041      	b.n	800f242 <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800f1be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d108      	bne.n	800f1d8 <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800f1c6:	7dbb      	ldrb	r3, [r7, #22]
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	f240 7194 	movw	r1, #1940	@ 0x794
 800f1ce:	68f8      	ldr	r0, [r7, #12]
 800f1d0:	f002 fbce 	bl	8011970 <VL53LX_WrByte>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800f1d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d107      	bne.n	800f1f0 <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f240 7183 	movw	r1, #1923	@ 0x783
 800f1e6:	68f8      	ldr	r0, [r7, #12]
 800f1e8:	f002 fbc2 	bl	8011970 <VL53LX_WrByte>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800f1f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d105      	bne.n	800f204 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800f1f8:	2105      	movs	r1, #5
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	f002 fcaa 	bl	8011b54 <VL53LX_WaitUs>
 800f200:	4603      	mov	r3, r0
 800f202:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800f204:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d107      	bne.n	800f21c <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800f20c:	2201      	movs	r2, #1
 800f20e:	f240 7183 	movw	r1, #1923	@ 0x783
 800f212:	68f8      	ldr	r0, [r7, #12]
 800f214:	f002 fbac 	bl	8011970 <VL53LX_WrByte>
 800f218:	4603      	mov	r3, r0
 800f21a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800f21c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d108      	bne.n	800f236 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800f224:	2304      	movs	r3, #4
 800f226:	687a      	ldr	r2, [r7, #4]
 800f228:	f44f 61f2 	mov.w	r1, #1936	@ 0x790
 800f22c:	68f8      	ldr	r0, [r7, #12]
 800f22e:	f002 fb69 	bl	8011904 <VL53LX_ReadMulti>
 800f232:	4603      	mov	r3, r0
 800f234:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	3304      	adds	r3, #4
 800f23a:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800f23c:	7dbb      	ldrb	r3, [r7, #22]
 800f23e:	3301      	adds	r3, #1
 800f240:	75bb      	strb	r3, [r7, #22]
 800f242:	7dba      	ldrb	r2, [r7, #22]
 800f244:	7af9      	ldrb	r1, [r7, #11]
 800f246:	7abb      	ldrb	r3, [r7, #10]
 800f248:	440b      	add	r3, r1
 800f24a:	429a      	cmp	r2, r3
 800f24c:	dbb7      	blt.n	800f1be <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800f24e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f252:	4618      	mov	r0, r3
 800f254:	3718      	adds	r7, #24
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}

0800f25a <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b084      	sub	sp, #16
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f262:	2300      	movs	r3, #0
 800f264:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d107      	bne.n	800f27e <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800f26e:	2201      	movs	r2, #1
 800f270:	f240 7183 	movw	r1, #1923	@ 0x783
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f002 fb7b 	bl	8011970 <VL53LX_WrByte>
 800f27a:	4603      	mov	r3, r0
 800f27c:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800f27e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d107      	bne.n	800f296 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800f286:	2200      	movs	r2, #0
 800f288:	f240 7181 	movw	r1, #1921	@ 0x781
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f002 fb6f 	bl	8011970 <VL53LX_WrByte>
 800f292:	4603      	mov	r3, r0
 800f294:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800f296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d104      	bne.n	800f2a8 <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f7f9 fae1 	bl	8008866 <VL53LX_disable_powerforce>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800f2a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d104      	bne.n	800f2ba <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f7f9 fa83 	bl	80087bc <VL53LX_enable_firmware>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800f2ba:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3710      	adds	r7, #16
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}

0800f2c6 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800f2c6:	b480      	push	{r7}
 800f2c8:	b087      	sub	sp, #28
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	60b9      	str	r1, [r7, #8]
 800f2d0:	607a      	str	r2, [r7, #4]
 800f2d2:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800f2dc:	89fb      	ldrh	r3, [r7, #14]
 800f2de:	2b03      	cmp	r3, #3
 800f2e0:	d802      	bhi.n	800f2e8 <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f2e2:	f06f 0308 	mvn.w	r3, #8
 800f2e6:	e017      	b.n	800f318 <VL53LX_nvm_decode_optical_centre+0x52>


	tmp  = 0x00F0;
 800f2e8:	23f0      	movs	r3, #240	@ 0xf0
 800f2ea:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	3302      	adds	r3, #2
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	8afb      	ldrh	r3, [r7, #22]
 800f2f6:	1a9b      	subs	r3, r3, r2
 800f2f8:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800f2fa:	8afb      	ldrh	r3, [r7, #22]
 800f2fc:	2bff      	cmp	r3, #255	@ 0xff
 800f2fe:	d901      	bls.n	800f304 <VL53LX_nvm_decode_optical_centre+0x3e>
		tmp = 0;
 800f300:	2300      	movs	r3, #0
 800f302:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800f304:	8afb      	ldrh	r3, [r7, #22]
 800f306:	b2da      	uxtb	r2, r3
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	78da      	ldrb	r2, [r3, #3]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	705a      	strb	r2, [r3, #1]

	return status;
 800f314:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800f318:	4618      	mov	r0, r3
 800f31a:	371c      	adds	r7, #28
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800f324:	b590      	push	{r4, r7, lr}
 800f326:	b087      	sub	sp, #28
 800f328:	af00      	add	r7, sp, #0
 800f32a:	4603      	mov	r3, r0
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	607a      	str	r2, [r7, #4]
 800f330:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f332:	2300      	movs	r3, #0
 800f334:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800f336:	2300      	movs	r3, #0
 800f338:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800f33a:	2300      	movs	r3, #0
 800f33c:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800f33e:	89fb      	ldrh	r3, [r7, #14]
 800f340:	2b37      	cmp	r3, #55	@ 0x37
 800f342:	d802      	bhi.n	800f34a <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f344:	f06f 0308 	mvn.w	r3, #8
 800f348:	e03e      	b.n	800f3c8 <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f34a:	68b9      	ldr	r1, [r7, #8]
 800f34c:	2002      	movs	r0, #2
 800f34e:	f7f9 f91b 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f352:	4603      	mov	r3, r0
 800f354:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	3302      	adds	r3, #2
 800f35e:	4619      	mov	r1, r3
 800f360:	2002      	movs	r0, #2
 800f362:	f7f9 f911 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f366:	4603      	mov	r3, r0
 800f368:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800f372:	099b      	lsrs	r3, r3, #6
 800f374:	b29a      	uxth	r2, r3
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2219      	movs	r2, #25
 800f37e:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2205      	movs	r2, #5
 800f384:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2205      	movs	r2, #5
 800f38a:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	3304      	adds	r3, #4
 800f390:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800f392:	2300      	movs	r3, #0
 800f394:	74fb      	strb	r3, [r7, #19]
 800f396:	e012      	b.n	800f3be <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800f398:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800f39a:	6979      	ldr	r1, [r7, #20]
 800f39c:	2002      	movs	r0, #2
 800f39e:	f7f9 f8f3 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800f3a6:	687a      	ldr	r2, [r7, #4]
 800f3a8:	1d23      	adds	r3, r4, #4
 800f3aa:	005b      	lsls	r3, r3, #1
 800f3ac:	4413      	add	r3, r2
 800f3ae:	460a      	mov	r2, r1
 800f3b0:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	3302      	adds	r3, #2
 800f3b6:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800f3b8:	7cfb      	ldrb	r3, [r7, #19]
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	74fb      	strb	r3, [r7, #19]
 800f3be:	7cfb      	ldrb	r3, [r7, #19]
 800f3c0:	2b18      	cmp	r3, #24
 800f3c2:	d9e9      	bls.n	800f398 <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800f3c4:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	371c      	adds	r7, #28
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd90      	pop	{r4, r7, pc}

0800f3d0 <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b086      	sub	sp, #24
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]
 800f3dc:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800f3e2:	89fb      	ldrh	r3, [r7, #14]
 800f3e4:	2b07      	cmp	r3, #7
 800f3e6:	d802      	bhi.n	800f3ee <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f3e8:	f06f 0308 	mvn.w	r3, #8
 800f3ec:	e027      	b.n	800f43e <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f3ee:	68b9      	ldr	r1, [r7, #8]
 800f3f0:	2002      	movs	r0, #2
 800f3f2:	f7f9 f8c9 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	3302      	adds	r3, #2
 800f402:	4619      	mov	r1, r3
 800f404:	2002      	movs	r0, #2
 800f406:	f7f9 f8bf 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f40a:	4603      	mov	r3, r0
 800f40c:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	3304      	adds	r3, #4
 800f416:	4619      	mov	r1, r3
 800f418:	2002      	movs	r0, #2
 800f41a:	f7f9 f8b5 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f41e:	4603      	mov	r3, r0
 800f420:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	3306      	adds	r3, #6
 800f42a:	4619      	mov	r1, r3
 800f42c:	2002      	movs	r0, #2
 800f42e:	f7f9 f8ab 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f432:	4603      	mov	r3, r0
 800f434:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	80da      	strh	r2, [r3, #6]

	return status;
 800f43a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3718      	adds	r7, #24
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}

0800f446 <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800f446:	b580      	push	{r7, lr}
 800f448:	b086      	sub	sp, #24
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	4603      	mov	r3, r0
 800f44e:	60b9      	str	r1, [r7, #8]
 800f450:	607a      	str	r2, [r7, #4]
 800f452:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f454:	2300      	movs	r3, #0
 800f456:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800f458:	89fb      	ldrh	r3, [r7, #14]
 800f45a:	2b0f      	cmp	r3, #15
 800f45c:	d802      	bhi.n	800f464 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f45e:	f06f 0308 	mvn.w	r3, #8
 800f462:	e04d      	b.n	800f500 <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f464:	68b9      	ldr	r1, [r7, #8]
 800f466:	2002      	movs	r0, #2
 800f468:	f7f9 f88e 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f46c:	4603      	mov	r3, r0
 800f46e:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	789a      	ldrb	r2, [r3, #2]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	78da      	ldrb	r2, [r3, #3]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	3304      	adds	r3, #4
 800f488:	4619      	mov	r1, r3
 800f48a:	2002      	movs	r0, #2
 800f48c:	f7f9 f87c 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f490:	4603      	mov	r3, r0
 800f492:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	3306      	adds	r3, #6
 800f49c:	4619      	mov	r1, r3
 800f49e:	2002      	movs	r0, #2
 800f4a0:	f7f9 f872 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	3308      	adds	r3, #8
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	2002      	movs	r0, #2
 800f4b4:	f7f9 f868 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	330a      	adds	r3, #10
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	2002      	movs	r0, #2
 800f4c8:	f7f9 f85e 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	330c      	adds	r3, #12
 800f4d8:	4619      	mov	r1, r3
 800f4da:	2002      	movs	r0, #2
 800f4dc:	f7f9 f854 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	330e      	adds	r3, #14
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	2002      	movs	r0, #2
 800f4f0:	f7f9 f84a 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	81da      	strh	r2, [r3, #14]

	return status;
 800f4fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f500:	4618      	mov	r0, r3
 800f502:	3718      	adds	r7, #24
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b086      	sub	sp, #24
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	607b      	str	r3, [r7, #4]
 800f512:	460b      	mov	r3, r1
 800f514:	72fb      	strb	r3, [r7, #11]
 800f516:	4613      	mov	r3, r2
 800f518:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f51a:	2300      	movs	r3, #0
 800f51c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800f51e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d106      	bne.n	800f534 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800f526:	2232      	movs	r2, #50	@ 0x32
 800f528:	2104      	movs	r1, #4
 800f52a:	68f8      	ldr	r0, [r7, #12]
 800f52c:	f7ff fdd1 	bl	800f0d2 <VL53LX_nvm_enable>
 800f530:	4603      	mov	r3, r0
 800f532:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800f534:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d107      	bne.n	800f54c <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800f53c:	7aba      	ldrb	r2, [r7, #10]
 800f53e:	7af9      	ldrb	r1, [r7, #11]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	68f8      	ldr	r0, [r7, #12]
 800f544:	f7ff fe2b 	bl	800f19e <VL53LX_nvm_read>
 800f548:	4603      	mov	r3, r0
 800f54a:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800f54c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d104      	bne.n	800f55e <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800f554:	68f8      	ldr	r0, [r7, #12]
 800f556:	f7ff fe80 	bl	800f25a <VL53LX_nvm_disable>
 800f55a:	4603      	mov	r3, r0
 800f55c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800f55e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f562:	4618      	mov	r0, r3
 800f564:	3718      	adds	r7, #24
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}

0800f56a <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800f56a:	b580      	push	{r7, lr}
 800f56c:	b084      	sub	sp, #16
 800f56e:	af00      	add	r7, sp, #0
 800f570:	6078      	str	r0, [r7, #4]
 800f572:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f574:	2300      	movs	r3, #0
 800f576:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f578:	f107 0308 	add.w	r3, r7, #8
 800f57c:	2201      	movs	r2, #1
 800f57e:	212e      	movs	r1, #46	@ 0x2e
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f7ff ffc1 	bl	800f508 <VL53LX_read_nvm_raw_data>
 800f586:	4603      	mov	r3, r0
 800f588:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f58a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d108      	bne.n	800f5a4 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800f592:	f107 0308 	add.w	r3, r7, #8
 800f596:	683a      	ldr	r2, [r7, #0]
 800f598:	4619      	mov	r1, r3
 800f59a:	2004      	movs	r0, #4
 800f59c:	f7ff fe93 	bl	800f2c6 <VL53LX_nvm_decode_optical_centre>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800f5a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3710      	adds	r7, #16
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}

0800f5b0 <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b092      	sub	sp, #72	@ 0x48
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f5c0:	f107 030c 	add.w	r3, r7, #12
 800f5c4:	220e      	movs	r2, #14
 800f5c6:	2157      	movs	r1, #87	@ 0x57
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f7ff ff9d 	bl	800f508 <VL53LX_read_nvm_raw_data>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f5d4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d109      	bne.n	800f5f0 <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800f5dc:	f107 030c 	add.w	r3, r7, #12
 800f5e0:	683a      	ldr	r2, [r7, #0]
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	2038      	movs	r0, #56	@ 0x38
 800f5e6:	f7ff fe9d 	bl	800f324 <VL53LX_nvm_decode_cal_peak_rate_map>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f5f0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3748      	adds	r7, #72	@ 0x48
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b086      	sub	sp, #24
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f606:	2300      	movs	r3, #0
 800f608:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f60a:	f107 030c 	add.w	r3, r7, #12
 800f60e:	2202      	movs	r2, #2
 800f610:	2165      	movs	r1, #101	@ 0x65
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f7ff ff78 	bl	800f508 <VL53LX_read_nvm_raw_data>
 800f618:	4603      	mov	r3, r0
 800f61a:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f61c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d108      	bne.n	800f636 <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800f624:	f107 030c 	add.w	r3, r7, #12
 800f628:	683a      	ldr	r2, [r7, #0]
 800f62a:	4619      	mov	r1, r3
 800f62c:	2008      	movs	r0, #8
 800f62e:	f7ff fecf 	bl	800f3d0 <VL53LX_nvm_decode_additional_offset_cal_data>
 800f632:	4603      	mov	r3, r0
 800f634:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f636:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3718      	adds	r7, #24
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}

0800f642 <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b08a      	sub	sp, #40	@ 0x28
 800f646:	af00      	add	r7, sp, #0
 800f648:	60f8      	str	r0, [r7, #12]
 800f64a:	460b      	mov	r3, r1
 800f64c:	607a      	str	r2, [r7, #4]
 800f64e:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f650:	2300      	movs	r3, #0
 800f652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800f656:	897b      	ldrh	r3, [r7, #10]
 800f658:	089b      	lsrs	r3, r3, #2
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	b2d9      	uxtb	r1, r3
 800f65e:	f107 0314 	add.w	r3, r7, #20
 800f662:	2204      	movs	r2, #4
 800f664:	68f8      	ldr	r0, [r7, #12]
 800f666:	f7ff ff4f 	bl	800f508 <VL53LX_read_nvm_raw_data>
 800f66a:	4603      	mov	r3, r0
 800f66c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f670:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f674:	2b00      	cmp	r3, #0
 800f676:	d109      	bne.n	800f68c <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800f678:	f107 0314 	add.w	r3, r7, #20
 800f67c:	687a      	ldr	r2, [r7, #4]
 800f67e:	4619      	mov	r1, r3
 800f680:	2010      	movs	r0, #16
 800f682:	f7ff fee0 	bl	800f446 <VL53LX_nvm_decode_fmt_range_results_data>
 800f686:	4603      	mov	r3, r0
 800f688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800f68c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27

}
 800f690:	4618      	mov	r0, r3
 800f692:	3728      	adds	r7, #40	@ 0x28
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b086      	sub	sp, #24
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	607a      	str	r2, [r7, #4]
 800f6a4:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f6aa:	897b      	ldrh	r3, [r7, #10]
 800f6ac:	2b0a      	cmp	r3, #10
 800f6ae:	d802      	bhi.n	800f6b6 <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f6b0:	f06f 0309 	mvn.w	r3, #9
 800f6b4:	e047      	b.n	800f746 <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6be:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f6cc:	f002 020f 	and.w	r2, r2, #15
 800f6d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f6d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f6dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f6e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f6e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f6ec:	f002 0203 	and.w	r2, r2, #3
 800f6f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f6f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f6fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f700:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f702:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	88d8      	ldrh	r0, [r3, #6]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	3305      	adds	r3, #5
 800f70c:	461a      	mov	r2, r3
 800f70e:	2102      	movs	r1, #2
 800f710:	f7f8 ff0f 	bl	8008532 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800f718:	68fa      	ldr	r2, [r7, #12]
 800f71a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f71c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800f722:	68fa      	ldr	r2, [r7, #12]
 800f724:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f726:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800f730:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f734:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f736:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800f740:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f742:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f746:	4618      	mov	r0, r3
 800f748:	3718      	adds	r7, #24
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}

0800f74e <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f74e:	b580      	push	{r7, lr}
 800f750:	b086      	sub	sp, #24
 800f752:	af00      	add	r7, sp, #0
 800f754:	4603      	mov	r3, r0
 800f756:	60b9      	str	r1, [r7, #8]
 800f758:	607a      	str	r2, [r7, #4]
 800f75a:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f75c:	2300      	movs	r3, #0
 800f75e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f760:	89fb      	ldrh	r3, [r7, #14]
 800f762:	2b0a      	cmp	r3, #10
 800f764:	d802      	bhi.n	800f76c <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f766:	f06f 0309 	mvn.w	r3, #9
 800f76a:	e046      	b.n	800f7fa <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f774:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	3301      	adds	r3, #1
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	f003 030f 	and.w	r3, r3, #15
 800f784:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	3302      	adds	r3, #2
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f794:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	3303      	adds	r3, #3
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	f003 0303 	and.w	r3, r3, #3
 800f7a4:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	3304      	adds	r3, #4
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7b4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	3305      	adds	r3, #5
 800f7be:	4619      	mov	r1, r3
 800f7c0:	2002      	movs	r0, #2
 800f7c2:	f7f8 fee1 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	79da      	ldrb	r2, [r3, #7]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	7a1a      	ldrb	r2, [r3, #8]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	3309      	adds	r3, #9
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f7e8:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	7a9a      	ldrb	r2, [r3, #10]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800f7f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3718      	adds	r7, #24
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}

0800f802 <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f802:	b580      	push	{r7, lr}
 800f804:	b086      	sub	sp, #24
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
 800f80a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f80c:	2300      	movs	r3, #0
 800f80e:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f810:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d108      	bne.n	800f82a <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800f818:	f107 020c 	add.w	r2, r7, #12
 800f81c:	230b      	movs	r3, #11
 800f81e:	2101      	movs	r1, #1
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f002 f86f 	bl	8011904 <VL53LX_ReadMulti>
 800f826:	4603      	mov	r3, r0
 800f828:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f82a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d108      	bne.n	800f844 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800f832:	f107 030c 	add.w	r3, r7, #12
 800f836:	683a      	ldr	r2, [r7, #0]
 800f838:	4619      	mov	r1, r3
 800f83a:	200b      	movs	r0, #11
 800f83c:	f7ff ff87 	bl	800f74e <VL53LX_i2c_decode_static_nvm_managed>
 800f840:	4603      	mov	r3, r0
 800f842:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f844:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3718      	adds	r7, #24
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b086      	sub	sp, #24
 800f854:	af00      	add	r7, sp, #0
 800f856:	60f8      	str	r0, [r7, #12]
 800f858:	460b      	mov	r3, r1
 800f85a:	607a      	str	r2, [r7, #4]
 800f85c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f85e:	2300      	movs	r3, #0
 800f860:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f862:	897b      	ldrh	r3, [r7, #10]
 800f864:	2b16      	cmp	r3, #22
 800f866:	d802      	bhi.n	800f86e <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f868:	f06f 0309 	mvn.w	r3, #9
 800f86c:	e076      	b.n	800f95c <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800f87a:	68fa      	ldr	r2, [r7, #12]
 800f87c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f87e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800f884:	68fa      	ldr	r2, [r7, #12]
 800f886:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f888:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800f88e:	68fa      	ldr	r2, [r7, #12]
 800f890:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f892:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f89c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f8a6:	f002 020f 	and.w	r2, r2, #15
 800f8aa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f8ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800f8b2:	68fa      	ldr	r2, [r7, #12]
 800f8b4:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800f8b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f8c0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f8c4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f8c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800f8d0:	f002 0203 	and.w	r2, r2, #3
 800f8d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f8d6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	8958      	ldrh	r0, [r3, #10]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	3309      	adds	r3, #9
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	2102      	movs	r1, #2
 800f8e4:	f7f8 fe25 	bl	8008532 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	330b      	adds	r3, #11
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	2102      	movs	r1, #2
 800f8f6:	f7f8 fe67 	bl	80085c8 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	330d      	adds	r3, #13
 800f904:	461a      	mov	r2, r3
 800f906:	2102      	movs	r1, #2
 800f908:	f7f8 fe5e 	bl	80085c8 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	8a18      	ldrh	r0, [r3, #16]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	330f      	adds	r3, #15
 800f914:	461a      	mov	r2, r3
 800f916:	2102      	movs	r1, #2
 800f918:	f7f8 fe0b 	bl	8008532 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800f922:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f926:	b218      	sxth	r0, r3
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	3311      	adds	r3, #17
 800f92c:	461a      	mov	r2, r3
 800f92e:	2102      	movs	r1, #2
 800f930:	f7f8 fe4a 	bl	80085c8 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	3313      	adds	r3, #19
 800f93e:	461a      	mov	r2, r3
 800f940:	2102      	movs	r1, #2
 800f942:	f7f8 fe41 	bl	80085c8 <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	3315      	adds	r3, #21
 800f950:	461a      	mov	r2, r3
 800f952:	2102      	movs	r1, #2
 800f954:	f7f8 fe38 	bl	80085c8 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800f958:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3718      	adds	r7, #24
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b086      	sub	sp, #24
 800f968:	af00      	add	r7, sp, #0
 800f96a:	4603      	mov	r3, r0
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	607a      	str	r2, [r7, #4]
 800f970:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f972:	2300      	movs	r3, #0
 800f974:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f976:	89fb      	ldrh	r3, [r7, #14]
 800f978:	2b16      	cmp	r3, #22
 800f97a:	d802      	bhi.n	800f982 <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f97c:	f06f 0309 	mvn.w	r3, #9
 800f980:	e079      	b.n	800fa76 <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	785a      	ldrb	r2, [r3, #1]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	789a      	ldrb	r2, [r3, #2]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	78da      	ldrb	r2, [r3, #3]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	791a      	ldrb	r2, [r3, #4]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	3305      	adds	r3, #5
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	f003 030f 	and.w	r3, r3, #15
 800f9b4:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	799a      	ldrb	r2, [r3, #6]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	3307      	adds	r3, #7
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f9cc:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	3308      	adds	r3, #8
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	f003 0303 	and.w	r3, r3, #3
 800f9dc:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	3309      	adds	r3, #9
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	2002      	movs	r0, #2
 800f9ea:	f7f8 fdcd 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	330b      	adds	r3, #11
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	2002      	movs	r0, #2
 800f9fe:	f7f8 fe0f 	bl	8008620 <VL53LX_i2c_decode_int16_t>
 800fa02:	4603      	mov	r3, r0
 800fa04:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	330d      	adds	r3, #13
 800fa0e:	4619      	mov	r1, r3
 800fa10:	2002      	movs	r0, #2
 800fa12:	f7f8 fe05 	bl	8008620 <VL53LX_i2c_decode_int16_t>
 800fa16:	4603      	mov	r3, r0
 800fa18:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	330f      	adds	r3, #15
 800fa22:	4619      	mov	r1, r3
 800fa24:	2002      	movs	r0, #2
 800fa26:	f7f8 fdaf 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	3311      	adds	r3, #17
 800fa36:	4619      	mov	r1, r3
 800fa38:	2002      	movs	r0, #2
 800fa3a:	f7f8 fdf1 	bl	8008620 <VL53LX_i2c_decode_int16_t>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa44:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	3313      	adds	r3, #19
 800fa4e:	4619      	mov	r1, r3
 800fa50:	2002      	movs	r0, #2
 800fa52:	f7f8 fde5 	bl	8008620 <VL53LX_i2c_decode_int16_t>
 800fa56:	4603      	mov	r3, r0
 800fa58:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	3315      	adds	r3, #21
 800fa62:	4619      	mov	r1, r3
 800fa64:	2002      	movs	r0, #2
 800fa66:	f7f8 fddb 	bl	8008620 <VL53LX_i2c_decode_int16_t>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800fa72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3718      	adds	r7, #24
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}

0800fa7e <VL53LX_set_customer_nvm_managed>:


VL53LX_Error VL53LX_set_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800fa7e:	b580      	push	{r7, lr}
 800fa80:	b088      	sub	sp, #32
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	6078      	str	r0, [r7, #4]
 800fa86:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800fa8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d108      	bne.n	800faa6 <VL53LX_set_customer_nvm_managed+0x28>
		status = VL53LX_i2c_encode_customer_nvm_managed(
 800fa94:	f107 0308 	add.w	r3, r7, #8
 800fa98:	461a      	mov	r2, r3
 800fa9a:	2117      	movs	r1, #23
 800fa9c:	6838      	ldr	r0, [r7, #0]
 800fa9e:	f7ff fed7 	bl	800f850 <VL53LX_i2c_encode_customer_nvm_managed>
 800faa2:	4603      	mov	r3, r0
 800faa4:	77fb      	strb	r3, [r7, #31]
			pdata,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 800faa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d108      	bne.n	800fac0 <VL53LX_set_customer_nvm_managed+0x42>
		status = VL53LX_WriteMulti(
 800faae:	f107 0208 	add.w	r2, r7, #8
 800fab2:	2317      	movs	r3, #23
 800fab4:	210d      	movs	r1, #13
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f001 feee 	bl	8011898 <VL53LX_WriteMulti>
 800fabc:	4603      	mov	r3, r0
 800fabe:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800fac0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3720      	adds	r7, #32
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b08a      	sub	sp, #40	@ 0x28
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fad6:	2300      	movs	r3, #0
 800fad8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800fadc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d109      	bne.n	800faf8 <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800fae4:	f107 020c 	add.w	r2, r7, #12
 800fae8:	2317      	movs	r3, #23
 800faea:	210d      	movs	r1, #13
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f001 ff09 	bl	8011904 <VL53LX_ReadMulti>
 800faf2:	4603      	mov	r3, r0
 800faf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800faf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d109      	bne.n	800fb14 <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800fb00:	f107 030c 	add.w	r3, r7, #12
 800fb04:	683a      	ldr	r2, [r7, #0]
 800fb06:	4619      	mov	r1, r3
 800fb08:	2017      	movs	r0, #23
 800fb0a:	f7ff ff2b 	bl	800f964 <VL53LX_i2c_decode_customer_nvm_managed>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800fb14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d11c      	bne.n	800fb56 <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	8a5b      	ldrh	r3, [r3, #18]
 800fb20:	84bb      	strh	r3, [r7, #36]	@ 0x24
		offset = offset / 4;
 800fb22:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	da00      	bge.n	800fb2c <VL53LX_get_customer_nvm_managed+0x60>
 800fb2a:	3303      	adds	r3, #3
 800fb2c:	109b      	asrs	r3, r3, #2
 800fb2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (offset >= 1024)
 800fb30:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800fb34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fb38:	db04      	blt.n	800fb44 <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800fb3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fb3c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800fb40:	b29b      	uxth	r3, r3
 800fb42:	84bb      	strh	r3, [r7, #36]	@ 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	2200      	movs	r2, #0
 800fb48:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fb4e:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fb54:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800fb56:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3728      	adds	r7, #40	@ 0x28
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}

0800fb62 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fb62:	b580      	push	{r7, lr}
 800fb64:	b086      	sub	sp, #24
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	60f8      	str	r0, [r7, #12]
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	607a      	str	r2, [r7, #4]
 800fb6e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fb70:	2300      	movs	r3, #0
 800fb72:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800fb74:	897b      	ldrh	r3, [r7, #10]
 800fb76:	2b1f      	cmp	r3, #31
 800fb78:	d802      	bhi.n	800fb80 <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fb7a:	f06f 0309 	mvn.w	r3, #9
 800fb7e:	e0cf      	b.n	800fd20 <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	881b      	ldrh	r3, [r3, #0]
 800fb84:	687a      	ldr	r2, [r7, #4]
 800fb86:	2102      	movs	r1, #2
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7f8 fcd2 	bl	8008532 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800fb96:	f002 0201 	and.w	r2, r2, #1
 800fb9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fb9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800fba6:	f002 020f 	and.w	r2, r2, #15
 800fbaa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fbac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800fbb6:	f002 020f 	and.w	r2, r2, #15
 800fbba:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800fbbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800fbc6:	f002 021f 	and.w	r2, r2, #31
 800fbca:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800fbcc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800fbd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fbda:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fbdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800fbe6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fbea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800fbec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800fbf6:	f002 0201 	and.w	r2, r2, #1
 800fbfa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800fbfc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800fc02:	68fa      	ldr	r2, [r7, #12]
 800fc04:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800fc06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800fc10:	f002 0201 	and.w	r2, r2, #1
 800fc14:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800fc16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800fc20:	f002 0203 	and.w	r2, r2, #3
 800fc24:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800fc26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800fc30:	f002 021f 	and.w	r2, r2, #31
 800fc34:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800fc36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800fc40:	f002 0203 	and.w	r2, r2, #3
 800fc44:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800fc46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800fc50:	f002 0203 	and.w	r2, r2, #3
 800fc54:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800fc56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800fc60:	f002 0207 	and.w	r2, r2, #7
 800fc64:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800fc66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800fc70:	f002 021f 	and.w	r2, r2, #31
 800fc74:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800fc76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800fc80:	f002 0201 	and.w	r2, r2, #1
 800fc84:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800fc86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800fc8c:	68fa      	ldr	r2, [r7, #12]
 800fc8e:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800fc90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800fc96:	68fa      	ldr	r2, [r7, #12]
 800fc98:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800fc9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800fca0:	68fa      	ldr	r2, [r7, #12]
 800fca2:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800fca4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800fcaa:	68fa      	ldr	r2, [r7, #12]
 800fcac:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800fcae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800fcb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800fcbe:	68fa      	ldr	r2, [r7, #12]
 800fcc0:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800fcc2:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	8b18      	ldrh	r0, [r3, #24]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	3318      	adds	r3, #24
 800fccc:	461a      	mov	r2, r3
 800fcce:	2102      	movs	r1, #2
 800fcd0:	f7f8 fc2f 	bl	8008532 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800fcd8:	68fa      	ldr	r2, [r7, #12]
 800fcda:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800fcdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800fce2:	68fa      	ldr	r2, [r7, #12]
 800fce4:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800fce6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800fcf0:	f002 020f 	and.w	r2, r2, #15
 800fcf4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800fcf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800fcfc:	68fa      	ldr	r2, [r7, #12]
 800fcfe:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800fd00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800fd0a:	f002 020f 	and.w	r2, r2, #15
 800fd0e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800fd10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800fd16:	68fa      	ldr	r2, [r7, #12]
 800fd18:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800fd1a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fd1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3718      	adds	r7, #24
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b086      	sub	sp, #24
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	460b      	mov	r3, r1
 800fd32:	607a      	str	r2, [r7, #4]
 800fd34:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fd36:	2300      	movs	r3, #0
 800fd38:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800fd3a:	897b      	ldrh	r3, [r7, #10]
 800fd3c:	2b15      	cmp	r3, #21
 800fd3e:	d802      	bhi.n	800fd46 <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fd40:	f06f 0309 	mvn.w	r3, #9
 800fd44:	e070      	b.n	800fe28 <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800fd52:	68fa      	ldr	r2, [r7, #12]
 800fd54:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800fd56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800fd5c:	68fa      	ldr	r2, [r7, #12]
 800fd5e:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800fd60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800fd6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fd6e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fd70:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800fd76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fd7a:	b298      	uxth	r0, r3
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	3304      	adds	r3, #4
 800fd80:	461a      	mov	r2, r3
 800fd82:	2102      	movs	r1, #2
 800fd84:	f7f8 fbd5 	bl	8008532 <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800fd90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fd94:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fd96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800fda0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800fda6:	68fa      	ldr	r2, [r7, #12]
 800fda8:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800fdaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800fdb4:	f002 0201 	and.w	r2, r2, #1
 800fdb8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fdba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800fdc4:	f002 0207 	and.w	r2, r2, #7
 800fdc8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800fdca:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	8998      	ldrh	r0, [r3, #12]
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	330c      	adds	r3, #12
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	2102      	movs	r1, #2
 800fdd8:	f7f8 fbab 	bl	8008532 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	89d8      	ldrh	r0, [r3, #14]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	330e      	adds	r3, #14
 800fde4:	461a      	mov	r2, r3
 800fde6:	2102      	movs	r1, #2
 800fde8:	f7f8 fba3 	bl	8008532 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	8a18      	ldrh	r0, [r3, #16]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	3310      	adds	r3, #16
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	2102      	movs	r1, #2
 800fdf8:	f7f8 fb9b 	bl	8008532 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800fe00:	68fa      	ldr	r2, [r7, #12]
 800fe02:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800fe04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800fe0a:	68fa      	ldr	r2, [r7, #12]
 800fe0c:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800fe0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800fe14:	68fa      	ldr	r2, [r7, #12]
 800fe16:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800fe18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800fe1e:	68fa      	ldr	r2, [r7, #12]
 800fe20:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800fe22:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fe24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3718      	adds	r7, #24
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b086      	sub	sp, #24
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	460b      	mov	r3, r1
 800fe3a:	607a      	str	r2, [r7, #4]
 800fe3c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800fe42:	897b      	ldrh	r3, [r7, #10]
 800fe44:	2b16      	cmp	r3, #22
 800fe46:	d802      	bhi.n	800fe4e <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fe48:	f06f 0309 	mvn.w	r3, #9
 800fe4c:	e06e      	b.n	800ff2c <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	f003 030f 	and.w	r3, r3, #15
 800fe56:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800fe60:	68fa      	ldr	r2, [r7, #12]
 800fe62:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800fe64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800fe6e:	f002 020f 	and.w	r2, r2, #15
 800fe72:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fe74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800fe7a:	68fa      	ldr	r2, [r7, #12]
 800fe7c:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800fe7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800fe88:	f002 020f 	and.w	r2, r2, #15
 800fe8c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800fe8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800fe94:	68fa      	ldr	r2, [r7, #12]
 800fe96:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800fe98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800fea2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fea6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fea8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800feb2:	f002 020f 	and.w	r2, r2, #15
 800feb6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800feb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800febe:	68fa      	ldr	r2, [r7, #12]
 800fec0:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800fec2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800fecc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fed0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fed2:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	8958      	ldrh	r0, [r3, #10]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	330a      	adds	r3, #10
 800fedc:	461a      	mov	r2, r3
 800fede:	2102      	movs	r1, #2
 800fee0:	f7f8 fb27 	bl	8008532 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	8998      	ldrh	r0, [r3, #12]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	330c      	adds	r3, #12
 800feec:	461a      	mov	r2, r3
 800feee:	2102      	movs	r1, #2
 800fef0:	f7f8 fb1f 	bl	8008532 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800fef8:	68fa      	ldr	r2, [r7, #12]
 800fefa:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800fefc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800ff02:	68fa      	ldr	r2, [r7, #12]
 800ff04:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800ff06:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	6918      	ldr	r0, [r3, #16]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	3312      	adds	r3, #18
 800ff10:	461a      	mov	r2, r3
 800ff12:	2104      	movs	r1, #4
 800ff14:	f7f8 fbad 	bl	8008672 <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800ff20:	f002 0201 	and.w	r2, r2, #1
 800ff24:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800ff26:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ff28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3718      	adds	r7, #24
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b086      	sub	sp, #24
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	60f8      	str	r0, [r7, #12]
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	607a      	str	r2, [r7, #4]
 800ff40:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ff42:	2300      	movs	r3, #0
 800ff44:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800ff46:	897b      	ldrh	r3, [r7, #10]
 800ff48:	2b11      	cmp	r3, #17
 800ff4a:	d802      	bhi.n	800ff52 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ff4c:	f06f 0309 	mvn.w	r3, #9
 800ff50:	e071      	b.n	8010036 <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	f003 0303 	and.w	r3, r3, #3
 800ff5a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	8858      	ldrh	r0, [r3, #2]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	3301      	adds	r3, #1
 800ff68:	461a      	mov	r2, r3
 800ff6a:	2102      	movs	r1, #2
 800ff6c:	f7f8 fae1 	bl	8008532 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	8898      	ldrh	r0, [r3, #4]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	3303      	adds	r3, #3
 800ff78:	461a      	mov	r2, r3
 800ff7a:	2102      	movs	r1, #2
 800ff7c:	f7f8 fad9 	bl	8008532 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800ff88:	f002 0201 	and.w	r2, r2, #1
 800ff8c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ff8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800ff98:	f002 0207 	and.w	r2, r2, #7
 800ff9c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ff9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800ffa4:	68fa      	ldr	r2, [r7, #12]
 800ffa6:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800ffa8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800ffae:	68fa      	ldr	r2, [r7, #12]
 800ffb0:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800ffb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800ffbc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ffc0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ffc2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800ffcc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ffd0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800ffd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800ffdc:	f002 0203 	and.w	r2, r2, #3
 800ffe0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ffe2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800ffec:	f002 0203 	and.w	r2, r2, #3
 800fff0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800fff2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800fffc:	f002 020f 	and.w	r2, r2, #15
 8010000:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8010002:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8010008:	68fa      	ldr	r2, [r7, #12]
 801000a:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 801000c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8010012:	68fa      	ldr	r2, [r7, #12]
 8010014:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8010016:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 801001c:	68fa      	ldr	r2, [r7, #12]
 801001e:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8010020:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 801002a:	f002 0203 	and.w	r2, r2, #3
 801002e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8010030:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010032:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010036:	4618      	mov	r0, r3
 8010038:	3718      	adds	r7, #24
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}

0801003e <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801003e:	b480      	push	{r7}
 8010040:	b087      	sub	sp, #28
 8010042:	af00      	add	r7, sp, #0
 8010044:	60f8      	str	r0, [r7, #12]
 8010046:	460b      	mov	r3, r1
 8010048:	607a      	str	r2, [r7, #4]
 801004a:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801004c:	2300      	movs	r3, #0
 801004e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8010050:	897b      	ldrh	r3, [r7, #10]
 8010052:	2b04      	cmp	r3, #4
 8010054:	d802      	bhi.n	801005c <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010056:	f06f 0309 	mvn.w	r3, #9
 801005a:	e025      	b.n	80100a8 <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	f003 0301 	and.w	r3, r3, #1
 8010064:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8010072:	f002 0201 	and.w	r2, r2, #1
 8010076:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8010078:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8010082:	f002 0201 	and.w	r2, r2, #1
 8010086:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010088:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8010092:	f002 0203 	and.w	r2, r2, #3
 8010096:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8010098:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	3304      	adds	r3, #4
		pdata->system__mode_start;
 801009e:	68fa      	ldr	r2, [r7, #12]
 80100a0:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80100a2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80100a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	371c      	adds	r7, #28
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr

080100b4 <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80100be:	2300      	movs	r3, #0
 80100c0:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80100c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d108      	bne.n	80100dc <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 80100ca:	f107 0308 	add.w	r3, r7, #8
 80100ce:	461a      	mov	r2, r3
 80100d0:	2105      	movs	r1, #5
 80100d2:	6838      	ldr	r0, [r7, #0]
 80100d4:	f7ff ffb3 	bl	801003e <VL53LX_i2c_encode_system_control>
 80100d8:	4603      	mov	r3, r0
 80100da:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 80100dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d108      	bne.n	80100f6 <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 80100e4:	f107 0208 	add.w	r2, r7, #8
 80100e8:	2305      	movs	r3, #5
 80100ea:	2183      	movs	r1, #131	@ 0x83
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f001 fbd3 	bl	8011898 <VL53LX_WriteMulti>
 80100f2:	4603      	mov	r3, r0
 80100f4:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 80100f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3710      	adds	r7, #16
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}

08010102 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 8010102:	b580      	push	{r7, lr}
 8010104:	b086      	sub	sp, #24
 8010106:	af00      	add	r7, sp, #0
 8010108:	4603      	mov	r3, r0
 801010a:	60b9      	str	r1, [r7, #8]
 801010c:	607a      	str	r2, [r7, #4]
 801010e:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010110:	2300      	movs	r3, #0
 8010112:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8010114:	89fb      	ldrh	r3, [r7, #14]
 8010116:	2b2b      	cmp	r3, #43	@ 0x2b
 8010118:	d802      	bhi.n	8010120 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801011a:	f06f 0309 	mvn.w	r3, #9
 801011e:	e0e2      	b.n	80102e6 <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010128:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	785a      	ldrb	r2, [r3, #1]
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	3302      	adds	r3, #2
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	f003 030f 	and.w	r3, r3, #15
 8010140:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	78da      	ldrb	r2, [r3, #3]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	3304      	adds	r3, #4
 8010152:	4619      	mov	r1, r3
 8010154:	2002      	movs	r0, #2
 8010156:	f7f8 fa17 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 801015a:	4603      	mov	r3, r0
 801015c:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	3306      	adds	r3, #6
 8010166:	4619      	mov	r1, r3
 8010168:	2002      	movs	r0, #2
 801016a:	f7f8 fa0d 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 801016e:	4603      	mov	r3, r0
 8010170:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	3308      	adds	r3, #8
 801017a:	4619      	mov	r1, r3
 801017c:	2002      	movs	r0, #2
 801017e:	f7f8 fa03 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 8010182:	4603      	mov	r3, r0
 8010184:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	330a      	adds	r3, #10
 801018e:	4619      	mov	r1, r3
 8010190:	2002      	movs	r0, #2
 8010192:	f7f8 f9f9 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 8010196:	4603      	mov	r3, r0
 8010198:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	330c      	adds	r3, #12
 80101a2:	4619      	mov	r1, r3
 80101a4:	2002      	movs	r0, #2
 80101a6:	f7f8 f9ef 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 80101aa:	4603      	mov	r3, r0
 80101ac:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	330e      	adds	r3, #14
 80101b6:	4619      	mov	r1, r3
 80101b8:	2002      	movs	r0, #2
 80101ba:	f7f8 f9e5 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 80101be:	4603      	mov	r3, r0
 80101c0:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	3310      	adds	r3, #16
 80101ca:	4619      	mov	r1, r3
 80101cc:	2002      	movs	r0, #2
 80101ce:	f7f8 f9db 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 80101d2:	4603      	mov	r3, r0
 80101d4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	3312      	adds	r3, #18
 80101de:	4619      	mov	r1, r3
 80101e0:	2002      	movs	r0, #2
 80101e2:	f7f8 f9d1 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 80101e6:	4603      	mov	r3, r0
 80101e8:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	3314      	adds	r3, #20
 80101f2:	4619      	mov	r1, r3
 80101f4:	2002      	movs	r0, #2
 80101f6:	f7f8 f9c7 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 80101fa:	4603      	mov	r3, r0
 80101fc:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	3316      	adds	r3, #22
 8010206:	4619      	mov	r1, r3
 8010208:	2002      	movs	r0, #2
 801020a:	f7f8 f9bd 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 801020e:	4603      	mov	r3, r0
 8010210:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	3318      	adds	r3, #24
 801021a:	4619      	mov	r1, r3
 801021c:	2002      	movs	r0, #2
 801021e:	f7f8 f9b3 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 8010222:	4603      	mov	r3, r0
 8010224:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	331a      	adds	r3, #26
 801022e:	4619      	mov	r1, r3
 8010230:	2002      	movs	r0, #2
 8010232:	f7f8 f9a9 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 8010236:	4603      	mov	r3, r0
 8010238:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	331c      	adds	r3, #28
 8010242:	4619      	mov	r1, r3
 8010244:	2002      	movs	r0, #2
 8010246:	f7f8 f99f 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 801024a:	4603      	mov	r3, r0
 801024c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	331e      	adds	r3, #30
 8010256:	4619      	mov	r1, r3
 8010258:	2002      	movs	r0, #2
 801025a:	f7f8 f995 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 801025e:	4603      	mov	r3, r0
 8010260:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	3320      	adds	r3, #32
 801026a:	4619      	mov	r1, r3
 801026c:	2002      	movs	r0, #2
 801026e:	f7f8 f98b 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 8010272:	4603      	mov	r3, r0
 8010274:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	3322      	adds	r3, #34	@ 0x22
 801027e:	4619      	mov	r1, r3
 8010280:	2002      	movs	r0, #2
 8010282:	f7f8 f981 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 8010286:	4603      	mov	r3, r0
 8010288:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	3324      	adds	r3, #36	@ 0x24
 8010292:	4619      	mov	r1, r3
 8010294:	2002      	movs	r0, #2
 8010296:	f7f8 f977 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 801029a:	4603      	mov	r3, r0
 801029c:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	3326      	adds	r3, #38	@ 0x26
 80102a6:	4619      	mov	r1, r3
 80102a8:	2002      	movs	r0, #2
 80102aa:	f7f8 f96d 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 80102ae:	4603      	mov	r3, r0
 80102b0:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	3328      	adds	r3, #40	@ 0x28
 80102ba:	4619      	mov	r1, r3
 80102bc:	2002      	movs	r0, #2
 80102be:	f7f8 f963 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 80102c2:	4603      	mov	r3, r0
 80102c4:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 80102e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3718      	adds	r7, #24
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}

080102ee <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 80102ee:	b580      	push	{r7, lr}
 80102f0:	b086      	sub	sp, #24
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	4603      	mov	r3, r0
 80102f6:	60b9      	str	r1, [r7, #8]
 80102f8:	607a      	str	r2, [r7, #4]
 80102fa:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80102fc:	2300      	movs	r3, #0
 80102fe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 8010300:	89fb      	ldrh	r3, [r7, #14]
 8010302:	2b20      	cmp	r3, #32
 8010304:	d802      	bhi.n	801030c <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010306:	f06f 0309 	mvn.w	r3, #9
 801030a:	e04d      	b.n	80103a8 <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 801030c:	68b9      	ldr	r1, [r7, #8]
 801030e:	2004      	movs	r0, #4
 8010310:	f7f8 f9d9 	bl	80086c6 <VL53LX_i2c_decode_uint32_t>
 8010314:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	3304      	adds	r3, #4
 801031e:	4619      	mov	r1, r3
 8010320:	2004      	movs	r0, #4
 8010322:	f7f8 f9d0 	bl	80086c6 <VL53LX_i2c_decode_uint32_t>
 8010326:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	3308      	adds	r3, #8
 8010330:	4619      	mov	r1, r3
 8010332:	2004      	movs	r0, #4
 8010334:	f7f8 f9e4 	bl	8008700 <VL53LX_i2c_decode_int32_t>
 8010338:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	330c      	adds	r3, #12
 8010342:	4619      	mov	r1, r3
 8010344:	2004      	movs	r0, #4
 8010346:	f7f8 f9be 	bl	80086c6 <VL53LX_i2c_decode_uint32_t>
 801034a:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	3310      	adds	r3, #16
 8010354:	4619      	mov	r1, r3
 8010356:	2004      	movs	r0, #4
 8010358:	f7f8 f9b5 	bl	80086c6 <VL53LX_i2c_decode_uint32_t>
 801035c:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	3314      	adds	r3, #20
 8010366:	4619      	mov	r1, r3
 8010368:	2004      	movs	r0, #4
 801036a:	f7f8 f9ac 	bl	80086c6 <VL53LX_i2c_decode_uint32_t>
 801036e:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	3318      	adds	r3, #24
 8010378:	4619      	mov	r1, r3
 801037a:	2004      	movs	r0, #4
 801037c:	f7f8 f9c0 	bl	8008700 <VL53LX_i2c_decode_int32_t>
 8010380:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	331c      	adds	r3, #28
 801038a:	4619      	mov	r1, r3
 801038c:	2004      	movs	r0, #4
 801038e:	f7f8 f99a 	bl	80086c6 <VL53LX_i2c_decode_uint32_t>
 8010392:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 80103a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3718      	adds	r7, #24
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}

080103b0 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b086      	sub	sp, #24
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	4603      	mov	r3, r0
 80103b8:	60b9      	str	r1, [r7, #8]
 80103ba:	607a      	str	r2, [r7, #4]
 80103bc:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80103be:	2300      	movs	r3, #0
 80103c0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 80103c2:	89fb      	ldrh	r3, [r7, #14]
 80103c4:	2b37      	cmp	r3, #55	@ 0x37
 80103c6:	d802      	bhi.n	80103ce <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80103c8:	f06f 0309 	mvn.w	r3, #9
 80103cc:	e15e      	b.n	801068c <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 80103ce:	68b9      	ldr	r1, [r7, #8]
 80103d0:	2002      	movs	r0, #2
 80103d2:	f7f8 f8d9 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 80103d6:	4603      	mov	r3, r0
 80103d8:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	3302      	adds	r3, #2
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80103e8:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	3303      	adds	r3, #3
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80103f8:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	3304      	adds	r3, #4
 8010402:	781b      	ldrb	r3, [r3, #0]
 8010404:	f003 0303 	and.w	r3, r3, #3
 8010408:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	3305      	adds	r3, #5
 8010412:	781b      	ldrb	r3, [r3, #0]
 8010414:	f003 0301 	and.w	r3, r3, #1
 8010418:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	3306      	adds	r3, #6
 8010422:	781b      	ldrb	r3, [r3, #0]
 8010424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010428:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	3307      	adds	r3, #7
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010438:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	3308      	adds	r3, #8
 8010442:	4619      	mov	r1, r3
 8010444:	2002      	movs	r0, #2
 8010446:	f7f8 f89f 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 801044a:	4603      	mov	r3, r0
 801044c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010450:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	330a      	adds	r3, #10
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	f003 0303 	and.w	r3, r3, #3
 8010460:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	330b      	adds	r3, #11
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	f003 0303 	and.w	r3, r3, #3
 8010470:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	330c      	adds	r3, #12
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	f003 030f 	and.w	r3, r3, #15
 8010480:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	330d      	adds	r3, #13
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	f003 0307 	and.w	r3, r3, #7
 8010490:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	330e      	adds	r3, #14
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	f003 0301 	and.w	r3, r3, #1
 80104a0:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	330f      	adds	r3, #15
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	f003 0303 	and.w	r3, r3, #3
 80104b0:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	7c1a      	ldrb	r2, [r3, #16]
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	7c5a      	ldrb	r2, [r3, #17]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	3312      	adds	r3, #18
 80104ca:	4619      	mov	r1, r3
 80104cc:	2002      	movs	r0, #2
 80104ce:	f7f8 f85b 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 80104d2:	4603      	mov	r3, r0
 80104d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80104d8:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	3316      	adds	r3, #22
 80104e2:	4619      	mov	r1, r3
 80104e4:	2002      	movs	r0, #2
 80104e6:	f7f8 f84f 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 80104ea:	4603      	mov	r3, r0
 80104ec:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	3318      	adds	r3, #24
 80104f6:	4619      	mov	r1, r3
 80104f8:	2002      	movs	r0, #2
 80104fa:	f7f8 f845 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 80104fe:	4603      	mov	r3, r0
 8010500:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	331a      	adds	r3, #26
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	f003 0301 	and.w	r3, r3, #1
 8010510:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	331b      	adds	r3, #27
 801051a:	781b      	ldrb	r3, [r3, #0]
 801051c:	f003 0307 	and.w	r3, r3, #7
 8010520:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	7f1a      	ldrb	r2, [r3, #28]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	7f5a      	ldrb	r2, [r3, #29]
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	331e      	adds	r3, #30
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010540:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	331f      	adds	r3, #31
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010550:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	3320      	adds	r3, #32
 801055a:	781b      	ldrb	r3, [r3, #0]
 801055c:	f003 0303 	and.w	r3, r3, #3
 8010560:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	3321      	adds	r3, #33	@ 0x21
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	f003 030f 	and.w	r3, r3, #15
 8010570:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	3325      	adds	r3, #37	@ 0x25
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	f003 0301 	and.w	r3, r3, #1
 80105a4:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	3326      	adds	r3, #38	@ 0x26
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	f003 0303 	and.w	r3, r3, #3
 80105b6:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	3327      	adds	r3, #39	@ 0x27
 80105c2:	781b      	ldrb	r3, [r3, #0]
 80105c4:	f003 031f 	and.w	r3, r3, #31
 80105c8:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	3328      	adds	r3, #40	@ 0x28
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	f003 031f 	and.w	r3, r3, #31
 80105da:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	3329      	adds	r3, #41	@ 0x29
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	f003 031f 	and.w	r3, r3, #31
 80105ec:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	332a      	adds	r3, #42	@ 0x2a
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	f003 0301 	and.w	r3, r3, #1
 80105fe:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	332b      	adds	r3, #43	@ 0x2b
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	f003 0301 	and.w	r3, r3, #1
 8010610:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	332c      	adds	r3, #44	@ 0x2c
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	f003 0303 	and.w	r3, r3, #3
 8010622:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	332d      	adds	r3, #45	@ 0x2d
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010634:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	332e      	adds	r3, #46	@ 0x2e
 8010640:	4619      	mov	r1, r3
 8010642:	2004      	movs	r0, #4
 8010644:	f7f8 f83f 	bl	80086c6 <VL53LX_i2c_decode_uint32_t>
 8010648:	4603      	mov	r3, r0
 801064a:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	3332      	adds	r3, #50	@ 0x32
 8010656:	4619      	mov	r1, r3
 8010658:	2004      	movs	r0, #4
 801065a:	f7f8 f834 	bl	80086c6 <VL53LX_i2c_decode_uint32_t>
 801065e:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	3336      	adds	r3, #54	@ 0x36
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	f003 0301 	and.w	r3, r3, #1
 801066e:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	3337      	adds	r3, #55	@ 0x37
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	f003 0301 	and.w	r3, r3, #1
 8010680:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 8010688:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801068c:	4618      	mov	r0, r3
 801068e:	3718      	adds	r7, #24
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}

08010694 <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b086      	sub	sp, #24
 8010698:	af00      	add	r7, sp, #0
 801069a:	4603      	mov	r3, r0
 801069c:	60b9      	str	r1, [r7, #8]
 801069e:	607a      	str	r2, [r7, #4]
 80106a0:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80106a2:	2300      	movs	r3, #0
 80106a4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 80106a6:	89fb      	ldrh	r3, [r7, #14]
 80106a8:	2b30      	cmp	r3, #48	@ 0x30
 80106aa:	d802      	bhi.n	80106b2 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80106ac:	f06f 0309 	mvn.w	r3, #9
 80106b0:	e112      	b.n	80108d8 <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80106b2:	68bb      	ldr	r3, [r7, #8]
 80106b4:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	785a      	ldrb	r2, [r3, #1]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	789a      	ldrb	r2, [r3, #2]
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	3303      	adds	r3, #3
 80106ce:	4619      	mov	r1, r3
 80106d0:	2002      	movs	r0, #2
 80106d2:	f7f7 ff59 	bl	8008588 <VL53LX_i2c_decode_uint16_t>
 80106d6:	4603      	mov	r3, r0
 80106d8:	461a      	mov	r2, r3
	pdata->identification__module_id =
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	3305      	adds	r3, #5
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80106e8:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	3306      	adds	r3, #6
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	f003 0307 	and.w	r3, r3, #7
 80106f8:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	3307      	adds	r3, #7
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	f003 0307 	and.w	r3, r3, #7
 8010708:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	3308      	adds	r3, #8
 8010712:	781b      	ldrb	r3, [r3, #0]
 8010714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010718:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	3309      	adds	r3, #9
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010728:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	330a      	adds	r3, #10
 8010732:	781b      	ldrb	r3, [r3, #0]
 8010734:	f003 0301 	and.w	r3, r3, #1
 8010738:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	330b      	adds	r3, #11
 8010742:	781b      	ldrb	r3, [r3, #0]
 8010744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010748:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	330c      	adds	r3, #12
 8010752:	781b      	ldrb	r3, [r3, #0]
 8010754:	f003 0301 	and.w	r3, r3, #1
 8010758:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	330d      	adds	r3, #13
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010768:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	330e      	adds	r3, #14
 8010772:	781b      	ldrb	r3, [r3, #0]
 8010774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010778:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	7bda      	ldrb	r2, [r3, #15]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	7c1a      	ldrb	r2, [r3, #16]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	7c5a      	ldrb	r2, [r3, #17]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	7c9a      	ldrb	r2, [r3, #18]
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	7cda      	ldrb	r2, [r3, #19]
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	7d1a      	ldrb	r2, [r3, #20]
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	7d5a      	ldrb	r2, [r3, #21]
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	7d9a      	ldrb	r2, [r3, #22]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	7dda      	ldrb	r2, [r3, #23]
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	7e1a      	ldrb	r2, [r3, #24]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	7e5a      	ldrb	r2, [r3, #25]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	7e9a      	ldrb	r2, [r3, #26]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	7eda      	ldrb	r2, [r3, #27]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	7f1a      	ldrb	r2, [r3, #28]
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	7f5a      	ldrb	r2, [r3, #29]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	7f9a      	ldrb	r2, [r3, #30]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	7fda      	ldrb	r2, [r3, #31]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80108d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3718      	adds	r7, #24
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}

080108e0 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b090      	sub	sp, #64	@ 0x40
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80108ea:	2300      	movs	r3, #0
 80108ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80108f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d10a      	bne.n	801090e <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 80108f8:	f107 020c 	add.w	r2, r7, #12
 80108fc:	2331      	movs	r3, #49	@ 0x31
 80108fe:	f240 110f 	movw	r1, #271	@ 0x10f
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f000 fffe 	bl	8011904 <VL53LX_ReadMulti>
 8010908:	4603      	mov	r3, r0
 801090a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 801090e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8010912:	2b00      	cmp	r3, #0
 8010914:	d109      	bne.n	801092a <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 8010916:	f107 030c 	add.w	r3, r7, #12
 801091a:	683a      	ldr	r2, [r7, #0]
 801091c:	4619      	mov	r1, r3
 801091e:	2031      	movs	r0, #49	@ 0x31
 8010920:	f7ff feb8 	bl	8010694 <VL53LX_i2c_decode_nvm_copy_data>
 8010924:	4603      	mov	r3, r0
 8010926:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801092a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 801092e:	4618      	mov	r0, r3
 8010930:	3740      	adds	r7, #64	@ 0x40
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}

08010936 <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8010936:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801093a:	b0d6      	sub	sp, #344	@ 0x158
 801093c:	af00      	add	r7, sp, #0
 801093e:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8010942:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8010946:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801094a:	4603      	mov	r3, r0
 801094c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8010950:	23f1      	movs	r3, #241	@ 0xf1
 8010952:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	uint32_t sigma_int  = VL53LX_D_002;
 8010956:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801095a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	uint32_t pll_period_mm  = 0;
 801095e:	2300      	movs	r3, #0
 8010960:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	uint64_t tmp0        = 0;
 8010964:	f04f 0200 	mov.w	r2, #0
 8010968:	f04f 0300 	mov.w	r3, #0
 801096c:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	uint64_t tmp1        = 0;
 8010970:	f04f 0200 	mov.w	r2, #0
 8010974:	f04f 0300 	mov.w	r3, #0
 8010978:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
	uint64_t b_minus_amb = 0;
 801097c:	f04f 0200 	mov.w	r2, #0
 8010980:	f04f 0300 	mov.w	r3, #0
 8010984:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	uint64_t VL53LX_p_055   = 0;
 8010988:	f04f 0200 	mov.w	r2, #0
 801098c:	f04f 0300 	mov.w	r3, #0
 8010990:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

	*psigma_est  = VL53LX_D_002;
 8010994:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8010998:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801099c:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 801099e:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f000 8322 	beq.w	8010fec <VL53LX_f_023+0x6b6>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 80109a8:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7fb f9da 	bl	800bd66 <VL53LX_calc_pll_period_mm>
 80109b2:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128



		if (VL53LX_p_028 > VL53LX_p_032)
 80109b6:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80109ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80109be:	429a      	cmp	r2, r3
 80109c0:	d91a      	bls.n	80109f8 <VL53LX_f_023+0xc2>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 80109c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80109c6:	2200      	movs	r2, #0
 80109c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80109cc:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
			(uint64_t)VL53LX_p_032;
 80109d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80109d4:	2200      	movs	r2, #0
 80109d6:	4698      	mov	r8, r3
 80109d8:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 80109da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80109de:	460b      	mov	r3, r1
 80109e0:	ebb3 0308 	subs.w	r3, r3, r8
 80109e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80109e6:	4613      	mov	r3, r2
 80109e8:	eb63 0309 	sbc.w	r3, r3, r9
 80109ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80109ee:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80109f2:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
 80109f6:	e013      	b.n	8010a20 <VL53LX_f_023+0xea>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80109f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80109fc:	2200      	movs	r2, #0
 80109fe:	469a      	mov	sl, r3
 8010a00:	4693      	mov	fp, r2
			(uint64_t)VL53LX_p_028;
 8010a02:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8010a06:	2200      	movs	r2, #0
 8010a08:	461c      	mov	r4, r3
 8010a0a:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8010a0c:	ebba 0304 	subs.w	r3, sl, r4
 8010a10:	633b      	str	r3, [r7, #48]	@ 0x30
 8010a12:	eb6b 0305 	sbc.w	r3, fp, r5
 8010a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a18:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8010a1c:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138



		if (VL53LX_p_007 > VL53LX_p_001)
 8010a20:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8010a24:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d91f      	bls.n	8010a6c <VL53LX_f_023+0x136>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010a2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8010a30:	2200      	movs	r2, #0
 8010a32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010a36:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
			(uint64_t)VL53LX_p_001;
 8010a3a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010a3e:	2200      	movs	r2, #0
 8010a40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010a44:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010a48:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8010a4c:	4623      	mov	r3, r4
 8010a4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8010a52:	4602      	mov	r2, r0
 8010a54:	1a9b      	subs	r3, r3, r2
 8010a56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010a58:	462b      	mov	r3, r5
 8010a5a:	460a      	mov	r2, r1
 8010a5c:	eb63 0302 	sbc.w	r3, r3, r2
 8010a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010a62:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8010a66:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
 8010a6a:	e01e      	b.n	8010aaa <VL53LX_f_023+0x174>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8010a6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010a70:	2200      	movs	r2, #0
 8010a72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010a76:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
			(uint64_t)VL53LX_p_007;
 8010a7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8010a7e:	2200      	movs	r2, #0
 8010a80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010a84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8010a88:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8010a8c:	4623      	mov	r3, r4
 8010a8e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8010a92:	4602      	mov	r2, r0
 8010a94:	1a9b      	subs	r3, r3, r2
 8010a96:	623b      	str	r3, [r7, #32]
 8010a98:	462b      	mov	r3, r5
 8010a9a:	460a      	mov	r2, r1
 8010a9c:	eb63 0302 	sbc.w	r3, r3, r2
 8010aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8010aa2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010aa6:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130



		if (b_minus_amb != 0) {
 8010aaa:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010aae:	4313      	orrs	r3, r2
 8010ab0:	f000 829c 	beq.w	8010fec <VL53LX_f_023+0x6b6>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8010ab4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010ab8:	2200      	movs	r2, #0
 8010aba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010abe:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8010ac2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010acc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8010ad0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8010ad4:	4623      	mov	r3, r4
 8010ad6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8010ada:	4602      	mov	r2, r0
 8010adc:	189b      	adds	r3, r3, r2
 8010ade:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010ae2:	460b      	mov	r3, r1
 8010ae4:	462a      	mov	r2, r5
 8010ae6:	eb42 0303 	adc.w	r3, r2, r3
 8010aea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
					(uint64_t)VL53LX_p_028;
 8010aee:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8010af2:	2200      	movs	r2, #0
 8010af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010af8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8010afc:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8010b00:	4623      	mov	r3, r4
 8010b02:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010b06:	4602      	mov	r2, r0
 8010b08:	189b      	adds	r3, r3, r2
 8010b0a:	61bb      	str	r3, [r7, #24]
 8010b0c:	460b      	mov	r3, r1
 8010b0e:	462a      	mov	r2, r5
 8010b10:	eb42 0303 	adc.w	r3, r2, r3
 8010b14:	61fb      	str	r3, [r7, #28]
 8010b16:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010b1a:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > VL53LX_D_003)
 8010b1e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010b22:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8010b26:	f173 0300 	sbcs.w	r3, r3, #0
 8010b2a:	d305      	bcc.n	8010b38 <VL53LX_f_023+0x202>
				tmp0 = VL53LX_D_003;
 8010b2c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8010b30:	f04f 0300 	mov.w	r3, #0
 8010b34:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 8010b38:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8010b3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010b40:	fb03 f102 	mul.w	r1, r3, r2
 8010b44:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8010b48:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010b4c:	fb02 f303 	mul.w	r3, r2, r3
 8010b50:	18ca      	adds	r2, r1, r3
 8010b52:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010b56:	fba3 1303 	umull	r1, r3, r3, r3
 8010b5a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8010b5e:	460b      	mov	r3, r1
 8010b60:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8010b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b68:	18d3      	adds	r3, r2, r3
 8010b6a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8010b6e:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8010b72:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 8010b76:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp1 = tmp1 << 8;
 8010b7a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8010b7e:	f04f 0000 	mov.w	r0, #0
 8010b82:	f04f 0100 	mov.w	r1, #0
 8010b86:	0219      	lsls	r1, r3, #8
 8010b88:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8010b8c:	0210      	lsls	r0, r2, #8
 8010b8e:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			if (tmp1 > VL53LX_D_004)
 8010b92:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8010b96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010b9a:	d305      	bcc.n	8010ba8 <VL53LX_f_023+0x272>
				tmp1 = VL53LX_D_004;
 8010b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8010ba0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8010ba4:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8010ba8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010bac:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8010bb0:	f7ef fb86 	bl	80002c0 <__aeabi_uldivmod>
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	460b      	mov	r3, r1
 8010bb8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8010bbc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010bc0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8010bc4:	f7ef fb7c 	bl	80002c0 <__aeabi_uldivmod>
 8010bc8:	4602      	mov	r2, r0
 8010bca:	460b      	mov	r3, r1
 8010bcc:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_005)
 8010bd0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8010bd4:	2b80      	cmp	r3, #128	@ 0x80
 8010bd6:	d305      	bcc.n	8010be4 <VL53LX_f_023+0x2ae>
				tmp1 = (uint64_t)VL53LX_D_005;
 8010bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8010bdc:	f04f 037f 	mov.w	r3, #127	@ 0x7f
 8010be0:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp0 = tmp1 * tmp0;
 8010be4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8010be8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8010bec:	fb03 f102 	mul.w	r1, r3, r2
 8010bf0:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8010bf4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010bf8:	fb02 f303 	mul.w	r3, r2, r3
 8010bfc:	4419      	add	r1, r3
 8010bfe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8010c02:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8010c06:	fba2 2303 	umull	r2, r3, r2, r3
 8010c0a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8010c0e:	4613      	mov	r3, r2
 8010c10:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8010c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8010c18:	18cb      	adds	r3, r1, r3
 8010c1a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8010c1e:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8010c22:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010c26:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010c2a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8010c2e:	2200      	movs	r2, #0
 8010c30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010c34:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010c38:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010c42:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010c46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8010c4a:	4623      	mov	r3, r4
 8010c4c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8010c50:	4602      	mov	r2, r0
 8010c52:	189b      	adds	r3, r3, r2
 8010c54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010c58:	460b      	mov	r3, r1
 8010c5a:	462a      	mov	r2, r5
 8010c5c:	eb42 0303 	adc.w	r3, r2, r3
 8010c60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010c64:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8010c68:	2200      	movs	r2, #0
 8010c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010c6c:	67fa      	str	r2, [r7, #124]	@ 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010c6e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8010c72:	4623      	mov	r3, r4
 8010c74:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8010c78:	4602      	mov	r2, r0
 8010c7a:	189b      	adds	r3, r3, r2
 8010c7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8010c7e:	460b      	mov	r3, r1
 8010c80:	462a      	mov	r2, r5
 8010c82:	eb42 0303 	adc.w	r3, r2, r3
 8010c86:	677b      	str	r3, [r7, #116]	@ 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010c88:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010c90:	66fa      	str	r2, [r7, #108]	@ 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010c92:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8010c96:	4623      	mov	r3, r4
 8010c98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8010c9c:	4602      	mov	r2, r0
 8010c9e:	189b      	adds	r3, r3, r2
 8010ca0:	613b      	str	r3, [r7, #16]
 8010ca2:	460b      	mov	r3, r1
 8010ca4:	462a      	mov	r2, r5
 8010ca6:	eb42 0303 	adc.w	r3, r2, r3
 8010caa:	617b      	str	r3, [r7, #20]
 8010cac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010cb0:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_003)
 8010cb4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8010cb8:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8010cbc:	f173 0300 	sbcs.w	r3, r3, #0
 8010cc0:	d305      	bcc.n	8010cce <VL53LX_f_023+0x398>
				tmp1 = (uint64_t)VL53LX_D_003;
 8010cc2:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8010cc6:	f04f 0300 	mov.w	r3, #0
 8010cca:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

			tmp1 = tmp1 << 8;
 8010cce:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8010cd2:	f04f 0000 	mov.w	r0, #0
 8010cd6:	f04f 0100 	mov.w	r1, #0
 8010cda:	0219      	lsls	r1, r3, #8
 8010cdc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8010ce0:	0210      	lsls	r0, r2, #8
 8010ce2:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			tmp0 = tmp1 + tmp0;
 8010ce6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010cea:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8010cee:	1884      	adds	r4, r0, r2
 8010cf0:	60bc      	str	r4, [r7, #8]
 8010cf2:	eb41 0303 	adc.w	r3, r1, r3
 8010cf6:	60fb      	str	r3, [r7, #12]
 8010cf8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010cfc:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010d00:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	da05      	bge.n	8010d14 <VL53LX_f_023+0x3de>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010d08:	f04f 32ff 	mov.w	r2, #4294967295
 8010d0c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010d10:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8010d14:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	d331      	bcc.n	8010d80 <VL53LX_f_023+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010d1c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010d20:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010d24:	f7ef facc 	bl	80002c0 <__aeabi_uldivmod>
 8010d28:	4602      	mov	r2, r0
 8010d2a:	460b      	mov	r3, r1
 8010d2c:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 8010d30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010d34:	2200      	movs	r2, #0
 8010d36:	663b      	str	r3, [r7, #96]	@ 0x60
 8010d38:	667a      	str	r2, [r7, #100]	@ 0x64
 8010d3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010d3e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8010d42:	4622      	mov	r2, r4
 8010d44:	fb02 f203 	mul.w	r2, r2, r3
 8010d48:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010d4c:	4629      	mov	r1, r5
 8010d4e:	fb01 f303 	mul.w	r3, r1, r3
 8010d52:	441a      	add	r2, r3
 8010d54:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010d58:	4621      	mov	r1, r4
 8010d5a:	fba3 1301 	umull	r1, r3, r3, r1
 8010d5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8010d62:	460b      	mov	r3, r1
 8010d64:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8010d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010d6c:	18d3      	adds	r3, r2, r3
 8010d6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8010d72:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8010d76:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010d7a:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010d7e:	e030      	b.n	8010de2 <VL53LX_f_023+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010d80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010d84:	2200      	movs	r2, #0
 8010d86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010d88:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8010d8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010d8e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8010d92:	4622      	mov	r2, r4
 8010d94:	fb02 f203 	mul.w	r2, r2, r3
 8010d98:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010d9c:	4629      	mov	r1, r5
 8010d9e:	fb01 f303 	mul.w	r3, r1, r3
 8010da2:	441a      	add	r2, r3
 8010da4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010da8:	4621      	mov	r1, r4
 8010daa:	fba3 1301 	umull	r1, r3, r3, r1
 8010dae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8010db2:	460b      	mov	r3, r1
 8010db4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8010db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010dbc:	18d3      	adds	r3, r2, r3
 8010dbe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8010dc2:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8010dc6:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010dca:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010dce:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010dd2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010dd6:	f7ef fa73 	bl	80002c0 <__aeabi_uldivmod>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	460b      	mov	r3, r1
 8010dde:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010de2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	da05      	bge.n	8010df6 <VL53LX_f_023+0x4c0>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010dea:	f04f 32ff 	mov.w	r2, #4294967295
 8010dee:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010df2:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8010df6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010dfa:	2b01      	cmp	r3, #1
 8010dfc:	d33d      	bcc.n	8010e7a <VL53LX_f_023+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010dfe:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010e02:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010e06:	f7ef fa5b 	bl	80002c0 <__aeabi_uldivmod>
 8010e0a:	4602      	mov	r2, r0
 8010e0c:	460b      	mov	r3, r1
 8010e0e:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 8010e12:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010e16:	f04f 0200 	mov.w	r2, #0
 8010e1a:	f04f 0300 	mov.w	r3, #0
 8010e1e:	0882      	lsrs	r2, r0, #2
 8010e20:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010e24:	088b      	lsrs	r3, r1, #2
 8010e26:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 8010e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010e2e:	2200      	movs	r2, #0
 8010e30:	653b      	str	r3, [r7, #80]	@ 0x50
 8010e32:	657a      	str	r2, [r7, #84]	@ 0x54
 8010e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010e38:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8010e3c:	4622      	mov	r2, r4
 8010e3e:	fb02 f203 	mul.w	r2, r2, r3
 8010e42:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010e46:	4629      	mov	r1, r5
 8010e48:	fb01 f303 	mul.w	r3, r1, r3
 8010e4c:	4413      	add	r3, r2
 8010e4e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8010e52:	4621      	mov	r1, r4
 8010e54:	fba2 1201 	umull	r1, r2, r2, r1
 8010e58:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8010e5c:	460a      	mov	r2, r1
 8010e5e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8010e62:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8010e66:	4413      	add	r3, r2
 8010e68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8010e6c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8010e70:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010e74:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010e78:	e03c      	b.n	8010ef4 <VL53LX_f_023+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010e7e:	2200      	movs	r2, #0
 8010e80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e82:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8010e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010e88:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8010e8c:	4622      	mov	r2, r4
 8010e8e:	fb02 f203 	mul.w	r2, r2, r3
 8010e92:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010e96:	4629      	mov	r1, r5
 8010e98:	fb01 f303 	mul.w	r3, r1, r3
 8010e9c:	4413      	add	r3, r2
 8010e9e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8010ea2:	4621      	mov	r1, r4
 8010ea4:	fba2 1201 	umull	r1, r2, r2, r1
 8010ea8:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010eac:	460a      	mov	r2, r1
 8010eae:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8010eb2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8010eb6:	4413      	add	r3, r2
 8010eb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8010ebc:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 8010ec0:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010ec4:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010ec8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010ecc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010ed0:	f7ef f9f6 	bl	80002c0 <__aeabi_uldivmod>
 8010ed4:	4602      	mov	r2, r0
 8010ed6:	460b      	mov	r3, r1
 8010ed8:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 8010edc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010ee0:	f04f 0200 	mov.w	r2, #0
 8010ee4:	f04f 0300 	mov.w	r3, #0
 8010ee8:	0882      	lsrs	r2, r0, #2
 8010eea:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010eee:	088b      	lsrs	r3, r1, #2
 8010ef0:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010ef4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	da05      	bge.n	8010f08 <VL53LX_f_023+0x5d2>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010efc:	f04f 32ff 	mov.w	r2, #4294967295
 8010f00:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010f04:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp0 = tmp0 >> 2;
 8010f08:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010f0c:	f04f 0200 	mov.w	r2, #0
 8010f10:	f04f 0300 	mov.w	r3, #0
 8010f14:	0882      	lsrs	r2, r0, #2
 8010f16:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010f1a:	088b      	lsrs	r3, r1, #2
 8010f1c:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010f20:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010f24:	2b01      	cmp	r3, #1
 8010f26:	d305      	bcc.n	8010f34 <VL53LX_f_023+0x5fe>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010f28:	f04f 32ff 	mov.w	r2, #4294967295
 8010f2c:	f04f 0300 	mov.w	r3, #0
 8010f30:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8010f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010f38:	2200      	movs	r2, #0
 8010f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8010f3c:	647a      	str	r2, [r7, #68]	@ 0x44
 8010f3e:	f04f 0200 	mov.w	r2, #0
 8010f42:	f04f 0300 	mov.w	r3, #0
 8010f46:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8010f4a:	4629      	mov	r1, r5
 8010f4c:	01cb      	lsls	r3, r1, #7
 8010f4e:	4621      	mov	r1, r4
 8010f50:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8010f54:	4621      	mov	r1, r4
 8010f56:	01ca      	lsls	r2, r1, #7
 8010f58:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = tmp1 * tmp1;
 8010f5c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8010f60:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8010f64:	fb03 f202 	mul.w	r2, r3, r2
 8010f68:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8010f6c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8010f70:	fb01 f303 	mul.w	r3, r1, r3
 8010f74:	441a      	add	r2, r3
 8010f76:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8010f7a:	fba3 1303 	umull	r1, r3, r3, r3
 8010f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010f82:	460b      	mov	r3, r1
 8010f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f8c:	18d3      	adds	r3, r2, r3
 8010f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010f92:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8010f96:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 8010f9a:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp0 = tmp0 + tmp1;
 8010f9e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010fa2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8010fa6:	1884      	adds	r4, r0, r2
 8010fa8:	603c      	str	r4, [r7, #0]
 8010faa:	eb41 0303 	adc.w	r3, r1, r3
 8010fae:	607b      	str	r3, [r7, #4]
 8010fb0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010fb4:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010fb8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010fbc:	2b01      	cmp	r3, #1
 8010fbe:	d305      	bcc.n	8010fcc <VL53LX_f_023+0x696>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8010fc4:	f04f 0300 	mov.w	r3, #0
 8010fc8:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 8010fcc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7fa fd61 	bl	800ba98 <VL53LX_isqrt>
 8010fd6:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8010fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010fde:	b29a      	uxth	r2, r3
 8010fe0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8010fe4:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
		}

	}

	return status;
 8010fec:	f997 3157 	ldrsb.w	r3, [r7, #343]	@ 0x157
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010ffc <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b086      	sub	sp, #24
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011004:	2300      	movs	r3, #0
 8011006:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	3318      	adds	r3, #24
 801100c:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 801100e:	2300      	movs	r3, #0
 8011010:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d107      	bne.n	801102a <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 801101a:	f64e 2160 	movw	r1, #60000	@ 0xea60
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f000 f88b 	bl	801113a <VL53LX_poll_for_range_completion>
 8011024:	4603      	mov	r3, r0
 8011026:	75fb      	strb	r3, [r7, #23]
 8011028:	e01b      	b.n	8011062 <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 801102a:	2300      	movs	r3, #0
 801102c:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 801102e:	e011      	b.n	8011054 <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 8011030:	f107 030f 	add.w	r3, r7, #15
 8011034:	4619      	mov	r1, r3
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f000 f819 	bl	801106e <VL53LX_is_new_data_ready>
 801103c:	4603      	mov	r3, r0
 801103e:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 8011040:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d105      	bne.n	8011054 <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 8011048:	2101      	movs	r1, #1
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 fd72 	bl	8011b34 <VL53LX_WaitMs>
 8011050:	4603      	mov	r3, r0
 8011052:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8011054:	7bfb      	ldrb	r3, [r7, #15]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d103      	bne.n	8011062 <VL53LX_wait_for_test_completion+0x66>
 801105a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d0e6      	beq.n	8011030 <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8011062:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011066:	4618      	mov	r0, r3
 8011068:	3718      	adds	r7, #24
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}

0801106e <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 801106e:	b580      	push	{r7, lr}
 8011070:	b086      	sub	sp, #24
 8011072:	af00      	add	r7, sp, #0
 8011074:	6078      	str	r0, [r7, #4]
 8011076:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011078:	2300      	movs	r3, #0
 801107a:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	3318      	adds	r3, #24
 8011080:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8011082:	2300      	movs	r3, #0
 8011084:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8011086:	2300      	movs	r3, #0
 8011088:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 801108a:	2300      	movs	r3, #0
 801108c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
	gpio__mux_active_high_hv =
 8011094:	f003 0310 	and.w	r3, r3, #16
 8011098:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801109a:	7bfb      	ldrb	r3, [r7, #15]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d102      	bne.n	80110a6 <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 80110a0:	2301      	movs	r3, #1
 80110a2:	75fb      	strb	r3, [r7, #23]
 80110a4:	e001      	b.n	80110aa <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 80110a6:	2300      	movs	r3, #0
 80110a8:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 80110aa:	f107 030e 	add.w	r3, r7, #14
 80110ae:	461a      	mov	r2, r3
 80110b0:	2131      	movs	r1, #49	@ 0x31
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f000 fcb8 	bl	8011a28 <VL53LX_RdByte>
 80110b8:	4603      	mov	r3, r0
 80110ba:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 80110bc:	7bbb      	ldrb	r3, [r7, #14]
 80110be:	f003 0201 	and.w	r2, r3, #1
 80110c2:	7dfb      	ldrb	r3, [r7, #23]
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d103      	bne.n	80110d0 <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	2201      	movs	r2, #1
 80110cc:	701a      	strb	r2, [r3, #0]
 80110ce:	e002      	b.n	80110d6 <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	2200      	movs	r2, #0
 80110d4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80110d6:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80110da:	4618      	mov	r0, r3
 80110dc:	3718      	adds	r7, #24
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}

080110e2 <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 80110e2:	b580      	push	{r7, lr}
 80110e4:	b086      	sub	sp, #24
 80110e6:	af02      	add	r7, sp, #8
 80110e8:	6078      	str	r0, [r7, #4]
 80110ea:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80110ec:	2300      	movs	r3, #0
 80110ee:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 80110f0:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f000 fd2d 	bl	8011b54 <VL53LX_WaitUs>
 80110fa:	4603      	mov	r3, r0
 80110fc:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 80110fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d10b      	bne.n	801111e <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 8011106:	2301      	movs	r3, #1
 8011108:	9301      	str	r3, [sp, #4]
 801110a:	2301      	movs	r3, #1
 801110c:	9300      	str	r3, [sp, #0]
 801110e:	2301      	movs	r3, #1
 8011110:	22e5      	movs	r2, #229	@ 0xe5
 8011112:	6839      	ldr	r1, [r7, #0]
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f000 fd35 	bl	8011b84 <VL53LX_WaitValueMaskEx>
 801111a:	4603      	mov	r3, r0
 801111c:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 801111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d103      	bne.n	801112e <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 8011126:	2103      	movs	r1, #3
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f7f6 fc0f 	bl	800794c <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 801112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011132:	4618      	mov	r0, r3
 8011134:	3710      	adds	r7, #16
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}

0801113a <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 801113a:	b580      	push	{r7, lr}
 801113c:	b088      	sub	sp, #32
 801113e:	af02      	add	r7, sp, #8
 8011140:	6078      	str	r0, [r7, #4]
 8011142:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011144:	2300      	movs	r3, #0
 8011146:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	3318      	adds	r3, #24
 801114c:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 801114e:	2300      	movs	r3, #0
 8011150:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8011152:	2300      	movs	r3, #0
 8011154:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8011156:	693b      	ldr	r3, [r7, #16]
 8011158:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
	gpio__mux_active_high_hv =
 801115c:	f003 0310 	and.w	r3, r3, #16
 8011160:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8011162:	7bfb      	ldrb	r3, [r7, #15]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d102      	bne.n	801116e <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8011168:	2301      	movs	r3, #1
 801116a:	75fb      	strb	r3, [r7, #23]
 801116c:	e001      	b.n	8011172 <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 801116e:	2300      	movs	r3, #0
 8011170:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 8011172:	7dfb      	ldrb	r3, [r7, #23]
 8011174:	2201      	movs	r2, #1
 8011176:	9201      	str	r2, [sp, #4]
 8011178:	2201      	movs	r2, #1
 801117a:	9200      	str	r2, [sp, #0]
 801117c:	2231      	movs	r2, #49	@ 0x31
 801117e:	6839      	ldr	r1, [r7, #0]
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f000 fcff 	bl	8011b84 <VL53LX_WaitValueMaskEx>
 8011186:	4603      	mov	r3, r0
 8011188:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 801118a:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 801118e:	4618      	mov	r0, r3
 8011190:	3718      	adds	r7, #24
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}

08011196 <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8011196:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801119a:	b0c0      	sub	sp, #256	@ 0x100
 801119c:	af00      	add	r7, sp, #0
 801119e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 80111a2:	4618      	mov	r0, r3
 80111a4:	460b      	mov	r3, r1
 80111a6:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 80111aa:	4613      	mov	r3, r2
 80111ac:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
 80111b0:	4603      	mov	r3, r0
 80111b2:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf



	VL53LX_Error status = VL53LX_ERROR_NONE;
 80111b6:	2300      	movs	r3, #0
 80111b8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf

	uint8_t row = 0;
 80111bc:	2300      	movs	r3, #0
 80111be:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
	uint8_t col = 0;
 80111c2:	2300      	movs	r3, #0
 80111c4:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd



	int16_t  bound_l_x = 0;
 80111c8:	2300      	movs	r3, #0
 80111ca:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
	int16_t  bound_r_x = 0;
 80111ce:	2300      	movs	r3, #0
 80111d0:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
	int16_t  bound_u_y = 0;
 80111d4:	2300      	movs	r3, #0
 80111d6:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
	int16_t  bound_d_y = 0;
 80111da:	2300      	movs	r3, #0
 80111dc:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

	int64_t xtalk_rate_ll = 0;
 80111e0:	f04f 0200 	mov.w	r2, #0
 80111e4:	f04f 0300 	mov.w	r3, #0
 80111e8:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
	int64_t xtalk_rate_ur = 0;
 80111ec:	f04f 0200 	mov.w	r2, #0
 80111f0:	f04f 0300 	mov.w	r3, #0
 80111f4:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8

	int64_t xtalk_avg = 0;
 80111f8:	f04f 0200 	mov.w	r2, #0
 80111fc:	f04f 0300 	mov.w	r3, #0
 8011200:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0





	if (status == VL53LX_ERROR_NONE) {
 8011204:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8011208:	2b00      	cmp	r3, #0
 801120a:	d108      	bne.n	801121e <VL53LX_f_032+0x88>
		VL53LX_decode_row_col(
 801120c:	f107 02dd 	add.w	r2, r7, #221	@ 0xdd
 8011210:	f107 01de 	add.w	r1, r7, #222	@ 0xde
 8011214:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 8011218:	4618      	mov	r0, r3
 801121a:	f7fb f81f 	bl	800c25c <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 801121e:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8011222:	2b00      	cmp	r3, #0
 8011224:	d162      	bne.n	80112ec <VL53LX_f_032+0x156>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8011226:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 801122a:	091b      	lsrs	r3, r3, #4
 801122c:	b2db      	uxtb	r3, r3
 801122e:	f003 0301 	and.w	r3, r3, #1
 8011232:	2b00      	cmp	r3, #0
 8011234:	d00d      	beq.n	8011252 <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 8011236:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 801123a:	461a      	mov	r2, r3
 801123c:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8011240:	095b      	lsrs	r3, r3, #5
 8011242:	b2db      	uxtb	r3, r3
 8011244:	1ad3      	subs	r3, r2, r3
 8011246:	b29b      	uxth	r3, r3
 8011248:	3b01      	subs	r3, #1
 801124a:	b29b      	uxth	r3, r3
 801124c:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 8011250:	e00a      	b.n	8011268 <VL53LX_f_032+0xd2>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8011252:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8011256:	461a      	mov	r2, r3
 8011258:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 801125c:	095b      	lsrs	r3, r3, #5
 801125e:	b2db      	uxtb	r3, r3
 8011260:	1ad3      	subs	r3, r2, r3
 8011262:	b29b      	uxth	r3, r3
 8011264:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8011268:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 801126c:	461a      	mov	r2, r3
 801126e:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8011272:	095b      	lsrs	r3, r3, #5
 8011274:	b2db      	uxtb	r3, r3
 8011276:	4413      	add	r3, r2
 8011278:	b29b      	uxth	r3, r3
 801127a:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 801127e:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8011282:	f003 0301 	and.w	r3, r3, #1
 8011286:	2b00      	cmp	r3, #0
 8011288:	d011      	beq.n	80112ae <VL53LX_f_032+0x118>
			bound_d_y = (int16_t) row -
 801128a:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 801128e:	4619      	mov	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8011290:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8011294:	f003 020f 	and.w	r2, r3, #15
 8011298:	0fd3      	lsrs	r3, r2, #31
 801129a:	4413      	add	r3, r2
 801129c:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 801129e:	b29b      	uxth	r3, r3
 80112a0:	1acb      	subs	r3, r1, r3
 80112a2:	b29b      	uxth	r3, r3
 80112a4:	3b01      	subs	r3, #1
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
 80112ac:	e00f      	b.n	80112ce <VL53LX_f_032+0x138>
		else
			bound_d_y = (int16_t) row -
 80112ae:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 80112b2:	4619      	mov	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 80112b4:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 80112b8:	f003 020f 	and.w	r2, r3, #15
 80112bc:	0fd3      	lsrs	r3, r2, #31
 80112be:	4413      	add	r3, r2
 80112c0:	105b      	asrs	r3, r3, #1
 80112c2:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 80112c4:	b29b      	uxth	r3, r3
 80112c6:	440b      	add	r3, r1
 80112c8:	b29b      	uxth	r3, r3
 80112ca:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

		bound_u_y = (int16_t) row +
 80112ce:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 80112d2:	4619      	mov	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 80112d4:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 80112d8:	f003 020f 	and.w	r2, r3, #15
 80112dc:	0fd3      	lsrs	r3, r2, #31
 80112de:	4413      	add	r3, r2
 80112e0:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 80112e2:	b29b      	uxth	r3, r3
 80112e4:	440b      	add	r3, r1
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 80112ec:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d133      	bne.n	801135c <VL53LX_f_032+0x1c6>
		bound_l_x =  (2 * bound_l_x) - 15 +
 80112f4:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 80112f8:	b29a      	uxth	r2, r3
 80112fa:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 80112fe:	4413      	add	r3, r2
 8011300:	b29b      	uxth	r3, r3
 8011302:	005b      	lsls	r3, r3, #1
 8011304:	b29b      	uxth	r3, r3
 8011306:	3b0f      	subs	r3, #15
 8011308:	b29b      	uxth	r3, r3
 801130a:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 801130e:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8011312:	b29a      	uxth	r2, r3
 8011314:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8011318:	4413      	add	r3, r2
 801131a:	b29b      	uxth	r3, r3
 801131c:	005b      	lsls	r3, r3, #1
 801131e:	b29b      	uxth	r3, r3
 8011320:	3b0f      	subs	r3, #15
 8011322:	b29b      	uxth	r3, r3
 8011324:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8011328:	f997 3120 	ldrsb.w	r3, [r7, #288]	@ 0x120
 801132c:	b29a      	uxth	r2, r3
 801132e:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 8011332:	4413      	add	r3, r2
 8011334:	b29b      	uxth	r3, r3
 8011336:	005b      	lsls	r3, r3, #1
 8011338:	b29b      	uxth	r3, r3
 801133a:	3b0f      	subs	r3, #15
 801133c:	b29b      	uxth	r3, r3
 801133e:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8011342:	f997 3120 	ldrsb.w	r3, [r7, #288]	@ 0x120
 8011346:	b29a      	uxth	r2, r3
 8011348:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 801134c:	4413      	add	r3, r2
 801134e:	b29b      	uxth	r3, r3
 8011350:	005b      	lsls	r3, r3, #1
 8011352:	b29b      	uxth	r3, r3
 8011354:	3b0f      	subs	r3, #15
 8011356:	b29b      	uxth	r3, r3
 8011358:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 801135c:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8011360:	2b00      	cmp	r3, #0
 8011362:	f040 8135 	bne.w	80115d0 <VL53LX_f_032+0x43a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011366:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 801136a:	17da      	asrs	r2, r3, #31
 801136c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011370:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8011374:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 8011378:	17da      	asrs	r2, r3, #31
 801137a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801137e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011382:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8011386:	460b      	mov	r3, r1
 8011388:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801138c:	fb02 f203 	mul.w	r2, r2, r3
 8011390:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011394:	e9c7 0130 	strd	r0, r1, [r7, #192]	@ 0xc0
 8011398:	4601      	mov	r1, r0
 801139a:	fb01 f303 	mul.w	r3, r1, r3
 801139e:	4413      	add	r3, r2
 80113a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80113a4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80113a8:	fba2 4501 	umull	r4, r5, r2, r1
 80113ac:	442b      	add	r3, r5
 80113ae:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80113b0:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	@ 0xf8
 80113b4:	17da      	asrs	r2, r3, #31
 80113b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80113ba:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
					((int64_t)ygradient));
 80113be:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 80113c2:	17da      	asrs	r2, r3, #31
 80113c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80113c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80113cc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80113d0:	460b      	mov	r3, r1
 80113d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80113d6:	fb02 f203 	mul.w	r2, r2, r3
 80113da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113de:	e9c7 012c 	strd	r0, r1, [r7, #176]	@ 0xb0
 80113e2:	4601      	mov	r1, r0
 80113e4:	fb01 f303 	mul.w	r3, r1, r3
 80113e8:	4413      	add	r3, r2
 80113ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80113ee:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80113f2:	fba2 8901 	umull	r8, r9, r2, r1
 80113f6:	444b      	add	r3, r9
 80113f8:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80113fa:	eb14 0308 	adds.w	r3, r4, r8
 80113fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011400:	eb45 0309 	adc.w	r3, r5, r9
 8011404:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011406:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 801140a:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 801140e:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8011412:	1c51      	adds	r1, r2, #1
 8011414:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8011418:	f143 0300 	adc.w	r3, r3, #0
 801141c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011420:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8011424:	460b      	mov	r3, r1
 8011426:	0fdb      	lsrs	r3, r3, #31
 8011428:	2200      	movs	r2, #0
 801142a:	643b      	str	r3, [r7, #64]	@ 0x40
 801142c:	647a      	str	r2, [r7, #68]	@ 0x44
 801142e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8011432:	4623      	mov	r3, r4
 8011434:	4602      	mov	r2, r0
 8011436:	189b      	adds	r3, r3, r2
 8011438:	63bb      	str	r3, [r7, #56]	@ 0x38
 801143a:	460b      	mov	r3, r1
 801143c:	462a      	mov	r2, r5
 801143e:	eb42 0303 	adc.w	r3, r2, r3
 8011442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011444:	f04f 0200 	mov.w	r2, #0
 8011448:	f04f 0300 	mov.w	r3, #0
 801144c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8011450:	4621      	mov	r1, r4
 8011452:	084a      	lsrs	r2, r1, #1
 8011454:	4629      	mov	r1, r5
 8011456:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801145a:	4629      	mov	r1, r5
 801145c:	104b      	asrs	r3, r1, #1
 801145e:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8011462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011466:	2200      	movs	r2, #0
 8011468:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801146c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011470:	f04f 0000 	mov.w	r0, #0
 8011474:	f04f 0100 	mov.w	r1, #0
 8011478:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801147c:	462b      	mov	r3, r5
 801147e:	0099      	lsls	r1, r3, #2
 8011480:	4623      	mov	r3, r4
 8011482:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8011486:	4623      	mov	r3, r4
 8011488:	0098      	lsls	r0, r3, #2
 801148a:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 801148e:	1814      	adds	r4, r2, r0
 8011490:	633c      	str	r4, [r7, #48]	@ 0x30
 8011492:	414b      	adcs	r3, r1
 8011494:	637b      	str	r3, [r7, #52]	@ 0x34
 8011496:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 801149a:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 801149e:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	@ 0xfc
 80114a2:	17da      	asrs	r2, r3, #31
 80114a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80114a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80114ac:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 80114b0:	17da      	asrs	r2, r3, #31
 80114b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80114b6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80114ba:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80114be:	462b      	mov	r3, r5
 80114c0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80114c4:	4642      	mov	r2, r8
 80114c6:	fb02 f203 	mul.w	r2, r2, r3
 80114ca:	464b      	mov	r3, r9
 80114cc:	4621      	mov	r1, r4
 80114ce:	fb01 f303 	mul.w	r3, r1, r3
 80114d2:	4413      	add	r3, r2
 80114d4:	4622      	mov	r2, r4
 80114d6:	4641      	mov	r1, r8
 80114d8:	fba2 ab01 	umull	sl, fp, r2, r1
 80114dc:	445b      	add	r3, fp
 80114de:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80114e0:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	@ 0xfa
 80114e4:	17da      	asrs	r2, r3, #31
 80114e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80114e8:	67fa      	str	r2, [r7, #124]	@ 0x7c
			((int64_t)ygradient));
 80114ea:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 80114ee:	17da      	asrs	r2, r3, #31
 80114f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80114f2:	677a      	str	r2, [r7, #116]	@ 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80114f4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80114f8:	462b      	mov	r3, r5
 80114fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80114fe:	4642      	mov	r2, r8
 8011500:	fb02 f203 	mul.w	r2, r2, r3
 8011504:	464b      	mov	r3, r9
 8011506:	4621      	mov	r1, r4
 8011508:	fb01 f303 	mul.w	r3, r1, r3
 801150c:	4413      	add	r3, r2
 801150e:	4622      	mov	r2, r4
 8011510:	4641      	mov	r1, r8
 8011512:	fba2 1201 	umull	r1, r2, r2, r1
 8011516:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801151a:	460a      	mov	r2, r1
 801151c:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8011520:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011524:	4413      	add	r3, r2
 8011526:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 801152a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801152e:	460b      	mov	r3, r1
 8011530:	eb1a 0303 	adds.w	r3, sl, r3
 8011534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011536:	4613      	mov	r3, r2
 8011538:	eb4b 0303 	adc.w	r3, fp, r3
 801153c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801153e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8011542:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8011546:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 801154a:	1c51      	adds	r1, r2, #1
 801154c:	66b9      	str	r1, [r7, #104]	@ 0x68
 801154e:	f143 0300 	adc.w	r3, r3, #0
 8011552:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011554:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8011558:	460b      	mov	r3, r1
 801155a:	0fdb      	lsrs	r3, r3, #31
 801155c:	2200      	movs	r2, #0
 801155e:	623b      	str	r3, [r7, #32]
 8011560:	627a      	str	r2, [r7, #36]	@ 0x24
 8011562:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8011566:	4623      	mov	r3, r4
 8011568:	4602      	mov	r2, r0
 801156a:	189b      	adds	r3, r3, r2
 801156c:	61bb      	str	r3, [r7, #24]
 801156e:	460b      	mov	r3, r1
 8011570:	462a      	mov	r2, r5
 8011572:	eb42 0303 	adc.w	r3, r2, r3
 8011576:	61fb      	str	r3, [r7, #28]
 8011578:	f04f 0200 	mov.w	r2, #0
 801157c:	f04f 0300 	mov.w	r3, #0
 8011580:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011584:	4621      	mov	r1, r4
 8011586:	084a      	lsrs	r2, r1, #1
 8011588:	4629      	mov	r1, r5
 801158a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801158e:	4629      	mov	r1, r5
 8011590:	104b      	asrs	r3, r1, #1
 8011592:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8011596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801159a:	2200      	movs	r2, #0
 801159c:	663b      	str	r3, [r7, #96]	@ 0x60
 801159e:	667a      	str	r2, [r7, #100]	@ 0x64
 80115a0:	f04f 0200 	mov.w	r2, #0
 80115a4:	f04f 0300 	mov.w	r3, #0
 80115a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80115ac:	4629      	mov	r1, r5
 80115ae:	008b      	lsls	r3, r1, #2
 80115b0:	4621      	mov	r1, r4
 80115b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80115b6:	4621      	mov	r1, r4
 80115b8:	008a      	lsls	r2, r1, #2
 80115ba:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80115be:	1884      	adds	r4, r0, r2
 80115c0:	613c      	str	r4, [r7, #16]
 80115c2:	eb41 0303 	adc.w	r3, r1, r3
 80115c6:	617b      	str	r3, [r7, #20]
 80115c8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80115cc:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 80115d0:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d132      	bne.n	801163e <VL53LX_f_032+0x4a8>
		xtalk_avg = do_division_s(
 80115d8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 80115dc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 80115e0:	1884      	adds	r4, r0, r2
 80115e2:	65bc      	str	r4, [r7, #88]	@ 0x58
 80115e4:	eb41 0303 	adc.w	r3, r1, r3
 80115e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80115ea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80115ee:	460b      	mov	r3, r1
 80115f0:	3301      	adds	r3, #1
 80115f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80115f4:	4613      	mov	r3, r2
 80115f6:	f143 0300 	adc.w	r3, r3, #0
 80115fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80115fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8011600:	460b      	mov	r3, r1
 8011602:	0fdb      	lsrs	r3, r3, #31
 8011604:	2200      	movs	r2, #0
 8011606:	60bb      	str	r3, [r7, #8]
 8011608:	60fa      	str	r2, [r7, #12]
 801160a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801160e:	4623      	mov	r3, r4
 8011610:	4602      	mov	r2, r0
 8011612:	189b      	adds	r3, r3, r2
 8011614:	603b      	str	r3, [r7, #0]
 8011616:	460b      	mov	r3, r1
 8011618:	462a      	mov	r2, r5
 801161a:	eb42 0303 	adc.w	r3, r2, r3
 801161e:	607b      	str	r3, [r7, #4]
 8011620:	f04f 0200 	mov.w	r2, #0
 8011624:	f04f 0300 	mov.w	r3, #0
 8011628:	e9d7 4500 	ldrd	r4, r5, [r7]
 801162c:	4621      	mov	r1, r4
 801162e:	084a      	lsrs	r2, r1, #1
 8011630:	4629      	mov	r1, r5
 8011632:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011636:	4629      	mov	r1, r5
 8011638:	104b      	asrs	r3, r1, #1
 801163a:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 801163e:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 8011642:	2b00      	cmp	r3, #0
 8011644:	d109      	bne.n	801165a <VL53LX_f_032+0x4c4>
		if (xtalk_avg < 0)
 8011646:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 801164a:	2b00      	cmp	r3, #0
 801164c:	da05      	bge.n	801165a <VL53LX_f_032+0x4c4>
			xtalk_avg = 0;
 801164e:	f04f 0200 	mov.w	r2, #0
 8011652:	f04f 0300 	mov.w	r3, #0
 8011656:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 801165a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801165e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011662:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8011664:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
}
 8011668:	4618      	mov	r0, r3
 801166a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801166e:	46bd      	mov	sp, r7
 8011670:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011674 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8011674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011678:	b09a      	sub	sp, #104	@ 0x68
 801167a:	af00      	add	r7, sp, #0
 801167c:	6478      	str	r0, [r7, #68]	@ 0x44
 801167e:	6439      	str	r1, [r7, #64]	@ 0x40
 8011680:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011682:	63bb      	str	r3, [r7, #56]	@ 0x38


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8011684:	2300      	movs	r3, #0
 8011686:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	uint64_t xtalk_events_per_spad = 0;
 801168a:	f04f 0200 	mov.w	r2, #0
 801168e:	f04f 0300 	mov.w	r3, #0
 8011692:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_total_events = 0;
 8011696:	f04f 0200 	mov.w	r2, #0
 801169a:	f04f 0300 	mov.w	r3, #0
 801169e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	uint64_t xtalk_temp_bin = 0;
 80116a2:	f04f 0200 	mov.w	r2, #0
 80116a6:	f04f 0300 	mov.w	r3, #0
 80116aa:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	uint8_t  i = 0;
 80116ae:	2300      	movs	r3, #0
 80116b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80116b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116b6:	2200      	movs	r2, #0
 80116b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80116ba:	637a      	str	r2, [r7, #52]	@ 0x34
 80116bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80116c2:	2200      	movs	r2, #0
 80116c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80116c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80116c8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80116cc:	460b      	mov	r3, r1
 80116ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80116d0:	fb02 f203 	mul.w	r2, r2, r3
 80116d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116d6:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 80116da:	4601      	mov	r1, r0
 80116dc:	fb01 f303 	mul.w	r3, r1, r3
 80116e0:	4413      	add	r3, r2
 80116e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80116e6:	fba2 4501 	umull	r4, r5, r2, r1
 80116ea:	442b      	add	r3, r5
 80116ec:	461d      	mov	r5, r3
 80116ee:	f514 73fa 	adds.w	r3, r4, #500	@ 0x1f4
 80116f2:	623b      	str	r3, [r7, #32]
 80116f4:	f145 0300 	adc.w	r3, r5, #0
 80116f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80116fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80116fe:	f04f 0300 	mov.w	r3, #0
 8011702:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011706:	f7ee fddb 	bl	80002c0 <__aeabi_uldivmod>
 801170a:	4602      	mov	r2, r0
 801170c:	460b      	mov	r3, r1
 801170e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8011712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011714:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8011718:	b29b      	uxth	r3, r3
 801171a:	2200      	movs	r2, #0
 801171c:	61bb      	str	r3, [r7, #24]
 801171e:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 8011720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011722:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011726:	4622      	mov	r2, r4
 8011728:	fb02 f203 	mul.w	r2, r2, r3
 801172c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801172e:	4629      	mov	r1, r5
 8011730:	fb01 f303 	mul.w	r3, r1, r3
 8011734:	4413      	add	r3, r2
 8011736:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011738:	4621      	mov	r1, r4
 801173a:	fba2 ab01 	umull	sl, fp, r2, r1
 801173e:	445b      	add	r3, fp
 8011740:	469b      	mov	fp, r3
 8011742:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 8011746:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 801174a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801174e:	f04f 0200 	mov.w	r2, #0
 8011752:	f04f 0300 	mov.w	r3, #0
 8011756:	0a02      	lsrs	r2, r0, #8
 8011758:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801175c:	0a0b      	lsrs	r3, r1, #8
 801175e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8011762:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8011766:	f512 6180 	adds.w	r1, r2, #1024	@ 0x400
 801176a:	6139      	str	r1, [r7, #16]
 801176c:	f143 0300 	adc.w	r3, r3, #0
 8011770:	617b      	str	r3, [r7, #20]
 8011772:	f04f 0200 	mov.w	r2, #0
 8011776:	f04f 0300 	mov.w	r3, #0
 801177a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801177e:	4621      	mov	r1, r4
 8011780:	0aca      	lsrs	r2, r1, #11
 8011782:	4629      	mov	r1, r5
 8011784:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8011788:	4629      	mov	r1, r5
 801178a:	0acb      	lsrs	r3, r1, #11
 801178c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 8011790:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8011794:	2b01      	cmp	r3, #1
 8011796:	d305      	bcc.n	80117a4 <VL53LX_f_033+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8011798:	f04f 32ff 	mov.w	r2, #4294967295
 801179c:	f04f 0300 	mov.w	r3, #0
 80117a0:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 80117a4:	2300      	movs	r3, #0
 80117a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80117aa:	e041      	b.n	8011830 <VL53LX_f_033+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 80117ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80117b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80117b2:	3302      	adds	r3, #2
 80117b4:	009b      	lsls	r3, r3, #2
 80117b6:	4413      	add	r3, r2
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	2200      	movs	r2, #0
 80117bc:	60bb      	str	r3, [r7, #8]
 80117be:	60fa      	str	r2, [r7, #12]
 80117c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80117c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80117c6:	4622      	mov	r2, r4
 80117c8:	fb02 f203 	mul.w	r2, r2, r3
 80117cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80117ce:	4629      	mov	r1, r5
 80117d0:	fb01 f303 	mul.w	r3, r1, r3
 80117d4:	4413      	add	r3, r2
 80117d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80117d8:	4621      	mov	r1, r4
 80117da:	fba2 8901 	umull	r8, r9, r2, r1
 80117de:	444b      	add	r3, r9
 80117e0:	4699      	mov	r9, r3
 80117e2:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
 80117e6:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80117ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80117ee:	f512 7100 	adds.w	r1, r2, #512	@ 0x200
 80117f2:	6039      	str	r1, [r7, #0]
 80117f4:	f143 0300 	adc.w	r3, r3, #0
 80117f8:	607b      	str	r3, [r7, #4]
 80117fa:	f04f 0200 	mov.w	r2, #0
 80117fe:	f04f 0300 	mov.w	r3, #0
 8011802:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011806:	4621      	mov	r1, r4
 8011808:	0a8a      	lsrs	r2, r1, #10
 801180a:	4629      	mov	r1, r5
 801180c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8011810:	4629      	mov	r1, r5
 8011812:	0a8b      	lsrs	r3, r1, #10
 8011814:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8011818:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801181c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801181e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011820:	3206      	adds	r2, #6
 8011822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8011826:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801182a:	3301      	adds	r3, #1
 801182c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011832:	7a9b      	ldrb	r3, [r3, #10]
 8011834:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8011838:	429a      	cmp	r2, r3
 801183a:	d3b7      	bcc.n	80117ac <VL53LX_f_033+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 801183c:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
}
 8011840:	4618      	mov	r0, r3
 8011842:	3768      	adds	r7, #104	@ 0x68
 8011844:	46bd      	mov	sp, r7
 8011846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801184a <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 801184a:	b580      	push	{r7, lr}
 801184c:	b084      	sub	sp, #16
 801184e:	af00      	add	r7, sp, #0
 8011850:	60f8      	str	r0, [r7, #12]
 8011852:	60b9      	str	r1, [r7, #8]
 8011854:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	68db      	ldr	r3, [r3, #12]
 801185a:	68fa      	ldr	r2, [r7, #12]
 801185c:	8910      	ldrh	r0, [r2, #8]
 801185e:	687a      	ldr	r2, [r7, #4]
 8011860:	b292      	uxth	r2, r2
 8011862:	68b9      	ldr	r1, [r7, #8]
 8011864:	4798      	blx	r3
 8011866:	4603      	mov	r3, r0
}
 8011868:	4618      	mov	r0, r3
 801186a:	3710      	adds	r7, #16
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}

08011870 <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8011870:	b580      	push	{r7, lr}
 8011872:	b084      	sub	sp, #16
 8011874:	af00      	add	r7, sp, #0
 8011876:	60f8      	str	r0, [r7, #12]
 8011878:	60b9      	str	r1, [r7, #8]
 801187a:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	691b      	ldr	r3, [r3, #16]
 8011880:	68fa      	ldr	r2, [r7, #12]
 8011882:	8910      	ldrh	r0, [r2, #8]
 8011884:	687a      	ldr	r2, [r7, #4]
 8011886:	b292      	uxth	r2, r2
 8011888:	68b9      	ldr	r1, [r7, #8]
 801188a:	4798      	blx	r3
 801188c:	4603      	mov	r3, r0
}
 801188e:	4618      	mov	r0, r3
 8011890:	3710      	adds	r7, #16
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
	...

08011898 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011898:	b580      	push	{r7, lr}
 801189a:	b086      	sub	sp, #24
 801189c:	af00      	add	r7, sp, #0
 801189e:	60f8      	str	r0, [r7, #12]
 80118a0:	607a      	str	r2, [r7, #4]
 80118a2:	603b      	str	r3, [r7, #0]
 80118a4:	460b      	mov	r3, r1
 80118a6:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80118a8:	2300      	movs	r3, #0
 80118aa:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	2bff      	cmp	r3, #255	@ 0xff
 80118b0:	d902      	bls.n	80118b8 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 80118b2:	f06f 0303 	mvn.w	r3, #3
 80118b6:	e01d      	b.n	80118f4 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 80118b8:	897b      	ldrh	r3, [r7, #10]
 80118ba:	0a1b      	lsrs	r3, r3, #8
 80118bc:	b29b      	uxth	r3, r3
 80118be:	b2da      	uxtb	r2, r3
 80118c0:	4b0e      	ldr	r3, [pc, #56]	@ (80118fc <VL53LX_WriteMulti+0x64>)
 80118c2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80118c4:	897b      	ldrh	r3, [r7, #10]
 80118c6:	b2da      	uxtb	r2, r3
 80118c8:	4b0c      	ldr	r3, [pc, #48]	@ (80118fc <VL53LX_WriteMulti+0x64>)
 80118ca:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80118cc:	683a      	ldr	r2, [r7, #0]
 80118ce:	6879      	ldr	r1, [r7, #4]
 80118d0:	480b      	ldr	r0, [pc, #44]	@ (8011900 <VL53LX_WriteMulti+0x68>)
 80118d2:	f009 f94c 	bl	801ab6e <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	3302      	adds	r3, #2
 80118da:	461a      	mov	r2, r3
 80118dc:	4907      	ldr	r1, [pc, #28]	@ (80118fc <VL53LX_WriteMulti+0x64>)
 80118de:	68f8      	ldr	r0, [r7, #12]
 80118e0:	f7ff ffb3 	bl	801184a <_I2CWrite>
 80118e4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80118e6:	693b      	ldr	r3, [r7, #16]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d001      	beq.n	80118f0 <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80118ec:	23f3      	movs	r3, #243	@ 0xf3
 80118ee:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 80118f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3718      	adds	r7, #24
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}
 80118fc:	20007908 	.word	0x20007908
 8011900:	2000790a 	.word	0x2000790a

08011904 <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011904:	b580      	push	{r7, lr}
 8011906:	b086      	sub	sp, #24
 8011908:	af00      	add	r7, sp, #0
 801190a:	60f8      	str	r0, [r7, #12]
 801190c:	607a      	str	r2, [r7, #4]
 801190e:	603b      	str	r3, [r7, #0]
 8011910:	460b      	mov	r3, r1
 8011912:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011914:	2300      	movs	r3, #0
 8011916:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011918:	897b      	ldrh	r3, [r7, #10]
 801191a:	0a1b      	lsrs	r3, r3, #8
 801191c:	b29b      	uxth	r3, r3
 801191e:	b2da      	uxtb	r2, r3
 8011920:	4b12      	ldr	r3, [pc, #72]	@ (801196c <VL53LX_ReadMulti+0x68>)
 8011922:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011924:	897b      	ldrh	r3, [r7, #10]
 8011926:	b2da      	uxtb	r2, r3
 8011928:	4b10      	ldr	r3, [pc, #64]	@ (801196c <VL53LX_ReadMulti+0x68>)
 801192a:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801192c:	2202      	movs	r2, #2
 801192e:	490f      	ldr	r1, [pc, #60]	@ (801196c <VL53LX_ReadMulti+0x68>)
 8011930:	68f8      	ldr	r0, [r7, #12]
 8011932:	f7ff ff8a 	bl	801184a <_I2CWrite>
 8011936:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d002      	beq.n	8011944 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801193e:	23f3      	movs	r3, #243	@ 0xf3
 8011940:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011942:	e00c      	b.n	801195e <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8011944:	683a      	ldr	r2, [r7, #0]
 8011946:	6879      	ldr	r1, [r7, #4]
 8011948:	68f8      	ldr	r0, [r7, #12]
 801194a:	f7ff ff91 	bl	8011870 <_I2CRead>
 801194e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011950:	693b      	ldr	r3, [r7, #16]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d002      	beq.n	801195c <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011956:	23f3      	movs	r3, #243	@ 0xf3
 8011958:	75fb      	strb	r3, [r7, #23]
 801195a:	e000      	b.n	801195e <VL53LX_ReadMulti+0x5a>
    }
done:
 801195c:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 801195e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011962:	4618      	mov	r0, r3
 8011964:	3718      	adds	r7, #24
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}
 801196a:	bf00      	nop
 801196c:	20007908 	.word	0x20007908

08011970 <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 8011970:	b580      	push	{r7, lr}
 8011972:	b084      	sub	sp, #16
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	460b      	mov	r3, r1
 801197a:	807b      	strh	r3, [r7, #2]
 801197c:	4613      	mov	r3, r2
 801197e:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011980:	2300      	movs	r3, #0
 8011982:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011984:	887b      	ldrh	r3, [r7, #2]
 8011986:	0a1b      	lsrs	r3, r3, #8
 8011988:	b29b      	uxth	r3, r3
 801198a:	b2da      	uxtb	r2, r3
 801198c:	4b0c      	ldr	r3, [pc, #48]	@ (80119c0 <VL53LX_WrByte+0x50>)
 801198e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011990:	887b      	ldrh	r3, [r7, #2]
 8011992:	b2da      	uxtb	r2, r3
 8011994:	4b0a      	ldr	r3, [pc, #40]	@ (80119c0 <VL53LX_WrByte+0x50>)
 8011996:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8011998:	4a09      	ldr	r2, [pc, #36]	@ (80119c0 <VL53LX_WrByte+0x50>)
 801199a:	787b      	ldrb	r3, [r7, #1]
 801199c:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 801199e:	2203      	movs	r2, #3
 80119a0:	4907      	ldr	r1, [pc, #28]	@ (80119c0 <VL53LX_WrByte+0x50>)
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f7ff ff51 	bl	801184a <_I2CWrite>
 80119a8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d001      	beq.n	80119b4 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80119b0:	23f3      	movs	r3, #243	@ 0xf3
 80119b2:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 80119b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3710      	adds	r7, #16
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	20007908 	.word	0x20007908

080119c4 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	460b      	mov	r3, r1
 80119ce:	807b      	strh	r3, [r7, #2]
 80119d0:	4613      	mov	r3, r2
 80119d2:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80119d4:	2300      	movs	r3, #0
 80119d6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80119d8:	887b      	ldrh	r3, [r7, #2]
 80119da:	0a1b      	lsrs	r3, r3, #8
 80119dc:	b29b      	uxth	r3, r3
 80119de:	b2da      	uxtb	r2, r3
 80119e0:	4b10      	ldr	r3, [pc, #64]	@ (8011a24 <VL53LX_WrWord+0x60>)
 80119e2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80119e4:	887b      	ldrh	r3, [r7, #2]
 80119e6:	b2da      	uxtb	r2, r3
 80119e8:	4b0e      	ldr	r3, [pc, #56]	@ (8011a24 <VL53LX_WrWord+0x60>)
 80119ea:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80119ec:	883b      	ldrh	r3, [r7, #0]
 80119ee:	0a1b      	lsrs	r3, r3, #8
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	b2da      	uxtb	r2, r3
 80119f4:	4b0b      	ldr	r3, [pc, #44]	@ (8011a24 <VL53LX_WrWord+0x60>)
 80119f6:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80119f8:	883b      	ldrh	r3, [r7, #0]
 80119fa:	b2da      	uxtb	r2, r3
 80119fc:	4b09      	ldr	r3, [pc, #36]	@ (8011a24 <VL53LX_WrWord+0x60>)
 80119fe:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8011a00:	2204      	movs	r2, #4
 8011a02:	4908      	ldr	r1, [pc, #32]	@ (8011a24 <VL53LX_WrWord+0x60>)
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f7ff ff20 	bl	801184a <_I2CWrite>
 8011a0a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d001      	beq.n	8011a16 <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011a12:	23f3      	movs	r3, #243	@ 0xf3
 8011a14:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8011a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3710      	adds	r7, #16
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}
 8011a22:	bf00      	nop
 8011a24:	20007908 	.word	0x20007908

08011a28 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b086      	sub	sp, #24
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	60f8      	str	r0, [r7, #12]
 8011a30:	460b      	mov	r3, r1
 8011a32:	607a      	str	r2, [r7, #4]
 8011a34:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011a36:	2300      	movs	r3, #0
 8011a38:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8011a3a:	897b      	ldrh	r3, [r7, #10]
 8011a3c:	0a1b      	lsrs	r3, r3, #8
 8011a3e:	b29b      	uxth	r3, r3
 8011a40:	b2da      	uxtb	r2, r3
 8011a42:	4b12      	ldr	r3, [pc, #72]	@ (8011a8c <VL53LX_RdByte+0x64>)
 8011a44:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8011a46:	897b      	ldrh	r3, [r7, #10]
 8011a48:	b2da      	uxtb	r2, r3
 8011a4a:	4b10      	ldr	r3, [pc, #64]	@ (8011a8c <VL53LX_RdByte+0x64>)
 8011a4c:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8011a4e:	2202      	movs	r2, #2
 8011a50:	490e      	ldr	r1, [pc, #56]	@ (8011a8c <VL53LX_RdByte+0x64>)
 8011a52:	68f8      	ldr	r0, [r7, #12]
 8011a54:	f7ff fef9 	bl	801184a <_I2CWrite>
 8011a58:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8011a5a:	693b      	ldr	r3, [r7, #16]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d002      	beq.n	8011a66 <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011a60:	23f3      	movs	r3, #243	@ 0xf3
 8011a62:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011a64:	e00c      	b.n	8011a80 <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8011a66:	2201      	movs	r2, #1
 8011a68:	6879      	ldr	r1, [r7, #4]
 8011a6a:	68f8      	ldr	r0, [r7, #12]
 8011a6c:	f7ff ff00 	bl	8011870 <_I2CRead>
 8011a70:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d002      	beq.n	8011a7e <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011a78:	23f3      	movs	r3, #243	@ 0xf3
 8011a7a:	75fb      	strb	r3, [r7, #23]
 8011a7c:	e000      	b.n	8011a80 <VL53LX_RdByte+0x58>
    }
done:
 8011a7e:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8011a80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3718      	adds	r7, #24
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}
 8011a8c:	20007908 	.word	0x20007908

08011a90 <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b086      	sub	sp, #24
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	60f8      	str	r0, [r7, #12]
 8011a98:	460b      	mov	r3, r1
 8011a9a:	607a      	str	r2, [r7, #4]
 8011a9c:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011aa2:	897b      	ldrh	r3, [r7, #10]
 8011aa4:	0a1b      	lsrs	r3, r3, #8
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	b2da      	uxtb	r2, r3
 8011aaa:	4b17      	ldr	r3, [pc, #92]	@ (8011b08 <VL53LX_RdWord+0x78>)
 8011aac:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8011aae:	897b      	ldrh	r3, [r7, #10]
 8011ab0:	b2da      	uxtb	r2, r3
 8011ab2:	4b15      	ldr	r3, [pc, #84]	@ (8011b08 <VL53LX_RdWord+0x78>)
 8011ab4:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8011ab6:	2202      	movs	r2, #2
 8011ab8:	4913      	ldr	r1, [pc, #76]	@ (8011b08 <VL53LX_RdWord+0x78>)
 8011aba:	68f8      	ldr	r0, [r7, #12]
 8011abc:	f7ff fec5 	bl	801184a <_I2CWrite>
 8011ac0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d002      	beq.n	8011ace <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011ac8:	23f3      	movs	r3, #243	@ 0xf3
 8011aca:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011acc:	e015      	b.n	8011afa <VL53LX_RdWord+0x6a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8011ace:	2202      	movs	r2, #2
 8011ad0:	490d      	ldr	r1, [pc, #52]	@ (8011b08 <VL53LX_RdWord+0x78>)
 8011ad2:	68f8      	ldr	r0, [r7, #12]
 8011ad4:	f7ff fecc 	bl	8011870 <_I2CRead>
 8011ad8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011ada:	693b      	ldr	r3, [r7, #16]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d002      	beq.n	8011ae6 <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011ae0:	23f3      	movs	r3, #243	@ 0xf3
 8011ae2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011ae4:	e009      	b.n	8011afa <VL53LX_RdWord+0x6a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8011ae6:	4b08      	ldr	r3, [pc, #32]	@ (8011b08 <VL53LX_RdWord+0x78>)
 8011ae8:	781b      	ldrb	r3, [r3, #0]
 8011aea:	021b      	lsls	r3, r3, #8
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	4a06      	ldr	r2, [pc, #24]	@ (8011b08 <VL53LX_RdWord+0x78>)
 8011af0:	7852      	ldrb	r2, [r2, #1]
 8011af2:	4413      	add	r3, r2
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 8011afa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3718      	adds	r7, #24
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	20007908 	.word	0x20007908

08011b0c <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b084      	sub	sp, #16
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 8011b16:	2300      	movs	r3, #0
 8011b18:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	695b      	ldr	r3, [r3, #20]
 8011b1e:	4798      	blx	r3
 8011b20:	4603      	mov	r3, r0
 8011b22:	461a      	mov	r2, r3
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8011b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3710      	adds	r7, #16
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}

08011b34 <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	4619      	mov	r1, r3
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f000 f8d2 	bl	8011cec <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8011b48:	2300      	movs	r3, #0
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3708      	adds	r7, #8
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
	...

08011b54 <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b082      	sub	sp, #8
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	4a07      	ldr	r2, [pc, #28]	@ (8011b80 <VL53LX_WaitUs+0x2c>)
 8011b62:	fb82 1203 	smull	r1, r2, r2, r3
 8011b66:	1192      	asrs	r2, r2, #6
 8011b68:	17db      	asrs	r3, r3, #31
 8011b6a:	1ad3      	subs	r3, r2, r3
 8011b6c:	4619      	mov	r1, r3
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f000 f8bc 	bl	8011cec <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8011b74:	2300      	movs	r3, #0
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3708      	adds	r7, #8
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	10624dd3 	.word	0x10624dd3

08011b84 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8011b84:	b590      	push	{r4, r7, lr}
 8011b86:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8011b8a:	af00      	add	r7, sp, #0
 8011b8c:	f507 740a 	add.w	r4, r7, #552	@ 0x228
 8011b90:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 8011b94:	6020      	str	r0, [r4, #0]
 8011b96:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 8011b9a:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 8011b9e:	6001      	str	r1, [r0, #0]
 8011ba0:	4619      	mov	r1, r3
 8011ba2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011ba6:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8011baa:	801a      	strh	r2, [r3, #0]
 8011bac:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011bb0:	f2a3 2323 	subw	r3, r3, #547	@ 0x223
 8011bb4:	460a      	mov	r2, r1
 8011bb6:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
	uint32_t     start_time_ms = 0;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	uint32_t     current_time_ms = 0;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	uint32_t     polling_time_ms = 0;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	uint8_t      byte_value      = 0;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
	uint8_t      found           = 0;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 8011bdc:	f107 0310 	add.w	r3, r7, #16
 8011be0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8011be4:	4940      	ldr	r1, [pc, #256]	@ (8011ce8 <VL53LX_WaitValueMaskEx+0x164>)
 8011be6:	4618      	mov	r0, r3
 8011be8:	f008 fee4 	bl	801a9b4 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 8011bec:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8011bf0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011bf4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011bf8:	4611      	mov	r1, r2
 8011bfa:	6818      	ldr	r0, [r3, #0]
 8011bfc:	f7ff ff86 	bl	8011b0c <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8011c00:	e04e      	b.n	8011ca0 <VL53LX_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 8011c02:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d110      	bne.n	8011c2c <VL53LX_WaitValueMaskEx+0xa8>
			status = VL53LX_RdByte(
 8011c0a:	f207 2213 	addw	r2, r7, #531	@ 0x213
 8011c0e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011c12:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8011c16:	8819      	ldrh	r1, [r3, #0]
 8011c18:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011c1c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011c20:	6818      	ldr	r0, [r3, #0]
 8011c22:	f7ff ff01 	bl	8011a28 <VL53LX_RdByte>
 8011c26:	4603      	mov	r3, r0
 8011c28:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8011c2c:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 8011c30:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 8011c34:	4013      	ands	r3, r2
 8011c36:	b2db      	uxtb	r3, r3
 8011c38:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8011c3c:	f2a2 2223 	subw	r2, r2, #547	@ 0x223
 8011c40:	7812      	ldrb	r2, [r2, #0]
 8011c42:	429a      	cmp	r2, r3
 8011c44:	d102      	bne.n	8011c4c <VL53LX_WaitValueMaskEx+0xc8>
			found = 1;
 8011c46:	2301      	movs	r3, #1
 8011c48:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 8011c4c:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d114      	bne.n	8011c7e <VL53LX_WaitValueMaskEx+0xfa>
 8011c54:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d110      	bne.n	8011c7e <VL53LX_WaitValueMaskEx+0xfa>
			found == 0 &&
 8011c5c:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d00c      	beq.n	8011c7e <VL53LX_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 8011c64:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8011c68:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011c6c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011c70:	4611      	mov	r1, r2
 8011c72:	6818      	ldr	r0, [r3, #0]
 8011c74:	f7ff ff5e 	bl	8011b34 <VL53LX_WaitMs>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 8011c7e:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8011c82:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011c86:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011c8a:	4611      	mov	r1, r2
 8011c8c:	6818      	ldr	r0, [r3, #0]
 8011c8e:	f7ff ff3d 	bl	8011b0c <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8011c92:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8011c96:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8011c9a:	1ad3      	subs	r3, r2, r3
 8011c9c:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		   (polling_time_ms < timeout_ms) &&
 8011ca0:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d10c      	bne.n	8011cc2 <VL53LX_WaitValueMaskEx+0x13e>
	while ((status == VL53LX_ERROR_NONE) &&
 8011ca8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011cac:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8011cb0:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d203      	bcs.n	8011cc2 <VL53LX_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 8011cba:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d09f      	beq.n	8011c02 <VL53LX_WaitValueMaskEx+0x7e>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 8011cc2:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d106      	bne.n	8011cd8 <VL53LX_WaitValueMaskEx+0x154>
 8011cca:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d102      	bne.n	8011cd8 <VL53LX_WaitValueMaskEx+0x154>
		status = VL53LX_ERROR_TIME_OUT;
 8011cd2:	23f9      	movs	r3, #249	@ 0xf9
 8011cd4:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227

	return status;
 8011cd8:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd90      	pop	{r4, r7, pc}
 8011ce6:	bf00      	nop
 8011ce8:	0801b780 	.word	0x0801b780

08011cec <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b084      	sub	sp, #16
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	695b      	ldr	r3, [r3, #20]
 8011cfa:	4798      	blx	r3
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8011d00:	bf00      	nop
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	695b      	ldr	r3, [r3, #20]
 8011d06:	4798      	blx	r3
 8011d08:	4603      	mov	r3, r0
 8011d0a:	461a      	mov	r2, r3
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	1ad3      	subs	r3, r2, r3
 8011d10:	683a      	ldr	r2, [r7, #0]
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d8f5      	bhi.n	8011d02 <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 8011d16:	2300      	movs	r3, #0
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3710      	adds	r7, #16
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}

08011d20 <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b08c      	sub	sp, #48	@ 0x30
 8011d24:	af06      	add	r7, sp, #24
 8011d26:	60f8      	str	r0, [r7, #12]
 8011d28:	60b9      	str	r1, [r7, #8]
 8011d2a:	607a      	str	r2, [r7, #4]
 8011d2c:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 8011d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d34:	9304      	str	r3, [sp, #16]
 8011d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d38:	9303      	str	r3, [sp, #12]
 8011d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d3c:	9302      	str	r3, [sp, #8]
 8011d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d40:	9301      	str	r3, [sp, #4]
 8011d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d44:	9300      	str	r3, [sp, #0]
 8011d46:	6a3b      	ldr	r3, [r7, #32]
 8011d48:	683a      	ldr	r2, [r7, #0]
 8011d4a:	6879      	ldr	r1, [r7, #4]
 8011d4c:	68b8      	ldr	r0, [r7, #8]
 8011d4e:	f7fc ffad 	bl	800ecac <VL53LX_hist_process_data>
 8011d52:	4603      	mov	r3, r0
 8011d54:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8011d56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3718      	adds	r7, #24
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}

08011d62 <VL53L4CX_RegisterBusIO>:
  * @param pObj    vl53l4cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_RegisterBusIO(VL53L4CX_Object_t *pObj, VL53L4CX_IO_t *pIO)
{
 8011d62:	b580      	push	{r7, lr}
 8011d64:	b084      	sub	sp, #16
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	6078      	str	r0, [r7, #4]
 8011d6a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d103      	bne.n	8011d7a <VL53L4CX_RegisterBusIO+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011d72:	f06f 0301 	mvn.w	r3, #1
 8011d76:	60fb      	str	r3, [r7, #12]
 8011d78:	e023      	b.n	8011dc2 <VL53L4CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	681a      	ldr	r2, [r3, #0]
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	685a      	ldr	r2, [r3, #4]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	891a      	ldrh	r2, [r3, #8]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	68da      	ldr	r2, [r3, #12]
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	691a      	ldr	r2, [r3, #16]
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	695a      	ldr	r2, [r3, #20]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d004      	beq.n	8011dbc <VL53L4CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	4798      	blx	r3
 8011db8:	60f8      	str	r0, [r7, #12]
 8011dba:	e002      	b.n	8011dc2 <VL53L4CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L4CX_ERROR;
 8011dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8011dc0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3710      	adds	r7, #16
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}

08011dcc <VL53L4CX_Init>:
  * @brief Initializes the vl53l4cx.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Init(VL53L4CX_Object_t *pObj)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b084      	sub	sp, #16
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011dda:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d003      	beq.n	8011dea <VL53L4CX_Init+0x1e>
  {
    ret =  VL53L4CX_ERROR;
 8011de2:	f04f 33ff 	mov.w	r3, #4294967295
 8011de6:	60fb      	str	r3, [r7, #12]
 8011de8:	e043      	b.n	8011e72 <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f7ef fd44 	bl	8001878 <VL53LX_WaitDeviceBooted>
 8011df0:	4603      	mov	r3, r0
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d003      	beq.n	8011dfe <VL53L4CX_Init+0x32>
  {
    ret =  VL53L4CX_ERROR;
 8011df6:	f04f 33ff 	mov.w	r3, #4294967295
 8011dfa:	60fb      	str	r3, [r7, #12]
 8011dfc:	e039      	b.n	8011e72 <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f7ef fcdf 	bl	80017c2 <VL53LX_DataInit>
 8011e04:	4603      	mov	r3, r0
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d003      	beq.n	8011e12 <VL53L4CX_Init+0x46>
  {
    ret = VL53L4CX_ERROR;
 8011e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8011e0e:	60fb      	str	r3, [r7, #12]
 8011e10:	e02f      	b.n	8011e72 <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f7f0 fbf0 	bl	80025f8 <VL53LX_PerformRefSpadManagement>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d003      	beq.n	8011e26 <VL53L4CX_Init+0x5a>
  {
    ret = VL53L4CX_ERROR;
 8011e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8011e22:	60fb      	str	r3, [r7, #12]
 8011e24:	e025      	b.n	8011e72 <VL53L4CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    pObj->IsBlocking = 0;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e38:	2200      	movs	r2, #0
 8011e3a:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
    pObj->IsContinuous = 0;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e44:	2200      	movs	r2, #0
 8011e46:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
    pObj->IsAmbientEnabled = 0;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e50:	2200      	movs	r2, #0
 8011e52:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    pObj->IsSignalEnabled = 0;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	f883 24ed 	strb.w	r2, [r3, #1261]	@ 0x4ed
    pObj->IsInitialized = 1;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e68:	2201      	movs	r2, #1
 8011e6a:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    ret = VL53L4CX_OK;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011e72:	68fb      	ldr	r3, [r7, #12]
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	3710      	adds	r7, #16
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}

08011e7c <VL53L4CX_DeInit>:
  * @brief Deinitializes the vl53l4cx.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_DeInit(VL53L4CX_Object_t *pObj)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b084      	sub	sp, #16
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L4CX_ERROR;
 8011e84:	f04f 33ff 	mov.w	r3, #4294967295
 8011e88:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e90:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 8011e94:	2b01      	cmp	r3, #1
 8011e96:	d111      	bne.n	8011ebc <VL53L4CX_DeInit+0x40>
  {
    /* De-initialize the vl53l4cx interface */
    if (pObj->IO.DeInit() != 0)
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	685b      	ldr	r3, [r3, #4]
 8011e9c:	4798      	blx	r3
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d003      	beq.n	8011eac <VL53L4CX_DeInit+0x30>
    {
      ret = VL53L4CX_ERROR;
 8011ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ea8:	60fb      	str	r3, [r7, #12]
 8011eaa:	e007      	b.n	8011ebc <VL53L4CX_DeInit+0x40>
    }
    else
    {
      ret = VL53L4CX_OK;
 8011eac:	2300      	movs	r3, #0
 8011eae:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    }
  }

  return ret;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3710      	adds	r7, #16
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}

08011ec6 <VL53L4CX_ReadID>:
  * @param pObj    vl53l4cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ReadID(VL53L4CX_Object_t *pObj, uint32_t *pId)
{
 8011ec6:	b580      	push	{r7, lr}
 8011ec8:	b084      	sub	sp, #16
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	6078      	str	r0, [r7, #4]
 8011ece:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d002      	beq.n	8011edc <VL53L4CX_ReadID+0x16>
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d103      	bne.n	8011ee4 <VL53L4CX_ReadID+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011edc:	f06f 0301 	mvn.w	r3, #1
 8011ee0:	60fb      	str	r3, [r7, #12]
 8011ee2:	e00a      	b.n	8011efa <VL53L4CX_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	601a      	str	r2, [r3, #0]
    ret = VL53LX_RdWord(pObj, VL53L4CX_ID_REG, (uint16_t *) pId);
 8011eea:	683a      	ldr	r2, [r7, #0]
 8011eec:	f240 110f 	movw	r1, #271	@ 0x10f
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f7ff fdcd 	bl	8011a90 <VL53LX_RdWord>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011efa:	68fb      	ldr	r3, [r7, #12]
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3710      	adds	r7, #16
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}

08011f04 <VL53L4CX_GetCapabilities>:
  * @param pObj    vl53l4cx context object.
  * @param pCap    Pointer to the vl53l4cx capabilities.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetCapabilities(VL53L4CX_Object_t *pObj, VL53L4CX_Capabilities_t *pCap)
{
 8011f04:	b480      	push	{r7}
 8011f06:	b085      	sub	sp, #20
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d002      	beq.n	8011f1a <VL53L4CX_GetCapabilities+0x16>
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d103      	bne.n	8011f22 <VL53L4CX_GetCapabilities+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011f1a:	f06f 0301 	mvn.w	r3, #1
 8011f1e:	60fb      	str	r3, [r7, #12]
 8011f20:	e00d      	b.n	8011f3e <VL53L4CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	2201      	movs	r2, #1
 8011f26:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L4CX_NB_TARGET_PER_ZONE;
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	2204      	movs	r2, #4
 8011f2c:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	2201      	movs	r2, #1
 8011f32:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	2200      	movs	r2, #0
 8011f38:	60da      	str	r2, [r3, #12]

    ret = VL53L4CX_OK;
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011f3e:	68fb      	ldr	r3, [r7, #12]
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	3714      	adds	r7, #20
 8011f44:	46bd      	mov	sp, r7
 8011f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4a:	4770      	bx	lr

08011f4c <VL53L4CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L4CX the profile corresponds to the distance modes.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigProfile(VL53L4CX_Object_t *pObj, VL53L4CX_ProfileConfig_t *pConfig)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b084      	sub	sp, #16
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d009      	beq.n	8011f70 <VL53L4CX_ConfigProfile+0x24>
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d006      	beq.n	8011f70 <VL53L4CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	781b      	ldrb	r3, [r3, #0]
 8011f66:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L4CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L4CX_PROFILE_SHORT) &&
 8011f68:	7afb      	ldrb	r3, [r7, #11]
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d103      	bne.n	8011f76 <VL53L4CX_ConfigProfile+0x2a>
 8011f6e:	e00c      	b.n	8011f8a <VL53L4CX_ConfigProfile+0x3e>
    return VL53L4CX_INVALID_PARAM;
 8011f70:	f06f 0301 	mvn.w	r3, #1
 8011f74:	e043      	b.n	8011ffe <VL53L4CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L4CX_PROFILE_SHORT) &&
 8011f76:	7afb      	ldrb	r3, [r7, #11]
 8011f78:	2b02      	cmp	r3, #2
 8011f7a:	d006      	beq.n	8011f8a <VL53L4CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L4CX_PROFILE_MEDIUM) &&
 8011f7c:	7afb      	ldrb	r3, [r7, #11]
 8011f7e:	2b03      	cmp	r3, #3
 8011f80:	d003      	beq.n	8011f8a <VL53L4CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L4CX_PROFILE_LONG))
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011f82:	f06f 0301 	mvn.w	r3, #1
 8011f86:	60fb      	str	r3, [r7, #12]
 8011f88:	e038      	b.n	8011ffc <VL53L4CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 8011f8a:	7afb      	ldrb	r3, [r7, #11]
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f7ef fd53 	bl	8001a3a <VL53LX_SetDistanceMode>
 8011f94:	4603      	mov	r3, r0
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d003      	beq.n	8011fa2 <VL53L4CX_ConfigProfile+0x56>
  {
    ret = VL53L4CX_ERROR;
 8011f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f9e:	60fb      	str	r3, [r7, #12]
 8011fa0:	e02c      	b.n	8011ffc <VL53L4CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 8011fa6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011faa:	fb02 f303 	mul.w	r3, r2, r3
 8011fae:	4619      	mov	r1, r3
 8011fb0:	6878      	ldr	r0, [r7, #4]
 8011fb2:	f7ef fdab 	bl	8001b0c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d003      	beq.n	8011fc4 <VL53L4CX_ConfigProfile+0x78>
  {
    ret = VL53L4CX_ERROR;
 8011fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8011fc0:	60fb      	str	r3, [r7, #12]
 8011fc2:	e01b      	b.n	8011ffc <VL53L4CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8011fc4:	683b      	ldr	r3, [r7, #0]
 8011fc6:	68db      	ldr	r3, [r3, #12]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	bf14      	ite	ne
 8011fcc:	2301      	movne	r3, #1
 8011fce:	2300      	moveq	r3, #0
 8011fd0:	b2db      	uxtb	r3, r3
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011fda:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	691b      	ldr	r3, [r3, #16]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	bf14      	ite	ne
 8011fe6:	2301      	movne	r3, #1
 8011fe8:	2300      	moveq	r3, #0
 8011fea:	b2db      	uxtb	r3, r3
 8011fec:	461a      	mov	r2, r3
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011ff4:	f883 24ed 	strb.w	r2, [r3, #1261]	@ 0x4ed

    ret = VL53L4CX_OK;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3710      	adds	r7, #16
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}

08012006 <VL53L4CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigROI(VL53L4CX_Object_t *pObj, VL53L4CX_ROIConfig_t *pROIConfig)
{
 8012006:	b580      	push	{r7, lr}
 8012008:	b084      	sub	sp, #16
 801200a:	af00      	add	r7, sp, #0
 801200c:	6078      	str	r0, [r7, #4]
 801200e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d002      	beq.n	801201c <VL53L4CX_ConfigROI+0x16>
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d103      	bne.n	8012024 <VL53L4CX_ConfigROI+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 801201c:	f06f 0301 	mvn.w	r3, #1
 8012020:	60fb      	str	r3, [r7, #12]
 8012022:	e01a      	b.n	801205a <VL53L4CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	789b      	ldrb	r3, [r3, #2]
 8012028:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	78db      	ldrb	r3, [r3, #3]
 801202e:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	781b      	ldrb	r3, [r3, #0]
 8012034:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	785b      	ldrb	r3, [r3, #1]
 801203a:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 801203c:	f107 0308 	add.w	r3, r7, #8
 8012040:	4619      	mov	r1, r3
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f7ef fdda 	bl	8001bfc <VL53LX_SetUserROI>
 8012048:	4603      	mov	r3, r0
 801204a:	2b00      	cmp	r3, #0
 801204c:	d003      	beq.n	8012056 <VL53L4CX_ConfigROI+0x50>
    {
      ret = VL53L4CX_ERROR;
 801204e:	f04f 33ff 	mov.w	r3, #4294967295
 8012052:	60fb      	str	r3, [r7, #12]
 8012054:	e001      	b.n	801205a <VL53L4CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L4CX_OK;
 8012056:	2300      	movs	r3, #0
 8012058:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 801205a:	68fb      	ldr	r3, [r7, #12]
}
 801205c:	4618      	mov	r0, r3
 801205e:	3710      	adds	r7, #16
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}

08012064 <VL53L4CX_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigIT(VL53L4CX_Object_t *pObj, VL53L4CX_ITConfig_t *pITConfig)
{
 8012064:	b480      	push	{r7}
 8012066:	b083      	sub	sp, #12
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
 801206c:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L4CX_NOT_IMPLEMENTED;
 801206e:	f06f 0303 	mvn.w	r3, #3
}
 8012072:	4618      	mov	r0, r3
 8012074:	370c      	adds	r7, #12
 8012076:	46bd      	mov	sp, r7
 8012078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207c:	4770      	bx	lr

0801207e <VL53L4CX_GetDistance>:
  * @param pObj    vl53l4cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetDistance(VL53L4CX_Object_t *pObj, VL53L4CX_Result_t *pResult)
{
 801207e:	b580      	push	{r7, lr}
 8012080:	b084      	sub	sp, #16
 8012082:	af00      	add	r7, sp, #0
 8012084:	6078      	str	r0, [r7, #4]
 8012086:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = VL53L4CX_OK;
 8012088:	2300      	movs	r3, #0
 801208a:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d002      	beq.n	8012098 <VL53L4CX_GetDistance+0x1a>
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d103      	bne.n	80120a0 <VL53L4CX_GetDistance+0x22>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8012098:	f06f 0301 	mvn.w	r3, #1
 801209c:	60fb      	str	r3, [r7, #12]
 801209e:	e009      	b.n	80120b4 <VL53L4CX_GetDistance+0x36>
  }
  else if (pObj->IsRanging == 0U)
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80120a6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d102      	bne.n	80120b4 <VL53L4CX_GetDistance+0x36>
  {
    ret = VL53L4CX_ERROR;
 80120ae:	f04f 33ff 	mov.w	r3, #4294967295
 80120b2:	60fb      	str	r3, [r7, #12]
  }
  if (ret == VL53L4CX_OK)
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d112      	bne.n	80120e0 <VL53L4CX_GetDistance+0x62>
  {
    if (pObj->IsBlocking == 1U)
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80120c0:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 80120c4:	2b01      	cmp	r3, #1
 80120c6:	d106      	bne.n	80120d6 <VL53L4CX_GetDistance+0x58>
    {
      ret = vl53l4cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 80120c8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f000 f957 	bl	8012380 <vl53l4cx_poll_for_measurement>
 80120d2:	60f8      	str	r0, [r7, #12]
 80120d4:	e004      	b.n	80120e0 <VL53L4CX_GetDistance+0x62>
    }
    else
    {
      ret = vl53l4cx_poll_for_measurement(pObj, 0U);
 80120d6:	2100      	movs	r1, #0
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f000 f951 	bl	8012380 <vl53l4cx_poll_for_measurement>
 80120de:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L4CX_OK)
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d119      	bne.n	801211a <VL53L4CX_GetDistance+0x9c>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l4cx_get_result(pObj, pResult) != VL53L4CX_OK)
 80120e6:	6839      	ldr	r1, [r7, #0]
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f000 f977 	bl	80123dc <vl53l4cx_get_result>
 80120ee:	4603      	mov	r3, r0
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d003      	beq.n	80120fc <VL53L4CX_GetDistance+0x7e>
    {
      ret = VL53L4CX_ERROR;
 80120f4:	f04f 33ff 	mov.w	r3, #4294967295
 80120f8:	60fb      	str	r3, [r7, #12]
 80120fa:	e00e      	b.n	801211a <VL53L4CX_GetDistance+0x9c>
    }
    else if (pObj->IsContinuous == 1U)
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012102:	f893 34eb 	ldrb.w	r3, [r3, #1259]	@ 0x4eb
 8012106:	2b01      	cmp	r3, #1
 8012108:	d105      	bne.n	8012116 <VL53L4CX_GetDistance+0x98>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f7ef fe45 	bl	8001d9a <VL53LX_ClearInterruptAndStartMeasurement>
 8012110:	4603      	mov	r3, r0
 8012112:	60fb      	str	r3, [r7, #12]
 8012114:	e001      	b.n	801211a <VL53L4CX_GetDistance+0x9c>
    }
    else
    {
      ret = VL53L4CX_OK;
 8012116:	2300      	movs	r3, #0
 8012118:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 801211a:	68fb      	ldr	r3, [r7, #12]
}
 801211c:	4618      	mov	r0, r3
 801211e:	3710      	adds	r7, #16
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}

08012124 <VL53L4CX_Start>:
  * @param pObj    vl53l4cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Start(VL53L4CX_Object_t *pObj, uint32_t Mode)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b084      	sub	sp, #16
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d103      	bne.n	801213c <VL53L4CX_Start+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8012134:	f06f 0301 	mvn.w	r3, #1
 8012138:	60fb      	str	r3, [r7, #12]
 801213a:	e06e      	b.n	801221a <VL53L4CX_Start+0xf6>
  }
  else if (pObj->IsRanging == 1U)
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012142:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8012146:	2b01      	cmp	r3, #1
 8012148:	d103      	bne.n	8012152 <VL53L4CX_Start+0x2e>
  {
    ret = VL53L4CX_ERROR;
 801214a:	f04f 33ff 	mov.w	r3, #4294967295
 801214e:	60fb      	str	r3, [r7, #12]
 8012150:	e063      	b.n	801221a <VL53L4CX_Start+0xf6>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f7ef fdbf 	bl	8001cd6 <VL53LX_StartMeasurement>
 8012158:	4603      	mov	r3, r0
 801215a:	2b00      	cmp	r3, #0
 801215c:	d15a      	bne.n	8012214 <VL53L4CX_Start+0xf0>
  {
    pObj->IsRanging = 1;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012164:	2201      	movs	r2, #1
 8012166:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    ret = VL53L4CX_OK;
 801216a:	2300      	movs	r3, #0
 801216c:	60fb      	str	r3, [r7, #12]

    ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f7ef fe13 	bl	8001d9a <VL53LX_ClearInterruptAndStartMeasurement>
 8012174:	4603      	mov	r3, r0
 8012176:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	3b01      	subs	r3, #1
 801217c:	2b03      	cmp	r3, #3
 801217e:	d83f      	bhi.n	8012200 <VL53L4CX_Start+0xdc>
 8012180:	a201      	add	r2, pc, #4	@ (adr r2, 8012188 <VL53L4CX_Start+0x64>)
 8012182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012186:	bf00      	nop
 8012188:	08012199 	.word	0x08012199
 801218c:	080121b3 	.word	0x080121b3
 8012190:	080121cd 	.word	0x080121cd
 8012194:	080121e7 	.word	0x080121e7
    {
    case VL53L4CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801219e:	2201      	movs	r2, #1
 80121a0:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 1U;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80121aa:	2201      	movs	r2, #1
 80121ac:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 80121b0:	e033      	b.n	801221a <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80121b8:	2200      	movs	r2, #0
 80121ba:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 1U;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80121c4:	2201      	movs	r2, #1
 80121c6:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 80121ca:	e026      	b.n	801221a <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80121d2:	2201      	movs	r2, #1
 80121d4:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 0U;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80121de:	2200      	movs	r2, #0
 80121e0:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 80121e4:	e019      	b.n	801221a <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80121ec:	2200      	movs	r2, #0
 80121ee:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 0U;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80121f8:	2200      	movs	r2, #0
 80121fa:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 80121fe:	e00c      	b.n	801221a <VL53L4CX_Start+0xf6>

    default:
      pObj->IsRanging = 0U;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012206:	2200      	movs	r2, #0
 8012208:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
      ret = VL53L4CX_INVALID_PARAM;
 801220c:	f06f 0301 	mvn.w	r3, #1
 8012210:	60fb      	str	r3, [r7, #12]
      break;
 8012212:	e002      	b.n	801221a <VL53L4CX_Start+0xf6>
    }
  }
  else
  {
    ret = VL53L4CX_ERROR;
 8012214:	f04f 33ff 	mov.w	r3, #4294967295
 8012218:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801221a:	68fb      	ldr	r3, [r7, #12]
}
 801221c:	4618      	mov	r0, r3
 801221e:	3710      	adds	r7, #16
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}

08012224 <VL53L4CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Stop(VL53L4CX_Object_t *pObj)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b084      	sub	sp, #16
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d103      	bne.n	801223a <VL53L4CX_Stop+0x16>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8012232:	f06f 0301 	mvn.w	r3, #1
 8012236:	60fb      	str	r3, [r7, #12]
 8012238:	e01c      	b.n	8012274 <VL53L4CX_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012240:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8012244:	2b00      	cmp	r3, #0
 8012246:	d103      	bne.n	8012250 <VL53L4CX_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L4CX_ERROR;
 8012248:	f04f 33ff 	mov.w	r3, #4294967295
 801224c:	60fb      	str	r3, [r7, #12]
 801224e:	e011      	b.n	8012274 <VL53L4CX_Stop+0x50>
  }
  else if (VL53LX_StopMeasurement(pObj) == VL53LX_ERROR_NONE)
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f7ef fd8e 	bl	8001d72 <VL53LX_StopMeasurement>
 8012256:	4603      	mov	r3, r0
 8012258:	2b00      	cmp	r3, #0
 801225a:	d108      	bne.n	801226e <VL53L4CX_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012262:	2200      	movs	r2, #0
 8012264:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    ret = VL53L4CX_OK;
 8012268:	2300      	movs	r3, #0
 801226a:	60fb      	str	r3, [r7, #12]
 801226c:	e002      	b.n	8012274 <VL53L4CX_Stop+0x50>
  }
  else
  {
    ret = VL53L4CX_ERROR;
 801226e:	f04f 33ff 	mov.w	r3, #4294967295
 8012272:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012274:	68fb      	ldr	r3, [r7, #12]
}
 8012276:	4618      	mov	r0, r3
 8012278:	3710      	adds	r7, #16
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}

0801227e <VL53L4CX_SetAddress>:
  * @param pObj    vl53l4cx context object.
  * @param Address     New I2C address.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_SetAddress(VL53L4CX_Object_t *pObj, uint32_t Address)
{
 801227e:	b580      	push	{r7, lr}
 8012280:	b084      	sub	sp, #16
 8012282:	af00      	add	r7, sp, #0
 8012284:	6078      	str	r0, [r7, #4]
 8012286:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d103      	bne.n	8012296 <VL53L4CX_SetAddress+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 801228e:	f06f 0301 	mvn.w	r3, #1
 8012292:	60fb      	str	r3, [r7, #12]
 8012294:	e012      	b.n	80122bc <VL53L4CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	b2db      	uxtb	r3, r3
 801229a:	4619      	mov	r1, r3
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f7ef fa69 	bl	8001774 <VL53LX_SetDeviceAddress>
 80122a2:	4603      	mov	r3, r0
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d003      	beq.n	80122b0 <VL53L4CX_SetAddress+0x32>
  {
    ret = VL53L4CX_ERROR;
 80122a8:	f04f 33ff 	mov.w	r3, #4294967295
 80122ac:	60fb      	str	r3, [r7, #12]
 80122ae:	e005      	b.n	80122bc <VL53L4CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	b29a      	uxth	r2, r3
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	811a      	strh	r2, [r3, #8]
    ret = VL53L4CX_OK;
 80122b8:	2300      	movs	r3, #0
 80122ba:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80122bc:	68fb      	ldr	r3, [r7, #12]
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3710      	adds	r7, #16
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}

080122c6 <VL53L4CX_GetAddress>:
  * @param pObj    vl53l4cx context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetAddress(VL53L4CX_Object_t *pObj, uint32_t *pAddress)
{
 80122c6:	b480      	push	{r7}
 80122c8:	b085      	sub	sp, #20
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	6078      	str	r0, [r7, #4]
 80122ce:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d002      	beq.n	80122dc <VL53L4CX_GetAddress+0x16>
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d103      	bne.n	80122e4 <VL53L4CX_GetAddress+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 80122dc:	f06f 0301 	mvn.w	r3, #1
 80122e0:	60fb      	str	r3, [r7, #12]
 80122e2:	e006      	b.n	80122f2 <VL53L4CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	891b      	ldrh	r3, [r3, #8]
 80122e8:	461a      	mov	r2, r3
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	601a      	str	r2, [r3, #0]
    ret = VL53L4CX_OK;
 80122ee:	2300      	movs	r3, #0
 80122f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80122f2:	68fb      	ldr	r3, [r7, #12]
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3714      	adds	r7, #20
 80122f8:	46bd      	mov	sp, r7
 80122fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fe:	4770      	bx	lr

08012300 <VL53L4CX_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_SetPowerMode(VL53L4CX_Object_t *pObj, uint32_t PowerMode)
{
 8012300:	b480      	push	{r7}
 8012302:	b083      	sub	sp, #12
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L4CX_NOT_IMPLEMENTED;
 801230a:	f06f 0303 	mvn.w	r3, #3
}
 801230e:	4618      	mov	r0, r3
 8012310:	370c      	adds	r7, #12
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr

0801231a <VL53L4CX_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetPowerMode(VL53L4CX_Object_t *pObj, uint32_t *pPowerMode)
{
 801231a:	b480      	push	{r7}
 801231c:	b083      	sub	sp, #12
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
 8012322:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L4CX_NOT_IMPLEMENTED;
 8012324:	f06f 0303 	mvn.w	r3, #3
}
 8012328:	4618      	mov	r0, r3
 801232a:	370c      	adds	r7, #12
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr

08012334 <VL53L4CX_OffsetCalibration>:
  * @param pObj    vl53l4cx context object.
  * @param CalDistance    Calibration distance in mm.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_OffsetCalibration(VL53L4CX_Object_t *pObj, uint32_t CalDistance)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  VL53LX_OffsetCorrectionModes Mode = VL53LX_OFFSETCORRECTIONMODE_STANDARD;
 801233e:	2301      	movs	r3, #1
 8012340:	72fb      	strb	r3, [r7, #11]

  if (VL53LX_SetOffsetCorrectionMode(pObj, Mode) != VL53LX_ERROR_NONE)
 8012342:	7afb      	ldrb	r3, [r7, #11]
 8012344:	4619      	mov	r1, r3
 8012346:	6878      	ldr	r0, [r7, #4]
 8012348:	f7f0 fa52 	bl	80027f0 <VL53LX_SetOffsetCorrectionMode>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	d003      	beq.n	801235a <VL53L4CX_OffsetCalibration+0x26>
  {
    ret = VL53L4CX_ERROR;
 8012352:	f04f 33ff 	mov.w	r3, #4294967295
 8012356:	60fb      	str	r3, [r7, #12]
 8012358:	e00d      	b.n	8012376 <VL53L4CX_OffsetCalibration+0x42>
  }
  else if (VL53LX_PerformOffsetSimpleCalibration(pObj, (int32_t)CalDistance) != VL53LX_ERROR_NONE)
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	4619      	mov	r1, r3
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f7f0 fa6c 	bl	800283c <VL53LX_PerformOffsetSimpleCalibration>
 8012364:	4603      	mov	r3, r0
 8012366:	2b00      	cmp	r3, #0
 8012368:	d003      	beq.n	8012372 <VL53L4CX_OffsetCalibration+0x3e>
  {
    ret = VL53L4CX_ERROR;
 801236a:	f04f 33ff 	mov.w	r3, #4294967295
 801236e:	60fb      	str	r3, [r7, #12]
 8012370:	e001      	b.n	8012376 <VL53L4CX_OffsetCalibration+0x42>
  }
  else
  {
    ret = VL53L4CX_OK;
 8012372:	2300      	movs	r3, #0
 8012374:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012376:	68fb      	ldr	r3, [r7, #12]
}
 8012378:	4618      	mov	r0, r3
 801237a:	3710      	adds	r7, #16
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}

08012380 <vl53l4cx_poll_for_measurement>:
/** @defgroup VL53L4CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l4cx_poll_for_measurement(VL53L4CX_Object_t *pObj, uint32_t Timeout)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b084      	sub	sp, #16
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 801238a:	2300      	movs	r3, #0
 801238c:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d102      	bne.n	801239a <vl53l4cx_poll_for_measurement+0x1a>
  {
    return VL53L4CX_INVALID_PARAM;
 8012394:	f06f 0301 	mvn.w	r3, #1
 8012398:	e01b      	b.n	80123d2 <vl53l4cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	695b      	ldr	r3, [r3, #20]
 801239e:	4798      	blx	r3
 80123a0:	4603      	mov	r3, r0
 80123a2:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 80123a4:	f107 030b 	add.w	r3, r7, #11
 80123a8:	4619      	mov	r1, r3
 80123aa:	6878      	ldr	r0, [r7, #4]
 80123ac:	f7ef fd0b 	bl	8001dc6 <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 80123b0:	7afb      	ldrb	r3, [r7, #11]
 80123b2:	2b01      	cmp	r3, #1
 80123b4:	d101      	bne.n	80123ba <vl53l4cx_poll_for_measurement+0x3a>
    {
      return VL53L4CX_OK;
 80123b6:	2300      	movs	r3, #0
 80123b8:	e00b      	b.n	80123d2 <vl53l4cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	695b      	ldr	r3, [r3, #20]
 80123be:	4798      	blx	r3
 80123c0:	4603      	mov	r3, r0
 80123c2:	461a      	mov	r2, r3
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	1ad3      	subs	r3, r2, r3
 80123c8:	683a      	ldr	r2, [r7, #0]
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d8ea      	bhi.n	80123a4 <vl53l4cx_poll_for_measurement+0x24>

  return VL53L4CX_TIMEOUT;
 80123ce:	f06f 0302 	mvn.w	r3, #2
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3710      	adds	r7, #16
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
	...

080123dc <vl53l4cx_get_result>:

static int32_t vl53l4cx_get_result(VL53L4CX_Object_t *pObj, VL53L4CX_Result_t *pResult)
{
 80123dc:	b590      	push	{r4, r7, lr}
 80123de:	b089      	sub	sp, #36	@ 0x24
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  static VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d002      	beq.n	80123f2 <vl53l4cx_get_result+0x16>
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d103      	bne.n	80123fa <vl53l4cx_get_result+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 80123f2:	f06f 0301 	mvn.w	r3, #1
 80123f6:	61fb      	str	r3, [r7, #28]
 80123f8:	e103      	b.n	8012602 <vl53l4cx_get_result+0x226>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 80123fa:	4984      	ldr	r1, [pc, #528]	@ (801260c <vl53l4cx_get_result+0x230>)
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f7f0 f8d4 	bl	80025aa <VL53LX_GetMultiRangingData>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d003      	beq.n	8012410 <vl53l4cx_get_result+0x34>
  {
    ret = VL53L4CX_ERROR;
 8012408:	f04f 33ff 	mov.w	r3, #4294967295
 801240c:	61fb      	str	r3, [r7, #28]
 801240e:	e0f8      	b.n	8012602 <vl53l4cx_get_result+0x226>
  }
  else
  {
    for (i = 0; i < VL53L4CX_MAX_NB_ZONES; i++)
 8012410:	2300      	movs	r3, #0
 8012412:	76fb      	strb	r3, [r7, #27]
 8012414:	e0ec      	b.n	80125f0 <vl53l4cx_get_result+0x214>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8012416:	4b7d      	ldr	r3, [pc, #500]	@ (801260c <vl53l4cx_get_result+0x230>)
 8012418:	795b      	ldrb	r3, [r3, #5]
 801241a:	7efa      	ldrb	r2, [r7, #27]
 801241c:	4618      	mov	r0, r3
 801241e:	6839      	ldr	r1, [r7, #0]
 8012420:	4613      	mov	r3, r2
 8012422:	011b      	lsls	r3, r3, #4
 8012424:	4413      	add	r3, r2
 8012426:	009b      	lsls	r3, r3, #2
 8012428:	440b      	add	r3, r1
 801242a:	3304      	adds	r3, #4
 801242c:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 801242e:	2300      	movs	r3, #0
 8012430:	76bb      	strb	r3, [r7, #26]
 8012432:	e0d4      	b.n	80125de <vl53l4cx_get_result+0x202>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8012434:	7eba      	ldrb	r2, [r7, #26]
 8012436:	4975      	ldr	r1, [pc, #468]	@ (801260c <vl53l4cx_get_result+0x230>)
 8012438:	4613      	mov	r3, r2
 801243a:	009b      	lsls	r3, r3, #2
 801243c:	4413      	add	r3, r2
 801243e:	009b      	lsls	r3, r3, #2
 8012440:	440b      	add	r3, r1
 8012442:	3318      	adds	r3, #24
 8012444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012448:	2b00      	cmp	r3, #0
 801244a:	da0b      	bge.n	8012464 <vl53l4cx_get_result+0x88>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 801244c:	7efa      	ldrb	r2, [r7, #27]
 801244e:	7eb8      	ldrb	r0, [r7, #26]
 8012450:	6839      	ldr	r1, [r7, #0]
 8012452:	4613      	mov	r3, r2
 8012454:	011b      	lsls	r3, r3, #4
 8012456:	4413      	add	r3, r2
 8012458:	4403      	add	r3, r0
 801245a:	009b      	lsls	r3, r3, #2
 801245c:	440b      	add	r3, r1
 801245e:	2200      	movs	r2, #0
 8012460:	609a      	str	r2, [r3, #8]
 8012462:	e014      	b.n	801248e <vl53l4cx_get_result+0xb2>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8012464:	7eba      	ldrb	r2, [r7, #26]
 8012466:	4969      	ldr	r1, [pc, #420]	@ (801260c <vl53l4cx_get_result+0x230>)
 8012468:	4613      	mov	r3, r2
 801246a:	009b      	lsls	r3, r3, #2
 801246c:	4413      	add	r3, r2
 801246e:	009b      	lsls	r3, r3, #2
 8012470:	440b      	add	r3, r1
 8012472:	3318      	adds	r3, #24
 8012474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012478:	7efa      	ldrb	r2, [r7, #27]
 801247a:	7eb8      	ldrb	r0, [r7, #26]
 801247c:	461c      	mov	r4, r3
 801247e:	6839      	ldr	r1, [r7, #0]
 8012480:	4613      	mov	r3, r2
 8012482:	011b      	lsls	r3, r3, #4
 8012484:	4413      	add	r3, r2
 8012486:	4403      	add	r3, r0
 8012488:	009b      	lsls	r3, r3, #2
 801248a:	440b      	add	r3, r1
 801248c:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012494:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 8012498:	2b01      	cmp	r3, #1
 801249a:	d132      	bne.n	8012502 <vl53l4cx_get_result+0x126>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 801249c:	7eba      	ldrb	r2, [r7, #26]
 801249e:	495b      	ldr	r1, [pc, #364]	@ (801260c <vl53l4cx_get_result+0x230>)
 80124a0:	4613      	mov	r3, r2
 80124a2:	009b      	lsls	r3, r3, #2
 80124a4:	4413      	add	r3, r2
 80124a6:	009b      	lsls	r3, r3, #2
 80124a8:	440b      	add	r3, r1
 80124aa:	3310      	adds	r3, #16
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	ee07 3a90 	vmov	s15, r3
 80124b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80124b6:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8012610 <vl53l4cx_get_result+0x234>
 80124ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80124be:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8012614 <vl53l4cx_get_result+0x238>
 80124c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80124c6:	edc7 7a05 	vstr	s15, [r7, #20]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80124ca:	4b50      	ldr	r3, [pc, #320]	@ (801260c <vl53l4cx_get_result+0x230>)
 80124cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80124d0:	0a1b      	lsrs	r3, r3, #8
 80124d2:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 80124d4:	8a7b      	ldrh	r3, [r7, #18]
 80124d6:	ee07 3a90 	vmov	s15, r3
 80124da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80124de:	7efa      	ldrb	r2, [r7, #27]
 80124e0:	7eb8      	ldrb	r0, [r7, #26]
 80124e2:	edd7 6a05 	vldr	s13, [r7, #20]
 80124e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80124ea:	6839      	ldr	r1, [r7, #0]
 80124ec:	4613      	mov	r3, r2
 80124ee:	011b      	lsls	r3, r3, #4
 80124f0:	4413      	add	r3, r2
 80124f2:	4403      	add	r3, r0
 80124f4:	3308      	adds	r3, #8
 80124f6:	009b      	lsls	r3, r3, #2
 80124f8:	440b      	add	r3, r1
 80124fa:	3308      	adds	r3, #8
 80124fc:	edc3 7a00 	vstr	s15, [r3]
 8012500:	e00d      	b.n	801251e <vl53l4cx_get_result+0x142>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8012502:	7efa      	ldrb	r2, [r7, #27]
 8012504:	7eb8      	ldrb	r0, [r7, #26]
 8012506:	6839      	ldr	r1, [r7, #0]
 8012508:	4613      	mov	r3, r2
 801250a:	011b      	lsls	r3, r3, #4
 801250c:	4413      	add	r3, r2
 801250e:	4403      	add	r3, r0
 8012510:	3308      	adds	r3, #8
 8012512:	009b      	lsls	r3, r3, #2
 8012514:	440b      	add	r3, r1
 8012516:	3308      	adds	r3, #8
 8012518:	f04f 0200 	mov.w	r2, #0
 801251c:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8012524:	f893 34ed 	ldrb.w	r3, [r3, #1261]	@ 0x4ed
 8012528:	2b01      	cmp	r3, #1
 801252a:	d132      	bne.n	8012592 <vl53l4cx_get_result+0x1b6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 801252c:	7eba      	ldrb	r2, [r7, #26]
 801252e:	4937      	ldr	r1, [pc, #220]	@ (801260c <vl53l4cx_get_result+0x230>)
 8012530:	4613      	mov	r3, r2
 8012532:	009b      	lsls	r3, r3, #2
 8012534:	4413      	add	r3, r2
 8012536:	009b      	lsls	r3, r3, #2
 8012538:	440b      	add	r3, r1
 801253a:	330c      	adds	r3, #12
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	ee07 3a90 	vmov	s15, r3
 8012542:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012546:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8012610 <vl53l4cx_get_result+0x234>
 801254a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801254e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012614 <vl53l4cx_get_result+0x238>
 8012552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012556:	edc7 7a03 	vstr	s15, [r7, #12]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 801255a:	4b2c      	ldr	r3, [pc, #176]	@ (801260c <vl53l4cx_get_result+0x230>)
 801255c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8012560:	0a1b      	lsrs	r3, r3, #8
 8012562:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8012564:	8a7b      	ldrh	r3, [r7, #18]
 8012566:	ee07 3a90 	vmov	s15, r3
 801256a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801256e:	7efa      	ldrb	r2, [r7, #27]
 8012570:	7eb8      	ldrb	r0, [r7, #26]
 8012572:	edd7 6a03 	vldr	s13, [r7, #12]
 8012576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801257a:	6839      	ldr	r1, [r7, #0]
 801257c:	4613      	mov	r3, r2
 801257e:	011b      	lsls	r3, r3, #4
 8012580:	4413      	add	r3, r2
 8012582:	4403      	add	r3, r0
 8012584:	330c      	adds	r3, #12
 8012586:	009b      	lsls	r3, r3, #2
 8012588:	440b      	add	r3, r1
 801258a:	3308      	adds	r3, #8
 801258c:	edc3 7a00 	vstr	s15, [r3]
 8012590:	e00d      	b.n	80125ae <vl53l4cx_get_result+0x1d2>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8012592:	7efa      	ldrb	r2, [r7, #27]
 8012594:	7eb8      	ldrb	r0, [r7, #26]
 8012596:	6839      	ldr	r1, [r7, #0]
 8012598:	4613      	mov	r3, r2
 801259a:	011b      	lsls	r3, r3, #4
 801259c:	4413      	add	r3, r2
 801259e:	4403      	add	r3, r0
 80125a0:	330c      	adds	r3, #12
 80125a2:	009b      	lsls	r3, r3, #2
 80125a4:	440b      	add	r3, r1
 80125a6:	3308      	adds	r3, #8
 80125a8:	f04f 0200 	mov.w	r2, #0
 80125ac:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 80125ae:	7eba      	ldrb	r2, [r7, #26]
 80125b0:	4916      	ldr	r1, [pc, #88]	@ (801260c <vl53l4cx_get_result+0x230>)
 80125b2:	4613      	mov	r3, r2
 80125b4:	009b      	lsls	r3, r3, #2
 80125b6:	4413      	add	r3, r2
 80125b8:	009b      	lsls	r3, r3, #2
 80125ba:	440b      	add	r3, r1
 80125bc:	331a      	adds	r3, #26
 80125be:	781b      	ldrb	r3, [r3, #0]
 80125c0:	7efa      	ldrb	r2, [r7, #27]
 80125c2:	7eb8      	ldrb	r0, [r7, #26]
 80125c4:	461c      	mov	r4, r3
 80125c6:	6839      	ldr	r1, [r7, #0]
 80125c8:	4613      	mov	r3, r2
 80125ca:	011b      	lsls	r3, r3, #4
 80125cc:	4413      	add	r3, r2
 80125ce:	4403      	add	r3, r0
 80125d0:	3304      	adds	r3, #4
 80125d2:	009b      	lsls	r3, r3, #2
 80125d4:	440b      	add	r3, r1
 80125d6:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 80125d8:	7ebb      	ldrb	r3, [r7, #26]
 80125da:	3301      	adds	r3, #1
 80125dc:	76bb      	strb	r3, [r7, #26]
 80125de:	4b0b      	ldr	r3, [pc, #44]	@ (801260c <vl53l4cx_get_result+0x230>)
 80125e0:	795b      	ldrb	r3, [r3, #5]
 80125e2:	7eba      	ldrb	r2, [r7, #26]
 80125e4:	429a      	cmp	r2, r3
 80125e6:	f4ff af25 	bcc.w	8012434 <vl53l4cx_get_result+0x58>
    for (i = 0; i < VL53L4CX_MAX_NB_ZONES; i++)
 80125ea:	7efb      	ldrb	r3, [r7, #27]
 80125ec:	3301      	adds	r3, #1
 80125ee:	76fb      	strb	r3, [r7, #27]
 80125f0:	7efb      	ldrb	r3, [r7, #27]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	f43f af0f 	beq.w	8012416 <vl53l4cx_get_result+0x3a>
      }
    }

    pResult->NumberOfZones = VL53L4CX_MAX_NB_ZONES;
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	2201      	movs	r2, #1
 80125fc:	601a      	str	r2, [r3, #0]

    ret = VL53L4CX_OK;
 80125fe:	2300      	movs	r3, #0
 8012600:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8012602:	69fb      	ldr	r3, [r7, #28]
}
 8012604:	4618      	mov	r0, r3
 8012606:	3724      	adds	r7, #36	@ 0x24
 8012608:	46bd      	mov	sp, r7
 801260a:	bd90      	pop	{r4, r7, pc}
 801260c:	20007a08 	.word	0x20007a08
 8012610:	47800000 	.word	0x47800000
 8012614:	447a0000 	.word	0x447a0000

08012618 <LL_AHB2_GRP1_EnableClock>:
{
 8012618:	b480      	push	{r7}
 801261a:	b085      	sub	sp, #20
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8012620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012624:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012626:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	4313      	orrs	r3, r2
 801262e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8012630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012634:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	4013      	ands	r3, r2
 801263a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801263c:	68fb      	ldr	r3, [r7, #12]
}
 801263e:	bf00      	nop
 8012640:	3714      	adds	r7, #20
 8012642:	46bd      	mov	sp, r7
 8012644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012648:	4770      	bx	lr

0801264a <LL_APB2_GRP1_EnableClock>:
{
 801264a:	b480      	push	{r7}
 801264c:	b085      	sub	sp, #20
 801264e:	af00      	add	r7, sp, #0
 8012650:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8012652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012656:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8012658:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	4313      	orrs	r3, r2
 8012660:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8012662:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012666:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	4013      	ands	r3, r2
 801266c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801266e:	68fb      	ldr	r3, [r7, #12]
}
 8012670:	bf00      	nop
 8012672:	3714      	adds	r7, #20
 8012674:	46bd      	mov	sp, r7
 8012676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267a:	4770      	bx	lr

0801267c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b084      	sub	sp, #16
 8012680:	af00      	add	r7, sp, #0
 8012682:	4603      	mov	r3, r0
 8012684:	460a      	mov	r2, r1
 8012686:	71fb      	strb	r3, [r7, #7]
 8012688:	4613      	mov	r3, r2
 801268a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 801268c:	2300      	movs	r3, #0
 801268e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8012690:	79fb      	ldrb	r3, [r7, #7]
 8012692:	4a1f      	ldr	r2, [pc, #124]	@ (8012710 <BSP_PB_Init+0x94>)
 8012694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012698:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 801269a:	79bb      	ldrb	r3, [r7, #6]
 801269c:	2b01      	cmp	r3, #1
 801269e:	d132      	bne.n	8012706 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80126a0:	79fb      	ldrb	r3, [r7, #7]
 80126a2:	00db      	lsls	r3, r3, #3
 80126a4:	4a1b      	ldr	r2, [pc, #108]	@ (8012714 <BSP_PB_Init+0x98>)
 80126a6:	441a      	add	r2, r3
 80126a8:	79fb      	ldrb	r3, [r7, #7]
 80126aa:	491b      	ldr	r1, [pc, #108]	@ (8012718 <BSP_PB_Init+0x9c>)
 80126ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80126b0:	4619      	mov	r1, r3
 80126b2:	4610      	mov	r0, r2
 80126b4:	f000 faa8 	bl	8012c08 <HAL_EXTI_GetHandle>
 80126b8:	4603      	mov	r3, r0
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d003      	beq.n	80126c6 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80126be:	f06f 0303 	mvn.w	r3, #3
 80126c2:	60fb      	str	r3, [r7, #12]
 80126c4:	e01f      	b.n	8012706 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80126c6:	79fb      	ldrb	r3, [r7, #7]
 80126c8:	00db      	lsls	r3, r3, #3
 80126ca:	4a12      	ldr	r2, [pc, #72]	@ (8012714 <BSP_PB_Init+0x98>)
 80126cc:	1898      	adds	r0, r3, r2
 80126ce:	79fb      	ldrb	r3, [r7, #7]
 80126d0:	4a12      	ldr	r2, [pc, #72]	@ (801271c <BSP_PB_Init+0xa0>)
 80126d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126d6:	461a      	mov	r2, r3
 80126d8:	2100      	movs	r1, #0
 80126da:	f000 fa7b 	bl	8012bd4 <HAL_EXTI_RegisterCallback>
 80126de:	4603      	mov	r3, r0
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d003      	beq.n	80126ec <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80126e4:	f06f 0303 	mvn.w	r3, #3
 80126e8:	60fb      	str	r3, [r7, #12]
 80126ea:	e00c      	b.n	8012706 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80126ec:	200a      	movs	r0, #10
 80126ee:	79fb      	ldrb	r3, [r7, #7]
 80126f0:	4a0b      	ldr	r2, [pc, #44]	@ (8012720 <BSP_PB_Init+0xa4>)
 80126f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126f6:	2200      	movs	r2, #0
 80126f8:	4619      	mov	r1, r3
 80126fa:	f000 fa43 	bl	8012b84 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80126fe:	230a      	movs	r3, #10
 8012700:	4618      	mov	r0, r3
 8012702:	f000 fa59 	bl	8012bb8 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8012706:	68fb      	ldr	r3, [r7, #12]
}
 8012708:	4618      	mov	r0, r3
 801270a:	3710      	adds	r7, #16
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}
 8012710:	0801ba78 	.word	0x0801ba78
 8012714:	20000070 	.word	0x20000070
 8012718:	0801ba7c 	.word	0x0801ba7c
 801271c:	0801ba80 	.word	0x0801ba80
 8012720:	0801ba84 	.word	0x0801ba84

08012724 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8012728:	2000      	movs	r0, #0
 801272a:	f007 ff05 	bl	801a538 <BSP_PB_Callback>
}
 801272e:	bf00      	nop
 8012730:	bd80      	pop	{r7, pc}
	...

08012734 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8012734:	b580      	push	{r7, lr}
 8012736:	b086      	sub	sp, #24
 8012738:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801273a:	2004      	movs	r0, #4
 801273c:	f7ff ff6c 	bl	8012618 <LL_AHB2_GRP1_EnableClock>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8012740:	2200      	movs	r2, #0
 8012742:	2105      	movs	r1, #5
 8012744:	200a      	movs	r0, #10
 8012746:	f000 fa1d 	bl	8012b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 801274a:	200a      	movs	r0, #10
 801274c:	f000 fa34 	bl	8012bb8 <HAL_NVIC_EnableIRQ>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012750:	1d3b      	adds	r3, r7, #4
 8012752:	2200      	movs	r2, #0
 8012754:	601a      	str	r2, [r3, #0]
 8012756:	605a      	str	r2, [r3, #4]
 8012758:	609a      	str	r2, [r3, #8]
 801275a:	60da      	str	r2, [r3, #12]
 801275c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801275e:	2004      	movs	r0, #4
 8012760:	f7ff ff5a 	bl	8012618 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8012764:	2310      	movs	r3, #16
 8012766:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8012768:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 801276c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801276e:	2301      	movs	r3, #1
 8012770:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8012772:	1d3b      	adds	r3, r7, #4
 8012774:	4619      	mov	r1, r3
 8012776:	4807      	ldr	r0, [pc, #28]	@ (8012794 <BUTTON_USER_GPIO_Init+0x60>)
 8012778:	f000 fa8a 	bl	8012c90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 801277c:	2200      	movs	r2, #0
 801277e:	2105      	movs	r1, #5
 8012780:	200a      	movs	r0, #10
 8012782:	f000 f9ff 	bl	8012b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8012786:	200a      	movs	r0, #10
 8012788:	f000 fa16 	bl	8012bb8 <HAL_NVIC_EnableIRQ>

}
 801278c:	bf00      	nop
 801278e:	3718      	adds	r7, #24
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}
 8012794:	48000800 	.word	0x48000800

08012798 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b084      	sub	sp, #16
 801279c:	af00      	add	r7, sp, #0
 801279e:	4603      	mov	r3, r0
 80127a0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80127a2:	2300      	movs	r3, #0
 80127a4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80127a6:	79fb      	ldrb	r3, [r7, #7]
 80127a8:	2b01      	cmp	r3, #1
 80127aa:	d903      	bls.n	80127b4 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80127ac:	f06f 0301 	mvn.w	r3, #1
 80127b0:	60fb      	str	r3, [r7, #12]
 80127b2:	e022      	b.n	80127fa <BSP_COM_Init+0x62>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80127b4:	79fa      	ldrb	r2, [r7, #7]
 80127b6:	79fb      	ldrb	r3, [r7, #7]
 80127b8:	4912      	ldr	r1, [pc, #72]	@ (8012804 <BSP_COM_Init+0x6c>)
 80127ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80127be:	4912      	ldr	r1, [pc, #72]	@ (8012808 <BSP_COM_Init+0x70>)
 80127c0:	2094      	movs	r0, #148	@ 0x94
 80127c2:	fb00 f303 	mul.w	r3, r0, r3
 80127c6:	440b      	add	r3, r1
 80127c8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 80127ca:	79fb      	ldrb	r3, [r7, #7]
 80127cc:	2294      	movs	r2, #148	@ 0x94
 80127ce:	fb02 f303 	mul.w	r3, r2, r3
 80127d2:	4a0d      	ldr	r2, [pc, #52]	@ (8012808 <BSP_COM_Init+0x70>)
 80127d4:	4413      	add	r3, r2
 80127d6:	4618      	mov	r0, r3
 80127d8:	f000 f86a 	bl	80128b0 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 80127dc:	79fb      	ldrb	r3, [r7, #7]
 80127de:	2294      	movs	r2, #148	@ 0x94
 80127e0:	fb02 f303 	mul.w	r3, r2, r3
 80127e4:	4a08      	ldr	r2, [pc, #32]	@ (8012808 <BSP_COM_Init+0x70>)
 80127e6:	4413      	add	r3, r2
 80127e8:	4618      	mov	r0, r3
 80127ea:	f000 f80f 	bl	801280c <MX_USART1_UART_Init>
 80127ee:	4603      	mov	r3, r0
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d002      	beq.n	80127fa <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80127f4:	f06f 0303 	mvn.w	r3, #3
 80127f8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80127fa:	68fb      	ldr	r3, [r7, #12]
}
 80127fc:	4618      	mov	r0, r3
 80127fe:	3710      	adds	r7, #16
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}
 8012804:	20000078 	.word	0x20000078
 8012808:	20007a64 	.word	0x20007a64

0801280c <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b084      	sub	sp, #16
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8012814:	2300      	movs	r3, #0
 8012816:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	4a24      	ldr	r2, [pc, #144]	@ (80128ac <MX_USART1_UART_Init+0xa0>)
 801281c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8012824:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_7B;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801282c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	2200      	movs	r2, #0
 8012832:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2200      	movs	r2, #0
 8012838:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	220c      	movs	r2, #12
 801283e:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2200      	movs	r2, #0
 8012844:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	2200      	movs	r2, #0
 801284a:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	2200      	movs	r2, #0
 8012850:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	2200      	movs	r2, #0
 8012856:	625a      	str	r2, [r3, #36]	@ 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2200      	movs	r2, #0
 801285c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 801285e:	6878      	ldr	r0, [r7, #4]
 8012860:	f003 fc7c 	bl	801615c <HAL_UART_Init>
 8012864:	4603      	mov	r3, r0
 8012866:	2b00      	cmp	r3, #0
 8012868:	d001      	beq.n	801286e <MX_USART1_UART_Init+0x62>
  {
    ret = HAL_ERROR;
 801286a:	2301      	movs	r3, #1
 801286c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801286e:	2100      	movs	r1, #0
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f004 f94d 	bl	8016b10 <HAL_UARTEx_SetTxFifoThreshold>
 8012876:	4603      	mov	r3, r0
 8012878:	2b00      	cmp	r3, #0
 801287a:	d001      	beq.n	8012880 <MX_USART1_UART_Init+0x74>
  {
    ret = HAL_ERROR;
 801287c:	2301      	movs	r3, #1
 801287e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012880:	2100      	movs	r1, #0
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f004 f982 	bl	8016b8c <HAL_UARTEx_SetRxFifoThreshold>
 8012888:	4603      	mov	r3, r0
 801288a:	2b00      	cmp	r3, #0
 801288c:	d001      	beq.n	8012892 <MX_USART1_UART_Init+0x86>
  {
    ret = HAL_ERROR;
 801288e:	2301      	movs	r3, #1
 8012890:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f004 f903 	bl	8016a9e <HAL_UARTEx_DisableFifoMode>
 8012898:	4603      	mov	r3, r0
 801289a:	2b00      	cmp	r3, #0
 801289c:	d001      	beq.n	80128a2 <MX_USART1_UART_Init+0x96>
  {
    ret = HAL_ERROR;
 801289e:	2301      	movs	r3, #1
 80128a0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80128a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80128a4:	4618      	mov	r0, r3
 80128a6:	3710      	adds	r7, #16
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}
 80128ac:	40013800 	.word	0x40013800

080128b0 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b09c      	sub	sp, #112	@ 0x70
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80128b8:	f107 030c 	add.w	r3, r7, #12
 80128bc:	2250      	movs	r2, #80	@ 0x50
 80128be:	2100      	movs	r1, #0
 80128c0:	4618      	mov	r0, r3
 80128c2:	f008 f86f 	bl	801a9a4 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80128c6:	2301      	movs	r3, #1
 80128c8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80128ca:	2300      	movs	r3, #0
 80128cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80128ce:	f107 030c 	add.w	r3, r7, #12
 80128d2:	4618      	mov	r0, r3
 80128d4:	f002 ff28 	bl	8015728 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 80128d8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80128dc:	f7ff feb5 	bl	801264a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80128e0:	2002      	movs	r0, #2
 80128e2:	f7ff fe99 	bl	8012618 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 80128e6:	2340      	movs	r3, #64	@ 0x40
 80128e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80128ea:	2302      	movs	r3, #2
 80128ec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80128ee:	2301      	movs	r3, #1
 80128f0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80128f2:	2300      	movs	r3, #0
 80128f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 80128f6:	2307      	movs	r3, #7
 80128f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 80128fa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80128fe:	4619      	mov	r1, r3
 8012900:	480b      	ldr	r0, [pc, #44]	@ (8012930 <USART1_MspInit+0x80>)
 8012902:	f000 f9c5 	bl	8012c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8012906:	2380      	movs	r3, #128	@ 0x80
 8012908:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801290a:	2302      	movs	r3, #2
 801290c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801290e:	2301      	movs	r3, #1
 8012910:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012912:	2300      	movs	r3, #0
 8012914:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8012916:	2307      	movs	r3, #7
 8012918:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 801291a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801291e:	4619      	mov	r1, r3
 8012920:	4803      	ldr	r0, [pc, #12]	@ (8012930 <USART1_MspInit+0x80>)
 8012922:	f000 f9b5 	bl	8012c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8012926:	bf00      	nop
 8012928:	3770      	adds	r7, #112	@ 0x70
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}
 801292e:	bf00      	nop
 8012930:	48000400 	.word	0x48000400

08012934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b082      	sub	sp, #8
 8012938:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801293a:	2300      	movs	r3, #0
 801293c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801293e:	4b0c      	ldr	r3, [pc, #48]	@ (8012970 <HAL_Init+0x3c>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	4a0b      	ldr	r2, [pc, #44]	@ (8012970 <HAL_Init+0x3c>)
 8012944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012948:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801294a:	2003      	movs	r0, #3
 801294c:	f000 f90f 	bl	8012b6e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8012950:	200f      	movs	r0, #15
 8012952:	f7ee fa6f 	bl	8000e34 <HAL_InitTick>
 8012956:	4603      	mov	r3, r0
 8012958:	2b00      	cmp	r3, #0
 801295a:	d002      	beq.n	8012962 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 801295c:	2301      	movs	r3, #1
 801295e:	71fb      	strb	r3, [r7, #7]
 8012960:	e001      	b.n	8012966 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8012962:	f7ee f9ed 	bl	8000d40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8012966:	79fb      	ldrb	r3, [r7, #7]
}
 8012968:	4618      	mov	r0, r3
 801296a:	3708      	adds	r7, #8
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}
 8012970:	58004000 	.word	0x58004000

08012974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012974:	b480      	push	{r7}
 8012976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8012978:	4b06      	ldr	r3, [pc, #24]	@ (8012994 <HAL_IncTick+0x20>)
 801297a:	781b      	ldrb	r3, [r3, #0]
 801297c:	461a      	mov	r2, r3
 801297e:	4b06      	ldr	r3, [pc, #24]	@ (8012998 <HAL_IncTick+0x24>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	4413      	add	r3, r2
 8012984:	4a04      	ldr	r2, [pc, #16]	@ (8012998 <HAL_IncTick+0x24>)
 8012986:	6013      	str	r3, [r2, #0]
}
 8012988:	bf00      	nop
 801298a:	46bd      	mov	sp, r7
 801298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012990:	4770      	bx	lr
 8012992:	bf00      	nop
 8012994:	20000080 	.word	0x20000080
 8012998:	20007af8 	.word	0x20007af8

0801299c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801299c:	b480      	push	{r7}
 801299e:	af00      	add	r7, sp, #0
  return uwTick;
 80129a0:	4b03      	ldr	r3, [pc, #12]	@ (80129b0 <HAL_GetTick+0x14>)
 80129a2:	681b      	ldr	r3, [r3, #0]
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	46bd      	mov	sp, r7
 80129a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ac:	4770      	bx	lr
 80129ae:	bf00      	nop
 80129b0:	20007af8 	.word	0x20007af8

080129b4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80129b4:	b480      	push	{r7}
 80129b6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80129b8:	4b03      	ldr	r3, [pc, #12]	@ (80129c8 <HAL_GetTickPrio+0x14>)
 80129ba:	681b      	ldr	r3, [r3, #0]
}
 80129bc:	4618      	mov	r0, r3
 80129be:	46bd      	mov	sp, r7
 80129c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c4:	4770      	bx	lr
 80129c6:	bf00      	nop
 80129c8:	2000007c 	.word	0x2000007c

080129cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80129d4:	f7ff ffe2 	bl	801299c <HAL_GetTick>
 80129d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129e4:	d005      	beq.n	80129f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80129e6:	4b0a      	ldr	r3, [pc, #40]	@ (8012a10 <HAL_Delay+0x44>)
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	461a      	mov	r2, r3
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	4413      	add	r3, r2
 80129f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80129f2:	bf00      	nop
 80129f4:	f7ff ffd2 	bl	801299c <HAL_GetTick>
 80129f8:	4602      	mov	r2, r0
 80129fa:	68bb      	ldr	r3, [r7, #8]
 80129fc:	1ad3      	subs	r3, r2, r3
 80129fe:	68fa      	ldr	r2, [r7, #12]
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d8f7      	bhi.n	80129f4 <HAL_Delay+0x28>
  {
  }
}
 8012a04:	bf00      	nop
 8012a06:	bf00      	nop
 8012a08:	3710      	adds	r7, #16
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}
 8012a0e:	bf00      	nop
 8012a10:	20000080 	.word	0x20000080

08012a14 <__NVIC_SetPriorityGrouping>:
{
 8012a14:	b480      	push	{r7}
 8012a16:	b085      	sub	sp, #20
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f003 0307 	and.w	r3, r3, #7
 8012a22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012a24:	4b0c      	ldr	r3, [pc, #48]	@ (8012a58 <__NVIC_SetPriorityGrouping+0x44>)
 8012a26:	68db      	ldr	r3, [r3, #12]
 8012a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012a2a:	68ba      	ldr	r2, [r7, #8]
 8012a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8012a30:	4013      	ands	r3, r2
 8012a32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8012a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8012a46:	4a04      	ldr	r2, [pc, #16]	@ (8012a58 <__NVIC_SetPriorityGrouping+0x44>)
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	60d3      	str	r3, [r2, #12]
}
 8012a4c:	bf00      	nop
 8012a4e:	3714      	adds	r7, #20
 8012a50:	46bd      	mov	sp, r7
 8012a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a56:	4770      	bx	lr
 8012a58:	e000ed00 	.word	0xe000ed00

08012a5c <__NVIC_GetPriorityGrouping>:
{
 8012a5c:	b480      	push	{r7}
 8012a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012a60:	4b04      	ldr	r3, [pc, #16]	@ (8012a74 <__NVIC_GetPriorityGrouping+0x18>)
 8012a62:	68db      	ldr	r3, [r3, #12]
 8012a64:	0a1b      	lsrs	r3, r3, #8
 8012a66:	f003 0307 	and.w	r3, r3, #7
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a72:	4770      	bx	lr
 8012a74:	e000ed00 	.word	0xe000ed00

08012a78 <__NVIC_EnableIRQ>:
{
 8012a78:	b480      	push	{r7}
 8012a7a:	b083      	sub	sp, #12
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	4603      	mov	r3, r0
 8012a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	db0b      	blt.n	8012aa2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012a8a:	79fb      	ldrb	r3, [r7, #7]
 8012a8c:	f003 021f 	and.w	r2, r3, #31
 8012a90:	4907      	ldr	r1, [pc, #28]	@ (8012ab0 <__NVIC_EnableIRQ+0x38>)
 8012a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a96:	095b      	lsrs	r3, r3, #5
 8012a98:	2001      	movs	r0, #1
 8012a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8012a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012aa2:	bf00      	nop
 8012aa4:	370c      	adds	r7, #12
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr
 8012aae:	bf00      	nop
 8012ab0:	e000e100 	.word	0xe000e100

08012ab4 <__NVIC_SetPriority>:
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b083      	sub	sp, #12
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	4603      	mov	r3, r0
 8012abc:	6039      	str	r1, [r7, #0]
 8012abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	db0a      	blt.n	8012ade <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	b2da      	uxtb	r2, r3
 8012acc:	490c      	ldr	r1, [pc, #48]	@ (8012b00 <__NVIC_SetPriority+0x4c>)
 8012ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012ad2:	0112      	lsls	r2, r2, #4
 8012ad4:	b2d2      	uxtb	r2, r2
 8012ad6:	440b      	add	r3, r1
 8012ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8012adc:	e00a      	b.n	8012af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	b2da      	uxtb	r2, r3
 8012ae2:	4908      	ldr	r1, [pc, #32]	@ (8012b04 <__NVIC_SetPriority+0x50>)
 8012ae4:	79fb      	ldrb	r3, [r7, #7]
 8012ae6:	f003 030f 	and.w	r3, r3, #15
 8012aea:	3b04      	subs	r3, #4
 8012aec:	0112      	lsls	r2, r2, #4
 8012aee:	b2d2      	uxtb	r2, r2
 8012af0:	440b      	add	r3, r1
 8012af2:	761a      	strb	r2, [r3, #24]
}
 8012af4:	bf00      	nop
 8012af6:	370c      	adds	r7, #12
 8012af8:	46bd      	mov	sp, r7
 8012afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afe:	4770      	bx	lr
 8012b00:	e000e100 	.word	0xe000e100
 8012b04:	e000ed00 	.word	0xe000ed00

08012b08 <NVIC_EncodePriority>:
{
 8012b08:	b480      	push	{r7}
 8012b0a:	b089      	sub	sp, #36	@ 0x24
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	60f8      	str	r0, [r7, #12]
 8012b10:	60b9      	str	r1, [r7, #8]
 8012b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f003 0307 	and.w	r3, r3, #7
 8012b1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012b1c:	69fb      	ldr	r3, [r7, #28]
 8012b1e:	f1c3 0307 	rsb	r3, r3, #7
 8012b22:	2b04      	cmp	r3, #4
 8012b24:	bf28      	it	cs
 8012b26:	2304      	movcs	r3, #4
 8012b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012b2a:	69fb      	ldr	r3, [r7, #28]
 8012b2c:	3304      	adds	r3, #4
 8012b2e:	2b06      	cmp	r3, #6
 8012b30:	d902      	bls.n	8012b38 <NVIC_EncodePriority+0x30>
 8012b32:	69fb      	ldr	r3, [r7, #28]
 8012b34:	3b03      	subs	r3, #3
 8012b36:	e000      	b.n	8012b3a <NVIC_EncodePriority+0x32>
 8012b38:	2300      	movs	r3, #0
 8012b3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8012b40:	69bb      	ldr	r3, [r7, #24]
 8012b42:	fa02 f303 	lsl.w	r3, r2, r3
 8012b46:	43da      	mvns	r2, r3
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	401a      	ands	r2, r3
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012b50:	f04f 31ff 	mov.w	r1, #4294967295
 8012b54:	697b      	ldr	r3, [r7, #20]
 8012b56:	fa01 f303 	lsl.w	r3, r1, r3
 8012b5a:	43d9      	mvns	r1, r3
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012b60:	4313      	orrs	r3, r2
}
 8012b62:	4618      	mov	r0, r3
 8012b64:	3724      	adds	r7, #36	@ 0x24
 8012b66:	46bd      	mov	sp, r7
 8012b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6c:	4770      	bx	lr

08012b6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012b6e:	b580      	push	{r7, lr}
 8012b70:	b082      	sub	sp, #8
 8012b72:	af00      	add	r7, sp, #0
 8012b74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f7ff ff4c 	bl	8012a14 <__NVIC_SetPriorityGrouping>
}
 8012b7c:	bf00      	nop
 8012b7e:	3708      	adds	r7, #8
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}

08012b84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b086      	sub	sp, #24
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	60b9      	str	r1, [r7, #8]
 8012b8e:	607a      	str	r2, [r7, #4]
 8012b90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012b92:	f7ff ff63 	bl	8012a5c <__NVIC_GetPriorityGrouping>
 8012b96:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012b98:	687a      	ldr	r2, [r7, #4]
 8012b9a:	68b9      	ldr	r1, [r7, #8]
 8012b9c:	6978      	ldr	r0, [r7, #20]
 8012b9e:	f7ff ffb3 	bl	8012b08 <NVIC_EncodePriority>
 8012ba2:	4602      	mov	r2, r0
 8012ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ba8:	4611      	mov	r1, r2
 8012baa:	4618      	mov	r0, r3
 8012bac:	f7ff ff82 	bl	8012ab4 <__NVIC_SetPriority>
}
 8012bb0:	bf00      	nop
 8012bb2:	3718      	adds	r7, #24
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}

08012bb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7ff ff56 	bl	8012a78 <__NVIC_EnableIRQ>
}
 8012bcc:	bf00      	nop
 8012bce:	3708      	adds	r7, #8
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bd80      	pop	{r7, pc}

08012bd4 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8012bd4:	b480      	push	{r7}
 8012bd6:	b087      	sub	sp, #28
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	60f8      	str	r0, [r7, #12]
 8012bdc:	460b      	mov	r3, r1
 8012bde:	607a      	str	r2, [r7, #4]
 8012be0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8012be2:	2300      	movs	r3, #0
 8012be4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8012be6:	7afb      	ldrb	r3, [r7, #11]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d103      	bne.n	8012bf4 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	687a      	ldr	r2, [r7, #4]
 8012bf0:	605a      	str	r2, [r3, #4]
      break;
 8012bf2:	e002      	b.n	8012bfa <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8012bf8:	bf00      	nop
  }

  return status;
 8012bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	371c      	adds	r7, #28
 8012c00:	46bd      	mov	sp, r7
 8012c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c06:	4770      	bx	lr

08012c08 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8012c08:	b480      	push	{r7}
 8012c0a:	b083      	sub	sp, #12
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d101      	bne.n	8012c1c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	e003      	b.n	8012c24 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	683a      	ldr	r2, [r7, #0]
 8012c20:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8012c22:	2300      	movs	r3, #0
  }
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	370c      	adds	r7, #12
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2e:	4770      	bx	lr

08012c30 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b086      	sub	sp, #24
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	0c1b      	lsrs	r3, r3, #16
 8012c3e:	f003 0301 	and.w	r3, r3, #1
 8012c42:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	f003 031f 	and.w	r3, r3, #31
 8012c4c:	2201      	movs	r2, #1
 8012c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8012c52:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	015b      	lsls	r3, r3, #5
 8012c58:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8012c5c:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 8012c60:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	693a      	ldr	r2, [r7, #16]
 8012c68:	4013      	ands	r3, r2
 8012c6a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d009      	beq.n	8012c86 <HAL_EXTI_IRQHandler+0x56>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	693a      	ldr	r2, [r7, #16]
 8012c76:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	685b      	ldr	r3, [r3, #4]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d002      	beq.n	8012c86 <HAL_EXTI_IRQHandler+0x56>
    {
      hexti->PendingCallback();
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	685b      	ldr	r3, [r3, #4]
 8012c84:	4798      	blx	r3
    }
  }
}
 8012c86:	bf00      	nop
 8012c88:	3718      	adds	r7, #24
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}
	...

08012c90 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012c90:	b480      	push	{r7}
 8012c92:	b087      	sub	sp, #28
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
 8012c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8012c9e:	e14c      	b.n	8012f3a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	681a      	ldr	r2, [r3, #0]
 8012ca4:	2101      	movs	r1, #1
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8012cac:	4013      	ands	r3, r2
 8012cae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	f000 813e 	beq.w	8012f34 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	685b      	ldr	r3, [r3, #4]
 8012cbc:	f003 0303 	and.w	r3, r3, #3
 8012cc0:	2b01      	cmp	r3, #1
 8012cc2:	d005      	beq.n	8012cd0 <HAL_GPIO_Init+0x40>
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	685b      	ldr	r3, [r3, #4]
 8012cc8:	f003 0303 	and.w	r3, r3, #3
 8012ccc:	2b02      	cmp	r3, #2
 8012cce:	d130      	bne.n	8012d32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	689b      	ldr	r3, [r3, #8]
 8012cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	005b      	lsls	r3, r3, #1
 8012cda:	2203      	movs	r2, #3
 8012cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8012ce0:	43db      	mvns	r3, r3
 8012ce2:	693a      	ldr	r2, [r7, #16]
 8012ce4:	4013      	ands	r3, r2
 8012ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	68da      	ldr	r2, [r3, #12]
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	005b      	lsls	r3, r3, #1
 8012cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8012cf4:	693a      	ldr	r2, [r7, #16]
 8012cf6:	4313      	orrs	r3, r2
 8012cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	693a      	ldr	r2, [r7, #16]
 8012cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8012d06:	2201      	movs	r2, #1
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8012d0e:	43db      	mvns	r3, r3
 8012d10:	693a      	ldr	r2, [r7, #16]
 8012d12:	4013      	ands	r3, r2
 8012d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	685b      	ldr	r3, [r3, #4]
 8012d1a:	091b      	lsrs	r3, r3, #4
 8012d1c:	f003 0201 	and.w	r2, r3, #1
 8012d20:	697b      	ldr	r3, [r7, #20]
 8012d22:	fa02 f303 	lsl.w	r3, r2, r3
 8012d26:	693a      	ldr	r2, [r7, #16]
 8012d28:	4313      	orrs	r3, r2
 8012d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	693a      	ldr	r2, [r7, #16]
 8012d30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	f003 0303 	and.w	r3, r3, #3
 8012d3a:	2b03      	cmp	r3, #3
 8012d3c:	d017      	beq.n	8012d6e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	68db      	ldr	r3, [r3, #12]
 8012d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	005b      	lsls	r3, r3, #1
 8012d48:	2203      	movs	r2, #3
 8012d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8012d4e:	43db      	mvns	r3, r3
 8012d50:	693a      	ldr	r2, [r7, #16]
 8012d52:	4013      	ands	r3, r2
 8012d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	689a      	ldr	r2, [r3, #8]
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	005b      	lsls	r3, r3, #1
 8012d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8012d62:	693a      	ldr	r2, [r7, #16]
 8012d64:	4313      	orrs	r3, r2
 8012d66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	693a      	ldr	r2, [r7, #16]
 8012d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	685b      	ldr	r3, [r3, #4]
 8012d72:	f003 0303 	and.w	r3, r3, #3
 8012d76:	2b02      	cmp	r3, #2
 8012d78:	d123      	bne.n	8012dc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8012d7a:	697b      	ldr	r3, [r7, #20]
 8012d7c:	08da      	lsrs	r2, r3, #3
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	3208      	adds	r2, #8
 8012d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	f003 0307 	and.w	r3, r3, #7
 8012d8e:	009b      	lsls	r3, r3, #2
 8012d90:	220f      	movs	r2, #15
 8012d92:	fa02 f303 	lsl.w	r3, r2, r3
 8012d96:	43db      	mvns	r3, r3
 8012d98:	693a      	ldr	r2, [r7, #16]
 8012d9a:	4013      	ands	r3, r2
 8012d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	691a      	ldr	r2, [r3, #16]
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	f003 0307 	and.w	r3, r3, #7
 8012da8:	009b      	lsls	r3, r3, #2
 8012daa:	fa02 f303 	lsl.w	r3, r2, r3
 8012dae:	693a      	ldr	r2, [r7, #16]
 8012db0:	4313      	orrs	r3, r2
 8012db2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8012db4:	697b      	ldr	r3, [r7, #20]
 8012db6:	08da      	lsrs	r2, r3, #3
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	3208      	adds	r2, #8
 8012dbc:	6939      	ldr	r1, [r7, #16]
 8012dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8012dc8:	697b      	ldr	r3, [r7, #20]
 8012dca:	005b      	lsls	r3, r3, #1
 8012dcc:	2203      	movs	r2, #3
 8012dce:	fa02 f303 	lsl.w	r3, r2, r3
 8012dd2:	43db      	mvns	r3, r3
 8012dd4:	693a      	ldr	r2, [r7, #16]
 8012dd6:	4013      	ands	r3, r2
 8012dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	685b      	ldr	r3, [r3, #4]
 8012dde:	f003 0203 	and.w	r2, r3, #3
 8012de2:	697b      	ldr	r3, [r7, #20]
 8012de4:	005b      	lsls	r3, r3, #1
 8012de6:	fa02 f303 	lsl.w	r3, r2, r3
 8012dea:	693a      	ldr	r2, [r7, #16]
 8012dec:	4313      	orrs	r3, r2
 8012dee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	693a      	ldr	r2, [r7, #16]
 8012df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	685b      	ldr	r3, [r3, #4]
 8012dfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	f000 8098 	beq.w	8012f34 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8012e04:	4a54      	ldr	r2, [pc, #336]	@ (8012f58 <HAL_GPIO_Init+0x2c8>)
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	089b      	lsrs	r3, r3, #2
 8012e0a:	3302      	adds	r3, #2
 8012e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	f003 0303 	and.w	r3, r3, #3
 8012e18:	009b      	lsls	r3, r3, #2
 8012e1a:	220f      	movs	r2, #15
 8012e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8012e20:	43db      	mvns	r3, r3
 8012e22:	693a      	ldr	r2, [r7, #16]
 8012e24:	4013      	ands	r3, r2
 8012e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8012e2e:	d019      	beq.n	8012e64 <HAL_GPIO_Init+0x1d4>
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	4a4a      	ldr	r2, [pc, #296]	@ (8012f5c <HAL_GPIO_Init+0x2cc>)
 8012e34:	4293      	cmp	r3, r2
 8012e36:	d013      	beq.n	8012e60 <HAL_GPIO_Init+0x1d0>
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	4a49      	ldr	r2, [pc, #292]	@ (8012f60 <HAL_GPIO_Init+0x2d0>)
 8012e3c:	4293      	cmp	r3, r2
 8012e3e:	d00d      	beq.n	8012e5c <HAL_GPIO_Init+0x1cc>
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	4a48      	ldr	r2, [pc, #288]	@ (8012f64 <HAL_GPIO_Init+0x2d4>)
 8012e44:	4293      	cmp	r3, r2
 8012e46:	d007      	beq.n	8012e58 <HAL_GPIO_Init+0x1c8>
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	4a47      	ldr	r2, [pc, #284]	@ (8012f68 <HAL_GPIO_Init+0x2d8>)
 8012e4c:	4293      	cmp	r3, r2
 8012e4e:	d101      	bne.n	8012e54 <HAL_GPIO_Init+0x1c4>
 8012e50:	2304      	movs	r3, #4
 8012e52:	e008      	b.n	8012e66 <HAL_GPIO_Init+0x1d6>
 8012e54:	2307      	movs	r3, #7
 8012e56:	e006      	b.n	8012e66 <HAL_GPIO_Init+0x1d6>
 8012e58:	2303      	movs	r3, #3
 8012e5a:	e004      	b.n	8012e66 <HAL_GPIO_Init+0x1d6>
 8012e5c:	2302      	movs	r3, #2
 8012e5e:	e002      	b.n	8012e66 <HAL_GPIO_Init+0x1d6>
 8012e60:	2301      	movs	r3, #1
 8012e62:	e000      	b.n	8012e66 <HAL_GPIO_Init+0x1d6>
 8012e64:	2300      	movs	r3, #0
 8012e66:	697a      	ldr	r2, [r7, #20]
 8012e68:	f002 0203 	and.w	r2, r2, #3
 8012e6c:	0092      	lsls	r2, r2, #2
 8012e6e:	4093      	lsls	r3, r2
 8012e70:	693a      	ldr	r2, [r7, #16]
 8012e72:	4313      	orrs	r3, r2
 8012e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8012e76:	4938      	ldr	r1, [pc, #224]	@ (8012f58 <HAL_GPIO_Init+0x2c8>)
 8012e78:	697b      	ldr	r3, [r7, #20]
 8012e7a:	089b      	lsrs	r3, r3, #2
 8012e7c:	3302      	adds	r3, #2
 8012e7e:	693a      	ldr	r2, [r7, #16]
 8012e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8012e84:	4b39      	ldr	r3, [pc, #228]	@ (8012f6c <HAL_GPIO_Init+0x2dc>)
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	43db      	mvns	r3, r3
 8012e8e:	693a      	ldr	r2, [r7, #16]
 8012e90:	4013      	ands	r3, r2
 8012e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d003      	beq.n	8012ea8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8012ea0:	693a      	ldr	r2, [r7, #16]
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	4313      	orrs	r3, r2
 8012ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8012ea8:	4a30      	ldr	r2, [pc, #192]	@ (8012f6c <HAL_GPIO_Init+0x2dc>)
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8012eae:	4b2f      	ldr	r3, [pc, #188]	@ (8012f6c <HAL_GPIO_Init+0x2dc>)
 8012eb0:	685b      	ldr	r3, [r3, #4]
 8012eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	43db      	mvns	r3, r3
 8012eb8:	693a      	ldr	r2, [r7, #16]
 8012eba:	4013      	ands	r3, r2
 8012ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d003      	beq.n	8012ed2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8012eca:	693a      	ldr	r2, [r7, #16]
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	4313      	orrs	r3, r2
 8012ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8012ed2:	4a26      	ldr	r2, [pc, #152]	@ (8012f6c <HAL_GPIO_Init+0x2dc>)
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8012ed8:	4b24      	ldr	r3, [pc, #144]	@ (8012f6c <HAL_GPIO_Init+0x2dc>)
 8012eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	43db      	mvns	r3, r3
 8012ee4:	693a      	ldr	r2, [r7, #16]
 8012ee6:	4013      	ands	r3, r2
 8012ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	685b      	ldr	r3, [r3, #4]
 8012eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d003      	beq.n	8012efe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8012ef6:	693a      	ldr	r2, [r7, #16]
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	4313      	orrs	r3, r2
 8012efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8012efe:	4a1b      	ldr	r2, [pc, #108]	@ (8012f6c <HAL_GPIO_Init+0x2dc>)
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8012f06:	4b19      	ldr	r3, [pc, #100]	@ (8012f6c <HAL_GPIO_Init+0x2dc>)
 8012f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	43db      	mvns	r3, r3
 8012f12:	693a      	ldr	r2, [r7, #16]
 8012f14:	4013      	ands	r3, r2
 8012f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d003      	beq.n	8012f2c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8012f24:	693a      	ldr	r2, [r7, #16]
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	4313      	orrs	r3, r2
 8012f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8012f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8012f6c <HAL_GPIO_Init+0x2dc>)
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	3301      	adds	r3, #1
 8012f38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	681a      	ldr	r2, [r3, #0]
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	fa22 f303 	lsr.w	r3, r2, r3
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	f47f aeab 	bne.w	8012ca0 <HAL_GPIO_Init+0x10>
  }
}
 8012f4a:	bf00      	nop
 8012f4c:	bf00      	nop
 8012f4e:	371c      	adds	r7, #28
 8012f50:	46bd      	mov	sp, r7
 8012f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f56:	4770      	bx	lr
 8012f58:	40010000 	.word	0x40010000
 8012f5c:	48000400 	.word	0x48000400
 8012f60:	48000800 	.word	0x48000800
 8012f64:	48000c00 	.word	0x48000c00
 8012f68:	48001000 	.word	0x48001000
 8012f6c:	58000800 	.word	0x58000800

08012f70 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012f70:	b480      	push	{r7}
 8012f72:	b087      	sub	sp, #28
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8012f7e:	e0bb      	b.n	80130f8 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8012f80:	2201      	movs	r2, #1
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	fa02 f303 	lsl.w	r3, r2, r3
 8012f88:	683a      	ldr	r2, [r7, #0]
 8012f8a:	4013      	ands	r3, r2
 8012f8c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8012f8e:	693b      	ldr	r3, [r7, #16]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	f000 80ae 	beq.w	80130f2 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8012f96:	4a5f      	ldr	r2, [pc, #380]	@ (8013114 <HAL_GPIO_DeInit+0x1a4>)
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	089b      	lsrs	r3, r3, #2
 8012f9c:	3302      	adds	r3, #2
 8012f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fa2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	f003 0303 	and.w	r3, r3, #3
 8012faa:	009b      	lsls	r3, r3, #2
 8012fac:	220f      	movs	r2, #15
 8012fae:	fa02 f303 	lsl.w	r3, r2, r3
 8012fb2:	68fa      	ldr	r2, [r7, #12]
 8012fb4:	4013      	ands	r3, r2
 8012fb6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8012fbe:	d019      	beq.n	8012ff4 <HAL_GPIO_DeInit+0x84>
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	4a55      	ldr	r2, [pc, #340]	@ (8013118 <HAL_GPIO_DeInit+0x1a8>)
 8012fc4:	4293      	cmp	r3, r2
 8012fc6:	d013      	beq.n	8012ff0 <HAL_GPIO_DeInit+0x80>
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	4a54      	ldr	r2, [pc, #336]	@ (801311c <HAL_GPIO_DeInit+0x1ac>)
 8012fcc:	4293      	cmp	r3, r2
 8012fce:	d00d      	beq.n	8012fec <HAL_GPIO_DeInit+0x7c>
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	4a53      	ldr	r2, [pc, #332]	@ (8013120 <HAL_GPIO_DeInit+0x1b0>)
 8012fd4:	4293      	cmp	r3, r2
 8012fd6:	d007      	beq.n	8012fe8 <HAL_GPIO_DeInit+0x78>
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	4a52      	ldr	r2, [pc, #328]	@ (8013124 <HAL_GPIO_DeInit+0x1b4>)
 8012fdc:	4293      	cmp	r3, r2
 8012fde:	d101      	bne.n	8012fe4 <HAL_GPIO_DeInit+0x74>
 8012fe0:	2304      	movs	r3, #4
 8012fe2:	e008      	b.n	8012ff6 <HAL_GPIO_DeInit+0x86>
 8012fe4:	2307      	movs	r3, #7
 8012fe6:	e006      	b.n	8012ff6 <HAL_GPIO_DeInit+0x86>
 8012fe8:	2303      	movs	r3, #3
 8012fea:	e004      	b.n	8012ff6 <HAL_GPIO_DeInit+0x86>
 8012fec:	2302      	movs	r3, #2
 8012fee:	e002      	b.n	8012ff6 <HAL_GPIO_DeInit+0x86>
 8012ff0:	2301      	movs	r3, #1
 8012ff2:	e000      	b.n	8012ff6 <HAL_GPIO_DeInit+0x86>
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	697a      	ldr	r2, [r7, #20]
 8012ff8:	f002 0203 	and.w	r2, r2, #3
 8012ffc:	0092      	lsls	r2, r2, #2
 8012ffe:	4093      	lsls	r3, r2
 8013000:	68fa      	ldr	r2, [r7, #12]
 8013002:	429a      	cmp	r2, r3
 8013004:	d136      	bne.n	8013074 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8013006:	4b48      	ldr	r3, [pc, #288]	@ (8013128 <HAL_GPIO_DeInit+0x1b8>)
 8013008:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 801300c:	693b      	ldr	r3, [r7, #16]
 801300e:	43db      	mvns	r3, r3
 8013010:	4945      	ldr	r1, [pc, #276]	@ (8013128 <HAL_GPIO_DeInit+0x1b8>)
 8013012:	4013      	ands	r3, r2
 8013014:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8013018:	4b43      	ldr	r3, [pc, #268]	@ (8013128 <HAL_GPIO_DeInit+0x1b8>)
 801301a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 801301e:	693b      	ldr	r3, [r7, #16]
 8013020:	43db      	mvns	r3, r3
 8013022:	4941      	ldr	r1, [pc, #260]	@ (8013128 <HAL_GPIO_DeInit+0x1b8>)
 8013024:	4013      	ands	r3, r2
 8013026:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 801302a:	4b3f      	ldr	r3, [pc, #252]	@ (8013128 <HAL_GPIO_DeInit+0x1b8>)
 801302c:	681a      	ldr	r2, [r3, #0]
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	43db      	mvns	r3, r3
 8013032:	493d      	ldr	r1, [pc, #244]	@ (8013128 <HAL_GPIO_DeInit+0x1b8>)
 8013034:	4013      	ands	r3, r2
 8013036:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8013038:	4b3b      	ldr	r3, [pc, #236]	@ (8013128 <HAL_GPIO_DeInit+0x1b8>)
 801303a:	685a      	ldr	r2, [r3, #4]
 801303c:	693b      	ldr	r3, [r7, #16]
 801303e:	43db      	mvns	r3, r3
 8013040:	4939      	ldr	r1, [pc, #228]	@ (8013128 <HAL_GPIO_DeInit+0x1b8>)
 8013042:	4013      	ands	r3, r2
 8013044:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	f003 0303 	and.w	r3, r3, #3
 801304c:	009b      	lsls	r3, r3, #2
 801304e:	220f      	movs	r2, #15
 8013050:	fa02 f303 	lsl.w	r3, r2, r3
 8013054:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8013056:	4a2f      	ldr	r2, [pc, #188]	@ (8013114 <HAL_GPIO_DeInit+0x1a4>)
 8013058:	697b      	ldr	r3, [r7, #20]
 801305a:	089b      	lsrs	r3, r3, #2
 801305c:	3302      	adds	r3, #2
 801305e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	43da      	mvns	r2, r3
 8013066:	482b      	ldr	r0, [pc, #172]	@ (8013114 <HAL_GPIO_DeInit+0x1a4>)
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	089b      	lsrs	r3, r3, #2
 801306c:	400a      	ands	r2, r1
 801306e:	3302      	adds	r3, #2
 8013070:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681a      	ldr	r2, [r3, #0]
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	005b      	lsls	r3, r3, #1
 801307c:	2103      	movs	r1, #3
 801307e:	fa01 f303 	lsl.w	r3, r1, r3
 8013082:	431a      	orrs	r2, r3
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	08da      	lsrs	r2, r3, #3
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	3208      	adds	r2, #8
 8013090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	f003 0307 	and.w	r3, r3, #7
 801309a:	009b      	lsls	r3, r3, #2
 801309c:	220f      	movs	r2, #15
 801309e:	fa02 f303 	lsl.w	r3, r2, r3
 80130a2:	43db      	mvns	r3, r3
 80130a4:	697a      	ldr	r2, [r7, #20]
 80130a6:	08d2      	lsrs	r2, r2, #3
 80130a8:	4019      	ands	r1, r3
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	3208      	adds	r2, #8
 80130ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	68da      	ldr	r2, [r3, #12]
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	005b      	lsls	r3, r3, #1
 80130ba:	2103      	movs	r1, #3
 80130bc:	fa01 f303 	lsl.w	r3, r1, r3
 80130c0:	43db      	mvns	r3, r3
 80130c2:	401a      	ands	r2, r3
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	685a      	ldr	r2, [r3, #4]
 80130cc:	2101      	movs	r1, #1
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	fa01 f303 	lsl.w	r3, r1, r3
 80130d4:	43db      	mvns	r3, r3
 80130d6:	401a      	ands	r2, r3
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	689a      	ldr	r2, [r3, #8]
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	005b      	lsls	r3, r3, #1
 80130e4:	2103      	movs	r1, #3
 80130e6:	fa01 f303 	lsl.w	r3, r1, r3
 80130ea:	43db      	mvns	r3, r3
 80130ec:	401a      	ands	r2, r3
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	3301      	adds	r3, #1
 80130f6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80130f8:	683a      	ldr	r2, [r7, #0]
 80130fa:	697b      	ldr	r3, [r7, #20]
 80130fc:	fa22 f303 	lsr.w	r3, r2, r3
 8013100:	2b00      	cmp	r3, #0
 8013102:	f47f af3d 	bne.w	8012f80 <HAL_GPIO_DeInit+0x10>
  }
}
 8013106:	bf00      	nop
 8013108:	bf00      	nop
 801310a:	371c      	adds	r7, #28
 801310c:	46bd      	mov	sp, r7
 801310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013112:	4770      	bx	lr
 8013114:	40010000 	.word	0x40010000
 8013118:	48000400 	.word	0x48000400
 801311c:	48000800 	.word	0x48000800
 8013120:	48000c00 	.word	0x48000c00
 8013124:	48001000 	.word	0x48001000
 8013128:	58000800 	.word	0x58000800

0801312c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801312c:	b480      	push	{r7}
 801312e:	b083      	sub	sp, #12
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
 8013134:	460b      	mov	r3, r1
 8013136:	807b      	strh	r3, [r7, #2]
 8013138:	4613      	mov	r3, r2
 801313a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801313c:	787b      	ldrb	r3, [r7, #1]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d003      	beq.n	801314a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8013142:	887a      	ldrh	r2, [r7, #2]
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8013148:	e002      	b.n	8013150 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801314a:	887a      	ldrh	r2, [r7, #2]
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8013150:	bf00      	nop
 8013152:	370c      	adds	r7, #12
 8013154:	46bd      	mov	sp, r7
 8013156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315a:	4770      	bx	lr

0801315c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b082      	sub	sp, #8
 8013160:	af00      	add	r7, sp, #0
 8013162:	4603      	mov	r3, r0
 8013164:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8013166:	4b08      	ldr	r3, [pc, #32]	@ (8013188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8013168:	68da      	ldr	r2, [r3, #12]
 801316a:	88fb      	ldrh	r3, [r7, #6]
 801316c:	4013      	ands	r3, r2
 801316e:	2b00      	cmp	r3, #0
 8013170:	d006      	beq.n	8013180 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8013172:	4a05      	ldr	r2, [pc, #20]	@ (8013188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8013174:	88fb      	ldrh	r3, [r7, #6]
 8013176:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8013178:	88fb      	ldrh	r3, [r7, #6]
 801317a:	4618      	mov	r0, r3
 801317c:	f007 f9ec 	bl	801a558 <HAL_GPIO_EXTI_Callback>
  }
}
 8013180:	bf00      	nop
 8013182:	3708      	adds	r7, #8
 8013184:	46bd      	mov	sp, r7
 8013186:	bd80      	pop	{r7, pc}
 8013188:	58000800 	.word	0x58000800

0801318c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b082      	sub	sp, #8
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d101      	bne.n	801319e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801319a:	2301      	movs	r3, #1
 801319c:	e08d      	b.n	80132ba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80131a4:	b2db      	uxtb	r3, r3
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d106      	bne.n	80131b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	2200      	movs	r2, #0
 80131ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f000 f8b4 	bl	8013320 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2224      	movs	r2, #36	@ 0x24
 80131bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	681a      	ldr	r2, [r3, #0]
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	f022 0201 	bic.w	r2, r2, #1
 80131ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	685a      	ldr	r2, [r3, #4]
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80131dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	689a      	ldr	r2, [r3, #8]
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80131ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	68db      	ldr	r3, [r3, #12]
 80131f2:	2b01      	cmp	r3, #1
 80131f4:	d107      	bne.n	8013206 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	689a      	ldr	r2, [r3, #8]
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8013202:	609a      	str	r2, [r3, #8]
 8013204:	e006      	b.n	8013214 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	689a      	ldr	r2, [r3, #8]
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8013212:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	68db      	ldr	r3, [r3, #12]
 8013218:	2b02      	cmp	r3, #2
 801321a:	d108      	bne.n	801322e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	685a      	ldr	r2, [r3, #4]
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801322a:	605a      	str	r2, [r3, #4]
 801322c:	e007      	b.n	801323e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	685a      	ldr	r2, [r3, #4]
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801323c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	685b      	ldr	r3, [r3, #4]
 8013244:	687a      	ldr	r2, [r7, #4]
 8013246:	6812      	ldr	r2, [r2, #0]
 8013248:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801324c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013250:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	68da      	ldr	r2, [r3, #12]
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8013260:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	691a      	ldr	r2, [r3, #16]
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	695b      	ldr	r3, [r3, #20]
 801326a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	699b      	ldr	r3, [r3, #24]
 8013272:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	430a      	orrs	r2, r1
 801327a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	69d9      	ldr	r1, [r3, #28]
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	6a1a      	ldr	r2, [r3, #32]
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	430a      	orrs	r2, r1
 801328a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	681a      	ldr	r2, [r3, #0]
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	f042 0201 	orr.w	r2, r2, #1
 801329a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2200      	movs	r2, #0
 80132a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	2220      	movs	r2, #32
 80132a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2200      	movs	r2, #0
 80132ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	2200      	movs	r2, #0
 80132b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80132b8:	2300      	movs	r3, #0
}
 80132ba:	4618      	mov	r0, r3
 80132bc:	3708      	adds	r7, #8
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}

080132c2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80132c2:	b580      	push	{r7, lr}
 80132c4:	b082      	sub	sp, #8
 80132c6:	af00      	add	r7, sp, #0
 80132c8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d101      	bne.n	80132d4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80132d0:	2301      	movs	r3, #1
 80132d2:	e021      	b.n	8013318 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2224      	movs	r2, #36	@ 0x24
 80132d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	681a      	ldr	r2, [r3, #0]
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	f022 0201 	bic.w	r2, r2, #1
 80132ea:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f000 f821 	bl	8013334 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	2200      	movs	r2, #0
 80132f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2200      	movs	r2, #0
 80132fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	2200      	movs	r2, #0
 8013304:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	2200      	movs	r2, #0
 801330a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	2200      	movs	r2, #0
 8013312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8013316:	2300      	movs	r3, #0
}
 8013318:	4618      	mov	r0, r3
 801331a:	3708      	adds	r7, #8
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8013320:	b480      	push	{r7}
 8013322:	b083      	sub	sp, #12
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8013328:	bf00      	nop
 801332a:	370c      	adds	r7, #12
 801332c:	46bd      	mov	sp, r7
 801332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013332:	4770      	bx	lr

08013334 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8013334:	b480      	push	{r7}
 8013336:	b083      	sub	sp, #12
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 801333c:	bf00      	nop
 801333e:	370c      	adds	r7, #12
 8013340:	46bd      	mov	sp, r7
 8013342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013346:	4770      	bx	lr

08013348 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b088      	sub	sp, #32
 801334c:	af02      	add	r7, sp, #8
 801334e:	60f8      	str	r0, [r7, #12]
 8013350:	607a      	str	r2, [r7, #4]
 8013352:	461a      	mov	r2, r3
 8013354:	460b      	mov	r3, r1
 8013356:	817b      	strh	r3, [r7, #10]
 8013358:	4613      	mov	r3, r2
 801335a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013362:	b2db      	uxtb	r3, r3
 8013364:	2b20      	cmp	r3, #32
 8013366:	f040 80fd 	bne.w	8013564 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013370:	2b01      	cmp	r3, #1
 8013372:	d101      	bne.n	8013378 <HAL_I2C_Master_Transmit+0x30>
 8013374:	2302      	movs	r3, #2
 8013376:	e0f6      	b.n	8013566 <HAL_I2C_Master_Transmit+0x21e>
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	2201      	movs	r2, #1
 801337c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8013380:	f7ff fb0c 	bl	801299c <HAL_GetTick>
 8013384:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8013386:	693b      	ldr	r3, [r7, #16]
 8013388:	9300      	str	r3, [sp, #0]
 801338a:	2319      	movs	r3, #25
 801338c:	2201      	movs	r2, #1
 801338e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013392:	68f8      	ldr	r0, [r7, #12]
 8013394:	f000 fa24 	bl	80137e0 <I2C_WaitOnFlagUntilTimeout>
 8013398:	4603      	mov	r3, r0
 801339a:	2b00      	cmp	r3, #0
 801339c:	d001      	beq.n	80133a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 801339e:	2301      	movs	r3, #1
 80133a0:	e0e1      	b.n	8013566 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	2221      	movs	r2, #33	@ 0x21
 80133a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	2210      	movs	r2, #16
 80133ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	2200      	movs	r2, #0
 80133b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	687a      	ldr	r2, [r7, #4]
 80133bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	893a      	ldrh	r2, [r7, #8]
 80133c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	2200      	movs	r2, #0
 80133c8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80133ce:	b29b      	uxth	r3, r3
 80133d0:	2bff      	cmp	r3, #255	@ 0xff
 80133d2:	d906      	bls.n	80133e2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	22ff      	movs	r2, #255	@ 0xff
 80133d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80133da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80133de:	617b      	str	r3, [r7, #20]
 80133e0:	e007      	b.n	80133f2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80133e6:	b29a      	uxth	r2, r3
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80133ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80133f0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d024      	beq.n	8013444 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133fe:	781a      	ldrb	r2, [r3, #0]
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801340a:	1c5a      	adds	r2, r3, #1
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013414:	b29b      	uxth	r3, r3
 8013416:	3b01      	subs	r3, #1
 8013418:	b29a      	uxth	r2, r3
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013422:	3b01      	subs	r3, #1
 8013424:	b29a      	uxth	r2, r3
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801342e:	b2db      	uxtb	r3, r3
 8013430:	3301      	adds	r3, #1
 8013432:	b2da      	uxtb	r2, r3
 8013434:	8979      	ldrh	r1, [r7, #10]
 8013436:	4b4e      	ldr	r3, [pc, #312]	@ (8013570 <HAL_I2C_Master_Transmit+0x228>)
 8013438:	9300      	str	r3, [sp, #0]
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	68f8      	ldr	r0, [r7, #12]
 801343e:	f000 fc1f 	bl	8013c80 <I2C_TransferConfig>
 8013442:	e066      	b.n	8013512 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013448:	b2da      	uxtb	r2, r3
 801344a:	8979      	ldrh	r1, [r7, #10]
 801344c:	4b48      	ldr	r3, [pc, #288]	@ (8013570 <HAL_I2C_Master_Transmit+0x228>)
 801344e:	9300      	str	r3, [sp, #0]
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	68f8      	ldr	r0, [r7, #12]
 8013454:	f000 fc14 	bl	8013c80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8013458:	e05b      	b.n	8013512 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801345a:	693a      	ldr	r2, [r7, #16]
 801345c:	6a39      	ldr	r1, [r7, #32]
 801345e:	68f8      	ldr	r0, [r7, #12]
 8013460:	f000 fa17 	bl	8013892 <I2C_WaitOnTXISFlagUntilTimeout>
 8013464:	4603      	mov	r3, r0
 8013466:	2b00      	cmp	r3, #0
 8013468:	d001      	beq.n	801346e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 801346a:	2301      	movs	r3, #1
 801346c:	e07b      	b.n	8013566 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013472:	781a      	ldrb	r2, [r3, #0]
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801347e:	1c5a      	adds	r2, r3, #1
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013488:	b29b      	uxth	r3, r3
 801348a:	3b01      	subs	r3, #1
 801348c:	b29a      	uxth	r2, r3
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013496:	3b01      	subs	r3, #1
 8013498:	b29a      	uxth	r2, r3
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80134a2:	b29b      	uxth	r3, r3
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d034      	beq.n	8013512 <HAL_I2C_Master_Transmit+0x1ca>
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d130      	bne.n	8013512 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	9300      	str	r3, [sp, #0]
 80134b4:	6a3b      	ldr	r3, [r7, #32]
 80134b6:	2200      	movs	r2, #0
 80134b8:	2180      	movs	r1, #128	@ 0x80
 80134ba:	68f8      	ldr	r0, [r7, #12]
 80134bc:	f000 f990 	bl	80137e0 <I2C_WaitOnFlagUntilTimeout>
 80134c0:	4603      	mov	r3, r0
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d001      	beq.n	80134ca <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80134c6:	2301      	movs	r3, #1
 80134c8:	e04d      	b.n	8013566 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	2bff      	cmp	r3, #255	@ 0xff
 80134d2:	d90e      	bls.n	80134f2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	22ff      	movs	r2, #255	@ 0xff
 80134d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80134de:	b2da      	uxtb	r2, r3
 80134e0:	8979      	ldrh	r1, [r7, #10]
 80134e2:	2300      	movs	r3, #0
 80134e4:	9300      	str	r3, [sp, #0]
 80134e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80134ea:	68f8      	ldr	r0, [r7, #12]
 80134ec:	f000 fbc8 	bl	8013c80 <I2C_TransferConfig>
 80134f0:	e00f      	b.n	8013512 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80134f6:	b29a      	uxth	r2, r3
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013500:	b2da      	uxtb	r2, r3
 8013502:	8979      	ldrh	r1, [r7, #10]
 8013504:	2300      	movs	r3, #0
 8013506:	9300      	str	r3, [sp, #0]
 8013508:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801350c:	68f8      	ldr	r0, [r7, #12]
 801350e:	f000 fbb7 	bl	8013c80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013516:	b29b      	uxth	r3, r3
 8013518:	2b00      	cmp	r3, #0
 801351a:	d19e      	bne.n	801345a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801351c:	693a      	ldr	r2, [r7, #16]
 801351e:	6a39      	ldr	r1, [r7, #32]
 8013520:	68f8      	ldr	r0, [r7, #12]
 8013522:	f000 f9fd 	bl	8013920 <I2C_WaitOnSTOPFlagUntilTimeout>
 8013526:	4603      	mov	r3, r0
 8013528:	2b00      	cmp	r3, #0
 801352a:	d001      	beq.n	8013530 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 801352c:	2301      	movs	r3, #1
 801352e:	e01a      	b.n	8013566 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	2220      	movs	r2, #32
 8013536:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	6859      	ldr	r1, [r3, #4]
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	681a      	ldr	r2, [r3, #0]
 8013542:	4b0c      	ldr	r3, [pc, #48]	@ (8013574 <HAL_I2C_Master_Transmit+0x22c>)
 8013544:	400b      	ands	r3, r1
 8013546:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	2220      	movs	r2, #32
 801354c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	2200      	movs	r2, #0
 8013554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	2200      	movs	r2, #0
 801355c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8013560:	2300      	movs	r3, #0
 8013562:	e000      	b.n	8013566 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8013564:	2302      	movs	r3, #2
  }
}
 8013566:	4618      	mov	r0, r3
 8013568:	3718      	adds	r7, #24
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}
 801356e:	bf00      	nop
 8013570:	80002000 	.word	0x80002000
 8013574:	fe00e800 	.word	0xfe00e800

08013578 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b088      	sub	sp, #32
 801357c:	af02      	add	r7, sp, #8
 801357e:	60f8      	str	r0, [r7, #12]
 8013580:	607a      	str	r2, [r7, #4]
 8013582:	461a      	mov	r2, r3
 8013584:	460b      	mov	r3, r1
 8013586:	817b      	strh	r3, [r7, #10]
 8013588:	4613      	mov	r3, r2
 801358a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013592:	b2db      	uxtb	r3, r3
 8013594:	2b20      	cmp	r3, #32
 8013596:	f040 80db 	bne.w	8013750 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80135a0:	2b01      	cmp	r3, #1
 80135a2:	d101      	bne.n	80135a8 <HAL_I2C_Master_Receive+0x30>
 80135a4:	2302      	movs	r3, #2
 80135a6:	e0d4      	b.n	8013752 <HAL_I2C_Master_Receive+0x1da>
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	2201      	movs	r2, #1
 80135ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80135b0:	f7ff f9f4 	bl	801299c <HAL_GetTick>
 80135b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	9300      	str	r3, [sp, #0]
 80135ba:	2319      	movs	r3, #25
 80135bc:	2201      	movs	r2, #1
 80135be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80135c2:	68f8      	ldr	r0, [r7, #12]
 80135c4:	f000 f90c 	bl	80137e0 <I2C_WaitOnFlagUntilTimeout>
 80135c8:	4603      	mov	r3, r0
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d001      	beq.n	80135d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80135ce:	2301      	movs	r3, #1
 80135d0:	e0bf      	b.n	8013752 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	2222      	movs	r2, #34	@ 0x22
 80135d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	2210      	movs	r2, #16
 80135de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	2200      	movs	r2, #0
 80135e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	687a      	ldr	r2, [r7, #4]
 80135ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	893a      	ldrh	r2, [r7, #8]
 80135f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	2200      	movs	r2, #0
 80135f8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80135fe:	b29b      	uxth	r3, r3
 8013600:	2bff      	cmp	r3, #255	@ 0xff
 8013602:	d90e      	bls.n	8013622 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	22ff      	movs	r2, #255	@ 0xff
 8013608:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801360e:	b2da      	uxtb	r2, r3
 8013610:	8979      	ldrh	r1, [r7, #10]
 8013612:	4b52      	ldr	r3, [pc, #328]	@ (801375c <HAL_I2C_Master_Receive+0x1e4>)
 8013614:	9300      	str	r3, [sp, #0]
 8013616:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801361a:	68f8      	ldr	r0, [r7, #12]
 801361c:	f000 fb30 	bl	8013c80 <I2C_TransferConfig>
 8013620:	e06d      	b.n	80136fe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013626:	b29a      	uxth	r2, r3
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013630:	b2da      	uxtb	r2, r3
 8013632:	8979      	ldrh	r1, [r7, #10]
 8013634:	4b49      	ldr	r3, [pc, #292]	@ (801375c <HAL_I2C_Master_Receive+0x1e4>)
 8013636:	9300      	str	r3, [sp, #0]
 8013638:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801363c:	68f8      	ldr	r0, [r7, #12]
 801363e:	f000 fb1f 	bl	8013c80 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8013642:	e05c      	b.n	80136fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013644:	697a      	ldr	r2, [r7, #20]
 8013646:	6a39      	ldr	r1, [r7, #32]
 8013648:	68f8      	ldr	r0, [r7, #12]
 801364a:	f000 f9ad 	bl	80139a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 801364e:	4603      	mov	r3, r0
 8013650:	2b00      	cmp	r3, #0
 8013652:	d001      	beq.n	8013658 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8013654:	2301      	movs	r3, #1
 8013656:	e07c      	b.n	8013752 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013662:	b2d2      	uxtb	r2, r2
 8013664:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801366a:	1c5a      	adds	r2, r3, #1
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013674:	3b01      	subs	r3, #1
 8013676:	b29a      	uxth	r2, r3
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013680:	b29b      	uxth	r3, r3
 8013682:	3b01      	subs	r3, #1
 8013684:	b29a      	uxth	r2, r3
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801368e:	b29b      	uxth	r3, r3
 8013690:	2b00      	cmp	r3, #0
 8013692:	d034      	beq.n	80136fe <HAL_I2C_Master_Receive+0x186>
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013698:	2b00      	cmp	r3, #0
 801369a:	d130      	bne.n	80136fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801369c:	697b      	ldr	r3, [r7, #20]
 801369e:	9300      	str	r3, [sp, #0]
 80136a0:	6a3b      	ldr	r3, [r7, #32]
 80136a2:	2200      	movs	r2, #0
 80136a4:	2180      	movs	r1, #128	@ 0x80
 80136a6:	68f8      	ldr	r0, [r7, #12]
 80136a8:	f000 f89a 	bl	80137e0 <I2C_WaitOnFlagUntilTimeout>
 80136ac:	4603      	mov	r3, r0
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d001      	beq.n	80136b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80136b2:	2301      	movs	r3, #1
 80136b4:	e04d      	b.n	8013752 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80136ba:	b29b      	uxth	r3, r3
 80136bc:	2bff      	cmp	r3, #255	@ 0xff
 80136be:	d90e      	bls.n	80136de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	22ff      	movs	r2, #255	@ 0xff
 80136c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80136ca:	b2da      	uxtb	r2, r3
 80136cc:	8979      	ldrh	r1, [r7, #10]
 80136ce:	2300      	movs	r3, #0
 80136d0:	9300      	str	r3, [sp, #0]
 80136d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80136d6:	68f8      	ldr	r0, [r7, #12]
 80136d8:	f000 fad2 	bl	8013c80 <I2C_TransferConfig>
 80136dc:	e00f      	b.n	80136fe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80136e2:	b29a      	uxth	r2, r3
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80136ec:	b2da      	uxtb	r2, r3
 80136ee:	8979      	ldrh	r1, [r7, #10]
 80136f0:	2300      	movs	r3, #0
 80136f2:	9300      	str	r3, [sp, #0]
 80136f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80136f8:	68f8      	ldr	r0, [r7, #12]
 80136fa:	f000 fac1 	bl	8013c80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013702:	b29b      	uxth	r3, r3
 8013704:	2b00      	cmp	r3, #0
 8013706:	d19d      	bne.n	8013644 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013708:	697a      	ldr	r2, [r7, #20]
 801370a:	6a39      	ldr	r1, [r7, #32]
 801370c:	68f8      	ldr	r0, [r7, #12]
 801370e:	f000 f907 	bl	8013920 <I2C_WaitOnSTOPFlagUntilTimeout>
 8013712:	4603      	mov	r3, r0
 8013714:	2b00      	cmp	r3, #0
 8013716:	d001      	beq.n	801371c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8013718:	2301      	movs	r3, #1
 801371a:	e01a      	b.n	8013752 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	2220      	movs	r2, #32
 8013722:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	6859      	ldr	r1, [r3, #4]
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	681a      	ldr	r2, [r3, #0]
 801372e:	4b0c      	ldr	r3, [pc, #48]	@ (8013760 <HAL_I2C_Master_Receive+0x1e8>)
 8013730:	400b      	ands	r3, r1
 8013732:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	2220      	movs	r2, #32
 8013738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	2200      	movs	r2, #0
 8013740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	2200      	movs	r2, #0
 8013748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801374c:	2300      	movs	r3, #0
 801374e:	e000      	b.n	8013752 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8013750:	2302      	movs	r3, #2
  }
}
 8013752:	4618      	mov	r0, r3
 8013754:	3718      	adds	r7, #24
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}
 801375a:	bf00      	nop
 801375c:	80002400 	.word	0x80002400
 8013760:	fe00e800 	.word	0xfe00e800

08013764 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8013764:	b480      	push	{r7}
 8013766:	b083      	sub	sp, #12
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013772:	b2db      	uxtb	r3, r3
}
 8013774:	4618      	mov	r0, r3
 8013776:	370c      	adds	r7, #12
 8013778:	46bd      	mov	sp, r7
 801377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377e:	4770      	bx	lr

08013780 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8013780:	b480      	push	{r7}
 8013782:	b083      	sub	sp, #12
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 801378c:	4618      	mov	r0, r3
 801378e:	370c      	adds	r7, #12
 8013790:	46bd      	mov	sp, r7
 8013792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013796:	4770      	bx	lr

08013798 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8013798:	b480      	push	{r7}
 801379a:	b083      	sub	sp, #12
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	699b      	ldr	r3, [r3, #24]
 80137a6:	f003 0302 	and.w	r3, r3, #2
 80137aa:	2b02      	cmp	r3, #2
 80137ac:	d103      	bne.n	80137b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	2200      	movs	r2, #0
 80137b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	699b      	ldr	r3, [r3, #24]
 80137bc:	f003 0301 	and.w	r3, r3, #1
 80137c0:	2b01      	cmp	r3, #1
 80137c2:	d007      	beq.n	80137d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	699a      	ldr	r2, [r3, #24]
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	f042 0201 	orr.w	r2, r2, #1
 80137d2:	619a      	str	r2, [r3, #24]
  }
}
 80137d4:	bf00      	nop
 80137d6:	370c      	adds	r7, #12
 80137d8:	46bd      	mov	sp, r7
 80137da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137de:	4770      	bx	lr

080137e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b084      	sub	sp, #16
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	60f8      	str	r0, [r7, #12]
 80137e8:	60b9      	str	r1, [r7, #8]
 80137ea:	603b      	str	r3, [r7, #0]
 80137ec:	4613      	mov	r3, r2
 80137ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80137f0:	e03b      	b.n	801386a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80137f2:	69ba      	ldr	r2, [r7, #24]
 80137f4:	6839      	ldr	r1, [r7, #0]
 80137f6:	68f8      	ldr	r0, [r7, #12]
 80137f8:	f000 f962 	bl	8013ac0 <I2C_IsErrorOccurred>
 80137fc:	4603      	mov	r3, r0
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d001      	beq.n	8013806 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8013802:	2301      	movs	r3, #1
 8013804:	e041      	b.n	801388a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	f1b3 3fff 	cmp.w	r3, #4294967295
 801380c:	d02d      	beq.n	801386a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801380e:	f7ff f8c5 	bl	801299c <HAL_GetTick>
 8013812:	4602      	mov	r2, r0
 8013814:	69bb      	ldr	r3, [r7, #24]
 8013816:	1ad3      	subs	r3, r2, r3
 8013818:	683a      	ldr	r2, [r7, #0]
 801381a:	429a      	cmp	r2, r3
 801381c:	d302      	bcc.n	8013824 <I2C_WaitOnFlagUntilTimeout+0x44>
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d122      	bne.n	801386a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	699a      	ldr	r2, [r3, #24]
 801382a:	68bb      	ldr	r3, [r7, #8]
 801382c:	4013      	ands	r3, r2
 801382e:	68ba      	ldr	r2, [r7, #8]
 8013830:	429a      	cmp	r2, r3
 8013832:	bf0c      	ite	eq
 8013834:	2301      	moveq	r3, #1
 8013836:	2300      	movne	r3, #0
 8013838:	b2db      	uxtb	r3, r3
 801383a:	461a      	mov	r2, r3
 801383c:	79fb      	ldrb	r3, [r7, #7]
 801383e:	429a      	cmp	r2, r3
 8013840:	d113      	bne.n	801386a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013846:	f043 0220 	orr.w	r2, r3, #32
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	2220      	movs	r2, #32
 8013852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	2200      	movs	r2, #0
 801385a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	2200      	movs	r2, #0
 8013862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8013866:	2301      	movs	r3, #1
 8013868:	e00f      	b.n	801388a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	699a      	ldr	r2, [r3, #24]
 8013870:	68bb      	ldr	r3, [r7, #8]
 8013872:	4013      	ands	r3, r2
 8013874:	68ba      	ldr	r2, [r7, #8]
 8013876:	429a      	cmp	r2, r3
 8013878:	bf0c      	ite	eq
 801387a:	2301      	moveq	r3, #1
 801387c:	2300      	movne	r3, #0
 801387e:	b2db      	uxtb	r3, r3
 8013880:	461a      	mov	r2, r3
 8013882:	79fb      	ldrb	r3, [r7, #7]
 8013884:	429a      	cmp	r2, r3
 8013886:	d0b4      	beq.n	80137f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013888:	2300      	movs	r3, #0
}
 801388a:	4618      	mov	r0, r3
 801388c:	3710      	adds	r7, #16
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}

08013892 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8013892:	b580      	push	{r7, lr}
 8013894:	b084      	sub	sp, #16
 8013896:	af00      	add	r7, sp, #0
 8013898:	60f8      	str	r0, [r7, #12]
 801389a:	60b9      	str	r1, [r7, #8]
 801389c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801389e:	e033      	b.n	8013908 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80138a0:	687a      	ldr	r2, [r7, #4]
 80138a2:	68b9      	ldr	r1, [r7, #8]
 80138a4:	68f8      	ldr	r0, [r7, #12]
 80138a6:	f000 f90b 	bl	8013ac0 <I2C_IsErrorOccurred>
 80138aa:	4603      	mov	r3, r0
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d001      	beq.n	80138b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80138b0:	2301      	movs	r3, #1
 80138b2:	e031      	b.n	8013918 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80138b4:	68bb      	ldr	r3, [r7, #8]
 80138b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138ba:	d025      	beq.n	8013908 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80138bc:	f7ff f86e 	bl	801299c <HAL_GetTick>
 80138c0:	4602      	mov	r2, r0
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	1ad3      	subs	r3, r2, r3
 80138c6:	68ba      	ldr	r2, [r7, #8]
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d302      	bcc.n	80138d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d11a      	bne.n	8013908 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	699b      	ldr	r3, [r3, #24]
 80138d8:	f003 0302 	and.w	r3, r3, #2
 80138dc:	2b02      	cmp	r3, #2
 80138de:	d013      	beq.n	8013908 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138e4:	f043 0220 	orr.w	r2, r3, #32
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	2220      	movs	r2, #32
 80138f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2200      	movs	r2, #0
 80138f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	2200      	movs	r2, #0
 8013900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8013904:	2301      	movs	r3, #1
 8013906:	e007      	b.n	8013918 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	699b      	ldr	r3, [r3, #24]
 801390e:	f003 0302 	and.w	r3, r3, #2
 8013912:	2b02      	cmp	r3, #2
 8013914:	d1c4      	bne.n	80138a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8013916:	2300      	movs	r3, #0
}
 8013918:	4618      	mov	r0, r3
 801391a:	3710      	adds	r7, #16
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}

08013920 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b084      	sub	sp, #16
 8013924:	af00      	add	r7, sp, #0
 8013926:	60f8      	str	r0, [r7, #12]
 8013928:	60b9      	str	r1, [r7, #8]
 801392a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801392c:	e02f      	b.n	801398e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801392e:	687a      	ldr	r2, [r7, #4]
 8013930:	68b9      	ldr	r1, [r7, #8]
 8013932:	68f8      	ldr	r0, [r7, #12]
 8013934:	f000 f8c4 	bl	8013ac0 <I2C_IsErrorOccurred>
 8013938:	4603      	mov	r3, r0
 801393a:	2b00      	cmp	r3, #0
 801393c:	d001      	beq.n	8013942 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801393e:	2301      	movs	r3, #1
 8013940:	e02d      	b.n	801399e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013942:	f7ff f82b 	bl	801299c <HAL_GetTick>
 8013946:	4602      	mov	r2, r0
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	1ad3      	subs	r3, r2, r3
 801394c:	68ba      	ldr	r2, [r7, #8]
 801394e:	429a      	cmp	r2, r3
 8013950:	d302      	bcc.n	8013958 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8013952:	68bb      	ldr	r3, [r7, #8]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d11a      	bne.n	801398e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	699b      	ldr	r3, [r3, #24]
 801395e:	f003 0320 	and.w	r3, r3, #32
 8013962:	2b20      	cmp	r3, #32
 8013964:	d013      	beq.n	801398e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801396a:	f043 0220 	orr.w	r2, r3, #32
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	2220      	movs	r2, #32
 8013976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	2200      	movs	r2, #0
 801397e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	2200      	movs	r2, #0
 8013986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 801398a:	2301      	movs	r3, #1
 801398c:	e007      	b.n	801399e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	699b      	ldr	r3, [r3, #24]
 8013994:	f003 0320 	and.w	r3, r3, #32
 8013998:	2b20      	cmp	r3, #32
 801399a:	d1c8      	bne.n	801392e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801399c:	2300      	movs	r3, #0
}
 801399e:	4618      	mov	r0, r3
 80139a0:	3710      	adds	r7, #16
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}
	...

080139a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b086      	sub	sp, #24
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	60f8      	str	r0, [r7, #12]
 80139b0:	60b9      	str	r1, [r7, #8]
 80139b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80139b4:	2300      	movs	r3, #0
 80139b6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80139b8:	e071      	b.n	8013a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80139ba:	687a      	ldr	r2, [r7, #4]
 80139bc:	68b9      	ldr	r1, [r7, #8]
 80139be:	68f8      	ldr	r0, [r7, #12]
 80139c0:	f000 f87e 	bl	8013ac0 <I2C_IsErrorOccurred>
 80139c4:	4603      	mov	r3, r0
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d001      	beq.n	80139ce <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80139ca:	2301      	movs	r3, #1
 80139cc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	699b      	ldr	r3, [r3, #24]
 80139d4:	f003 0320 	and.w	r3, r3, #32
 80139d8:	2b20      	cmp	r3, #32
 80139da:	d13b      	bne.n	8013a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80139dc:	7dfb      	ldrb	r3, [r7, #23]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d138      	bne.n	8013a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	699b      	ldr	r3, [r3, #24]
 80139e8:	f003 0304 	and.w	r3, r3, #4
 80139ec:	2b04      	cmp	r3, #4
 80139ee:	d105      	bne.n	80139fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d001      	beq.n	80139fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80139f8:	2300      	movs	r3, #0
 80139fa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	699b      	ldr	r3, [r3, #24]
 8013a02:	f003 0310 	and.w	r3, r3, #16
 8013a06:	2b10      	cmp	r3, #16
 8013a08:	d121      	bne.n	8013a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	2210      	movs	r2, #16
 8013a10:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	2204      	movs	r2, #4
 8013a16:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	2220      	movs	r2, #32
 8013a1e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	6859      	ldr	r1, [r3, #4]
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	681a      	ldr	r2, [r3, #0]
 8013a2a:	4b24      	ldr	r3, [pc, #144]	@ (8013abc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8013a2c:	400b      	ands	r3, r1
 8013a2e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	2220      	movs	r2, #32
 8013a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2200      	movs	r2, #0
 8013a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8013a48:	2301      	movs	r3, #1
 8013a4a:	75fb      	strb	r3, [r7, #23]
 8013a4c:	e002      	b.n	8013a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2200      	movs	r2, #0
 8013a52:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8013a54:	f7fe ffa2 	bl	801299c <HAL_GetTick>
 8013a58:	4602      	mov	r2, r0
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	1ad3      	subs	r3, r2, r3
 8013a5e:	68ba      	ldr	r2, [r7, #8]
 8013a60:	429a      	cmp	r2, r3
 8013a62:	d302      	bcc.n	8013a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d119      	bne.n	8013a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8013a6a:	7dfb      	ldrb	r3, [r7, #23]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d116      	bne.n	8013a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	699b      	ldr	r3, [r3, #24]
 8013a76:	f003 0304 	and.w	r3, r3, #4
 8013a7a:	2b04      	cmp	r3, #4
 8013a7c:	d00f      	beq.n	8013a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a82:	f043 0220 	orr.w	r2, r3, #32
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	2220      	movs	r2, #32
 8013a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	2200      	movs	r2, #0
 8013a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8013a9a:	2301      	movs	r3, #1
 8013a9c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	699b      	ldr	r3, [r3, #24]
 8013aa4:	f003 0304 	and.w	r3, r3, #4
 8013aa8:	2b04      	cmp	r3, #4
 8013aaa:	d002      	beq.n	8013ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8013aac:	7dfb      	ldrb	r3, [r7, #23]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d083      	beq.n	80139ba <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8013ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	3718      	adds	r7, #24
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd80      	pop	{r7, pc}
 8013abc:	fe00e800 	.word	0xfe00e800

08013ac0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b08a      	sub	sp, #40	@ 0x28
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	60f8      	str	r0, [r7, #12]
 8013ac8:	60b9      	str	r1, [r7, #8]
 8013aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013acc:	2300      	movs	r3, #0
 8013ace:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	699b      	ldr	r3, [r3, #24]
 8013ad8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8013ada:	2300      	movs	r3, #0
 8013adc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8013ae2:	69bb      	ldr	r3, [r7, #24]
 8013ae4:	f003 0310 	and.w	r3, r3, #16
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d068      	beq.n	8013bbe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	2210      	movs	r2, #16
 8013af2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8013af4:	e049      	b.n	8013b8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8013af6:	68bb      	ldr	r3, [r7, #8]
 8013af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013afc:	d045      	beq.n	8013b8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8013afe:	f7fe ff4d 	bl	801299c <HAL_GetTick>
 8013b02:	4602      	mov	r2, r0
 8013b04:	69fb      	ldr	r3, [r7, #28]
 8013b06:	1ad3      	subs	r3, r2, r3
 8013b08:	68ba      	ldr	r2, [r7, #8]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d302      	bcc.n	8013b14 <I2C_IsErrorOccurred+0x54>
 8013b0e:	68bb      	ldr	r3, [r7, #8]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d13a      	bne.n	8013b8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	685b      	ldr	r3, [r3, #4]
 8013b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013b1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013b26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	699b      	ldr	r3, [r3, #24]
 8013b2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013b32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013b36:	d121      	bne.n	8013b7c <I2C_IsErrorOccurred+0xbc>
 8013b38:	697b      	ldr	r3, [r7, #20]
 8013b3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013b3e:	d01d      	beq.n	8013b7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8013b40:	7cfb      	ldrb	r3, [r7, #19]
 8013b42:	2b20      	cmp	r3, #32
 8013b44:	d01a      	beq.n	8013b7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	685a      	ldr	r2, [r3, #4]
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8013b54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8013b56:	f7fe ff21 	bl	801299c <HAL_GetTick>
 8013b5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013b5c:	e00e      	b.n	8013b7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8013b5e:	f7fe ff1d 	bl	801299c <HAL_GetTick>
 8013b62:	4602      	mov	r2, r0
 8013b64:	69fb      	ldr	r3, [r7, #28]
 8013b66:	1ad3      	subs	r3, r2, r3
 8013b68:	2b19      	cmp	r3, #25
 8013b6a:	d907      	bls.n	8013b7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8013b6c:	6a3b      	ldr	r3, [r7, #32]
 8013b6e:	f043 0320 	orr.w	r3, r3, #32
 8013b72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8013b74:	2301      	movs	r3, #1
 8013b76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8013b7a:	e006      	b.n	8013b8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	699b      	ldr	r3, [r3, #24]
 8013b82:	f003 0320 	and.w	r3, r3, #32
 8013b86:	2b20      	cmp	r3, #32
 8013b88:	d1e9      	bne.n	8013b5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	699b      	ldr	r3, [r3, #24]
 8013b90:	f003 0320 	and.w	r3, r3, #32
 8013b94:	2b20      	cmp	r3, #32
 8013b96:	d003      	beq.n	8013ba0 <I2C_IsErrorOccurred+0xe0>
 8013b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d0aa      	beq.n	8013af6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8013ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d103      	bne.n	8013bb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	2220      	movs	r2, #32
 8013bae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8013bb0:	6a3b      	ldr	r3, [r7, #32]
 8013bb2:	f043 0304 	orr.w	r3, r3, #4
 8013bb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8013bb8:	2301      	movs	r3, #1
 8013bba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	699b      	ldr	r3, [r3, #24]
 8013bc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8013bc6:	69bb      	ldr	r3, [r7, #24]
 8013bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d00b      	beq.n	8013be8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8013bd0:	6a3b      	ldr	r3, [r7, #32]
 8013bd2:	f043 0301 	orr.w	r3, r3, #1
 8013bd6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013be0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8013be2:	2301      	movs	r3, #1
 8013be4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8013be8:	69bb      	ldr	r3, [r7, #24]
 8013bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d00b      	beq.n	8013c0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8013bf2:	6a3b      	ldr	r3, [r7, #32]
 8013bf4:	f043 0308 	orr.w	r3, r3, #8
 8013bf8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8013c02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8013c04:	2301      	movs	r3, #1
 8013c06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8013c0a:	69bb      	ldr	r3, [r7, #24]
 8013c0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d00b      	beq.n	8013c2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8013c14:	6a3b      	ldr	r3, [r7, #32]
 8013c16:	f043 0302 	orr.w	r3, r3, #2
 8013c1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013c24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8013c26:	2301      	movs	r3, #1
 8013c28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8013c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d01c      	beq.n	8013c6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8013c34:	68f8      	ldr	r0, [r7, #12]
 8013c36:	f7ff fdaf 	bl	8013798 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	6859      	ldr	r1, [r3, #4]
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	681a      	ldr	r2, [r3, #0]
 8013c44:	4b0d      	ldr	r3, [pc, #52]	@ (8013c7c <I2C_IsErrorOccurred+0x1bc>)
 8013c46:	400b      	ands	r3, r1
 8013c48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013c4e:	6a3b      	ldr	r3, [r7, #32]
 8013c50:	431a      	orrs	r2, r3
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	2220      	movs	r2, #32
 8013c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	2200      	movs	r2, #0
 8013c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	2200      	movs	r2, #0
 8013c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8013c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3728      	adds	r7, #40	@ 0x28
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}
 8013c7a:	bf00      	nop
 8013c7c:	fe00e800 	.word	0xfe00e800

08013c80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8013c80:	b480      	push	{r7}
 8013c82:	b087      	sub	sp, #28
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	60f8      	str	r0, [r7, #12]
 8013c88:	607b      	str	r3, [r7, #4]
 8013c8a:	460b      	mov	r3, r1
 8013c8c:	817b      	strh	r3, [r7, #10]
 8013c8e:	4613      	mov	r3, r2
 8013c90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8013c92:	897b      	ldrh	r3, [r7, #10]
 8013c94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8013c98:	7a7b      	ldrb	r3, [r7, #9]
 8013c9a:	041b      	lsls	r3, r3, #16
 8013c9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8013ca0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8013ca6:	6a3b      	ldr	r3, [r7, #32]
 8013ca8:	4313      	orrs	r3, r2
 8013caa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013cae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	685a      	ldr	r2, [r3, #4]
 8013cb6:	6a3b      	ldr	r3, [r7, #32]
 8013cb8:	0d5b      	lsrs	r3, r3, #21
 8013cba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8013cbe:	4b08      	ldr	r3, [pc, #32]	@ (8013ce0 <I2C_TransferConfig+0x60>)
 8013cc0:	430b      	orrs	r3, r1
 8013cc2:	43db      	mvns	r3, r3
 8013cc4:	ea02 0103 	and.w	r1, r2, r3
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	697a      	ldr	r2, [r7, #20]
 8013cce:	430a      	orrs	r2, r1
 8013cd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8013cd2:	bf00      	nop
 8013cd4:	371c      	adds	r7, #28
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cdc:	4770      	bx	lr
 8013cde:	bf00      	nop
 8013ce0:	03ff63ff 	.word	0x03ff63ff

08013ce4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8013ce4:	b480      	push	{r7}
 8013ce6:	b083      	sub	sp, #12
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
 8013cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013cf4:	b2db      	uxtb	r3, r3
 8013cf6:	2b20      	cmp	r3, #32
 8013cf8:	d138      	bne.n	8013d6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013d00:	2b01      	cmp	r3, #1
 8013d02:	d101      	bne.n	8013d08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8013d04:	2302      	movs	r3, #2
 8013d06:	e032      	b.n	8013d6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	2201      	movs	r2, #1
 8013d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	2224      	movs	r2, #36	@ 0x24
 8013d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	681a      	ldr	r2, [r3, #0]
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	f022 0201 	bic.w	r2, r2, #1
 8013d26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	681a      	ldr	r2, [r3, #0]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8013d36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	6819      	ldr	r1, [r3, #0]
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	683a      	ldr	r2, [r7, #0]
 8013d44:	430a      	orrs	r2, r1
 8013d46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	681a      	ldr	r2, [r3, #0]
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	f042 0201 	orr.w	r2, r2, #1
 8013d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2220      	movs	r2, #32
 8013d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2200      	movs	r2, #0
 8013d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8013d68:	2300      	movs	r3, #0
 8013d6a:	e000      	b.n	8013d6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013d6c:	2302      	movs	r3, #2
  }
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	370c      	adds	r7, #12
 8013d72:	46bd      	mov	sp, r7
 8013d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d78:	4770      	bx	lr

08013d7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8013d7a:	b480      	push	{r7}
 8013d7c:	b085      	sub	sp, #20
 8013d7e:	af00      	add	r7, sp, #0
 8013d80:	6078      	str	r0, [r7, #4]
 8013d82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013d8a:	b2db      	uxtb	r3, r3
 8013d8c:	2b20      	cmp	r3, #32
 8013d8e:	d139      	bne.n	8013e04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013d96:	2b01      	cmp	r3, #1
 8013d98:	d101      	bne.n	8013d9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8013d9a:	2302      	movs	r3, #2
 8013d9c:	e033      	b.n	8013e06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	2201      	movs	r2, #1
 8013da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	2224      	movs	r2, #36	@ 0x24
 8013daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	681a      	ldr	r2, [r3, #0]
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	f022 0201 	bic.w	r2, r2, #1
 8013dbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8013dcc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8013dce:	683b      	ldr	r3, [r7, #0]
 8013dd0:	021b      	lsls	r3, r3, #8
 8013dd2:	68fa      	ldr	r2, [r7, #12]
 8013dd4:	4313      	orrs	r3, r2
 8013dd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	68fa      	ldr	r2, [r7, #12]
 8013dde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	681a      	ldr	r2, [r3, #0]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	f042 0201 	orr.w	r2, r2, #1
 8013dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2220      	movs	r2, #32
 8013df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8013e00:	2300      	movs	r3, #0
 8013e02:	e000      	b.n	8013e06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8013e04:	2302      	movs	r3, #2
  }
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	3714      	adds	r7, #20
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e10:	4770      	bx	lr

08013e12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8013e12:	b580      	push	{r7, lr}
 8013e14:	b084      	sub	sp, #16
 8013e16:	af00      	add	r7, sp, #0
 8013e18:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d101      	bne.n	8013e24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8013e20:	2301      	movs	r3, #1
 8013e22:	e0c0      	b.n	8013fa6 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8013e2a:	b2db      	uxtb	r3, r3
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d106      	bne.n	8013e3e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	2200      	movs	r2, #0
 8013e34:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f7ec ff8b 	bl	8000d54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2203      	movs	r2, #3
 8013e42:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f002 ff2a 	bl	8016ca4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013e50:	2300      	movs	r3, #0
 8013e52:	73fb      	strb	r3, [r7, #15]
 8013e54:	e03e      	b.n	8013ed4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8013e56:	7bfa      	ldrb	r2, [r7, #15]
 8013e58:	6879      	ldr	r1, [r7, #4]
 8013e5a:	4613      	mov	r3, r2
 8013e5c:	009b      	lsls	r3, r3, #2
 8013e5e:	4413      	add	r3, r2
 8013e60:	00db      	lsls	r3, r3, #3
 8013e62:	440b      	add	r3, r1
 8013e64:	3311      	adds	r3, #17
 8013e66:	2201      	movs	r2, #1
 8013e68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8013e6a:	7bfa      	ldrb	r2, [r7, #15]
 8013e6c:	6879      	ldr	r1, [r7, #4]
 8013e6e:	4613      	mov	r3, r2
 8013e70:	009b      	lsls	r3, r3, #2
 8013e72:	4413      	add	r3, r2
 8013e74:	00db      	lsls	r3, r3, #3
 8013e76:	440b      	add	r3, r1
 8013e78:	3310      	adds	r3, #16
 8013e7a:	7bfa      	ldrb	r2, [r7, #15]
 8013e7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8013e7e:	7bfa      	ldrb	r2, [r7, #15]
 8013e80:	6879      	ldr	r1, [r7, #4]
 8013e82:	4613      	mov	r3, r2
 8013e84:	009b      	lsls	r3, r3, #2
 8013e86:	4413      	add	r3, r2
 8013e88:	00db      	lsls	r3, r3, #3
 8013e8a:	440b      	add	r3, r1
 8013e8c:	3313      	adds	r3, #19
 8013e8e:	2200      	movs	r2, #0
 8013e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8013e92:	7bfa      	ldrb	r2, [r7, #15]
 8013e94:	6879      	ldr	r1, [r7, #4]
 8013e96:	4613      	mov	r3, r2
 8013e98:	009b      	lsls	r3, r3, #2
 8013e9a:	4413      	add	r3, r2
 8013e9c:	00db      	lsls	r3, r3, #3
 8013e9e:	440b      	add	r3, r1
 8013ea0:	3320      	adds	r3, #32
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8013ea6:	7bfa      	ldrb	r2, [r7, #15]
 8013ea8:	6879      	ldr	r1, [r7, #4]
 8013eaa:	4613      	mov	r3, r2
 8013eac:	009b      	lsls	r3, r3, #2
 8013eae:	4413      	add	r3, r2
 8013eb0:	00db      	lsls	r3, r3, #3
 8013eb2:	440b      	add	r3, r1
 8013eb4:	3324      	adds	r3, #36	@ 0x24
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8013eba:	7bfb      	ldrb	r3, [r7, #15]
 8013ebc:	6879      	ldr	r1, [r7, #4]
 8013ebe:	1c5a      	adds	r2, r3, #1
 8013ec0:	4613      	mov	r3, r2
 8013ec2:	009b      	lsls	r3, r3, #2
 8013ec4:	4413      	add	r3, r2
 8013ec6:	00db      	lsls	r3, r3, #3
 8013ec8:	440b      	add	r3, r1
 8013eca:	2200      	movs	r2, #0
 8013ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013ece:	7bfb      	ldrb	r3, [r7, #15]
 8013ed0:	3301      	adds	r3, #1
 8013ed2:	73fb      	strb	r3, [r7, #15]
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	791b      	ldrb	r3, [r3, #4]
 8013ed8:	7bfa      	ldrb	r2, [r7, #15]
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d3bb      	bcc.n	8013e56 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013ede:	2300      	movs	r3, #0
 8013ee0:	73fb      	strb	r3, [r7, #15]
 8013ee2:	e044      	b.n	8013f6e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013ee4:	7bfa      	ldrb	r2, [r7, #15]
 8013ee6:	6879      	ldr	r1, [r7, #4]
 8013ee8:	4613      	mov	r3, r2
 8013eea:	009b      	lsls	r3, r3, #2
 8013eec:	4413      	add	r3, r2
 8013eee:	00db      	lsls	r3, r3, #3
 8013ef0:	440b      	add	r3, r1
 8013ef2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013efa:	7bfa      	ldrb	r2, [r7, #15]
 8013efc:	6879      	ldr	r1, [r7, #4]
 8013efe:	4613      	mov	r3, r2
 8013f00:	009b      	lsls	r3, r3, #2
 8013f02:	4413      	add	r3, r2
 8013f04:	00db      	lsls	r3, r3, #3
 8013f06:	440b      	add	r3, r1
 8013f08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013f0c:	7bfa      	ldrb	r2, [r7, #15]
 8013f0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013f10:	7bfa      	ldrb	r2, [r7, #15]
 8013f12:	6879      	ldr	r1, [r7, #4]
 8013f14:	4613      	mov	r3, r2
 8013f16:	009b      	lsls	r3, r3, #2
 8013f18:	4413      	add	r3, r2
 8013f1a:	00db      	lsls	r3, r3, #3
 8013f1c:	440b      	add	r3, r1
 8013f1e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8013f22:	2200      	movs	r2, #0
 8013f24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8013f26:	7bfa      	ldrb	r2, [r7, #15]
 8013f28:	6879      	ldr	r1, [r7, #4]
 8013f2a:	4613      	mov	r3, r2
 8013f2c:	009b      	lsls	r3, r3, #2
 8013f2e:	4413      	add	r3, r2
 8013f30:	00db      	lsls	r3, r3, #3
 8013f32:	440b      	add	r3, r1
 8013f34:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8013f38:	2200      	movs	r2, #0
 8013f3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8013f3c:	7bfa      	ldrb	r2, [r7, #15]
 8013f3e:	6879      	ldr	r1, [r7, #4]
 8013f40:	4613      	mov	r3, r2
 8013f42:	009b      	lsls	r3, r3, #2
 8013f44:	4413      	add	r3, r2
 8013f46:	00db      	lsls	r3, r3, #3
 8013f48:	440b      	add	r3, r1
 8013f4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013f4e:	2200      	movs	r2, #0
 8013f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8013f52:	7bfa      	ldrb	r2, [r7, #15]
 8013f54:	6879      	ldr	r1, [r7, #4]
 8013f56:	4613      	mov	r3, r2
 8013f58:	009b      	lsls	r3, r3, #2
 8013f5a:	4413      	add	r3, r2
 8013f5c:	00db      	lsls	r3, r3, #3
 8013f5e:	440b      	add	r3, r1
 8013f60:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8013f64:	2200      	movs	r2, #0
 8013f66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013f68:	7bfb      	ldrb	r3, [r7, #15]
 8013f6a:	3301      	adds	r3, #1
 8013f6c:	73fb      	strb	r3, [r7, #15]
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	791b      	ldrb	r3, [r3, #4]
 8013f72:	7bfa      	ldrb	r2, [r7, #15]
 8013f74:	429a      	cmp	r2, r3
 8013f76:	d3b5      	bcc.n	8013ee4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	6818      	ldr	r0, [r3, #0]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	3304      	adds	r3, #4
 8013f80:	e893 0006 	ldmia.w	r3, {r1, r2}
 8013f84:	f002 fea9 	bl	8016cda <USB_DevInit>

  hpcd->USB_Address = 0U;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2201      	movs	r2, #1
 8013f92:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	7a9b      	ldrb	r3, [r3, #10]
 8013f9a:	2b01      	cmp	r3, #1
 8013f9c:	d102      	bne.n	8013fa4 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	f000 f805 	bl	8013fae <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8013fa4:	2300      	movs	r3, #0
}
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	3710      	adds	r7, #16
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd80      	pop	{r7, pc}

08013fae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8013fae:	b480      	push	{r7}
 8013fb0:	b085      	sub	sp, #20
 8013fb2:	af00      	add	r7, sp, #0
 8013fb4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2201      	movs	r2, #1
 8013fc0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8013fd2:	b29b      	uxth	r3, r3
 8013fd4:	f043 0301 	orr.w	r3, r3, #1
 8013fd8:	b29a      	uxth	r2, r3
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8013fe6:	b29b      	uxth	r3, r3
 8013fe8:	f043 0302 	orr.w	r3, r3, #2
 8013fec:	b29a      	uxth	r2, r3
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8013ff4:	2300      	movs	r3, #0
}
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	3714      	adds	r7, #20
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014000:	4770      	bx	lr
	...

08014004 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8014004:	b480      	push	{r7}
 8014006:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8014008:	4b05      	ldr	r3, [pc, #20]	@ (8014020 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	4a04      	ldr	r2, [pc, #16]	@ (8014020 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801400e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014012:	6013      	str	r3, [r2, #0]
}
 8014014:	bf00      	nop
 8014016:	46bd      	mov	sp, r7
 8014018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401c:	4770      	bx	lr
 801401e:	bf00      	nop
 8014020:	58000400 	.word	0x58000400

08014024 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8014024:	b480      	push	{r7}
 8014026:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8014028:	4b04      	ldr	r3, [pc, #16]	@ (801403c <HAL_PWREx_GetVoltageRange+0x18>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8014030:	4618      	mov	r0, r3
 8014032:	46bd      	mov	sp, r7
 8014034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014038:	4770      	bx	lr
 801403a:	bf00      	nop
 801403c:	58000400 	.word	0x58000400

08014040 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8014040:	b480      	push	{r7}
 8014042:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8014044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801404e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014052:	d101      	bne.n	8014058 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8014054:	2301      	movs	r3, #1
 8014056:	e000      	b.n	801405a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8014058:	2300      	movs	r3, #0
}
 801405a:	4618      	mov	r0, r3
 801405c:	46bd      	mov	sp, r7
 801405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014062:	4770      	bx	lr

08014064 <LL_RCC_HSE_Enable>:
{
 8014064:	b480      	push	{r7}
 8014066:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8014068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014076:	6013      	str	r3, [r2, #0]
}
 8014078:	bf00      	nop
 801407a:	46bd      	mov	sp, r7
 801407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014080:	4770      	bx	lr

08014082 <LL_RCC_HSE_Disable>:
{
 8014082:	b480      	push	{r7}
 8014084:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8014086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014090:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014094:	6013      	str	r3, [r2, #0]
}
 8014096:	bf00      	nop
 8014098:	46bd      	mov	sp, r7
 801409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409e:	4770      	bx	lr

080140a0 <LL_RCC_HSE_IsReady>:
{
 80140a0:	b480      	push	{r7}
 80140a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80140a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80140ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80140b2:	d101      	bne.n	80140b8 <LL_RCC_HSE_IsReady+0x18>
 80140b4:	2301      	movs	r3, #1
 80140b6:	e000      	b.n	80140ba <LL_RCC_HSE_IsReady+0x1a>
 80140b8:	2300      	movs	r3, #0
}
 80140ba:	4618      	mov	r0, r3
 80140bc:	46bd      	mov	sp, r7
 80140be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c2:	4770      	bx	lr

080140c4 <LL_RCC_HSI_Enable>:
{
 80140c4:	b480      	push	{r7}
 80140c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80140c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80140d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80140d6:	6013      	str	r3, [r2, #0]
}
 80140d8:	bf00      	nop
 80140da:	46bd      	mov	sp, r7
 80140dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e0:	4770      	bx	lr

080140e2 <LL_RCC_HSI_Disable>:
{
 80140e2:	b480      	push	{r7}
 80140e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80140e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80140f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80140f4:	6013      	str	r3, [r2, #0]
}
 80140f6:	bf00      	nop
 80140f8:	46bd      	mov	sp, r7
 80140fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fe:	4770      	bx	lr

08014100 <LL_RCC_HSI_IsReady>:
{
 8014100:	b480      	push	{r7}
 8014102:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8014104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801410e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014112:	d101      	bne.n	8014118 <LL_RCC_HSI_IsReady+0x18>
 8014114:	2301      	movs	r3, #1
 8014116:	e000      	b.n	801411a <LL_RCC_HSI_IsReady+0x1a>
 8014118:	2300      	movs	r3, #0
}
 801411a:	4618      	mov	r0, r3
 801411c:	46bd      	mov	sp, r7
 801411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014122:	4770      	bx	lr

08014124 <LL_RCC_HSI_SetCalibTrimming>:
{
 8014124:	b480      	push	{r7}
 8014126:	b083      	sub	sp, #12
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 801412c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014130:	685b      	ldr	r3, [r3, #4]
 8014132:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	061b      	lsls	r3, r3, #24
 801413a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801413e:	4313      	orrs	r3, r2
 8014140:	604b      	str	r3, [r1, #4]
}
 8014142:	bf00      	nop
 8014144:	370c      	adds	r7, #12
 8014146:	46bd      	mov	sp, r7
 8014148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414c:	4770      	bx	lr

0801414e <LL_RCC_HSI48_Enable>:
{
 801414e:	b480      	push	{r7}
 8014150:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8014152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014156:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801415a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801415e:	f043 0301 	orr.w	r3, r3, #1
 8014162:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8014166:	bf00      	nop
 8014168:	46bd      	mov	sp, r7
 801416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801416e:	4770      	bx	lr

08014170 <LL_RCC_HSI48_Disable>:
{
 8014170:	b480      	push	{r7}
 8014172:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8014174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014178:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801417c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014180:	f023 0301 	bic.w	r3, r3, #1
 8014184:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8014188:	bf00      	nop
 801418a:	46bd      	mov	sp, r7
 801418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014190:	4770      	bx	lr

08014192 <LL_RCC_HSI48_IsReady>:
{
 8014192:	b480      	push	{r7}
 8014194:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8014196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801419a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801419e:	f003 0302 	and.w	r3, r3, #2
 80141a2:	2b02      	cmp	r3, #2
 80141a4:	d101      	bne.n	80141aa <LL_RCC_HSI48_IsReady+0x18>
 80141a6:	2301      	movs	r3, #1
 80141a8:	e000      	b.n	80141ac <LL_RCC_HSI48_IsReady+0x1a>
 80141aa:	2300      	movs	r3, #0
}
 80141ac:	4618      	mov	r0, r3
 80141ae:	46bd      	mov	sp, r7
 80141b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b4:	4770      	bx	lr

080141b6 <LL_RCC_LSE_Enable>:
{
 80141b6:	b480      	push	{r7}
 80141b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80141ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80141be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80141c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80141c6:	f043 0301 	orr.w	r3, r3, #1
 80141ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80141ce:	bf00      	nop
 80141d0:	46bd      	mov	sp, r7
 80141d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d6:	4770      	bx	lr

080141d8 <LL_RCC_LSE_Disable>:
{
 80141d8:	b480      	push	{r7}
 80141da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80141dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80141e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80141e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80141e8:	f023 0301 	bic.w	r3, r3, #1
 80141ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80141f0:	bf00      	nop
 80141f2:	46bd      	mov	sp, r7
 80141f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f8:	4770      	bx	lr

080141fa <LL_RCC_LSE_EnableBypass>:
{
 80141fa:	b480      	push	{r7}
 80141fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80141fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014206:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801420a:	f043 0304 	orr.w	r3, r3, #4
 801420e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8014212:	bf00      	nop
 8014214:	46bd      	mov	sp, r7
 8014216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421a:	4770      	bx	lr

0801421c <LL_RCC_LSE_DisableBypass>:
{
 801421c:	b480      	push	{r7}
 801421e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8014220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014228:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801422c:	f023 0304 	bic.w	r3, r3, #4
 8014230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8014234:	bf00      	nop
 8014236:	46bd      	mov	sp, r7
 8014238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423c:	4770      	bx	lr

0801423e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 801423e:	b480      	push	{r7}
 8014240:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8014242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801424a:	f003 0302 	and.w	r3, r3, #2
 801424e:	2b02      	cmp	r3, #2
 8014250:	d101      	bne.n	8014256 <LL_RCC_LSE_IsReady+0x18>
 8014252:	2301      	movs	r3, #1
 8014254:	e000      	b.n	8014258 <LL_RCC_LSE_IsReady+0x1a>
 8014256:	2300      	movs	r3, #0
}
 8014258:	4618      	mov	r0, r3
 801425a:	46bd      	mov	sp, r7
 801425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014260:	4770      	bx	lr

08014262 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8014262:	b480      	push	{r7}
 8014264:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8014266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801426a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801426e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014272:	f043 0301 	orr.w	r3, r3, #1
 8014276:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 801427a:	bf00      	nop
 801427c:	46bd      	mov	sp, r7
 801427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014282:	4770      	bx	lr

08014284 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8014284:	b480      	push	{r7}
 8014286:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8014288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801428c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014290:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014294:	f023 0301 	bic.w	r3, r3, #1
 8014298:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 801429c:	bf00      	nop
 801429e:	46bd      	mov	sp, r7
 80142a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a4:	4770      	bx	lr

080142a6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80142a6:	b480      	push	{r7}
 80142a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80142aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80142ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80142b2:	f003 0302 	and.w	r3, r3, #2
 80142b6:	2b02      	cmp	r3, #2
 80142b8:	d101      	bne.n	80142be <LL_RCC_LSI1_IsReady+0x18>
 80142ba:	2301      	movs	r3, #1
 80142bc:	e000      	b.n	80142c0 <LL_RCC_LSI1_IsReady+0x1a>
 80142be:	2300      	movs	r3, #0
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	46bd      	mov	sp, r7
 80142c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c8:	4770      	bx	lr

080142ca <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80142ca:	b480      	push	{r7}
 80142cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80142ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80142d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80142d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80142da:	f043 0304 	orr.w	r3, r3, #4
 80142de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80142e2:	bf00      	nop
 80142e4:	46bd      	mov	sp, r7
 80142e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ea:	4770      	bx	lr

080142ec <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80142ec:	b480      	push	{r7}
 80142ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80142f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80142f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80142f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80142fc:	f023 0304 	bic.w	r3, r3, #4
 8014300:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8014304:	bf00      	nop
 8014306:	46bd      	mov	sp, r7
 8014308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430c:	4770      	bx	lr

0801430e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 801430e:	b480      	push	{r7}
 8014310:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8014312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801431a:	f003 0308 	and.w	r3, r3, #8
 801431e:	2b08      	cmp	r3, #8
 8014320:	d101      	bne.n	8014326 <LL_RCC_LSI2_IsReady+0x18>
 8014322:	2301      	movs	r3, #1
 8014324:	e000      	b.n	8014328 <LL_RCC_LSI2_IsReady+0x1a>
 8014326:	2300      	movs	r3, #0
}
 8014328:	4618      	mov	r0, r3
 801432a:	46bd      	mov	sp, r7
 801432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014330:	4770      	bx	lr

08014332 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8014332:	b480      	push	{r7}
 8014334:	b083      	sub	sp, #12
 8014336:	af00      	add	r7, sp, #0
 8014338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 801433a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801433e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014342:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	021b      	lsls	r3, r3, #8
 801434a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801434e:	4313      	orrs	r3, r2
 8014350:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8014354:	bf00      	nop
 8014356:	370c      	adds	r7, #12
 8014358:	46bd      	mov	sp, r7
 801435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435e:	4770      	bx	lr

08014360 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8014360:	b480      	push	{r7}
 8014362:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8014364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801436e:	f043 0301 	orr.w	r3, r3, #1
 8014372:	6013      	str	r3, [r2, #0]
}
 8014374:	bf00      	nop
 8014376:	46bd      	mov	sp, r7
 8014378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437c:	4770      	bx	lr

0801437e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 801437e:	b480      	push	{r7}
 8014380:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8014382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801438c:	f023 0301 	bic.w	r3, r3, #1
 8014390:	6013      	str	r3, [r2, #0]
}
 8014392:	bf00      	nop
 8014394:	46bd      	mov	sp, r7
 8014396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439a:	4770      	bx	lr

0801439c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 801439c:	b480      	push	{r7}
 801439e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80143a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	f003 0302 	and.w	r3, r3, #2
 80143aa:	2b02      	cmp	r3, #2
 80143ac:	d101      	bne.n	80143b2 <LL_RCC_MSI_IsReady+0x16>
 80143ae:	2301      	movs	r3, #1
 80143b0:	e000      	b.n	80143b4 <LL_RCC_MSI_IsReady+0x18>
 80143b2:	2300      	movs	r3, #0
}
 80143b4:	4618      	mov	r0, r3
 80143b6:	46bd      	mov	sp, r7
 80143b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143bc:	4770      	bx	lr

080143be <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80143be:	b480      	push	{r7}
 80143c0:	b083      	sub	sp, #12
 80143c2:	af00      	add	r7, sp, #0
 80143c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80143c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80143d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	4313      	orrs	r3, r2
 80143d8:	600b      	str	r3, [r1, #0]
}
 80143da:	bf00      	nop
 80143dc:	370c      	adds	r7, #12
 80143de:	46bd      	mov	sp, r7
 80143e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e4:	4770      	bx	lr

080143e6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80143e6:	b480      	push	{r7}
 80143e8:	b083      	sub	sp, #12
 80143ea:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80143ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80143f6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2bb0      	cmp	r3, #176	@ 0xb0
 80143fc:	d901      	bls.n	8014402 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80143fe:	23b0      	movs	r3, #176	@ 0xb0
 8014400:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8014402:	687b      	ldr	r3, [r7, #4]
}
 8014404:	4618      	mov	r0, r3
 8014406:	370c      	adds	r7, #12
 8014408:	46bd      	mov	sp, r7
 801440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440e:	4770      	bx	lr

08014410 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8014410:	b480      	push	{r7}
 8014412:	b083      	sub	sp, #12
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8014418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801441c:	685b      	ldr	r3, [r3, #4]
 801441e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	021b      	lsls	r3, r3, #8
 8014426:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801442a:	4313      	orrs	r3, r2
 801442c:	604b      	str	r3, [r1, #4]
}
 801442e:	bf00      	nop
 8014430:	370c      	adds	r7, #12
 8014432:	46bd      	mov	sp, r7
 8014434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014438:	4770      	bx	lr

0801443a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 801443a:	b480      	push	{r7}
 801443c:	b083      	sub	sp, #12
 801443e:	af00      	add	r7, sp, #0
 8014440:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8014442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014446:	689b      	ldr	r3, [r3, #8]
 8014448:	f023 0203 	bic.w	r2, r3, #3
 801444c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	4313      	orrs	r3, r2
 8014454:	608b      	str	r3, [r1, #8]
}
 8014456:	bf00      	nop
 8014458:	370c      	adds	r7, #12
 801445a:	46bd      	mov	sp, r7
 801445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014460:	4770      	bx	lr

08014462 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8014462:	b480      	push	{r7}
 8014464:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8014466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801446a:	689b      	ldr	r3, [r3, #8]
 801446c:	f003 030c 	and.w	r3, r3, #12
}
 8014470:	4618      	mov	r0, r3
 8014472:	46bd      	mov	sp, r7
 8014474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014478:	4770      	bx	lr

0801447a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 801447a:	b480      	push	{r7}
 801447c:	b083      	sub	sp, #12
 801447e:	af00      	add	r7, sp, #0
 8014480:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8014482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014486:	689b      	ldr	r3, [r3, #8]
 8014488:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801448c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	4313      	orrs	r3, r2
 8014494:	608b      	str	r3, [r1, #8]
}
 8014496:	bf00      	nop
 8014498:	370c      	adds	r7, #12
 801449a:	46bd      	mov	sp, r7
 801449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a0:	4770      	bx	lr

080144a2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80144a2:	b480      	push	{r7}
 80144a4:	b083      	sub	sp, #12
 80144a6:	af00      	add	r7, sp, #0
 80144a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80144aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80144ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80144b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80144b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	4313      	orrs	r3, r2
 80144be:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80144c2:	bf00      	nop
 80144c4:	370c      	adds	r7, #12
 80144c6:	46bd      	mov	sp, r7
 80144c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144cc:	4770      	bx	lr

080144ce <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80144ce:	b480      	push	{r7}
 80144d0:	b083      	sub	sp, #12
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80144d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80144da:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80144de:	f023 020f 	bic.w	r2, r3, #15
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	091b      	lsrs	r3, r3, #4
 80144e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80144ea:	4313      	orrs	r3, r2
 80144ec:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80144f0:	bf00      	nop
 80144f2:	370c      	adds	r7, #12
 80144f4:	46bd      	mov	sp, r7
 80144f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fa:	4770      	bx	lr

080144fc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80144fc:	b480      	push	{r7}
 80144fe:	b083      	sub	sp, #12
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8014504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014508:	689b      	ldr	r3, [r3, #8]
 801450a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801450e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	4313      	orrs	r3, r2
 8014516:	608b      	str	r3, [r1, #8]
}
 8014518:	bf00      	nop
 801451a:	370c      	adds	r7, #12
 801451c:	46bd      	mov	sp, r7
 801451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014522:	4770      	bx	lr

08014524 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8014524:	b480      	push	{r7}
 8014526:	b083      	sub	sp, #12
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 801452c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014530:	689b      	ldr	r3, [r3, #8]
 8014532:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8014536:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	4313      	orrs	r3, r2
 801453e:	608b      	str	r3, [r1, #8]
}
 8014540:	bf00      	nop
 8014542:	370c      	adds	r7, #12
 8014544:	46bd      	mov	sp, r7
 8014546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454a:	4770      	bx	lr

0801454c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 801454c:	b480      	push	{r7}
 801454e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8014550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014554:	689b      	ldr	r3, [r3, #8]
 8014556:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 801455a:	4618      	mov	r0, r3
 801455c:	46bd      	mov	sp, r7
 801455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014562:	4770      	bx	lr

08014564 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8014564:	b480      	push	{r7}
 8014566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8014568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801456c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8014570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8014574:	4618      	mov	r0, r3
 8014576:	46bd      	mov	sp, r7
 8014578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457c:	4770      	bx	lr

0801457e <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 801457e:	b480      	push	{r7}
 8014580:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8014582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014586:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801458a:	011b      	lsls	r3, r3, #4
 801458c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8014590:	4618      	mov	r0, r3
 8014592:	46bd      	mov	sp, r7
 8014594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014598:	4770      	bx	lr

0801459a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 801459a:	b480      	push	{r7}
 801459c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 801459e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80145a2:	689b      	ldr	r3, [r3, #8]
 80145a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80145a8:	4618      	mov	r0, r3
 80145aa:	46bd      	mov	sp, r7
 80145ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b0:	4770      	bx	lr

080145b2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80145b2:	b480      	push	{r7}
 80145b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80145b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80145ba:	689b      	ldr	r3, [r3, #8]
 80145bc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80145c0:	4618      	mov	r0, r3
 80145c2:	46bd      	mov	sp, r7
 80145c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c8:	4770      	bx	lr

080145ca <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80145ca:	b480      	push	{r7}
 80145cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80145ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80145d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80145dc:	6013      	str	r3, [r2, #0]
}
 80145de:	bf00      	nop
 80145e0:	46bd      	mov	sp, r7
 80145e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e6:	4770      	bx	lr

080145e8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80145e8:	b480      	push	{r7}
 80145ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80145ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80145f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80145fa:	6013      	str	r3, [r2, #0]
}
 80145fc:	bf00      	nop
 80145fe:	46bd      	mov	sp, r7
 8014600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014604:	4770      	bx	lr

08014606 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8014606:	b480      	push	{r7}
 8014608:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 801460a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014614:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014618:	d101      	bne.n	801461e <LL_RCC_PLL_IsReady+0x18>
 801461a:	2301      	movs	r3, #1
 801461c:	e000      	b.n	8014620 <LL_RCC_PLL_IsReady+0x1a>
 801461e:	2300      	movs	r3, #0
}
 8014620:	4618      	mov	r0, r3
 8014622:	46bd      	mov	sp, r7
 8014624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014628:	4770      	bx	lr

0801462a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 801462a:	b480      	push	{r7}
 801462c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 801462e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014632:	68db      	ldr	r3, [r3, #12]
 8014634:	0a1b      	lsrs	r3, r3, #8
 8014636:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 801463a:	4618      	mov	r0, r3
 801463c:	46bd      	mov	sp, r7
 801463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014642:	4770      	bx	lr

08014644 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8014644:	b480      	push	{r7}
 8014646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8014648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801464c:	68db      	ldr	r3, [r3, #12]
 801464e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8014652:	4618      	mov	r0, r3
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr

0801465c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 801465c:	b480      	push	{r7}
 801465e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8014660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014664:	68db      	ldr	r3, [r3, #12]
 8014666:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 801466a:	4618      	mov	r0, r3
 801466c:	46bd      	mov	sp, r7
 801466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014672:	4770      	bx	lr

08014674 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8014674:	b480      	push	{r7}
 8014676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8014678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801467c:	68db      	ldr	r3, [r3, #12]
 801467e:	f003 0303 	and.w	r3, r3, #3
}
 8014682:	4618      	mov	r0, r3
 8014684:	46bd      	mov	sp, r7
 8014686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468a:	4770      	bx	lr

0801468c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 801468c:	b480      	push	{r7}
 801468e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8014690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014694:	689b      	ldr	r3, [r3, #8]
 8014696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801469a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801469e:	d101      	bne.n	80146a4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80146a0:	2301      	movs	r3, #1
 80146a2:	e000      	b.n	80146a6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80146a4:	2300      	movs	r3, #0
}
 80146a6:	4618      	mov	r0, r3
 80146a8:	46bd      	mov	sp, r7
 80146aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ae:	4770      	bx	lr

080146b0 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80146b0:	b480      	push	{r7}
 80146b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80146b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80146b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80146bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80146c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80146c4:	d101      	bne.n	80146ca <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80146c6:	2301      	movs	r3, #1
 80146c8:	e000      	b.n	80146cc <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80146ca:	2300      	movs	r3, #0
}
 80146cc:	4618      	mov	r0, r3
 80146ce:	46bd      	mov	sp, r7
 80146d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d4:	4770      	bx	lr

080146d6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80146d6:	b480      	push	{r7}
 80146d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80146da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80146de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80146e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80146e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80146ea:	d101      	bne.n	80146f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80146ec:	2301      	movs	r3, #1
 80146ee:	e000      	b.n	80146f2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80146f0:	2300      	movs	r3, #0
}
 80146f2:	4618      	mov	r0, r3
 80146f4:	46bd      	mov	sp, r7
 80146f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fa:	4770      	bx	lr

080146fc <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80146fc:	b480      	push	{r7}
 80146fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8014700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014704:	689b      	ldr	r3, [r3, #8]
 8014706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801470a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801470e:	d101      	bne.n	8014714 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8014710:	2301      	movs	r3, #1
 8014712:	e000      	b.n	8014716 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8014714:	2300      	movs	r3, #0
}
 8014716:	4618      	mov	r0, r3
 8014718:	46bd      	mov	sp, r7
 801471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471e:	4770      	bx	lr

08014720 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8014720:	b480      	push	{r7}
 8014722:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8014724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014728:	689b      	ldr	r3, [r3, #8]
 801472a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801472e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8014732:	d101      	bne.n	8014738 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8014734:	2301      	movs	r3, #1
 8014736:	e000      	b.n	801473a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8014738:	2300      	movs	r3, #0
}
 801473a:	4618      	mov	r0, r3
 801473c:	46bd      	mov	sp, r7
 801473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014742:	4770      	bx	lr

08014744 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014744:	b590      	push	{r4, r7, lr}
 8014746:	b08d      	sub	sp, #52	@ 0x34
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d101      	bne.n	8014756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8014752:	2301      	movs	r3, #1
 8014754:	e363      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	f003 0320 	and.w	r3, r3, #32
 801475e:	2b00      	cmp	r3, #0
 8014760:	f000 808d 	beq.w	801487e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014764:	f7ff fe7d 	bl	8014462 <LL_RCC_GetSysClkSource>
 8014768:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801476a:	f7ff ff83 	bl	8014674 <LL_RCC_PLL_GetMainSource>
 801476e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8014770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014772:	2b00      	cmp	r3, #0
 8014774:	d005      	beq.n	8014782 <HAL_RCC_OscConfig+0x3e>
 8014776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014778:	2b0c      	cmp	r3, #12
 801477a:	d147      	bne.n	801480c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 801477c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801477e:	2b01      	cmp	r3, #1
 8014780:	d144      	bne.n	801480c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	69db      	ldr	r3, [r3, #28]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d101      	bne.n	801478e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 801478a:	2301      	movs	r3, #1
 801478c:	e347      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014792:	f7ff fe28 	bl	80143e6 <LL_RCC_MSI_GetRange>
 8014796:	4603      	mov	r3, r0
 8014798:	429c      	cmp	r4, r3
 801479a:	d914      	bls.n	80147c6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147a0:	4618      	mov	r0, r3
 80147a2:	f000 fd61 	bl	8015268 <RCC_SetFlashLatencyFromMSIRange>
 80147a6:	4603      	mov	r3, r0
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d001      	beq.n	80147b0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80147ac:	2301      	movs	r3, #1
 80147ae:	e336      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7ff fe02 	bl	80143be <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	6a1b      	ldr	r3, [r3, #32]
 80147be:	4618      	mov	r0, r3
 80147c0:	f7ff fe26 	bl	8014410 <LL_RCC_MSI_SetCalibTrimming>
 80147c4:	e013      	b.n	80147ee <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147ca:	4618      	mov	r0, r3
 80147cc:	f7ff fdf7 	bl	80143be <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	6a1b      	ldr	r3, [r3, #32]
 80147d4:	4618      	mov	r0, r3
 80147d6:	f7ff fe1b 	bl	8014410 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147de:	4618      	mov	r0, r3
 80147e0:	f000 fd42 	bl	8015268 <RCC_SetFlashLatencyFromMSIRange>
 80147e4:	4603      	mov	r3, r0
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d001      	beq.n	80147ee <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80147ea:	2301      	movs	r3, #1
 80147ec:	e317      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80147ee:	f000 fcc9 	bl	8015184 <HAL_RCC_GetHCLKFreq>
 80147f2:	4603      	mov	r3, r0
 80147f4:	4aa4      	ldr	r2, [pc, #656]	@ (8014a88 <HAL_RCC_OscConfig+0x344>)
 80147f6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80147f8:	4ba4      	ldr	r3, [pc, #656]	@ (8014a8c <HAL_RCC_OscConfig+0x348>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7ec fb19 	bl	8000e34 <HAL_InitTick>
 8014802:	4603      	mov	r3, r0
 8014804:	2b00      	cmp	r3, #0
 8014806:	d039      	beq.n	801487c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8014808:	2301      	movs	r3, #1
 801480a:	e308      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	69db      	ldr	r3, [r3, #28]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d01e      	beq.n	8014852 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8014814:	f7ff fda4 	bl	8014360 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8014818:	f7fe f8c0 	bl	801299c <HAL_GetTick>
 801481c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 801481e:	e008      	b.n	8014832 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014820:	f7fe f8bc 	bl	801299c <HAL_GetTick>
 8014824:	4602      	mov	r2, r0
 8014826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014828:	1ad3      	subs	r3, r2, r3
 801482a:	2b02      	cmp	r3, #2
 801482c:	d901      	bls.n	8014832 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801482e:	2303      	movs	r3, #3
 8014830:	e2f5      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8014832:	f7ff fdb3 	bl	801439c <LL_RCC_MSI_IsReady>
 8014836:	4603      	mov	r3, r0
 8014838:	2b00      	cmp	r3, #0
 801483a:	d0f1      	beq.n	8014820 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014840:	4618      	mov	r0, r3
 8014842:	f7ff fdbc 	bl	80143be <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	6a1b      	ldr	r3, [r3, #32]
 801484a:	4618      	mov	r0, r3
 801484c:	f7ff fde0 	bl	8014410 <LL_RCC_MSI_SetCalibTrimming>
 8014850:	e015      	b.n	801487e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8014852:	f7ff fd94 	bl	801437e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8014856:	f7fe f8a1 	bl	801299c <HAL_GetTick>
 801485a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 801485c:	e008      	b.n	8014870 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801485e:	f7fe f89d 	bl	801299c <HAL_GetTick>
 8014862:	4602      	mov	r2, r0
 8014864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014866:	1ad3      	subs	r3, r2, r3
 8014868:	2b02      	cmp	r3, #2
 801486a:	d901      	bls.n	8014870 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 801486c:	2303      	movs	r3, #3
 801486e:	e2d6      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8014870:	f7ff fd94 	bl	801439c <LL_RCC_MSI_IsReady>
 8014874:	4603      	mov	r3, r0
 8014876:	2b00      	cmp	r3, #0
 8014878:	d1f1      	bne.n	801485e <HAL_RCC_OscConfig+0x11a>
 801487a:	e000      	b.n	801487e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801487c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	f003 0301 	and.w	r3, r3, #1
 8014886:	2b00      	cmp	r3, #0
 8014888:	d047      	beq.n	801491a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801488a:	f7ff fdea 	bl	8014462 <LL_RCC_GetSysClkSource>
 801488e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014890:	f7ff fef0 	bl	8014674 <LL_RCC_PLL_GetMainSource>
 8014894:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8014896:	6a3b      	ldr	r3, [r7, #32]
 8014898:	2b08      	cmp	r3, #8
 801489a:	d005      	beq.n	80148a8 <HAL_RCC_OscConfig+0x164>
 801489c:	6a3b      	ldr	r3, [r7, #32]
 801489e:	2b0c      	cmp	r3, #12
 80148a0:	d108      	bne.n	80148b4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80148a2:	69fb      	ldr	r3, [r7, #28]
 80148a4:	2b03      	cmp	r3, #3
 80148a6:	d105      	bne.n	80148b4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	685b      	ldr	r3, [r3, #4]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d134      	bne.n	801491a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80148b0:	2301      	movs	r3, #1
 80148b2:	e2b4      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	685b      	ldr	r3, [r3, #4]
 80148b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80148bc:	d102      	bne.n	80148c4 <HAL_RCC_OscConfig+0x180>
 80148be:	f7ff fbd1 	bl	8014064 <LL_RCC_HSE_Enable>
 80148c2:	e001      	b.n	80148c8 <HAL_RCC_OscConfig+0x184>
 80148c4:	f7ff fbdd 	bl	8014082 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	685b      	ldr	r3, [r3, #4]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d012      	beq.n	80148f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80148d0:	f7fe f864 	bl	801299c <HAL_GetTick>
 80148d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80148d6:	e008      	b.n	80148ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80148d8:	f7fe f860 	bl	801299c <HAL_GetTick>
 80148dc:	4602      	mov	r2, r0
 80148de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148e0:	1ad3      	subs	r3, r2, r3
 80148e2:	2b64      	cmp	r3, #100	@ 0x64
 80148e4:	d901      	bls.n	80148ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80148e6:	2303      	movs	r3, #3
 80148e8:	e299      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80148ea:	f7ff fbd9 	bl	80140a0 <LL_RCC_HSE_IsReady>
 80148ee:	4603      	mov	r3, r0
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d0f1      	beq.n	80148d8 <HAL_RCC_OscConfig+0x194>
 80148f4:	e011      	b.n	801491a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80148f6:	f7fe f851 	bl	801299c <HAL_GetTick>
 80148fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80148fc:	e008      	b.n	8014910 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80148fe:	f7fe f84d 	bl	801299c <HAL_GetTick>
 8014902:	4602      	mov	r2, r0
 8014904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014906:	1ad3      	subs	r3, r2, r3
 8014908:	2b64      	cmp	r3, #100	@ 0x64
 801490a:	d901      	bls.n	8014910 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 801490c:	2303      	movs	r3, #3
 801490e:	e286      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8014910:	f7ff fbc6 	bl	80140a0 <LL_RCC_HSE_IsReady>
 8014914:	4603      	mov	r3, r0
 8014916:	2b00      	cmp	r3, #0
 8014918:	d1f1      	bne.n	80148fe <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	f003 0302 	and.w	r3, r3, #2
 8014922:	2b00      	cmp	r3, #0
 8014924:	d04c      	beq.n	80149c0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014926:	f7ff fd9c 	bl	8014462 <LL_RCC_GetSysClkSource>
 801492a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801492c:	f7ff fea2 	bl	8014674 <LL_RCC_PLL_GetMainSource>
 8014930:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8014932:	69bb      	ldr	r3, [r7, #24]
 8014934:	2b04      	cmp	r3, #4
 8014936:	d005      	beq.n	8014944 <HAL_RCC_OscConfig+0x200>
 8014938:	69bb      	ldr	r3, [r7, #24]
 801493a:	2b0c      	cmp	r3, #12
 801493c:	d10e      	bne.n	801495c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 801493e:	697b      	ldr	r3, [r7, #20]
 8014940:	2b02      	cmp	r3, #2
 8014942:	d10b      	bne.n	801495c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	68db      	ldr	r3, [r3, #12]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d101      	bne.n	8014950 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 801494c:	2301      	movs	r3, #1
 801494e:	e266      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	691b      	ldr	r3, [r3, #16]
 8014954:	4618      	mov	r0, r3
 8014956:	f7ff fbe5 	bl	8014124 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801495a:	e031      	b.n	80149c0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	68db      	ldr	r3, [r3, #12]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d019      	beq.n	8014998 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8014964:	f7ff fbae 	bl	80140c4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014968:	f7fe f818 	bl	801299c <HAL_GetTick>
 801496c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 801496e:	e008      	b.n	8014982 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014970:	f7fe f814 	bl	801299c <HAL_GetTick>
 8014974:	4602      	mov	r2, r0
 8014976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014978:	1ad3      	subs	r3, r2, r3
 801497a:	2b02      	cmp	r3, #2
 801497c:	d901      	bls.n	8014982 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801497e:	2303      	movs	r3, #3
 8014980:	e24d      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8014982:	f7ff fbbd 	bl	8014100 <LL_RCC_HSI_IsReady>
 8014986:	4603      	mov	r3, r0
 8014988:	2b00      	cmp	r3, #0
 801498a:	d0f1      	beq.n	8014970 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	691b      	ldr	r3, [r3, #16]
 8014990:	4618      	mov	r0, r3
 8014992:	f7ff fbc7 	bl	8014124 <LL_RCC_HSI_SetCalibTrimming>
 8014996:	e013      	b.n	80149c0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014998:	f7ff fba3 	bl	80140e2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801499c:	f7fd fffe 	bl	801299c <HAL_GetTick>
 80149a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80149a2:	e008      	b.n	80149b6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80149a4:	f7fd fffa 	bl	801299c <HAL_GetTick>
 80149a8:	4602      	mov	r2, r0
 80149aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149ac:	1ad3      	subs	r3, r2, r3
 80149ae:	2b02      	cmp	r3, #2
 80149b0:	d901      	bls.n	80149b6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80149b2:	2303      	movs	r3, #3
 80149b4:	e233      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80149b6:	f7ff fba3 	bl	8014100 <LL_RCC_HSI_IsReady>
 80149ba:	4603      	mov	r3, r0
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d1f1      	bne.n	80149a4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	f003 0308 	and.w	r3, r3, #8
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d106      	bne.n	80149da <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	f000 80a3 	beq.w	8014b20 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	695b      	ldr	r3, [r3, #20]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d076      	beq.n	8014ad0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	f003 0310 	and.w	r3, r3, #16
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d046      	beq.n	8014a7c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80149ee:	f7ff fc5a 	bl	80142a6 <LL_RCC_LSI1_IsReady>
 80149f2:	4603      	mov	r3, r0
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d113      	bne.n	8014a20 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80149f8:	f7ff fc33 	bl	8014262 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80149fc:	f7fd ffce 	bl	801299c <HAL_GetTick>
 8014a00:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8014a02:	e008      	b.n	8014a16 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8014a04:	f7fd ffca 	bl	801299c <HAL_GetTick>
 8014a08:	4602      	mov	r2, r0
 8014a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a0c:	1ad3      	subs	r3, r2, r3
 8014a0e:	2b02      	cmp	r3, #2
 8014a10:	d901      	bls.n	8014a16 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8014a12:	2303      	movs	r3, #3
 8014a14:	e203      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8014a16:	f7ff fc46 	bl	80142a6 <LL_RCC_LSI1_IsReady>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d0f1      	beq.n	8014a04 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8014a20:	f7ff fc53 	bl	80142ca <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a24:	f7fd ffba 	bl	801299c <HAL_GetTick>
 8014a28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8014a2a:	e008      	b.n	8014a3e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8014a2c:	f7fd ffb6 	bl	801299c <HAL_GetTick>
 8014a30:	4602      	mov	r2, r0
 8014a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a34:	1ad3      	subs	r3, r2, r3
 8014a36:	2b03      	cmp	r3, #3
 8014a38:	d901      	bls.n	8014a3e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8014a3a:	2303      	movs	r3, #3
 8014a3c:	e1ef      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8014a3e:	f7ff fc66 	bl	801430e <LL_RCC_LSI2_IsReady>
 8014a42:	4603      	mov	r3, r0
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d0f1      	beq.n	8014a2c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	699b      	ldr	r3, [r3, #24]
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7ff fc70 	bl	8014332 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8014a52:	f7ff fc17 	bl	8014284 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a56:	f7fd ffa1 	bl	801299c <HAL_GetTick>
 8014a5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8014a5c:	e008      	b.n	8014a70 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8014a5e:	f7fd ff9d 	bl	801299c <HAL_GetTick>
 8014a62:	4602      	mov	r2, r0
 8014a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a66:	1ad3      	subs	r3, r2, r3
 8014a68:	2b02      	cmp	r3, #2
 8014a6a:	d901      	bls.n	8014a70 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8014a6c:	2303      	movs	r3, #3
 8014a6e:	e1d6      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8014a70:	f7ff fc19 	bl	80142a6 <LL_RCC_LSI1_IsReady>
 8014a74:	4603      	mov	r3, r0
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d1f1      	bne.n	8014a5e <HAL_RCC_OscConfig+0x31a>
 8014a7a:	e051      	b.n	8014b20 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8014a7c:	f7ff fbf1 	bl	8014262 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a80:	f7fd ff8c 	bl	801299c <HAL_GetTick>
 8014a84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8014a86:	e00c      	b.n	8014aa2 <HAL_RCC_OscConfig+0x35e>
 8014a88:	20000008 	.word	0x20000008
 8014a8c:	2000007c 	.word	0x2000007c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8014a90:	f7fd ff84 	bl	801299c <HAL_GetTick>
 8014a94:	4602      	mov	r2, r0
 8014a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a98:	1ad3      	subs	r3, r2, r3
 8014a9a:	2b02      	cmp	r3, #2
 8014a9c:	d901      	bls.n	8014aa2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8014a9e:	2303      	movs	r3, #3
 8014aa0:	e1bd      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8014aa2:	f7ff fc00 	bl	80142a6 <LL_RCC_LSI1_IsReady>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d0f1      	beq.n	8014a90 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8014aac:	f7ff fc1e 	bl	80142ec <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8014ab0:	e008      	b.n	8014ac4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8014ab2:	f7fd ff73 	bl	801299c <HAL_GetTick>
 8014ab6:	4602      	mov	r2, r0
 8014ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014aba:	1ad3      	subs	r3, r2, r3
 8014abc:	2b03      	cmp	r3, #3
 8014abe:	d901      	bls.n	8014ac4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8014ac0:	2303      	movs	r3, #3
 8014ac2:	e1ac      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8014ac4:	f7ff fc23 	bl	801430e <LL_RCC_LSI2_IsReady>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d1f1      	bne.n	8014ab2 <HAL_RCC_OscConfig+0x36e>
 8014ace:	e027      	b.n	8014b20 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8014ad0:	f7ff fc0c 	bl	80142ec <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014ad4:	f7fd ff62 	bl	801299c <HAL_GetTick>
 8014ad8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8014ada:	e008      	b.n	8014aee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8014adc:	f7fd ff5e 	bl	801299c <HAL_GetTick>
 8014ae0:	4602      	mov	r2, r0
 8014ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ae4:	1ad3      	subs	r3, r2, r3
 8014ae6:	2b03      	cmp	r3, #3
 8014ae8:	d901      	bls.n	8014aee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8014aea:	2303      	movs	r3, #3
 8014aec:	e197      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8014aee:	f7ff fc0e 	bl	801430e <LL_RCC_LSI2_IsReady>
 8014af2:	4603      	mov	r3, r0
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d1f1      	bne.n	8014adc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8014af8:	f7ff fbc4 	bl	8014284 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014afc:	f7fd ff4e 	bl	801299c <HAL_GetTick>
 8014b00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8014b02:	e008      	b.n	8014b16 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8014b04:	f7fd ff4a 	bl	801299c <HAL_GetTick>
 8014b08:	4602      	mov	r2, r0
 8014b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b0c:	1ad3      	subs	r3, r2, r3
 8014b0e:	2b02      	cmp	r3, #2
 8014b10:	d901      	bls.n	8014b16 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8014b12:	2303      	movs	r3, #3
 8014b14:	e183      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8014b16:	f7ff fbc6 	bl	80142a6 <LL_RCC_LSI1_IsReady>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d1f1      	bne.n	8014b04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	f003 0304 	and.w	r3, r3, #4
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d05b      	beq.n	8014be4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014b2c:	4ba7      	ldr	r3, [pc, #668]	@ (8014dcc <HAL_RCC_OscConfig+0x688>)
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d114      	bne.n	8014b62 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8014b38:	f7ff fa64 	bl	8014004 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014b3c:	f7fd ff2e 	bl	801299c <HAL_GetTick>
 8014b40:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014b42:	e008      	b.n	8014b56 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014b44:	f7fd ff2a 	bl	801299c <HAL_GetTick>
 8014b48:	4602      	mov	r2, r0
 8014b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b4c:	1ad3      	subs	r3, r2, r3
 8014b4e:	2b02      	cmp	r3, #2
 8014b50:	d901      	bls.n	8014b56 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8014b52:	2303      	movs	r3, #3
 8014b54:	e163      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014b56:	4b9d      	ldr	r3, [pc, #628]	@ (8014dcc <HAL_RCC_OscConfig+0x688>)
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d0f0      	beq.n	8014b44 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	689b      	ldr	r3, [r3, #8]
 8014b66:	2b01      	cmp	r3, #1
 8014b68:	d102      	bne.n	8014b70 <HAL_RCC_OscConfig+0x42c>
 8014b6a:	f7ff fb24 	bl	80141b6 <LL_RCC_LSE_Enable>
 8014b6e:	e00c      	b.n	8014b8a <HAL_RCC_OscConfig+0x446>
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	689b      	ldr	r3, [r3, #8]
 8014b74:	2b05      	cmp	r3, #5
 8014b76:	d104      	bne.n	8014b82 <HAL_RCC_OscConfig+0x43e>
 8014b78:	f7ff fb3f 	bl	80141fa <LL_RCC_LSE_EnableBypass>
 8014b7c:	f7ff fb1b 	bl	80141b6 <LL_RCC_LSE_Enable>
 8014b80:	e003      	b.n	8014b8a <HAL_RCC_OscConfig+0x446>
 8014b82:	f7ff fb29 	bl	80141d8 <LL_RCC_LSE_Disable>
 8014b86:	f7ff fb49 	bl	801421c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	689b      	ldr	r3, [r3, #8]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d014      	beq.n	8014bbc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014b92:	f7fd ff03 	bl	801299c <HAL_GetTick>
 8014b96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8014b98:	e00a      	b.n	8014bb0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014b9a:	f7fd feff 	bl	801299c <HAL_GetTick>
 8014b9e:	4602      	mov	r2, r0
 8014ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ba2:	1ad3      	subs	r3, r2, r3
 8014ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014ba8:	4293      	cmp	r3, r2
 8014baa:	d901      	bls.n	8014bb0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8014bac:	2303      	movs	r3, #3
 8014bae:	e136      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8014bb0:	f7ff fb45 	bl	801423e <LL_RCC_LSE_IsReady>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d0ef      	beq.n	8014b9a <HAL_RCC_OscConfig+0x456>
 8014bba:	e013      	b.n	8014be4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014bbc:	f7fd feee 	bl	801299c <HAL_GetTick>
 8014bc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8014bc2:	e00a      	b.n	8014bda <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014bc4:	f7fd feea 	bl	801299c <HAL_GetTick>
 8014bc8:	4602      	mov	r2, r0
 8014bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bcc:	1ad3      	subs	r3, r2, r3
 8014bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014bd2:	4293      	cmp	r3, r2
 8014bd4:	d901      	bls.n	8014bda <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8014bd6:	2303      	movs	r3, #3
 8014bd8:	e121      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8014bda:	f7ff fb30 	bl	801423e <LL_RCC_LSE_IsReady>
 8014bde:	4603      	mov	r3, r0
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d1ef      	bne.n	8014bc4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d02c      	beq.n	8014c4a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d014      	beq.n	8014c22 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8014bf8:	f7ff faa9 	bl	801414e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014bfc:	f7fd fece 	bl	801299c <HAL_GetTick>
 8014c00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8014c02:	e008      	b.n	8014c16 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014c04:	f7fd feca 	bl	801299c <HAL_GetTick>
 8014c08:	4602      	mov	r2, r0
 8014c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c0c:	1ad3      	subs	r3, r2, r3
 8014c0e:	2b02      	cmp	r3, #2
 8014c10:	d901      	bls.n	8014c16 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8014c12:	2303      	movs	r3, #3
 8014c14:	e103      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8014c16:	f7ff fabc 	bl	8014192 <LL_RCC_HSI48_IsReady>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d0f1      	beq.n	8014c04 <HAL_RCC_OscConfig+0x4c0>
 8014c20:	e013      	b.n	8014c4a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8014c22:	f7ff faa5 	bl	8014170 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014c26:	f7fd feb9 	bl	801299c <HAL_GetTick>
 8014c2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8014c2c:	e008      	b.n	8014c40 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014c2e:	f7fd feb5 	bl	801299c <HAL_GetTick>
 8014c32:	4602      	mov	r2, r0
 8014c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c36:	1ad3      	subs	r3, r2, r3
 8014c38:	2b02      	cmp	r3, #2
 8014c3a:	d901      	bls.n	8014c40 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8014c3c:	2303      	movs	r3, #3
 8014c3e:	e0ee      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8014c40:	f7ff faa7 	bl	8014192 <LL_RCC_HSI48_IsReady>
 8014c44:	4603      	mov	r3, r0
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d1f1      	bne.n	8014c2e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	f000 80e4 	beq.w	8014e1c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014c54:	f7ff fc05 	bl	8014462 <LL_RCC_GetSysClkSource>
 8014c58:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8014c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014c5e:	68db      	ldr	r3, [r3, #12]
 8014c60:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c66:	2b02      	cmp	r3, #2
 8014c68:	f040 80b4 	bne.w	8014dd4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	f003 0203 	and.w	r2, r3, #3
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c76:	429a      	cmp	r2, r3
 8014c78:	d123      	bne.n	8014cc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014c84:	429a      	cmp	r2, r3
 8014c86:	d11c      	bne.n	8014cc2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	0a1b      	lsrs	r3, r3, #8
 8014c8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014c94:	429a      	cmp	r2, r3
 8014c96:	d114      	bne.n	8014cc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8014ca2:	429a      	cmp	r2, r3
 8014ca4:	d10d      	bne.n	8014cc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	d106      	bne.n	8014cc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8014cbe:	429a      	cmp	r2, r3
 8014cc0:	d05d      	beq.n	8014d7e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014cc2:	693b      	ldr	r3, [r7, #16]
 8014cc4:	2b0c      	cmp	r3, #12
 8014cc6:	d058      	beq.n	8014d7a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8014cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d001      	beq.n	8014cda <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8014cd6:	2301      	movs	r3, #1
 8014cd8:	e0a1      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8014cda:	f7ff fc85 	bl	80145e8 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8014cde:	f7fd fe5d 	bl	801299c <HAL_GetTick>
 8014ce2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014ce4:	e008      	b.n	8014cf8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014ce6:	f7fd fe59 	bl	801299c <HAL_GetTick>
 8014cea:	4602      	mov	r2, r0
 8014cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cee:	1ad3      	subs	r3, r2, r3
 8014cf0:	2b02      	cmp	r3, #2
 8014cf2:	d901      	bls.n	8014cf8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8014cf4:	2303      	movs	r3, #3
 8014cf6:	e092      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d1ef      	bne.n	8014ce6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d0a:	68da      	ldr	r2, [r3, #12]
 8014d0c:	4b30      	ldr	r3, [pc, #192]	@ (8014dd0 <HAL_RCC_OscConfig+0x68c>)
 8014d0e:	4013      	ands	r3, r2
 8014d10:	687a      	ldr	r2, [r7, #4]
 8014d12:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8014d14:	687a      	ldr	r2, [r7, #4]
 8014d16:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8014d18:	4311      	orrs	r1, r2
 8014d1a:	687a      	ldr	r2, [r7, #4]
 8014d1c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8014d1e:	0212      	lsls	r2, r2, #8
 8014d20:	4311      	orrs	r1, r2
 8014d22:	687a      	ldr	r2, [r7, #4]
 8014d24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8014d26:	4311      	orrs	r1, r2
 8014d28:	687a      	ldr	r2, [r7, #4]
 8014d2a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8014d2c:	4311      	orrs	r1, r2
 8014d2e:	687a      	ldr	r2, [r7, #4]
 8014d30:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8014d32:	430a      	orrs	r2, r1
 8014d34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014d38:	4313      	orrs	r3, r2
 8014d3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8014d3c:	f7ff fc45 	bl	80145ca <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8014d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d44:	68db      	ldr	r3, [r3, #12]
 8014d46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014d4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8014d50:	f7fd fe24 	bl	801299c <HAL_GetTick>
 8014d54:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014d56:	e008      	b.n	8014d6a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014d58:	f7fd fe20 	bl	801299c <HAL_GetTick>
 8014d5c:	4602      	mov	r2, r0
 8014d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d60:	1ad3      	subs	r3, r2, r3
 8014d62:	2b02      	cmp	r3, #2
 8014d64:	d901      	bls.n	8014d6a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8014d66:	2303      	movs	r3, #3
 8014d68:	e059      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d0ef      	beq.n	8014d58 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014d78:	e050      	b.n	8014e1c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8014d7a:	2301      	movs	r3, #1
 8014d7c:	e04f      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d147      	bne.n	8014e1c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8014d8c:	f7ff fc1d 	bl	80145ca <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8014d90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d94:	68db      	ldr	r3, [r3, #12]
 8014d96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014d9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8014da0:	f7fd fdfc 	bl	801299c <HAL_GetTick>
 8014da4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014da6:	e008      	b.n	8014dba <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014da8:	f7fd fdf8 	bl	801299c <HAL_GetTick>
 8014dac:	4602      	mov	r2, r0
 8014dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014db0:	1ad3      	subs	r3, r2, r3
 8014db2:	2b02      	cmp	r3, #2
 8014db4:	d901      	bls.n	8014dba <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8014db6:	2303      	movs	r3, #3
 8014db8:	e031      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d0ef      	beq.n	8014da8 <HAL_RCC_OscConfig+0x664>
 8014dc8:	e028      	b.n	8014e1c <HAL_RCC_OscConfig+0x6d8>
 8014dca:	bf00      	nop
 8014dcc:	58000400 	.word	0x58000400
 8014dd0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014dd4:	693b      	ldr	r3, [r7, #16]
 8014dd6:	2b0c      	cmp	r3, #12
 8014dd8:	d01e      	beq.n	8014e18 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014dda:	f7ff fc05 	bl	80145e8 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014dde:	f7fd fddd 	bl	801299c <HAL_GetTick>
 8014de2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014de4:	e008      	b.n	8014df8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014de6:	f7fd fdd9 	bl	801299c <HAL_GetTick>
 8014dea:	4602      	mov	r2, r0
 8014dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dee:	1ad3      	subs	r3, r2, r3
 8014df0:	2b02      	cmp	r3, #2
 8014df2:	d901      	bls.n	8014df8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8014df4:	2303      	movs	r3, #3
 8014df6:	e012      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d1ef      	bne.n	8014de6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8014e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014e0a:	68da      	ldr	r2, [r3, #12]
 8014e0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014e10:	4b05      	ldr	r3, [pc, #20]	@ (8014e28 <HAL_RCC_OscConfig+0x6e4>)
 8014e12:	4013      	ands	r3, r2
 8014e14:	60cb      	str	r3, [r1, #12]
 8014e16:	e001      	b.n	8014e1c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8014e18:	2301      	movs	r3, #1
 8014e1a:	e000      	b.n	8014e1e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8014e1c:	2300      	movs	r3, #0
}
 8014e1e:	4618      	mov	r0, r3
 8014e20:	3734      	adds	r7, #52	@ 0x34
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd90      	pop	{r4, r7, pc}
 8014e26:	bf00      	nop
 8014e28:	eefefffc 	.word	0xeefefffc

08014e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b084      	sub	sp, #16
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
 8014e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d101      	bne.n	8014e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014e3c:	2301      	movs	r3, #1
 8014e3e:	e12d      	b.n	801509c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8014e40:	4b98      	ldr	r3, [pc, #608]	@ (80150a4 <HAL_RCC_ClockConfig+0x278>)
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	f003 0307 	and.w	r3, r3, #7
 8014e48:	683a      	ldr	r2, [r7, #0]
 8014e4a:	429a      	cmp	r2, r3
 8014e4c:	d91b      	bls.n	8014e86 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014e4e:	4b95      	ldr	r3, [pc, #596]	@ (80150a4 <HAL_RCC_ClockConfig+0x278>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	f023 0207 	bic.w	r2, r3, #7
 8014e56:	4993      	ldr	r1, [pc, #588]	@ (80150a4 <HAL_RCC_ClockConfig+0x278>)
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	4313      	orrs	r3, r2
 8014e5c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014e5e:	f7fd fd9d 	bl	801299c <HAL_GetTick>
 8014e62:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014e64:	e008      	b.n	8014e78 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8014e66:	f7fd fd99 	bl	801299c <HAL_GetTick>
 8014e6a:	4602      	mov	r2, r0
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	1ad3      	subs	r3, r2, r3
 8014e70:	2b02      	cmp	r3, #2
 8014e72:	d901      	bls.n	8014e78 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8014e74:	2303      	movs	r3, #3
 8014e76:	e111      	b.n	801509c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014e78:	4b8a      	ldr	r3, [pc, #552]	@ (80150a4 <HAL_RCC_ClockConfig+0x278>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	f003 0307 	and.w	r3, r3, #7
 8014e80:	683a      	ldr	r2, [r7, #0]
 8014e82:	429a      	cmp	r2, r3
 8014e84:	d1ef      	bne.n	8014e66 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	f003 0302 	and.w	r3, r3, #2
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d016      	beq.n	8014ec0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	689b      	ldr	r3, [r3, #8]
 8014e96:	4618      	mov	r0, r3
 8014e98:	f7ff faef 	bl	801447a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014e9c:	f7fd fd7e 	bl	801299c <HAL_GetTick>
 8014ea0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8014ea2:	e008      	b.n	8014eb6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014ea4:	f7fd fd7a 	bl	801299c <HAL_GetTick>
 8014ea8:	4602      	mov	r2, r0
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	1ad3      	subs	r3, r2, r3
 8014eae:	2b02      	cmp	r3, #2
 8014eb0:	d901      	bls.n	8014eb6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8014eb2:	2303      	movs	r3, #3
 8014eb4:	e0f2      	b.n	801509c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8014eb6:	f7ff fbe9 	bl	801468c <LL_RCC_IsActiveFlag_HPRE>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d0f1      	beq.n	8014ea4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	f003 0320 	and.w	r3, r3, #32
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d016      	beq.n	8014efa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	695b      	ldr	r3, [r3, #20]
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f7ff fae6 	bl	80144a2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014ed6:	f7fd fd61 	bl	801299c <HAL_GetTick>
 8014eda:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8014edc:	e008      	b.n	8014ef0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014ede:	f7fd fd5d 	bl	801299c <HAL_GetTick>
 8014ee2:	4602      	mov	r2, r0
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	1ad3      	subs	r3, r2, r3
 8014ee8:	2b02      	cmp	r3, #2
 8014eea:	d901      	bls.n	8014ef0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8014eec:	2303      	movs	r3, #3
 8014eee:	e0d5      	b.n	801509c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8014ef0:	f7ff fbde 	bl	80146b0 <LL_RCC_IsActiveFlag_C2HPRE>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d0f1      	beq.n	8014ede <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d016      	beq.n	8014f34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	699b      	ldr	r3, [r3, #24]
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f7ff fadf 	bl	80144ce <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014f10:	f7fd fd44 	bl	801299c <HAL_GetTick>
 8014f14:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8014f16:	e008      	b.n	8014f2a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014f18:	f7fd fd40 	bl	801299c <HAL_GetTick>
 8014f1c:	4602      	mov	r2, r0
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	1ad3      	subs	r3, r2, r3
 8014f22:	2b02      	cmp	r3, #2
 8014f24:	d901      	bls.n	8014f2a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8014f26:	2303      	movs	r3, #3
 8014f28:	e0b8      	b.n	801509c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8014f2a:	f7ff fbd4 	bl	80146d6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d0f1      	beq.n	8014f18 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	f003 0304 	and.w	r3, r3, #4
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d016      	beq.n	8014f6e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	68db      	ldr	r3, [r3, #12]
 8014f44:	4618      	mov	r0, r3
 8014f46:	f7ff fad9 	bl	80144fc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014f4a:	f7fd fd27 	bl	801299c <HAL_GetTick>
 8014f4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8014f50:	e008      	b.n	8014f64 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014f52:	f7fd fd23 	bl	801299c <HAL_GetTick>
 8014f56:	4602      	mov	r2, r0
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	1ad3      	subs	r3, r2, r3
 8014f5c:	2b02      	cmp	r3, #2
 8014f5e:	d901      	bls.n	8014f64 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8014f60:	2303      	movs	r3, #3
 8014f62:	e09b      	b.n	801509c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8014f64:	f7ff fbca 	bl	80146fc <LL_RCC_IsActiveFlag_PPRE1>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d0f1      	beq.n	8014f52 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	f003 0308 	and.w	r3, r3, #8
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d017      	beq.n	8014faa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	691b      	ldr	r3, [r3, #16]
 8014f7e:	00db      	lsls	r3, r3, #3
 8014f80:	4618      	mov	r0, r3
 8014f82:	f7ff facf 	bl	8014524 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8014f86:	f7fd fd09 	bl	801299c <HAL_GetTick>
 8014f8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8014f8c:	e008      	b.n	8014fa0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8014f8e:	f7fd fd05 	bl	801299c <HAL_GetTick>
 8014f92:	4602      	mov	r2, r0
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	1ad3      	subs	r3, r2, r3
 8014f98:	2b02      	cmp	r3, #2
 8014f9a:	d901      	bls.n	8014fa0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8014f9c:	2303      	movs	r3, #3
 8014f9e:	e07d      	b.n	801509c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8014fa0:	f7ff fbbe 	bl	8014720 <LL_RCC_IsActiveFlag_PPRE2>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d0f1      	beq.n	8014f8e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	f003 0301 	and.w	r3, r3, #1
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d043      	beq.n	801503e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	685b      	ldr	r3, [r3, #4]
 8014fba:	2b02      	cmp	r3, #2
 8014fbc:	d106      	bne.n	8014fcc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8014fbe:	f7ff f86f 	bl	80140a0 <LL_RCC_HSE_IsReady>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d11e      	bne.n	8015006 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014fc8:	2301      	movs	r3, #1
 8014fca:	e067      	b.n	801509c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	685b      	ldr	r3, [r3, #4]
 8014fd0:	2b03      	cmp	r3, #3
 8014fd2:	d106      	bne.n	8014fe2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8014fd4:	f7ff fb17 	bl	8014606 <LL_RCC_PLL_IsReady>
 8014fd8:	4603      	mov	r3, r0
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d113      	bne.n	8015006 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014fde:	2301      	movs	r3, #1
 8014fe0:	e05c      	b.n	801509c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	685b      	ldr	r3, [r3, #4]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d106      	bne.n	8014ff8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8014fea:	f7ff f9d7 	bl	801439c <LL_RCC_MSI_IsReady>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d108      	bne.n	8015006 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	e051      	b.n	801509c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8014ff8:	f7ff f882 	bl	8014100 <LL_RCC_HSI_IsReady>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d101      	bne.n	8015006 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8015002:	2301      	movs	r3, #1
 8015004:	e04a      	b.n	801509c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	685b      	ldr	r3, [r3, #4]
 801500a:	4618      	mov	r0, r3
 801500c:	f7ff fa15 	bl	801443a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015010:	f7fd fcc4 	bl	801299c <HAL_GetTick>
 8015014:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015016:	e00a      	b.n	801502e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015018:	f7fd fcc0 	bl	801299c <HAL_GetTick>
 801501c:	4602      	mov	r2, r0
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	1ad3      	subs	r3, r2, r3
 8015022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015026:	4293      	cmp	r3, r2
 8015028:	d901      	bls.n	801502e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 801502a:	2303      	movs	r3, #3
 801502c:	e036      	b.n	801509c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801502e:	f7ff fa18 	bl	8014462 <LL_RCC_GetSysClkSource>
 8015032:	4602      	mov	r2, r0
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	685b      	ldr	r3, [r3, #4]
 8015038:	009b      	lsls	r3, r3, #2
 801503a:	429a      	cmp	r2, r3
 801503c:	d1ec      	bne.n	8015018 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801503e:	4b19      	ldr	r3, [pc, #100]	@ (80150a4 <HAL_RCC_ClockConfig+0x278>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	f003 0307 	and.w	r3, r3, #7
 8015046:	683a      	ldr	r2, [r7, #0]
 8015048:	429a      	cmp	r2, r3
 801504a:	d21b      	bcs.n	8015084 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801504c:	4b15      	ldr	r3, [pc, #84]	@ (80150a4 <HAL_RCC_ClockConfig+0x278>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	f023 0207 	bic.w	r2, r3, #7
 8015054:	4913      	ldr	r1, [pc, #76]	@ (80150a4 <HAL_RCC_ClockConfig+0x278>)
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	4313      	orrs	r3, r2
 801505a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801505c:	f7fd fc9e 	bl	801299c <HAL_GetTick>
 8015060:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015062:	e008      	b.n	8015076 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8015064:	f7fd fc9a 	bl	801299c <HAL_GetTick>
 8015068:	4602      	mov	r2, r0
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	1ad3      	subs	r3, r2, r3
 801506e:	2b02      	cmp	r3, #2
 8015070:	d901      	bls.n	8015076 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8015072:	2303      	movs	r3, #3
 8015074:	e012      	b.n	801509c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015076:	4b0b      	ldr	r3, [pc, #44]	@ (80150a4 <HAL_RCC_ClockConfig+0x278>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	f003 0307 	and.w	r3, r3, #7
 801507e:	683a      	ldr	r2, [r7, #0]
 8015080:	429a      	cmp	r2, r3
 8015082:	d1ef      	bne.n	8015064 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8015084:	f000 f87e 	bl	8015184 <HAL_RCC_GetHCLKFreq>
 8015088:	4603      	mov	r3, r0
 801508a:	4a07      	ldr	r2, [pc, #28]	@ (80150a8 <HAL_RCC_ClockConfig+0x27c>)
 801508c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 801508e:	f7fd fc91 	bl	80129b4 <HAL_GetTickPrio>
 8015092:	4603      	mov	r3, r0
 8015094:	4618      	mov	r0, r3
 8015096:	f7eb fecd 	bl	8000e34 <HAL_InitTick>
 801509a:	4603      	mov	r3, r0
}
 801509c:	4618      	mov	r0, r3
 801509e:	3710      	adds	r7, #16
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd80      	pop	{r7, pc}
 80150a4:	58004000 	.word	0x58004000
 80150a8:	20000008 	.word	0x20000008

080150ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80150ac:	b590      	push	{r4, r7, lr}
 80150ae:	b085      	sub	sp, #20
 80150b0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80150b2:	f7ff f9d6 	bl	8014462 <LL_RCC_GetSysClkSource>
 80150b6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d10a      	bne.n	80150d4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80150be:	f7ff f992 	bl	80143e6 <LL_RCC_MSI_GetRange>
 80150c2:	4603      	mov	r3, r0
 80150c4:	091b      	lsrs	r3, r3, #4
 80150c6:	f003 030f 	and.w	r3, r3, #15
 80150ca:	4a2b      	ldr	r2, [pc, #172]	@ (8015178 <HAL_RCC_GetSysClockFreq+0xcc>)
 80150cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80150d0:	60fb      	str	r3, [r7, #12]
 80150d2:	e04b      	b.n	801516c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	2b04      	cmp	r3, #4
 80150d8:	d102      	bne.n	80150e0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80150da:	4b28      	ldr	r3, [pc, #160]	@ (801517c <HAL_RCC_GetSysClockFreq+0xd0>)
 80150dc:	60fb      	str	r3, [r7, #12]
 80150de:	e045      	b.n	801516c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2b08      	cmp	r3, #8
 80150e4:	d10a      	bne.n	80150fc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80150e6:	f7fe ffab 	bl	8014040 <LL_RCC_HSE_IsEnabledDiv2>
 80150ea:	4603      	mov	r3, r0
 80150ec:	2b01      	cmp	r3, #1
 80150ee:	d102      	bne.n	80150f6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80150f0:	4b22      	ldr	r3, [pc, #136]	@ (801517c <HAL_RCC_GetSysClockFreq+0xd0>)
 80150f2:	60fb      	str	r3, [r7, #12]
 80150f4:	e03a      	b.n	801516c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80150f6:	4b22      	ldr	r3, [pc, #136]	@ (8015180 <HAL_RCC_GetSysClockFreq+0xd4>)
 80150f8:	60fb      	str	r3, [r7, #12]
 80150fa:	e037      	b.n	801516c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80150fc:	f7ff faba 	bl	8014674 <LL_RCC_PLL_GetMainSource>
 8015100:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8015102:	683b      	ldr	r3, [r7, #0]
 8015104:	2b02      	cmp	r3, #2
 8015106:	d003      	beq.n	8015110 <HAL_RCC_GetSysClockFreq+0x64>
 8015108:	683b      	ldr	r3, [r7, #0]
 801510a:	2b03      	cmp	r3, #3
 801510c:	d003      	beq.n	8015116 <HAL_RCC_GetSysClockFreq+0x6a>
 801510e:	e00d      	b.n	801512c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8015110:	4b1a      	ldr	r3, [pc, #104]	@ (801517c <HAL_RCC_GetSysClockFreq+0xd0>)
 8015112:	60bb      	str	r3, [r7, #8]
        break;
 8015114:	e015      	b.n	8015142 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8015116:	f7fe ff93 	bl	8014040 <LL_RCC_HSE_IsEnabledDiv2>
 801511a:	4603      	mov	r3, r0
 801511c:	2b01      	cmp	r3, #1
 801511e:	d102      	bne.n	8015126 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8015120:	4b16      	ldr	r3, [pc, #88]	@ (801517c <HAL_RCC_GetSysClockFreq+0xd0>)
 8015122:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8015124:	e00d      	b.n	8015142 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8015126:	4b16      	ldr	r3, [pc, #88]	@ (8015180 <HAL_RCC_GetSysClockFreq+0xd4>)
 8015128:	60bb      	str	r3, [r7, #8]
        break;
 801512a:	e00a      	b.n	8015142 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801512c:	f7ff f95b 	bl	80143e6 <LL_RCC_MSI_GetRange>
 8015130:	4603      	mov	r3, r0
 8015132:	091b      	lsrs	r3, r3, #4
 8015134:	f003 030f 	and.w	r3, r3, #15
 8015138:	4a0f      	ldr	r2, [pc, #60]	@ (8015178 <HAL_RCC_GetSysClockFreq+0xcc>)
 801513a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801513e:	60bb      	str	r3, [r7, #8]
        break;
 8015140:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8015142:	f7ff fa72 	bl	801462a <LL_RCC_PLL_GetN>
 8015146:	4602      	mov	r2, r0
 8015148:	68bb      	ldr	r3, [r7, #8]
 801514a:	fb03 f402 	mul.w	r4, r3, r2
 801514e:	f7ff fa85 	bl	801465c <LL_RCC_PLL_GetDivider>
 8015152:	4603      	mov	r3, r0
 8015154:	091b      	lsrs	r3, r3, #4
 8015156:	3301      	adds	r3, #1
 8015158:	fbb4 f4f3 	udiv	r4, r4, r3
 801515c:	f7ff fa72 	bl	8014644 <LL_RCC_PLL_GetR>
 8015160:	4603      	mov	r3, r0
 8015162:	0f5b      	lsrs	r3, r3, #29
 8015164:	3301      	adds	r3, #1
 8015166:	fbb4 f3f3 	udiv	r3, r4, r3
 801516a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 801516c:	68fb      	ldr	r3, [r7, #12]
}
 801516e:	4618      	mov	r0, r3
 8015170:	3714      	adds	r7, #20
 8015172:	46bd      	mov	sp, r7
 8015174:	bd90      	pop	{r4, r7, pc}
 8015176:	bf00      	nop
 8015178:	0801ba38 	.word	0x0801ba38
 801517c:	00f42400 	.word	0x00f42400
 8015180:	01e84800 	.word	0x01e84800

08015184 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015184:	b598      	push	{r3, r4, r7, lr}
 8015186:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8015188:	f7ff ff90 	bl	80150ac <HAL_RCC_GetSysClockFreq>
 801518c:	4604      	mov	r4, r0
 801518e:	f7ff f9dd 	bl	801454c <LL_RCC_GetAHBPrescaler>
 8015192:	4603      	mov	r3, r0
 8015194:	091b      	lsrs	r3, r3, #4
 8015196:	f003 030f 	and.w	r3, r3, #15
 801519a:	4a03      	ldr	r2, [pc, #12]	@ (80151a8 <HAL_RCC_GetHCLKFreq+0x24>)
 801519c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151a0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	bd98      	pop	{r3, r4, r7, pc}
 80151a8:	0801b9d8 	.word	0x0801b9d8

080151ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80151ac:	b598      	push	{r3, r4, r7, lr}
 80151ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80151b0:	f7ff ffe8 	bl	8015184 <HAL_RCC_GetHCLKFreq>
 80151b4:	4604      	mov	r4, r0
 80151b6:	f7ff f9f0 	bl	801459a <LL_RCC_GetAPB1Prescaler>
 80151ba:	4603      	mov	r3, r0
 80151bc:	0a1b      	lsrs	r3, r3, #8
 80151be:	f003 0307 	and.w	r3, r3, #7
 80151c2:	4a04      	ldr	r2, [pc, #16]	@ (80151d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80151c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151c8:	f003 031f 	and.w	r3, r3, #31
 80151cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80151d0:	4618      	mov	r0, r3
 80151d2:	bd98      	pop	{r3, r4, r7, pc}
 80151d4:	0801ba18 	.word	0x0801ba18

080151d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80151d8:	b598      	push	{r3, r4, r7, lr}
 80151da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80151dc:	f7ff ffd2 	bl	8015184 <HAL_RCC_GetHCLKFreq>
 80151e0:	4604      	mov	r4, r0
 80151e2:	f7ff f9e6 	bl	80145b2 <LL_RCC_GetAPB2Prescaler>
 80151e6:	4603      	mov	r3, r0
 80151e8:	0adb      	lsrs	r3, r3, #11
 80151ea:	f003 0307 	and.w	r3, r3, #7
 80151ee:	4a04      	ldr	r2, [pc, #16]	@ (8015200 <HAL_RCC_GetPCLK2Freq+0x28>)
 80151f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151f4:	f003 031f 	and.w	r3, r3, #31
 80151f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	bd98      	pop	{r3, r4, r7, pc}
 8015200:	0801ba18 	.word	0x0801ba18

08015204 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b082      	sub	sp, #8
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
 801520c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	226f      	movs	r2, #111	@ 0x6f
 8015212:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8015214:	f7ff f925 	bl	8014462 <LL_RCC_GetSysClkSource>
 8015218:	4602      	mov	r2, r0
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 801521e:	f7ff f995 	bl	801454c <LL_RCC_GetAHBPrescaler>
 8015222:	4602      	mov	r2, r0
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8015228:	f7ff f9b7 	bl	801459a <LL_RCC_GetAPB1Prescaler>
 801522c:	4602      	mov	r2, r0
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8015232:	f7ff f9be 	bl	80145b2 <LL_RCC_GetAPB2Prescaler>
 8015236:	4602      	mov	r2, r0
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 801523c:	f7ff f992 	bl	8014564 <LL_C2_RCC_GetAHBPrescaler>
 8015240:	4602      	mov	r2, r0
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8015246:	f7ff f99a 	bl	801457e <LL_RCC_GetAHB4Prescaler>
 801524a:	4602      	mov	r2, r0
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8015250:	4b04      	ldr	r3, [pc, #16]	@ (8015264 <HAL_RCC_GetClockConfig+0x60>)
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	f003 0207 	and.w	r2, r3, #7
 8015258:	683b      	ldr	r3, [r7, #0]
 801525a:	601a      	str	r2, [r3, #0]
}
 801525c:	bf00      	nop
 801525e:	3708      	adds	r7, #8
 8015260:	46bd      	mov	sp, r7
 8015262:	bd80      	pop	{r7, pc}
 8015264:	58004000 	.word	0x58004000

08015268 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8015268:	b590      	push	{r4, r7, lr}
 801526a:	b085      	sub	sp, #20
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	2bb0      	cmp	r3, #176	@ 0xb0
 8015274:	d903      	bls.n	801527e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8015276:	4b15      	ldr	r3, [pc, #84]	@ (80152cc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8015278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801527a:	60fb      	str	r3, [r7, #12]
 801527c:	e007      	b.n	801528e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	091b      	lsrs	r3, r3, #4
 8015282:	f003 030f 	and.w	r3, r3, #15
 8015286:	4a11      	ldr	r2, [pc, #68]	@ (80152cc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8015288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801528c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 801528e:	f7ff f976 	bl	801457e <LL_RCC_GetAHB4Prescaler>
 8015292:	4603      	mov	r3, r0
 8015294:	091b      	lsrs	r3, r3, #4
 8015296:	f003 030f 	and.w	r3, r3, #15
 801529a:	4a0d      	ldr	r2, [pc, #52]	@ (80152d0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 801529c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80152a0:	68fa      	ldr	r2, [r7, #12]
 80152a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80152a6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80152a8:	68bb      	ldr	r3, [r7, #8]
 80152aa:	4a0a      	ldr	r2, [pc, #40]	@ (80152d4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80152ac:	fba2 2303 	umull	r2, r3, r2, r3
 80152b0:	0c9c      	lsrs	r4, r3, #18
 80152b2:	f7fe feb7 	bl	8014024 <HAL_PWREx_GetVoltageRange>
 80152b6:	4603      	mov	r3, r0
 80152b8:	4619      	mov	r1, r3
 80152ba:	4620      	mov	r0, r4
 80152bc:	f000 f80c 	bl	80152d8 <RCC_SetFlashLatency>
 80152c0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80152c2:	4618      	mov	r0, r3
 80152c4:	3714      	adds	r7, #20
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bd90      	pop	{r4, r7, pc}
 80152ca:	bf00      	nop
 80152cc:	0801ba38 	.word	0x0801ba38
 80152d0:	0801b9d8 	.word	0x0801b9d8
 80152d4:	431bde83 	.word	0x431bde83

080152d8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80152d8:	b590      	push	{r4, r7, lr}
 80152da:	b093      	sub	sp, #76	@ 0x4c
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
 80152e0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80152e2:	4b37      	ldr	r3, [pc, #220]	@ (80153c0 <RCC_SetFlashLatency+0xe8>)
 80152e4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80152e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80152ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80152ee:	4a35      	ldr	r2, [pc, #212]	@ (80153c4 <RCC_SetFlashLatency+0xec>)
 80152f0:	f107 031c 	add.w	r3, r7, #28
 80152f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80152f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80152fa:	4b33      	ldr	r3, [pc, #204]	@ (80153c8 <RCC_SetFlashLatency+0xf0>)
 80152fc:	f107 040c 	add.w	r4, r7, #12
 8015300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015302:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8015306:	2300      	movs	r3, #0
 8015308:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 801530a:	683b      	ldr	r3, [r7, #0]
 801530c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015310:	d11a      	bne.n	8015348 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8015312:	2300      	movs	r3, #0
 8015314:	643b      	str	r3, [r7, #64]	@ 0x40
 8015316:	e013      	b.n	8015340 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8015318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801531a:	009b      	lsls	r3, r3, #2
 801531c:	3348      	adds	r3, #72	@ 0x48
 801531e:	443b      	add	r3, r7
 8015320:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8015324:	687a      	ldr	r2, [r7, #4]
 8015326:	429a      	cmp	r2, r3
 8015328:	d807      	bhi.n	801533a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801532a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801532c:	009b      	lsls	r3, r3, #2
 801532e:	3348      	adds	r3, #72	@ 0x48
 8015330:	443b      	add	r3, r7
 8015332:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8015336:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8015338:	e020      	b.n	801537c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801533a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801533c:	3301      	adds	r3, #1
 801533e:	643b      	str	r3, [r7, #64]	@ 0x40
 8015340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015342:	2b03      	cmp	r3, #3
 8015344:	d9e8      	bls.n	8015318 <RCC_SetFlashLatency+0x40>
 8015346:	e019      	b.n	801537c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8015348:	2300      	movs	r3, #0
 801534a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801534c:	e013      	b.n	8015376 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801534e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015350:	009b      	lsls	r3, r3, #2
 8015352:	3348      	adds	r3, #72	@ 0x48
 8015354:	443b      	add	r3, r7
 8015356:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 801535a:	687a      	ldr	r2, [r7, #4]
 801535c:	429a      	cmp	r2, r3
 801535e:	d807      	bhi.n	8015370 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8015360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015362:	009b      	lsls	r3, r3, #2
 8015364:	3348      	adds	r3, #72	@ 0x48
 8015366:	443b      	add	r3, r7
 8015368:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801536c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 801536e:	e005      	b.n	801537c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8015370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015372:	3301      	adds	r3, #1
 8015374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015378:	2b02      	cmp	r3, #2
 801537a:	d9e8      	bls.n	801534e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 801537c:	4b13      	ldr	r3, [pc, #76]	@ (80153cc <RCC_SetFlashLatency+0xf4>)
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	f023 0207 	bic.w	r2, r3, #7
 8015384:	4911      	ldr	r1, [pc, #68]	@ (80153cc <RCC_SetFlashLatency+0xf4>)
 8015386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015388:	4313      	orrs	r3, r2
 801538a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801538c:	f7fd fb06 	bl	801299c <HAL_GetTick>
 8015390:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8015392:	e008      	b.n	80153a6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8015394:	f7fd fb02 	bl	801299c <HAL_GetTick>
 8015398:	4602      	mov	r2, r0
 801539a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801539c:	1ad3      	subs	r3, r2, r3
 801539e:	2b02      	cmp	r3, #2
 80153a0:	d901      	bls.n	80153a6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80153a2:	2303      	movs	r3, #3
 80153a4:	e007      	b.n	80153b6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80153a6:	4b09      	ldr	r3, [pc, #36]	@ (80153cc <RCC_SetFlashLatency+0xf4>)
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	f003 0307 	and.w	r3, r3, #7
 80153ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80153b0:	429a      	cmp	r2, r3
 80153b2:	d1ef      	bne.n	8015394 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80153b4:	2300      	movs	r3, #0
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	374c      	adds	r7, #76	@ 0x4c
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd90      	pop	{r4, r7, pc}
 80153be:	bf00      	nop
 80153c0:	0801b784 	.word	0x0801b784
 80153c4:	0801b794 	.word	0x0801b794
 80153c8:	0801b7a0 	.word	0x0801b7a0
 80153cc:	58004000 	.word	0x58004000

080153d0 <LL_RCC_LSE_IsEnabled>:
{
 80153d0:	b480      	push	{r7}
 80153d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80153d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80153d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80153dc:	f003 0301 	and.w	r3, r3, #1
 80153e0:	2b01      	cmp	r3, #1
 80153e2:	d101      	bne.n	80153e8 <LL_RCC_LSE_IsEnabled+0x18>
 80153e4:	2301      	movs	r3, #1
 80153e6:	e000      	b.n	80153ea <LL_RCC_LSE_IsEnabled+0x1a>
 80153e8:	2300      	movs	r3, #0
}
 80153ea:	4618      	mov	r0, r3
 80153ec:	46bd      	mov	sp, r7
 80153ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f2:	4770      	bx	lr

080153f4 <LL_RCC_LSE_IsReady>:
{
 80153f4:	b480      	push	{r7}
 80153f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80153f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80153fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015400:	f003 0302 	and.w	r3, r3, #2
 8015404:	2b02      	cmp	r3, #2
 8015406:	d101      	bne.n	801540c <LL_RCC_LSE_IsReady+0x18>
 8015408:	2301      	movs	r3, #1
 801540a:	e000      	b.n	801540e <LL_RCC_LSE_IsReady+0x1a>
 801540c:	2300      	movs	r3, #0
}
 801540e:	4618      	mov	r0, r3
 8015410:	46bd      	mov	sp, r7
 8015412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015416:	4770      	bx	lr

08015418 <LL_RCC_MSI_EnablePLLMode>:
{
 8015418:	b480      	push	{r7}
 801541a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 801541c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015426:	f043 0304 	orr.w	r3, r3, #4
 801542a:	6013      	str	r3, [r2, #0]
}
 801542c:	bf00      	nop
 801542e:	46bd      	mov	sp, r7
 8015430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015434:	4770      	bx	lr

08015436 <LL_RCC_SetRFWKPClockSource>:
{
 8015436:	b480      	push	{r7}
 8015438:	b083      	sub	sp, #12
 801543a:	af00      	add	r7, sp, #0
 801543c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 801543e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015446:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 801544a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	4313      	orrs	r3, r2
 8015452:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8015456:	bf00      	nop
 8015458:	370c      	adds	r7, #12
 801545a:	46bd      	mov	sp, r7
 801545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015460:	4770      	bx	lr

08015462 <LL_RCC_SetSMPSClockSource>:
{
 8015462:	b480      	push	{r7}
 8015464:	b083      	sub	sp, #12
 8015466:	af00      	add	r7, sp, #0
 8015468:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 801546a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015470:	f023 0203 	bic.w	r2, r3, #3
 8015474:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	4313      	orrs	r3, r2
 801547c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 801547e:	bf00      	nop
 8015480:	370c      	adds	r7, #12
 8015482:	46bd      	mov	sp, r7
 8015484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015488:	4770      	bx	lr

0801548a <LL_RCC_SetSMPSPrescaler>:
{
 801548a:	b480      	push	{r7}
 801548c:	b083      	sub	sp, #12
 801548e:	af00      	add	r7, sp, #0
 8015490:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8015492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015498:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 801549c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	4313      	orrs	r3, r2
 80154a4:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80154a6:	bf00      	nop
 80154a8:	370c      	adds	r7, #12
 80154aa:	46bd      	mov	sp, r7
 80154ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b0:	4770      	bx	lr

080154b2 <LL_RCC_SetUSARTClockSource>:
{
 80154b2:	b480      	push	{r7}
 80154b4:	b083      	sub	sp, #12
 80154b6:	af00      	add	r7, sp, #0
 80154b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80154ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80154be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80154c2:	f023 0203 	bic.w	r2, r3, #3
 80154c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	4313      	orrs	r3, r2
 80154ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80154d2:	bf00      	nop
 80154d4:	370c      	adds	r7, #12
 80154d6:	46bd      	mov	sp, r7
 80154d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154dc:	4770      	bx	lr

080154de <LL_RCC_SetLPUARTClockSource>:
{
 80154de:	b480      	push	{r7}
 80154e0:	b083      	sub	sp, #12
 80154e2:	af00      	add	r7, sp, #0
 80154e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80154e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80154ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80154ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80154f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	4313      	orrs	r3, r2
 80154fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80154fe:	bf00      	nop
 8015500:	370c      	adds	r7, #12
 8015502:	46bd      	mov	sp, r7
 8015504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015508:	4770      	bx	lr

0801550a <LL_RCC_SetI2CClockSource>:
{
 801550a:	b480      	push	{r7}
 801550c:	b083      	sub	sp, #12
 801550e:	af00      	add	r7, sp, #0
 8015510:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8015512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015516:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	091b      	lsrs	r3, r3, #4
 801551e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8015522:	43db      	mvns	r3, r3
 8015524:	401a      	ands	r2, r3
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	011b      	lsls	r3, r3, #4
 801552a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 801552e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015532:	4313      	orrs	r3, r2
 8015534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8015538:	bf00      	nop
 801553a:	370c      	adds	r7, #12
 801553c:	46bd      	mov	sp, r7
 801553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015542:	4770      	bx	lr

08015544 <LL_RCC_SetLPTIMClockSource>:
{
 8015544:	b480      	push	{r7}
 8015546:	b083      	sub	sp, #12
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801554c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015550:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	0c1b      	lsrs	r3, r3, #16
 8015558:	041b      	lsls	r3, r3, #16
 801555a:	43db      	mvns	r3, r3
 801555c:	401a      	ands	r2, r3
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	041b      	lsls	r3, r3, #16
 8015562:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015566:	4313      	orrs	r3, r2
 8015568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801556c:	bf00      	nop
 801556e:	370c      	adds	r7, #12
 8015570:	46bd      	mov	sp, r7
 8015572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015576:	4770      	bx	lr

08015578 <LL_RCC_SetSAIClockSource>:
{
 8015578:	b480      	push	{r7}
 801557a:	b083      	sub	sp, #12
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8015580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015588:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801558c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	4313      	orrs	r3, r2
 8015594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8015598:	bf00      	nop
 801559a:	370c      	adds	r7, #12
 801559c:	46bd      	mov	sp, r7
 801559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a2:	4770      	bx	lr

080155a4 <LL_RCC_SetRNGClockSource>:
{
 80155a4:	b480      	push	{r7}
 80155a6:	b083      	sub	sp, #12
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80155ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80155b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80155b4:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80155b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	4313      	orrs	r3, r2
 80155c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80155c4:	bf00      	nop
 80155c6:	370c      	adds	r7, #12
 80155c8:	46bd      	mov	sp, r7
 80155ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ce:	4770      	bx	lr

080155d0 <LL_RCC_SetCLK48ClockSource>:
{
 80155d0:	b480      	push	{r7}
 80155d2:	b083      	sub	sp, #12
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80155d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80155dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80155e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80155e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	4313      	orrs	r3, r2
 80155ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80155f0:	bf00      	nop
 80155f2:	370c      	adds	r7, #12
 80155f4:	46bd      	mov	sp, r7
 80155f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fa:	4770      	bx	lr

080155fc <LL_RCC_SetUSBClockSource>:
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b082      	sub	sp, #8
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	f7ff ffe3 	bl	80155d0 <LL_RCC_SetCLK48ClockSource>
}
 801560a:	bf00      	nop
 801560c:	3708      	adds	r7, #8
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}

08015612 <LL_RCC_SetADCClockSource>:
{
 8015612:	b480      	push	{r7}
 8015614:	b083      	sub	sp, #12
 8015616:	af00      	add	r7, sp, #0
 8015618:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 801561a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015622:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8015626:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	4313      	orrs	r3, r2
 801562e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8015632:	bf00      	nop
 8015634:	370c      	adds	r7, #12
 8015636:	46bd      	mov	sp, r7
 8015638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563c:	4770      	bx	lr

0801563e <LL_RCC_SetRTCClockSource>:
{
 801563e:	b480      	push	{r7}
 8015640:	b083      	sub	sp, #12
 8015642:	af00      	add	r7, sp, #0
 8015644:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8015646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801564e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8015652:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	4313      	orrs	r3, r2
 801565a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 801565e:	bf00      	nop
 8015660:	370c      	adds	r7, #12
 8015662:	46bd      	mov	sp, r7
 8015664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015668:	4770      	bx	lr

0801566a <LL_RCC_GetRTCClockSource>:
{
 801566a:	b480      	push	{r7}
 801566c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 801566e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 801567a:	4618      	mov	r0, r3
 801567c:	46bd      	mov	sp, r7
 801567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015682:	4770      	bx	lr

08015684 <LL_RCC_ForceBackupDomainReset>:
{
 8015684:	b480      	push	{r7}
 8015686:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8015688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801568c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015690:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 801569c:	bf00      	nop
 801569e:	46bd      	mov	sp, r7
 80156a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a4:	4770      	bx	lr

080156a6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80156a6:	b480      	push	{r7}
 80156a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80156aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80156ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80156b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80156b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80156ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80156be:	bf00      	nop
 80156c0:	46bd      	mov	sp, r7
 80156c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c6:	4770      	bx	lr

080156c8 <LL_RCC_PLLSAI1_Enable>:
{
 80156c8:	b480      	push	{r7}
 80156ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80156cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80156d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80156da:	6013      	str	r3, [r2, #0]
}
 80156dc:	bf00      	nop
 80156de:	46bd      	mov	sp, r7
 80156e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e4:	4770      	bx	lr

080156e6 <LL_RCC_PLLSAI1_Disable>:
{
 80156e6:	b480      	push	{r7}
 80156e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80156ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80156f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80156f8:	6013      	str	r3, [r2, #0]
}
 80156fa:	bf00      	nop
 80156fc:	46bd      	mov	sp, r7
 80156fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015702:	4770      	bx	lr

08015704 <LL_RCC_PLLSAI1_IsReady>:
{
 8015704:	b480      	push	{r7}
 8015706:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8015708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015712:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015716:	d101      	bne.n	801571c <LL_RCC_PLLSAI1_IsReady+0x18>
 8015718:	2301      	movs	r3, #1
 801571a:	e000      	b.n	801571e <LL_RCC_PLLSAI1_IsReady+0x1a>
 801571c:	2300      	movs	r3, #0
}
 801571e:	4618      	mov	r0, r3
 8015720:	46bd      	mov	sp, r7
 8015722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015726:	4770      	bx	lr

08015728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b088      	sub	sp, #32
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8015730:	2300      	movs	r3, #0
 8015732:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8015734:	2300      	movs	r3, #0
 8015736:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015740:	2b00      	cmp	r3, #0
 8015742:	d034      	beq.n	80157ae <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015748:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801574c:	d021      	beq.n	8015792 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 801574e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8015752:	d81b      	bhi.n	801578c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8015754:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015758:	d01d      	beq.n	8015796 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 801575a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801575e:	d815      	bhi.n	801578c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8015760:	2b00      	cmp	r3, #0
 8015762:	d00b      	beq.n	801577c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8015764:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015768:	d110      	bne.n	801578c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 801576a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801576e:	68db      	ldr	r3, [r3, #12]
 8015770:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015778:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 801577a:	e00d      	b.n	8015798 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	3304      	adds	r3, #4
 8015780:	4618      	mov	r0, r3
 8015782:	f000 f94d 	bl	8015a20 <RCCEx_PLLSAI1_ConfigNP>
 8015786:	4603      	mov	r3, r0
 8015788:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801578a:	e005      	b.n	8015798 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 801578c:	2301      	movs	r3, #1
 801578e:	77fb      	strb	r3, [r7, #31]
        break;
 8015790:	e002      	b.n	8015798 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8015792:	bf00      	nop
 8015794:	e000      	b.n	8015798 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8015796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015798:	7ffb      	ldrb	r3, [r7, #31]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d105      	bne.n	80157aa <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7ff fee8 	bl	8015578 <LL_RCC_SetSAIClockSource>
 80157a8:	e001      	b.n	80157ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80157aa:	7ffb      	ldrb	r3, [r7, #31]
 80157ac:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d046      	beq.n	8015848 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80157ba:	f7ff ff56 	bl	801566a <LL_RCC_GetRTCClockSource>
 80157be:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80157c4:	69ba      	ldr	r2, [r7, #24]
 80157c6:	429a      	cmp	r2, r3
 80157c8:	d03c      	beq.n	8015844 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80157ca:	f7fe fc1b 	bl	8014004 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80157ce:	69bb      	ldr	r3, [r7, #24]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d105      	bne.n	80157e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80157d8:	4618      	mov	r0, r3
 80157da:	f7ff ff30 	bl	801563e <LL_RCC_SetRTCClockSource>
 80157de:	e02e      	b.n	801583e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80157e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80157e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80157e8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80157ea:	f7ff ff4b 	bl	8015684 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80157ee:	f7ff ff5a 	bl	80156a6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80157f2:	697b      	ldr	r3, [r7, #20]
 80157f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80157fc:	4313      	orrs	r3, r2
 80157fe:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8015800:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 801580a:	f7ff fde1 	bl	80153d0 <LL_RCC_LSE_IsEnabled>
 801580e:	4603      	mov	r3, r0
 8015810:	2b01      	cmp	r3, #1
 8015812:	d114      	bne.n	801583e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8015814:	f7fd f8c2 	bl	801299c <HAL_GetTick>
 8015818:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 801581a:	e00b      	b.n	8015834 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801581c:	f7fd f8be 	bl	801299c <HAL_GetTick>
 8015820:	4602      	mov	r2, r0
 8015822:	693b      	ldr	r3, [r7, #16]
 8015824:	1ad3      	subs	r3, r2, r3
 8015826:	f241 3288 	movw	r2, #5000	@ 0x1388
 801582a:	4293      	cmp	r3, r2
 801582c:	d902      	bls.n	8015834 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 801582e:	2303      	movs	r3, #3
 8015830:	77fb      	strb	r3, [r7, #31]
              break;
 8015832:	e004      	b.n	801583e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8015834:	f7ff fdde 	bl	80153f4 <LL_RCC_LSE_IsReady>
 8015838:	4603      	mov	r3, r0
 801583a:	2b01      	cmp	r3, #1
 801583c:	d1ee      	bne.n	801581c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 801583e:	7ffb      	ldrb	r3, [r7, #31]
 8015840:	77bb      	strb	r3, [r7, #30]
 8015842:	e001      	b.n	8015848 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015844:	7ffb      	ldrb	r3, [r7, #31]
 8015846:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	f003 0301 	and.w	r3, r3, #1
 8015850:	2b00      	cmp	r3, #0
 8015852:	d004      	beq.n	801585e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	699b      	ldr	r3, [r3, #24]
 8015858:	4618      	mov	r0, r3
 801585a:	f7ff fe2a 	bl	80154b2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	f003 0302 	and.w	r3, r3, #2
 8015866:	2b00      	cmp	r3, #0
 8015868:	d004      	beq.n	8015874 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	69db      	ldr	r3, [r3, #28]
 801586e:	4618      	mov	r0, r3
 8015870:	f7ff fe35 	bl	80154de <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	f003 0310 	and.w	r3, r3, #16
 801587c:	2b00      	cmp	r3, #0
 801587e:	d004      	beq.n	801588a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015884:	4618      	mov	r0, r3
 8015886:	f7ff fe5d 	bl	8015544 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	f003 0320 	and.w	r3, r3, #32
 8015892:	2b00      	cmp	r3, #0
 8015894:	d004      	beq.n	80158a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801589a:	4618      	mov	r0, r3
 801589c:	f7ff fe52 	bl	8015544 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	f003 0304 	and.w	r3, r3, #4
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d004      	beq.n	80158b6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	6a1b      	ldr	r3, [r3, #32]
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7ff fe2a 	bl	801550a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	f003 0308 	and.w	r3, r3, #8
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d004      	beq.n	80158cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80158c6:	4618      	mov	r0, r3
 80158c8:	f7ff fe1f 	bl	801550a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d022      	beq.n	801591e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80158dc:	4618      	mov	r0, r3
 80158de:	f7ff fe8d 	bl	80155fc <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80158e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80158ea:	d107      	bne.n	80158fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80158ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80158f0:	68db      	ldr	r3, [r3, #12]
 80158f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80158f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80158fa:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015900:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8015904:	d10b      	bne.n	801591e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	3304      	adds	r3, #4
 801590a:	4618      	mov	r0, r3
 801590c:	f000 f8e3 	bl	8015ad6 <RCCEx_PLLSAI1_ConfigNQ>
 8015910:	4603      	mov	r3, r0
 8015912:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8015914:	7ffb      	ldrb	r3, [r7, #31]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d001      	beq.n	801591e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 801591a:	7ffb      	ldrb	r3, [r7, #31]
 801591c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015926:	2b00      	cmp	r3, #0
 8015928:	d02b      	beq.n	8015982 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801592e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015932:	d008      	beq.n	8015946 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015938:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801593c:	d003      	beq.n	8015946 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015942:	2b00      	cmp	r3, #0
 8015944:	d105      	bne.n	8015952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801594a:	4618      	mov	r0, r3
 801594c:	f7ff fe2a 	bl	80155a4 <LL_RCC_SetRNGClockSource>
 8015950:	e00a      	b.n	8015968 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015956:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801595a:	60fb      	str	r3, [r7, #12]
 801595c:	2000      	movs	r0, #0
 801595e:	f7ff fe21 	bl	80155a4 <LL_RCC_SetRNGClockSource>
 8015962:	68f8      	ldr	r0, [r7, #12]
 8015964:	f7ff fe34 	bl	80155d0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801596c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8015970:	d107      	bne.n	8015982 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8015972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015976:	68db      	ldr	r3, [r3, #12]
 8015978:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801597c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8015980:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801598a:	2b00      	cmp	r3, #0
 801598c:	d022      	beq.n	80159d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015992:	4618      	mov	r0, r3
 8015994:	f7ff fe3d 	bl	8015612 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801599c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80159a0:	d107      	bne.n	80159b2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80159a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80159a6:	68db      	ldr	r3, [r3, #12]
 80159a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80159ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80159b0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80159ba:	d10b      	bne.n	80159d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	3304      	adds	r3, #4
 80159c0:	4618      	mov	r0, r3
 80159c2:	f000 f8e3 	bl	8015b8c <RCCEx_PLLSAI1_ConfigNR>
 80159c6:	4603      	mov	r3, r0
 80159c8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80159ca:	7ffb      	ldrb	r3, [r7, #31]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d001      	beq.n	80159d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80159d0:	7ffb      	ldrb	r3, [r7, #31]
 80159d2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d004      	beq.n	80159ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80159e4:	4618      	mov	r0, r3
 80159e6:	f7ff fd26 	bl	8015436 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d009      	beq.n	8015a0a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80159fa:	4618      	mov	r0, r3
 80159fc:	f7ff fd45 	bl	801548a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015a04:	4618      	mov	r0, r3
 8015a06:	f7ff fd2c 	bl	8015462 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8015a0a:	7fbb      	ldrb	r3, [r7, #30]
}
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	3720      	adds	r7, #32
 8015a10:	46bd      	mov	sp, r7
 8015a12:	bd80      	pop	{r7, pc}

08015a14 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8015a18:	f7ff fcfe 	bl	8015418 <LL_RCC_MSI_EnablePLLMode>
}
 8015a1c:	bf00      	nop
 8015a1e:	bd80      	pop	{r7, pc}

08015a20 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b084      	sub	sp, #16
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8015a28:	2300      	movs	r3, #0
 8015a2a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8015a2c:	f7ff fe5b 	bl	80156e6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8015a30:	f7fc ffb4 	bl	801299c <HAL_GetTick>
 8015a34:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015a36:	e009      	b.n	8015a4c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015a38:	f7fc ffb0 	bl	801299c <HAL_GetTick>
 8015a3c:	4602      	mov	r2, r0
 8015a3e:	68bb      	ldr	r3, [r7, #8]
 8015a40:	1ad3      	subs	r3, r2, r3
 8015a42:	2b02      	cmp	r3, #2
 8015a44:	d902      	bls.n	8015a4c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8015a46:	2303      	movs	r3, #3
 8015a48:	73fb      	strb	r3, [r7, #15]
      break;
 8015a4a:	e004      	b.n	8015a56 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015a4c:	f7ff fe5a 	bl	8015704 <LL_RCC_PLLSAI1_IsReady>
 8015a50:	4603      	mov	r3, r0
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d1f0      	bne.n	8015a38 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8015a56:	7bfb      	ldrb	r3, [r7, #15]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d137      	bne.n	8015acc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8015a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015a60:	691b      	ldr	r3, [r3, #16]
 8015a62:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	021b      	lsls	r3, r3, #8
 8015a6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015a70:	4313      	orrs	r3, r2
 8015a72:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8015a74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015a78:	691b      	ldr	r3, [r3, #16]
 8015a7a:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	685b      	ldr	r3, [r3, #4]
 8015a82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015a86:	4313      	orrs	r3, r2
 8015a88:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8015a8a:	f7ff fe1d 	bl	80156c8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015a8e:	f7fc ff85 	bl	801299c <HAL_GetTick>
 8015a92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015a94:	e009      	b.n	8015aaa <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015a96:	f7fc ff81 	bl	801299c <HAL_GetTick>
 8015a9a:	4602      	mov	r2, r0
 8015a9c:	68bb      	ldr	r3, [r7, #8]
 8015a9e:	1ad3      	subs	r3, r2, r3
 8015aa0:	2b02      	cmp	r3, #2
 8015aa2:	d902      	bls.n	8015aaa <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8015aa4:	2303      	movs	r3, #3
 8015aa6:	73fb      	strb	r3, [r7, #15]
        break;
 8015aa8:	e004      	b.n	8015ab4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015aaa:	f7ff fe2b 	bl	8015704 <LL_RCC_PLLSAI1_IsReady>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	2b01      	cmp	r3, #1
 8015ab2:	d1f0      	bne.n	8015a96 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8015ab4:	7bfb      	ldrb	r3, [r7, #15]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d108      	bne.n	8015acc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8015aba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015abe:	691a      	ldr	r2, [r3, #16]
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	691b      	ldr	r3, [r3, #16]
 8015ac4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015ac8:	4313      	orrs	r3, r2
 8015aca:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8015acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ace:	4618      	mov	r0, r3
 8015ad0:	3710      	adds	r7, #16
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}

08015ad6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8015ad6:	b580      	push	{r7, lr}
 8015ad8:	b084      	sub	sp, #16
 8015ada:	af00      	add	r7, sp, #0
 8015adc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8015ae2:	f7ff fe00 	bl	80156e6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8015ae6:	f7fc ff59 	bl	801299c <HAL_GetTick>
 8015aea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015aec:	e009      	b.n	8015b02 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015aee:	f7fc ff55 	bl	801299c <HAL_GetTick>
 8015af2:	4602      	mov	r2, r0
 8015af4:	68bb      	ldr	r3, [r7, #8]
 8015af6:	1ad3      	subs	r3, r2, r3
 8015af8:	2b02      	cmp	r3, #2
 8015afa:	d902      	bls.n	8015b02 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8015afc:	2303      	movs	r3, #3
 8015afe:	73fb      	strb	r3, [r7, #15]
      break;
 8015b00:	e004      	b.n	8015b0c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015b02:	f7ff fdff 	bl	8015704 <LL_RCC_PLLSAI1_IsReady>
 8015b06:	4603      	mov	r3, r0
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d1f0      	bne.n	8015aee <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8015b0c:	7bfb      	ldrb	r3, [r7, #15]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d137      	bne.n	8015b82 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8015b12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015b16:	691b      	ldr	r3, [r3, #16]
 8015b18:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	021b      	lsls	r3, r3, #8
 8015b22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015b26:	4313      	orrs	r3, r2
 8015b28:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8015b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015b2e:	691b      	ldr	r3, [r3, #16]
 8015b30:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	689b      	ldr	r3, [r3, #8]
 8015b38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015b3c:	4313      	orrs	r3, r2
 8015b3e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8015b40:	f7ff fdc2 	bl	80156c8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015b44:	f7fc ff2a 	bl	801299c <HAL_GetTick>
 8015b48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015b4a:	e009      	b.n	8015b60 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015b4c:	f7fc ff26 	bl	801299c <HAL_GetTick>
 8015b50:	4602      	mov	r2, r0
 8015b52:	68bb      	ldr	r3, [r7, #8]
 8015b54:	1ad3      	subs	r3, r2, r3
 8015b56:	2b02      	cmp	r3, #2
 8015b58:	d902      	bls.n	8015b60 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8015b5a:	2303      	movs	r3, #3
 8015b5c:	73fb      	strb	r3, [r7, #15]
        break;
 8015b5e:	e004      	b.n	8015b6a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015b60:	f7ff fdd0 	bl	8015704 <LL_RCC_PLLSAI1_IsReady>
 8015b64:	4603      	mov	r3, r0
 8015b66:	2b01      	cmp	r3, #1
 8015b68:	d1f0      	bne.n	8015b4c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8015b6a:	7bfb      	ldrb	r3, [r7, #15]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d108      	bne.n	8015b82 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8015b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015b74:	691a      	ldr	r2, [r3, #16]
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	691b      	ldr	r3, [r3, #16]
 8015b7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015b7e:	4313      	orrs	r3, r2
 8015b80:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8015b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b84:	4618      	mov	r0, r3
 8015b86:	3710      	adds	r7, #16
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	bd80      	pop	{r7, pc}

08015b8c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b084      	sub	sp, #16
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8015b94:	2300      	movs	r3, #0
 8015b96:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8015b98:	f7ff fda5 	bl	80156e6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8015b9c:	f7fc fefe 	bl	801299c <HAL_GetTick>
 8015ba0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015ba2:	e009      	b.n	8015bb8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015ba4:	f7fc fefa 	bl	801299c <HAL_GetTick>
 8015ba8:	4602      	mov	r2, r0
 8015baa:	68bb      	ldr	r3, [r7, #8]
 8015bac:	1ad3      	subs	r3, r2, r3
 8015bae:	2b02      	cmp	r3, #2
 8015bb0:	d902      	bls.n	8015bb8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8015bb2:	2303      	movs	r3, #3
 8015bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8015bb6:	e004      	b.n	8015bc2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8015bb8:	f7ff fda4 	bl	8015704 <LL_RCC_PLLSAI1_IsReady>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d1f0      	bne.n	8015ba4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8015bc2:	7bfb      	ldrb	r3, [r7, #15]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d137      	bne.n	8015c38 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8015bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015bcc:	691b      	ldr	r3, [r3, #16]
 8015bce:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	021b      	lsls	r3, r3, #8
 8015bd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015bdc:	4313      	orrs	r3, r2
 8015bde:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8015be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015be4:	691b      	ldr	r3, [r3, #16]
 8015be6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	68db      	ldr	r3, [r3, #12]
 8015bee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015bf2:	4313      	orrs	r3, r2
 8015bf4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8015bf6:	f7ff fd67 	bl	80156c8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015bfa:	f7fc fecf 	bl	801299c <HAL_GetTick>
 8015bfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015c00:	e009      	b.n	8015c16 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015c02:	f7fc fecb 	bl	801299c <HAL_GetTick>
 8015c06:	4602      	mov	r2, r0
 8015c08:	68bb      	ldr	r3, [r7, #8]
 8015c0a:	1ad3      	subs	r3, r2, r3
 8015c0c:	2b02      	cmp	r3, #2
 8015c0e:	d902      	bls.n	8015c16 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8015c10:	2303      	movs	r3, #3
 8015c12:	73fb      	strb	r3, [r7, #15]
        break;
 8015c14:	e004      	b.n	8015c20 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8015c16:	f7ff fd75 	bl	8015704 <LL_RCC_PLLSAI1_IsReady>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	2b01      	cmp	r3, #1
 8015c1e:	d1f0      	bne.n	8015c02 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8015c20:	7bfb      	ldrb	r3, [r7, #15]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d108      	bne.n	8015c38 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8015c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015c2a:	691a      	ldr	r2, [r3, #16]
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	691b      	ldr	r3, [r3, #16]
 8015c30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015c34:	4313      	orrs	r3, r2
 8015c36:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8015c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	3710      	adds	r7, #16
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}

08015c42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015c42:	b580      	push	{r7, lr}
 8015c44:	b082      	sub	sp, #8
 8015c46:	af00      	add	r7, sp, #0
 8015c48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d101      	bne.n	8015c54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015c50:	2301      	movs	r3, #1
 8015c52:	e049      	b.n	8015ce8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015c5a:	b2db      	uxtb	r3, r3
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d106      	bne.n	8015c6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	2200      	movs	r2, #0
 8015c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015c68:	6878      	ldr	r0, [r7, #4]
 8015c6a:	f000 f841 	bl	8015cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	2202      	movs	r2, #2
 8015c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	681a      	ldr	r2, [r3, #0]
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	3304      	adds	r3, #4
 8015c7e:	4619      	mov	r1, r3
 8015c80:	4610      	mov	r0, r2
 8015c82:	f000 f9bd 	bl	8016000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	2201      	movs	r2, #1
 8015c8a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	2201      	movs	r2, #1
 8015c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	2201      	movs	r2, #1
 8015c9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	2201      	movs	r2, #1
 8015ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	2201      	movs	r2, #1
 8015caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	2201      	movs	r2, #1
 8015cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	2201      	movs	r2, #1
 8015cba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	2201      	movs	r2, #1
 8015cc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	2201      	movs	r2, #1
 8015cca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	2201      	movs	r2, #1
 8015cd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	2201      	movs	r2, #1
 8015cda:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	2201      	movs	r2, #1
 8015ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8015ce6:	2300      	movs	r3, #0
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3708      	adds	r7, #8
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}

08015cf0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8015cf0:	b480      	push	{r7}
 8015cf2:	b083      	sub	sp, #12
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8015cf8:	bf00      	nop
 8015cfa:	370c      	adds	r7, #12
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d02:	4770      	bx	lr

08015d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015d04:	b480      	push	{r7}
 8015d06:	b085      	sub	sp, #20
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015d12:	b2db      	uxtb	r3, r3
 8015d14:	2b01      	cmp	r3, #1
 8015d16:	d001      	beq.n	8015d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015d18:	2301      	movs	r3, #1
 8015d1a:	e036      	b.n	8015d8a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2202      	movs	r2, #2
 8015d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	68da      	ldr	r2, [r3, #12]
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	f042 0201 	orr.w	r2, r2, #1
 8015d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	4a17      	ldr	r2, [pc, #92]	@ (8015d98 <HAL_TIM_Base_Start_IT+0x94>)
 8015d3a:	4293      	cmp	r3, r2
 8015d3c:	d004      	beq.n	8015d48 <HAL_TIM_Base_Start_IT+0x44>
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015d46:	d115      	bne.n	8015d74 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	689a      	ldr	r2, [r3, #8]
 8015d4e:	4b13      	ldr	r3, [pc, #76]	@ (8015d9c <HAL_TIM_Base_Start_IT+0x98>)
 8015d50:	4013      	ands	r3, r2
 8015d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	2b06      	cmp	r3, #6
 8015d58:	d015      	beq.n	8015d86 <HAL_TIM_Base_Start_IT+0x82>
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015d60:	d011      	beq.n	8015d86 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	681a      	ldr	r2, [r3, #0]
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	f042 0201 	orr.w	r2, r2, #1
 8015d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015d72:	e008      	b.n	8015d86 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	681a      	ldr	r2, [r3, #0]
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	f042 0201 	orr.w	r2, r2, #1
 8015d82:	601a      	str	r2, [r3, #0]
 8015d84:	e000      	b.n	8015d88 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015d86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015d88:	2300      	movs	r3, #0
}
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	3714      	adds	r7, #20
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d94:	4770      	bx	lr
 8015d96:	bf00      	nop
 8015d98:	40012c00 	.word	0x40012c00
 8015d9c:	00010007 	.word	0x00010007

08015da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b084      	sub	sp, #16
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	68db      	ldr	r3, [r3, #12]
 8015dae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	691b      	ldr	r3, [r3, #16]
 8015db6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8015db8:	68bb      	ldr	r3, [r7, #8]
 8015dba:	f003 0302 	and.w	r3, r3, #2
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d020      	beq.n	8015e04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	f003 0302 	and.w	r3, r3, #2
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d01b      	beq.n	8015e04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	f06f 0202 	mvn.w	r2, #2
 8015dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	2201      	movs	r2, #1
 8015dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	699b      	ldr	r3, [r3, #24]
 8015de2:	f003 0303 	and.w	r3, r3, #3
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d003      	beq.n	8015df2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f000 f8e9 	bl	8015fc2 <HAL_TIM_IC_CaptureCallback>
 8015df0:	e005      	b.n	8015dfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8015df2:	6878      	ldr	r0, [r7, #4]
 8015df4:	f000 f8db 	bl	8015fae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015df8:	6878      	ldr	r0, [r7, #4]
 8015dfa:	f000 f8ec 	bl	8015fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	2200      	movs	r2, #0
 8015e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8015e04:	68bb      	ldr	r3, [r7, #8]
 8015e06:	f003 0304 	and.w	r3, r3, #4
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d020      	beq.n	8015e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	f003 0304 	and.w	r3, r3, #4
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d01b      	beq.n	8015e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	f06f 0204 	mvn.w	r2, #4
 8015e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	2202      	movs	r2, #2
 8015e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	699b      	ldr	r3, [r3, #24]
 8015e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d003      	beq.n	8015e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	f000 f8c3 	bl	8015fc2 <HAL_TIM_IC_CaptureCallback>
 8015e3c:	e005      	b.n	8015e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f000 f8b5 	bl	8015fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015e44:	6878      	ldr	r0, [r7, #4]
 8015e46:	f000 f8c6 	bl	8015fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8015e50:	68bb      	ldr	r3, [r7, #8]
 8015e52:	f003 0308 	and.w	r3, r3, #8
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d020      	beq.n	8015e9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	f003 0308 	and.w	r3, r3, #8
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d01b      	beq.n	8015e9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	f06f 0208 	mvn.w	r2, #8
 8015e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	2204      	movs	r2, #4
 8015e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	69db      	ldr	r3, [r3, #28]
 8015e7a:	f003 0303 	and.w	r3, r3, #3
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d003      	beq.n	8015e8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015e82:	6878      	ldr	r0, [r7, #4]
 8015e84:	f000 f89d 	bl	8015fc2 <HAL_TIM_IC_CaptureCallback>
 8015e88:	e005      	b.n	8015e96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015e8a:	6878      	ldr	r0, [r7, #4]
 8015e8c:	f000 f88f 	bl	8015fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015e90:	6878      	ldr	r0, [r7, #4]
 8015e92:	f000 f8a0 	bl	8015fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	2200      	movs	r2, #0
 8015e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8015e9c:	68bb      	ldr	r3, [r7, #8]
 8015e9e:	f003 0310 	and.w	r3, r3, #16
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d020      	beq.n	8015ee8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	f003 0310 	and.w	r3, r3, #16
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d01b      	beq.n	8015ee8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	f06f 0210 	mvn.w	r2, #16
 8015eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	2208      	movs	r2, #8
 8015ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	69db      	ldr	r3, [r3, #28]
 8015ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d003      	beq.n	8015ed6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f000 f877 	bl	8015fc2 <HAL_TIM_IC_CaptureCallback>
 8015ed4:	e005      	b.n	8015ee2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	f000 f869 	bl	8015fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015edc:	6878      	ldr	r0, [r7, #4]
 8015ede:	f000 f87a 	bl	8015fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8015ee8:	68bb      	ldr	r3, [r7, #8]
 8015eea:	f003 0301 	and.w	r3, r3, #1
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d00c      	beq.n	8015f0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	f003 0301 	and.w	r3, r3, #1
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d007      	beq.n	8015f0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	f06f 0201 	mvn.w	r2, #1
 8015f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	f7ea fed0 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8015f0c:	68bb      	ldr	r3, [r7, #8]
 8015f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d104      	bne.n	8015f20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8015f16:	68bb      	ldr	r3, [r7, #8]
 8015f18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d00c      	beq.n	8015f3a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d007      	beq.n	8015f3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8015f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f000 f8dd 	bl	80160f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d00c      	beq.n	8015f5e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d007      	beq.n	8015f5e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8015f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f000 f8d5 	bl	8016108 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8015f5e:	68bb      	ldr	r3, [r7, #8]
 8015f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d00c      	beq.n	8015f82 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d007      	beq.n	8015f82 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8015f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015f7c:	6878      	ldr	r0, [r7, #4]
 8015f7e:	f000 f834 	bl	8015fea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8015f82:	68bb      	ldr	r3, [r7, #8]
 8015f84:	f003 0320 	and.w	r3, r3, #32
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d00c      	beq.n	8015fa6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	f003 0320 	and.w	r3, r3, #32
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d007      	beq.n	8015fa6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	f06f 0220 	mvn.w	r2, #32
 8015f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015fa0:	6878      	ldr	r0, [r7, #4]
 8015fa2:	f000 f89d 	bl	80160e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015fa6:	bf00      	nop
 8015fa8:	3710      	adds	r7, #16
 8015faa:	46bd      	mov	sp, r7
 8015fac:	bd80      	pop	{r7, pc}

08015fae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015fae:	b480      	push	{r7}
 8015fb0:	b083      	sub	sp, #12
 8015fb2:	af00      	add	r7, sp, #0
 8015fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015fb6:	bf00      	nop
 8015fb8:	370c      	adds	r7, #12
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc0:	4770      	bx	lr

08015fc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015fc2:	b480      	push	{r7}
 8015fc4:	b083      	sub	sp, #12
 8015fc6:	af00      	add	r7, sp, #0
 8015fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015fca:	bf00      	nop
 8015fcc:	370c      	adds	r7, #12
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd4:	4770      	bx	lr

08015fd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015fd6:	b480      	push	{r7}
 8015fd8:	b083      	sub	sp, #12
 8015fda:	af00      	add	r7, sp, #0
 8015fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015fde:	bf00      	nop
 8015fe0:	370c      	adds	r7, #12
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe8:	4770      	bx	lr

08015fea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015fea:	b480      	push	{r7}
 8015fec:	b083      	sub	sp, #12
 8015fee:	af00      	add	r7, sp, #0
 8015ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015ff2:	bf00      	nop
 8015ff4:	370c      	adds	r7, #12
 8015ff6:	46bd      	mov	sp, r7
 8015ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ffc:	4770      	bx	lr
	...

08016000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016000:	b480      	push	{r7}
 8016002:	b085      	sub	sp, #20
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
 8016008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	4a30      	ldr	r2, [pc, #192]	@ (80160d4 <TIM_Base_SetConfig+0xd4>)
 8016014:	4293      	cmp	r3, r2
 8016016:	d003      	beq.n	8016020 <TIM_Base_SetConfig+0x20>
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801601e:	d108      	bne.n	8016032 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	685b      	ldr	r3, [r3, #4]
 801602c:	68fa      	ldr	r2, [r7, #12]
 801602e:	4313      	orrs	r3, r2
 8016030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	4a27      	ldr	r2, [pc, #156]	@ (80160d4 <TIM_Base_SetConfig+0xd4>)
 8016036:	4293      	cmp	r3, r2
 8016038:	d00b      	beq.n	8016052 <TIM_Base_SetConfig+0x52>
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016040:	d007      	beq.n	8016052 <TIM_Base_SetConfig+0x52>
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	4a24      	ldr	r2, [pc, #144]	@ (80160d8 <TIM_Base_SetConfig+0xd8>)
 8016046:	4293      	cmp	r3, r2
 8016048:	d003      	beq.n	8016052 <TIM_Base_SetConfig+0x52>
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	4a23      	ldr	r2, [pc, #140]	@ (80160dc <TIM_Base_SetConfig+0xdc>)
 801604e:	4293      	cmp	r3, r2
 8016050:	d108      	bne.n	8016064 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801605a:	683b      	ldr	r3, [r7, #0]
 801605c:	68db      	ldr	r3, [r3, #12]
 801605e:	68fa      	ldr	r2, [r7, #12]
 8016060:	4313      	orrs	r3, r2
 8016062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801606a:	683b      	ldr	r3, [r7, #0]
 801606c:	695b      	ldr	r3, [r3, #20]
 801606e:	4313      	orrs	r3, r2
 8016070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	68fa      	ldr	r2, [r7, #12]
 8016076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016078:	683b      	ldr	r3, [r7, #0]
 801607a:	689a      	ldr	r2, [r3, #8]
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	681a      	ldr	r2, [r3, #0]
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	4a12      	ldr	r2, [pc, #72]	@ (80160d4 <TIM_Base_SetConfig+0xd4>)
 801608c:	4293      	cmp	r3, r2
 801608e:	d007      	beq.n	80160a0 <TIM_Base_SetConfig+0xa0>
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	4a11      	ldr	r2, [pc, #68]	@ (80160d8 <TIM_Base_SetConfig+0xd8>)
 8016094:	4293      	cmp	r3, r2
 8016096:	d003      	beq.n	80160a0 <TIM_Base_SetConfig+0xa0>
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	4a10      	ldr	r2, [pc, #64]	@ (80160dc <TIM_Base_SetConfig+0xdc>)
 801609c:	4293      	cmp	r3, r2
 801609e:	d103      	bne.n	80160a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	691a      	ldr	r2, [r3, #16]
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	2201      	movs	r2, #1
 80160ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	691b      	ldr	r3, [r3, #16]
 80160b2:	f003 0301 	and.w	r3, r3, #1
 80160b6:	2b01      	cmp	r3, #1
 80160b8:	d105      	bne.n	80160c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	691b      	ldr	r3, [r3, #16]
 80160be:	f023 0201 	bic.w	r2, r3, #1
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	611a      	str	r2, [r3, #16]
  }
}
 80160c6:	bf00      	nop
 80160c8:	3714      	adds	r7, #20
 80160ca:	46bd      	mov	sp, r7
 80160cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d0:	4770      	bx	lr
 80160d2:	bf00      	nop
 80160d4:	40012c00 	.word	0x40012c00
 80160d8:	40014400 	.word	0x40014400
 80160dc:	40014800 	.word	0x40014800

080160e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80160e0:	b480      	push	{r7}
 80160e2:	b083      	sub	sp, #12
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80160e8:	bf00      	nop
 80160ea:	370c      	adds	r7, #12
 80160ec:	46bd      	mov	sp, r7
 80160ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f2:	4770      	bx	lr

080160f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80160f4:	b480      	push	{r7}
 80160f6:	b083      	sub	sp, #12
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80160fc:	bf00      	nop
 80160fe:	370c      	adds	r7, #12
 8016100:	46bd      	mov	sp, r7
 8016102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016106:	4770      	bx	lr

08016108 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8016108:	b480      	push	{r7}
 801610a:	b083      	sub	sp, #12
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8016110:	bf00      	nop
 8016112:	370c      	adds	r7, #12
 8016114:	46bd      	mov	sp, r7
 8016116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611a:	4770      	bx	lr

0801611c <LL_RCC_GetUSARTClockSource>:
{
 801611c:	b480      	push	{r7}
 801611e:	b083      	sub	sp, #12
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8016124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016128:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	4013      	ands	r3, r2
}
 8016130:	4618      	mov	r0, r3
 8016132:	370c      	adds	r7, #12
 8016134:	46bd      	mov	sp, r7
 8016136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613a:	4770      	bx	lr

0801613c <LL_RCC_GetLPUARTClockSource>:
{
 801613c:	b480      	push	{r7}
 801613e:	b083      	sub	sp, #12
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8016144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016148:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	4013      	ands	r3, r2
}
 8016150:	4618      	mov	r0, r3
 8016152:	370c      	adds	r7, #12
 8016154:	46bd      	mov	sp, r7
 8016156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801615a:	4770      	bx	lr

0801615c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b082      	sub	sp, #8
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d101      	bne.n	801616e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801616a:	2301      	movs	r3, #1
 801616c:	e042      	b.n	80161f4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016174:	2b00      	cmp	r3, #0
 8016176:	d106      	bne.n	8016186 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	2200      	movs	r2, #0
 801617c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016180:	6878      	ldr	r0, [r7, #4]
 8016182:	f000 f83b 	bl	80161fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	2224      	movs	r2, #36	@ 0x24
 801618a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	681a      	ldr	r2, [r3, #0]
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	f022 0201 	bic.w	r2, r2, #1
 801619c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d002      	beq.n	80161ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f000 fa5a 	bl	8016660 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80161ac:	6878      	ldr	r0, [r7, #4]
 80161ae:	f000 f82f 	bl	8016210 <UART_SetConfig>
 80161b2:	4603      	mov	r3, r0
 80161b4:	2b01      	cmp	r3, #1
 80161b6:	d101      	bne.n	80161bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80161b8:	2301      	movs	r3, #1
 80161ba:	e01b      	b.n	80161f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	685a      	ldr	r2, [r3, #4]
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80161ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	689a      	ldr	r2, [r3, #8]
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80161da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	681a      	ldr	r2, [r3, #0]
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	f042 0201 	orr.w	r2, r2, #1
 80161ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80161ec:	6878      	ldr	r0, [r7, #4]
 80161ee:	f000 fad9 	bl	80167a4 <UART_CheckIdleState>
 80161f2:	4603      	mov	r3, r0
}
 80161f4:	4618      	mov	r0, r3
 80161f6:	3708      	adds	r7, #8
 80161f8:	46bd      	mov	sp, r7
 80161fa:	bd80      	pop	{r7, pc}

080161fc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80161fc:	b480      	push	{r7}
 80161fe:	b083      	sub	sp, #12
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8016204:	bf00      	nop
 8016206:	370c      	adds	r7, #12
 8016208:	46bd      	mov	sp, r7
 801620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620e:	4770      	bx	lr

08016210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016214:	b08c      	sub	sp, #48	@ 0x30
 8016216:	af00      	add	r7, sp, #0
 8016218:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801621a:	2300      	movs	r3, #0
 801621c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016220:	697b      	ldr	r3, [r7, #20]
 8016222:	689a      	ldr	r2, [r3, #8]
 8016224:	697b      	ldr	r3, [r7, #20]
 8016226:	691b      	ldr	r3, [r3, #16]
 8016228:	431a      	orrs	r2, r3
 801622a:	697b      	ldr	r3, [r7, #20]
 801622c:	695b      	ldr	r3, [r3, #20]
 801622e:	431a      	orrs	r2, r3
 8016230:	697b      	ldr	r3, [r7, #20]
 8016232:	69db      	ldr	r3, [r3, #28]
 8016234:	4313      	orrs	r3, r2
 8016236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016238:	697b      	ldr	r3, [r7, #20]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	681a      	ldr	r2, [r3, #0]
 801623e:	4baf      	ldr	r3, [pc, #700]	@ (80164fc <UART_SetConfig+0x2ec>)
 8016240:	4013      	ands	r3, r2
 8016242:	697a      	ldr	r2, [r7, #20]
 8016244:	6812      	ldr	r2, [r2, #0]
 8016246:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016248:	430b      	orrs	r3, r1
 801624a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801624c:	697b      	ldr	r3, [r7, #20]
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	685b      	ldr	r3, [r3, #4]
 8016252:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8016256:	697b      	ldr	r3, [r7, #20]
 8016258:	68da      	ldr	r2, [r3, #12]
 801625a:	697b      	ldr	r3, [r7, #20]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	430a      	orrs	r2, r1
 8016260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016262:	697b      	ldr	r3, [r7, #20]
 8016264:	699b      	ldr	r3, [r3, #24]
 8016266:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016268:	697b      	ldr	r3, [r7, #20]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	4aa4      	ldr	r2, [pc, #656]	@ (8016500 <UART_SetConfig+0x2f0>)
 801626e:	4293      	cmp	r3, r2
 8016270:	d004      	beq.n	801627c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8016272:	697b      	ldr	r3, [r7, #20]
 8016274:	6a1b      	ldr	r3, [r3, #32]
 8016276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016278:	4313      	orrs	r3, r2
 801627a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801627c:	697b      	ldr	r3, [r7, #20]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	689b      	ldr	r3, [r3, #8]
 8016282:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8016286:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 801628a:	697a      	ldr	r2, [r7, #20]
 801628c:	6812      	ldr	r2, [r2, #0]
 801628e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016290:	430b      	orrs	r3, r1
 8016292:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016294:	697b      	ldr	r3, [r7, #20]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801629a:	f023 010f 	bic.w	r1, r3, #15
 801629e:	697b      	ldr	r3, [r7, #20]
 80162a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80162a2:	697b      	ldr	r3, [r7, #20]
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	430a      	orrs	r2, r1
 80162a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80162aa:	697b      	ldr	r3, [r7, #20]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	4a95      	ldr	r2, [pc, #596]	@ (8016504 <UART_SetConfig+0x2f4>)
 80162b0:	4293      	cmp	r3, r2
 80162b2:	d125      	bne.n	8016300 <UART_SetConfig+0xf0>
 80162b4:	2003      	movs	r0, #3
 80162b6:	f7ff ff31 	bl	801611c <LL_RCC_GetUSARTClockSource>
 80162ba:	4603      	mov	r3, r0
 80162bc:	2b03      	cmp	r3, #3
 80162be:	d81b      	bhi.n	80162f8 <UART_SetConfig+0xe8>
 80162c0:	a201      	add	r2, pc, #4	@ (adr r2, 80162c8 <UART_SetConfig+0xb8>)
 80162c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162c6:	bf00      	nop
 80162c8:	080162d9 	.word	0x080162d9
 80162cc:	080162e9 	.word	0x080162e9
 80162d0:	080162e1 	.word	0x080162e1
 80162d4:	080162f1 	.word	0x080162f1
 80162d8:	2301      	movs	r3, #1
 80162da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80162de:	e042      	b.n	8016366 <UART_SetConfig+0x156>
 80162e0:	2302      	movs	r3, #2
 80162e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80162e6:	e03e      	b.n	8016366 <UART_SetConfig+0x156>
 80162e8:	2304      	movs	r3, #4
 80162ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80162ee:	e03a      	b.n	8016366 <UART_SetConfig+0x156>
 80162f0:	2308      	movs	r3, #8
 80162f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80162f6:	e036      	b.n	8016366 <UART_SetConfig+0x156>
 80162f8:	2310      	movs	r3, #16
 80162fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80162fe:	e032      	b.n	8016366 <UART_SetConfig+0x156>
 8016300:	697b      	ldr	r3, [r7, #20]
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	4a7e      	ldr	r2, [pc, #504]	@ (8016500 <UART_SetConfig+0x2f0>)
 8016306:	4293      	cmp	r3, r2
 8016308:	d12a      	bne.n	8016360 <UART_SetConfig+0x150>
 801630a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 801630e:	f7ff ff15 	bl	801613c <LL_RCC_GetLPUARTClockSource>
 8016312:	4603      	mov	r3, r0
 8016314:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8016318:	d01a      	beq.n	8016350 <UART_SetConfig+0x140>
 801631a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801631e:	d81b      	bhi.n	8016358 <UART_SetConfig+0x148>
 8016320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016324:	d00c      	beq.n	8016340 <UART_SetConfig+0x130>
 8016326:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801632a:	d815      	bhi.n	8016358 <UART_SetConfig+0x148>
 801632c:	2b00      	cmp	r3, #0
 801632e:	d003      	beq.n	8016338 <UART_SetConfig+0x128>
 8016330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016334:	d008      	beq.n	8016348 <UART_SetConfig+0x138>
 8016336:	e00f      	b.n	8016358 <UART_SetConfig+0x148>
 8016338:	2300      	movs	r3, #0
 801633a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801633e:	e012      	b.n	8016366 <UART_SetConfig+0x156>
 8016340:	2302      	movs	r3, #2
 8016342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016346:	e00e      	b.n	8016366 <UART_SetConfig+0x156>
 8016348:	2304      	movs	r3, #4
 801634a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801634e:	e00a      	b.n	8016366 <UART_SetConfig+0x156>
 8016350:	2308      	movs	r3, #8
 8016352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016356:	e006      	b.n	8016366 <UART_SetConfig+0x156>
 8016358:	2310      	movs	r3, #16
 801635a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801635e:	e002      	b.n	8016366 <UART_SetConfig+0x156>
 8016360:	2310      	movs	r3, #16
 8016362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016366:	697b      	ldr	r3, [r7, #20]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	4a65      	ldr	r2, [pc, #404]	@ (8016500 <UART_SetConfig+0x2f0>)
 801636c:	4293      	cmp	r3, r2
 801636e:	f040 8097 	bne.w	80164a0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016372:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016376:	2b08      	cmp	r3, #8
 8016378:	d823      	bhi.n	80163c2 <UART_SetConfig+0x1b2>
 801637a:	a201      	add	r2, pc, #4	@ (adr r2, 8016380 <UART_SetConfig+0x170>)
 801637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016380:	080163a5 	.word	0x080163a5
 8016384:	080163c3 	.word	0x080163c3
 8016388:	080163ad 	.word	0x080163ad
 801638c:	080163c3 	.word	0x080163c3
 8016390:	080163b3 	.word	0x080163b3
 8016394:	080163c3 	.word	0x080163c3
 8016398:	080163c3 	.word	0x080163c3
 801639c:	080163c3 	.word	0x080163c3
 80163a0:	080163bb 	.word	0x080163bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80163a4:	f7fe ff02 	bl	80151ac <HAL_RCC_GetPCLK1Freq>
 80163a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80163aa:	e010      	b.n	80163ce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80163ac:	4b56      	ldr	r3, [pc, #344]	@ (8016508 <UART_SetConfig+0x2f8>)
 80163ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80163b0:	e00d      	b.n	80163ce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80163b2:	f7fe fe7b 	bl	80150ac <HAL_RCC_GetSysClockFreq>
 80163b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80163b8:	e009      	b.n	80163ce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80163ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80163be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80163c0:	e005      	b.n	80163ce <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80163c2:	2300      	movs	r3, #0
 80163c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80163c6:	2301      	movs	r3, #1
 80163c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80163cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80163ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	f000 812b 	beq.w	801662c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80163d6:	697b      	ldr	r3, [r7, #20]
 80163d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163da:	4a4c      	ldr	r2, [pc, #304]	@ (801650c <UART_SetConfig+0x2fc>)
 80163dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80163e0:	461a      	mov	r2, r3
 80163e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80163e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80163ea:	697b      	ldr	r3, [r7, #20]
 80163ec:	685a      	ldr	r2, [r3, #4]
 80163ee:	4613      	mov	r3, r2
 80163f0:	005b      	lsls	r3, r3, #1
 80163f2:	4413      	add	r3, r2
 80163f4:	69ba      	ldr	r2, [r7, #24]
 80163f6:	429a      	cmp	r2, r3
 80163f8:	d305      	bcc.n	8016406 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80163fa:	697b      	ldr	r3, [r7, #20]
 80163fc:	685b      	ldr	r3, [r3, #4]
 80163fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016400:	69ba      	ldr	r2, [r7, #24]
 8016402:	429a      	cmp	r2, r3
 8016404:	d903      	bls.n	801640e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8016406:	2301      	movs	r3, #1
 8016408:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801640c:	e10e      	b.n	801662c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016410:	2200      	movs	r2, #0
 8016412:	60bb      	str	r3, [r7, #8]
 8016414:	60fa      	str	r2, [r7, #12]
 8016416:	697b      	ldr	r3, [r7, #20]
 8016418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801641a:	4a3c      	ldr	r2, [pc, #240]	@ (801650c <UART_SetConfig+0x2fc>)
 801641c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016420:	b29b      	uxth	r3, r3
 8016422:	2200      	movs	r2, #0
 8016424:	603b      	str	r3, [r7, #0]
 8016426:	607a      	str	r2, [r7, #4]
 8016428:	e9d7 2300 	ldrd	r2, r3, [r7]
 801642c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016430:	f7e9 ff46 	bl	80002c0 <__aeabi_uldivmod>
 8016434:	4602      	mov	r2, r0
 8016436:	460b      	mov	r3, r1
 8016438:	4610      	mov	r0, r2
 801643a:	4619      	mov	r1, r3
 801643c:	f04f 0200 	mov.w	r2, #0
 8016440:	f04f 0300 	mov.w	r3, #0
 8016444:	020b      	lsls	r3, r1, #8
 8016446:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801644a:	0202      	lsls	r2, r0, #8
 801644c:	6979      	ldr	r1, [r7, #20]
 801644e:	6849      	ldr	r1, [r1, #4]
 8016450:	0849      	lsrs	r1, r1, #1
 8016452:	2000      	movs	r0, #0
 8016454:	460c      	mov	r4, r1
 8016456:	4605      	mov	r5, r0
 8016458:	eb12 0804 	adds.w	r8, r2, r4
 801645c:	eb43 0905 	adc.w	r9, r3, r5
 8016460:	697b      	ldr	r3, [r7, #20]
 8016462:	685b      	ldr	r3, [r3, #4]
 8016464:	2200      	movs	r2, #0
 8016466:	469a      	mov	sl, r3
 8016468:	4693      	mov	fp, r2
 801646a:	4652      	mov	r2, sl
 801646c:	465b      	mov	r3, fp
 801646e:	4640      	mov	r0, r8
 8016470:	4649      	mov	r1, r9
 8016472:	f7e9 ff25 	bl	80002c0 <__aeabi_uldivmod>
 8016476:	4602      	mov	r2, r0
 8016478:	460b      	mov	r3, r1
 801647a:	4613      	mov	r3, r2
 801647c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801647e:	6a3b      	ldr	r3, [r7, #32]
 8016480:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016484:	d308      	bcc.n	8016498 <UART_SetConfig+0x288>
 8016486:	6a3b      	ldr	r3, [r7, #32]
 8016488:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801648c:	d204      	bcs.n	8016498 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 801648e:	697b      	ldr	r3, [r7, #20]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	6a3a      	ldr	r2, [r7, #32]
 8016494:	60da      	str	r2, [r3, #12]
 8016496:	e0c9      	b.n	801662c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8016498:	2301      	movs	r3, #1
 801649a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801649e:	e0c5      	b.n	801662c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80164a0:	697b      	ldr	r3, [r7, #20]
 80164a2:	69db      	ldr	r3, [r3, #28]
 80164a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80164a8:	d16d      	bne.n	8016586 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80164aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80164ae:	3b01      	subs	r3, #1
 80164b0:	2b07      	cmp	r3, #7
 80164b2:	d82d      	bhi.n	8016510 <UART_SetConfig+0x300>
 80164b4:	a201      	add	r2, pc, #4	@ (adr r2, 80164bc <UART_SetConfig+0x2ac>)
 80164b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164ba:	bf00      	nop
 80164bc:	080164dd 	.word	0x080164dd
 80164c0:	080164e5 	.word	0x080164e5
 80164c4:	08016511 	.word	0x08016511
 80164c8:	080164eb 	.word	0x080164eb
 80164cc:	08016511 	.word	0x08016511
 80164d0:	08016511 	.word	0x08016511
 80164d4:	08016511 	.word	0x08016511
 80164d8:	080164f3 	.word	0x080164f3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80164dc:	f7fe fe7c 	bl	80151d8 <HAL_RCC_GetPCLK2Freq>
 80164e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80164e2:	e01b      	b.n	801651c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80164e4:	4b08      	ldr	r3, [pc, #32]	@ (8016508 <UART_SetConfig+0x2f8>)
 80164e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80164e8:	e018      	b.n	801651c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80164ea:	f7fe fddf 	bl	80150ac <HAL_RCC_GetSysClockFreq>
 80164ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80164f0:	e014      	b.n	801651c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80164f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80164f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80164f8:	e010      	b.n	801651c <UART_SetConfig+0x30c>
 80164fa:	bf00      	nop
 80164fc:	cfff69f3 	.word	0xcfff69f3
 8016500:	40008000 	.word	0x40008000
 8016504:	40013800 	.word	0x40013800
 8016508:	00f42400 	.word	0x00f42400
 801650c:	0801ba88 	.word	0x0801ba88
      default:
        pclk = 0U;
 8016510:	2300      	movs	r3, #0
 8016512:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8016514:	2301      	movs	r3, #1
 8016516:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801651a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801651e:	2b00      	cmp	r3, #0
 8016520:	f000 8084 	beq.w	801662c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016524:	697b      	ldr	r3, [r7, #20]
 8016526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016528:	4a4b      	ldr	r2, [pc, #300]	@ (8016658 <UART_SetConfig+0x448>)
 801652a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801652e:	461a      	mov	r2, r3
 8016530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016532:	fbb3 f3f2 	udiv	r3, r3, r2
 8016536:	005a      	lsls	r2, r3, #1
 8016538:	697b      	ldr	r3, [r7, #20]
 801653a:	685b      	ldr	r3, [r3, #4]
 801653c:	085b      	lsrs	r3, r3, #1
 801653e:	441a      	add	r2, r3
 8016540:	697b      	ldr	r3, [r7, #20]
 8016542:	685b      	ldr	r3, [r3, #4]
 8016544:	fbb2 f3f3 	udiv	r3, r2, r3
 8016548:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801654a:	6a3b      	ldr	r3, [r7, #32]
 801654c:	2b0f      	cmp	r3, #15
 801654e:	d916      	bls.n	801657e <UART_SetConfig+0x36e>
 8016550:	6a3b      	ldr	r3, [r7, #32]
 8016552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016556:	d212      	bcs.n	801657e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016558:	6a3b      	ldr	r3, [r7, #32]
 801655a:	b29b      	uxth	r3, r3
 801655c:	f023 030f 	bic.w	r3, r3, #15
 8016560:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016562:	6a3b      	ldr	r3, [r7, #32]
 8016564:	085b      	lsrs	r3, r3, #1
 8016566:	b29b      	uxth	r3, r3
 8016568:	f003 0307 	and.w	r3, r3, #7
 801656c:	b29a      	uxth	r2, r3
 801656e:	8bfb      	ldrh	r3, [r7, #30]
 8016570:	4313      	orrs	r3, r2
 8016572:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8016574:	697b      	ldr	r3, [r7, #20]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	8bfa      	ldrh	r2, [r7, #30]
 801657a:	60da      	str	r2, [r3, #12]
 801657c:	e056      	b.n	801662c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801657e:	2301      	movs	r3, #1
 8016580:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8016584:	e052      	b.n	801662c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8016586:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801658a:	3b01      	subs	r3, #1
 801658c:	2b07      	cmp	r3, #7
 801658e:	d822      	bhi.n	80165d6 <UART_SetConfig+0x3c6>
 8016590:	a201      	add	r2, pc, #4	@ (adr r2, 8016598 <UART_SetConfig+0x388>)
 8016592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016596:	bf00      	nop
 8016598:	080165b9 	.word	0x080165b9
 801659c:	080165c1 	.word	0x080165c1
 80165a0:	080165d7 	.word	0x080165d7
 80165a4:	080165c7 	.word	0x080165c7
 80165a8:	080165d7 	.word	0x080165d7
 80165ac:	080165d7 	.word	0x080165d7
 80165b0:	080165d7 	.word	0x080165d7
 80165b4:	080165cf 	.word	0x080165cf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80165b8:	f7fe fe0e 	bl	80151d8 <HAL_RCC_GetPCLK2Freq>
 80165bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80165be:	e010      	b.n	80165e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80165c0:	4b26      	ldr	r3, [pc, #152]	@ (801665c <UART_SetConfig+0x44c>)
 80165c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80165c4:	e00d      	b.n	80165e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80165c6:	f7fe fd71 	bl	80150ac <HAL_RCC_GetSysClockFreq>
 80165ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80165cc:	e009      	b.n	80165e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80165ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80165d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80165d4:	e005      	b.n	80165e2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80165d6:	2300      	movs	r3, #0
 80165d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80165da:	2301      	movs	r3, #1
 80165dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80165e0:	bf00      	nop
    }

    if (pclk != 0U)
 80165e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d021      	beq.n	801662c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80165e8:	697b      	ldr	r3, [r7, #20]
 80165ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165ec:	4a1a      	ldr	r2, [pc, #104]	@ (8016658 <UART_SetConfig+0x448>)
 80165ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80165f2:	461a      	mov	r2, r3
 80165f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80165fa:	697b      	ldr	r3, [r7, #20]
 80165fc:	685b      	ldr	r3, [r3, #4]
 80165fe:	085b      	lsrs	r3, r3, #1
 8016600:	441a      	add	r2, r3
 8016602:	697b      	ldr	r3, [r7, #20]
 8016604:	685b      	ldr	r3, [r3, #4]
 8016606:	fbb2 f3f3 	udiv	r3, r2, r3
 801660a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801660c:	6a3b      	ldr	r3, [r7, #32]
 801660e:	2b0f      	cmp	r3, #15
 8016610:	d909      	bls.n	8016626 <UART_SetConfig+0x416>
 8016612:	6a3b      	ldr	r3, [r7, #32]
 8016614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016618:	d205      	bcs.n	8016626 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801661a:	6a3b      	ldr	r3, [r7, #32]
 801661c:	b29a      	uxth	r2, r3
 801661e:	697b      	ldr	r3, [r7, #20]
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	60da      	str	r2, [r3, #12]
 8016624:	e002      	b.n	801662c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8016626:	2301      	movs	r3, #1
 8016628:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801662c:	697b      	ldr	r3, [r7, #20]
 801662e:	2201      	movs	r2, #1
 8016630:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8016634:	697b      	ldr	r3, [r7, #20]
 8016636:	2201      	movs	r2, #1
 8016638:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801663c:	697b      	ldr	r3, [r7, #20]
 801663e:	2200      	movs	r2, #0
 8016640:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8016642:	697b      	ldr	r3, [r7, #20]
 8016644:	2200      	movs	r2, #0
 8016646:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8016648:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 801664c:	4618      	mov	r0, r3
 801664e:	3730      	adds	r7, #48	@ 0x30
 8016650:	46bd      	mov	sp, r7
 8016652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016656:	bf00      	nop
 8016658:	0801ba88 	.word	0x0801ba88
 801665c:	00f42400 	.word	0x00f42400

08016660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016660:	b480      	push	{r7}
 8016662:	b083      	sub	sp, #12
 8016664:	af00      	add	r7, sp, #0
 8016666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801666c:	f003 0308 	and.w	r3, r3, #8
 8016670:	2b00      	cmp	r3, #0
 8016672:	d00a      	beq.n	801668a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	685b      	ldr	r3, [r3, #4]
 801667a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	430a      	orrs	r2, r1
 8016688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801668e:	f003 0301 	and.w	r3, r3, #1
 8016692:	2b00      	cmp	r3, #0
 8016694:	d00a      	beq.n	80166ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	685b      	ldr	r3, [r3, #4]
 801669c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	430a      	orrs	r2, r1
 80166aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80166b0:	f003 0302 	and.w	r3, r3, #2
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d00a      	beq.n	80166ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	685b      	ldr	r3, [r3, #4]
 80166be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	430a      	orrs	r2, r1
 80166cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80166d2:	f003 0304 	and.w	r3, r3, #4
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d00a      	beq.n	80166f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	685b      	ldr	r3, [r3, #4]
 80166e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	430a      	orrs	r2, r1
 80166ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80166f4:	f003 0310 	and.w	r3, r3, #16
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d00a      	beq.n	8016712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	689b      	ldr	r3, [r3, #8]
 8016702:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	430a      	orrs	r2, r1
 8016710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016716:	f003 0320 	and.w	r3, r3, #32
 801671a:	2b00      	cmp	r3, #0
 801671c:	d00a      	beq.n	8016734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	689b      	ldr	r3, [r3, #8]
 8016724:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	430a      	orrs	r2, r1
 8016732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801673c:	2b00      	cmp	r3, #0
 801673e:	d01a      	beq.n	8016776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	685b      	ldr	r3, [r3, #4]
 8016746:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	430a      	orrs	r2, r1
 8016754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801675a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801675e:	d10a      	bne.n	8016776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	685b      	ldr	r3, [r3, #4]
 8016766:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	430a      	orrs	r2, r1
 8016774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801677a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801677e:	2b00      	cmp	r3, #0
 8016780:	d00a      	beq.n	8016798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	685b      	ldr	r3, [r3, #4]
 8016788:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	430a      	orrs	r2, r1
 8016796:	605a      	str	r2, [r3, #4]
  }
}
 8016798:	bf00      	nop
 801679a:	370c      	adds	r7, #12
 801679c:	46bd      	mov	sp, r7
 801679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a2:	4770      	bx	lr

080167a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b098      	sub	sp, #96	@ 0x60
 80167a8:	af02      	add	r7, sp, #8
 80167aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2200      	movs	r2, #0
 80167b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80167b4:	f7fc f8f2 	bl	801299c <HAL_GetTick>
 80167b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	f003 0308 	and.w	r3, r3, #8
 80167c4:	2b08      	cmp	r3, #8
 80167c6:	d12f      	bne.n	8016828 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80167c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80167cc:	9300      	str	r3, [sp, #0]
 80167ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167d0:	2200      	movs	r2, #0
 80167d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80167d6:	6878      	ldr	r0, [r7, #4]
 80167d8:	f000 f88e 	bl	80168f8 <UART_WaitOnFlagUntilTimeout>
 80167dc:	4603      	mov	r3, r0
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d022      	beq.n	8016828 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167ea:	e853 3f00 	ldrex	r3, [r3]
 80167ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80167f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80167f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	461a      	mov	r2, r3
 80167fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016800:	647b      	str	r3, [r7, #68]	@ 0x44
 8016802:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016804:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016808:	e841 2300 	strex	r3, r2, [r1]
 801680c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801680e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016810:	2b00      	cmp	r3, #0
 8016812:	d1e6      	bne.n	80167e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2220      	movs	r2, #32
 8016818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	2200      	movs	r2, #0
 8016820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016824:	2303      	movs	r3, #3
 8016826:	e063      	b.n	80168f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	f003 0304 	and.w	r3, r3, #4
 8016832:	2b04      	cmp	r3, #4
 8016834:	d149      	bne.n	80168ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016836:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801683a:	9300      	str	r3, [sp, #0]
 801683c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801683e:	2200      	movs	r2, #0
 8016840:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8016844:	6878      	ldr	r0, [r7, #4]
 8016846:	f000 f857 	bl	80168f8 <UART_WaitOnFlagUntilTimeout>
 801684a:	4603      	mov	r3, r0
 801684c:	2b00      	cmp	r3, #0
 801684e:	d03c      	beq.n	80168ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016858:	e853 3f00 	ldrex	r3, [r3]
 801685c:	623b      	str	r3, [r7, #32]
   return(result);
 801685e:	6a3b      	ldr	r3, [r7, #32]
 8016860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8016864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	461a      	mov	r2, r3
 801686c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801686e:	633b      	str	r3, [r7, #48]	@ 0x30
 8016870:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016872:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016876:	e841 2300 	strex	r3, r2, [r1]
 801687a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801687c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801687e:	2b00      	cmp	r3, #0
 8016880:	d1e6      	bne.n	8016850 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	3308      	adds	r3, #8
 8016888:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801688a:	693b      	ldr	r3, [r7, #16]
 801688c:	e853 3f00 	ldrex	r3, [r3]
 8016890:	60fb      	str	r3, [r7, #12]
   return(result);
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	f023 0301 	bic.w	r3, r3, #1
 8016898:	64bb      	str	r3, [r7, #72]	@ 0x48
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	3308      	adds	r3, #8
 80168a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80168a2:	61fa      	str	r2, [r7, #28]
 80168a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168a6:	69b9      	ldr	r1, [r7, #24]
 80168a8:	69fa      	ldr	r2, [r7, #28]
 80168aa:	e841 2300 	strex	r3, r2, [r1]
 80168ae:	617b      	str	r3, [r7, #20]
   return(result);
 80168b0:	697b      	ldr	r3, [r7, #20]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d1e5      	bne.n	8016882 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	2220      	movs	r2, #32
 80168ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	2200      	movs	r2, #0
 80168c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80168c6:	2303      	movs	r3, #3
 80168c8:	e012      	b.n	80168f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	2220      	movs	r2, #32
 80168ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	2220      	movs	r2, #32
 80168d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	2200      	movs	r2, #0
 80168de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2200      	movs	r2, #0
 80168e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	2200      	movs	r2, #0
 80168ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80168ee:	2300      	movs	r3, #0
}
 80168f0:	4618      	mov	r0, r3
 80168f2:	3758      	adds	r7, #88	@ 0x58
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}

080168f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b084      	sub	sp, #16
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	60f8      	str	r0, [r7, #12]
 8016900:	60b9      	str	r1, [r7, #8]
 8016902:	603b      	str	r3, [r7, #0]
 8016904:	4613      	mov	r3, r2
 8016906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016908:	e04f      	b.n	80169aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801690a:	69bb      	ldr	r3, [r7, #24]
 801690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016910:	d04b      	beq.n	80169aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016912:	f7fc f843 	bl	801299c <HAL_GetTick>
 8016916:	4602      	mov	r2, r0
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	1ad3      	subs	r3, r2, r3
 801691c:	69ba      	ldr	r2, [r7, #24]
 801691e:	429a      	cmp	r2, r3
 8016920:	d302      	bcc.n	8016928 <UART_WaitOnFlagUntilTimeout+0x30>
 8016922:	69bb      	ldr	r3, [r7, #24]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d101      	bne.n	801692c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8016928:	2303      	movs	r3, #3
 801692a:	e04e      	b.n	80169ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	f003 0304 	and.w	r3, r3, #4
 8016936:	2b00      	cmp	r3, #0
 8016938:	d037      	beq.n	80169aa <UART_WaitOnFlagUntilTimeout+0xb2>
 801693a:	68bb      	ldr	r3, [r7, #8]
 801693c:	2b80      	cmp	r3, #128	@ 0x80
 801693e:	d034      	beq.n	80169aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8016940:	68bb      	ldr	r3, [r7, #8]
 8016942:	2b40      	cmp	r3, #64	@ 0x40
 8016944:	d031      	beq.n	80169aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	69db      	ldr	r3, [r3, #28]
 801694c:	f003 0308 	and.w	r3, r3, #8
 8016950:	2b08      	cmp	r3, #8
 8016952:	d110      	bne.n	8016976 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	2208      	movs	r2, #8
 801695a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801695c:	68f8      	ldr	r0, [r7, #12]
 801695e:	f000 f838 	bl	80169d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	2208      	movs	r2, #8
 8016966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	2200      	movs	r2, #0
 801696e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8016972:	2301      	movs	r3, #1
 8016974:	e029      	b.n	80169ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	69db      	ldr	r3, [r3, #28]
 801697c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016980:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016984:	d111      	bne.n	80169aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801698e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016990:	68f8      	ldr	r0, [r7, #12]
 8016992:	f000 f81e 	bl	80169d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	2220      	movs	r2, #32
 801699a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	2200      	movs	r2, #0
 80169a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80169a6:	2303      	movs	r3, #3
 80169a8:	e00f      	b.n	80169ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	69da      	ldr	r2, [r3, #28]
 80169b0:	68bb      	ldr	r3, [r7, #8]
 80169b2:	4013      	ands	r3, r2
 80169b4:	68ba      	ldr	r2, [r7, #8]
 80169b6:	429a      	cmp	r2, r3
 80169b8:	bf0c      	ite	eq
 80169ba:	2301      	moveq	r3, #1
 80169bc:	2300      	movne	r3, #0
 80169be:	b2db      	uxtb	r3, r3
 80169c0:	461a      	mov	r2, r3
 80169c2:	79fb      	ldrb	r3, [r7, #7]
 80169c4:	429a      	cmp	r2, r3
 80169c6:	d0a0      	beq.n	801690a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80169c8:	2300      	movs	r3, #0
}
 80169ca:	4618      	mov	r0, r3
 80169cc:	3710      	adds	r7, #16
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}

080169d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80169d2:	b480      	push	{r7}
 80169d4:	b095      	sub	sp, #84	@ 0x54
 80169d6:	af00      	add	r7, sp, #0
 80169d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80169e2:	e853 3f00 	ldrex	r3, [r3]
 80169e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80169e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80169ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	461a      	mov	r2, r3
 80169f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80169f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80169fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80169fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016a00:	e841 2300 	strex	r3, r2, [r1]
 8016a04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8016a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d1e6      	bne.n	80169da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	3308      	adds	r3, #8
 8016a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a14:	6a3b      	ldr	r3, [r7, #32]
 8016a16:	e853 3f00 	ldrex	r3, [r3]
 8016a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8016a1c:	69fb      	ldr	r3, [r7, #28]
 8016a1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016a22:	f023 0301 	bic.w	r3, r3, #1
 8016a26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	3308      	adds	r3, #8
 8016a2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016a30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8016a32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016a38:	e841 2300 	strex	r3, r2, [r1]
 8016a3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8016a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d1e3      	bne.n	8016a0c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a48:	2b01      	cmp	r3, #1
 8016a4a:	d118      	bne.n	8016a7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	e853 3f00 	ldrex	r3, [r3]
 8016a58:	60bb      	str	r3, [r7, #8]
   return(result);
 8016a5a:	68bb      	ldr	r3, [r7, #8]
 8016a5c:	f023 0310 	bic.w	r3, r3, #16
 8016a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	461a      	mov	r2, r3
 8016a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a6a:	61bb      	str	r3, [r7, #24]
 8016a6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a6e:	6979      	ldr	r1, [r7, #20]
 8016a70:	69ba      	ldr	r2, [r7, #24]
 8016a72:	e841 2300 	strex	r3, r2, [r1]
 8016a76:	613b      	str	r3, [r7, #16]
   return(result);
 8016a78:	693b      	ldr	r3, [r7, #16]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d1e6      	bne.n	8016a4c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	2220      	movs	r2, #32
 8016a82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	2200      	movs	r2, #0
 8016a8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2200      	movs	r2, #0
 8016a90:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8016a92:	bf00      	nop
 8016a94:	3754      	adds	r7, #84	@ 0x54
 8016a96:	46bd      	mov	sp, r7
 8016a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9c:	4770      	bx	lr

08016a9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016a9e:	b480      	push	{r7}
 8016aa0:	b085      	sub	sp, #20
 8016aa2:	af00      	add	r7, sp, #0
 8016aa4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016aac:	2b01      	cmp	r3, #1
 8016aae:	d101      	bne.n	8016ab4 <HAL_UARTEx_DisableFifoMode+0x16>
 8016ab0:	2302      	movs	r3, #2
 8016ab2:	e027      	b.n	8016b04 <HAL_UARTEx_DisableFifoMode+0x66>
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	2201      	movs	r2, #1
 8016ab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	2224      	movs	r2, #36	@ 0x24
 8016ac0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	681a      	ldr	r2, [r3, #0]
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	f022 0201 	bic.w	r2, r2, #1
 8016ada:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8016ae2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	68fa      	ldr	r2, [r7, #12]
 8016af0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	2220      	movs	r2, #32
 8016af6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	2200      	movs	r2, #0
 8016afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8016b02:	2300      	movs	r3, #0
}
 8016b04:	4618      	mov	r0, r3
 8016b06:	3714      	adds	r7, #20
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b0e:	4770      	bx	lr

08016b10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b084      	sub	sp, #16
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
 8016b18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016b20:	2b01      	cmp	r3, #1
 8016b22:	d101      	bne.n	8016b28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016b24:	2302      	movs	r3, #2
 8016b26:	e02d      	b.n	8016b84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	2201      	movs	r2, #1
 8016b2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	2224      	movs	r2, #36	@ 0x24
 8016b34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	681a      	ldr	r2, [r3, #0]
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	f022 0201 	bic.w	r2, r2, #1
 8016b4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	689b      	ldr	r3, [r3, #8]
 8016b56:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	683a      	ldr	r2, [r7, #0]
 8016b60:	430a      	orrs	r2, r1
 8016b62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016b64:	6878      	ldr	r0, [r7, #4]
 8016b66:	f000 f84f 	bl	8016c08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	68fa      	ldr	r2, [r7, #12]
 8016b70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	2220      	movs	r2, #32
 8016b76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8016b82:	2300      	movs	r3, #0
}
 8016b84:	4618      	mov	r0, r3
 8016b86:	3710      	adds	r7, #16
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	bd80      	pop	{r7, pc}

08016b8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b084      	sub	sp, #16
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
 8016b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016b9c:	2b01      	cmp	r3, #1
 8016b9e:	d101      	bne.n	8016ba4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016ba0:	2302      	movs	r3, #2
 8016ba2:	e02d      	b.n	8016c00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	2201      	movs	r2, #1
 8016ba8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2224      	movs	r2, #36	@ 0x24
 8016bb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	681a      	ldr	r2, [r3, #0]
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	f022 0201 	bic.w	r2, r2, #1
 8016bca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	689b      	ldr	r3, [r3, #8]
 8016bd2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	683a      	ldr	r2, [r7, #0]
 8016bdc:	430a      	orrs	r2, r1
 8016bde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016be0:	6878      	ldr	r0, [r7, #4]
 8016be2:	f000 f811 	bl	8016c08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	68fa      	ldr	r2, [r7, #12]
 8016bec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	2220      	movs	r2, #32
 8016bf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8016bfe:	2300      	movs	r3, #0
}
 8016c00:	4618      	mov	r0, r3
 8016c02:	3710      	adds	r7, #16
 8016c04:	46bd      	mov	sp, r7
 8016c06:	bd80      	pop	{r7, pc}

08016c08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016c08:	b480      	push	{r7}
 8016c0a:	b085      	sub	sp, #20
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d108      	bne.n	8016c2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	2201      	movs	r2, #1
 8016c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	2201      	movs	r2, #1
 8016c24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016c28:	e031      	b.n	8016c8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016c2a:	2308      	movs	r3, #8
 8016c2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016c2e:	2308      	movs	r3, #8
 8016c30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	689b      	ldr	r3, [r3, #8]
 8016c38:	0e5b      	lsrs	r3, r3, #25
 8016c3a:	b2db      	uxtb	r3, r3
 8016c3c:	f003 0307 	and.w	r3, r3, #7
 8016c40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	689b      	ldr	r3, [r3, #8]
 8016c48:	0f5b      	lsrs	r3, r3, #29
 8016c4a:	b2db      	uxtb	r3, r3
 8016c4c:	f003 0307 	and.w	r3, r3, #7
 8016c50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016c52:	7bbb      	ldrb	r3, [r7, #14]
 8016c54:	7b3a      	ldrb	r2, [r7, #12]
 8016c56:	4911      	ldr	r1, [pc, #68]	@ (8016c9c <UARTEx_SetNbDataToProcess+0x94>)
 8016c58:	5c8a      	ldrb	r2, [r1, r2]
 8016c5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016c5e:	7b3a      	ldrb	r2, [r7, #12]
 8016c60:	490f      	ldr	r1, [pc, #60]	@ (8016ca0 <UARTEx_SetNbDataToProcess+0x98>)
 8016c62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016c64:	fb93 f3f2 	sdiv	r3, r3, r2
 8016c68:	b29a      	uxth	r2, r3
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016c70:	7bfb      	ldrb	r3, [r7, #15]
 8016c72:	7b7a      	ldrb	r2, [r7, #13]
 8016c74:	4909      	ldr	r1, [pc, #36]	@ (8016c9c <UARTEx_SetNbDataToProcess+0x94>)
 8016c76:	5c8a      	ldrb	r2, [r1, r2]
 8016c78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016c7c:	7b7a      	ldrb	r2, [r7, #13]
 8016c7e:	4908      	ldr	r1, [pc, #32]	@ (8016ca0 <UARTEx_SetNbDataToProcess+0x98>)
 8016c80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016c82:	fb93 f3f2 	sdiv	r3, r3, r2
 8016c86:	b29a      	uxth	r2, r3
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8016c8e:	bf00      	nop
 8016c90:	3714      	adds	r7, #20
 8016c92:	46bd      	mov	sp, r7
 8016c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c98:	4770      	bx	lr
 8016c9a:	bf00      	nop
 8016c9c:	0801baa0 	.word	0x0801baa0
 8016ca0:	0801baa8 	.word	0x0801baa8

08016ca4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8016ca4:	b480      	push	{r7}
 8016ca6:	b085      	sub	sp, #20
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8016cac:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8016cb0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8016cb8:	b29a      	uxth	r2, r3
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	b29b      	uxth	r3, r3
 8016cbe:	43db      	mvns	r3, r3
 8016cc0:	b29b      	uxth	r3, r3
 8016cc2:	4013      	ands	r3, r2
 8016cc4:	b29a      	uxth	r2, r3
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8016ccc:	2300      	movs	r3, #0
}
 8016cce:	4618      	mov	r0, r3
 8016cd0:	3714      	adds	r7, #20
 8016cd2:	46bd      	mov	sp, r7
 8016cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd8:	4770      	bx	lr

08016cda <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8016cda:	b480      	push	{r7}
 8016cdc:	b085      	sub	sp, #20
 8016cde:	af00      	add	r7, sp, #0
 8016ce0:	60f8      	str	r0, [r7, #12]
 8016ce2:	1d3b      	adds	r3, r7, #4
 8016ce4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	2201      	movs	r2, #1
 8016cec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	2200      	movs	r2, #0
 8016cf4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	2200      	movs	r2, #0
 8016d04:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8016d08:	2300      	movs	r3, #0
}
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	3714      	adds	r7, #20
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d14:	4770      	bx	lr
	...

08016d18 <__NVIC_SetPriority>:
{
 8016d18:	b480      	push	{r7}
 8016d1a:	b083      	sub	sp, #12
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	4603      	mov	r3, r0
 8016d20:	6039      	str	r1, [r7, #0]
 8016d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	db0a      	blt.n	8016d42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016d2c:	683b      	ldr	r3, [r7, #0]
 8016d2e:	b2da      	uxtb	r2, r3
 8016d30:	490c      	ldr	r1, [pc, #48]	@ (8016d64 <__NVIC_SetPriority+0x4c>)
 8016d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016d36:	0112      	lsls	r2, r2, #4
 8016d38:	b2d2      	uxtb	r2, r2
 8016d3a:	440b      	add	r3, r1
 8016d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8016d40:	e00a      	b.n	8016d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016d42:	683b      	ldr	r3, [r7, #0]
 8016d44:	b2da      	uxtb	r2, r3
 8016d46:	4908      	ldr	r1, [pc, #32]	@ (8016d68 <__NVIC_SetPriority+0x50>)
 8016d48:	79fb      	ldrb	r3, [r7, #7]
 8016d4a:	f003 030f 	and.w	r3, r3, #15
 8016d4e:	3b04      	subs	r3, #4
 8016d50:	0112      	lsls	r2, r2, #4
 8016d52:	b2d2      	uxtb	r2, r2
 8016d54:	440b      	add	r3, r1
 8016d56:	761a      	strb	r2, [r3, #24]
}
 8016d58:	bf00      	nop
 8016d5a:	370c      	adds	r7, #12
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d62:	4770      	bx	lr
 8016d64:	e000e100 	.word	0xe000e100
 8016d68:	e000ed00 	.word	0xe000ed00

08016d6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016d70:	4b05      	ldr	r3, [pc, #20]	@ (8016d88 <SysTick_Handler+0x1c>)
 8016d72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016d74:	f002 fa32 	bl	80191dc <xTaskGetSchedulerState>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	2b01      	cmp	r3, #1
 8016d7c:	d001      	beq.n	8016d82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016d7e:	f003 f92b 	bl	8019fd8 <xPortSysTickHandler>
  }
}
 8016d82:	bf00      	nop
 8016d84:	bd80      	pop	{r7, pc}
 8016d86:	bf00      	nop
 8016d88:	e000e010 	.word	0xe000e010

08016d8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016d90:	2100      	movs	r1, #0
 8016d92:	f06f 0004 	mvn.w	r0, #4
 8016d96:	f7ff ffbf 	bl	8016d18 <__NVIC_SetPriority>
#endif
}
 8016d9a:	bf00      	nop
 8016d9c:	bd80      	pop	{r7, pc}
	...

08016da0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016da0:	b480      	push	{r7}
 8016da2:	b083      	sub	sp, #12
 8016da4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016da6:	f3ef 8305 	mrs	r3, IPSR
 8016daa:	603b      	str	r3, [r7, #0]
  return(result);
 8016dac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d003      	beq.n	8016dba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016db2:	f06f 0305 	mvn.w	r3, #5
 8016db6:	607b      	str	r3, [r7, #4]
 8016db8:	e00c      	b.n	8016dd4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016dba:	4b0a      	ldr	r3, [pc, #40]	@ (8016de4 <osKernelInitialize+0x44>)
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d105      	bne.n	8016dce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016dc2:	4b08      	ldr	r3, [pc, #32]	@ (8016de4 <osKernelInitialize+0x44>)
 8016dc4:	2201      	movs	r2, #1
 8016dc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016dc8:	2300      	movs	r3, #0
 8016dca:	607b      	str	r3, [r7, #4]
 8016dcc:	e002      	b.n	8016dd4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016dce:	f04f 33ff 	mov.w	r3, #4294967295
 8016dd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016dd4:	687b      	ldr	r3, [r7, #4]
}
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	370c      	adds	r7, #12
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de0:	4770      	bx	lr
 8016de2:	bf00      	nop
 8016de4:	20007afc 	.word	0x20007afc

08016de8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b082      	sub	sp, #8
 8016dec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016dee:	f3ef 8305 	mrs	r3, IPSR
 8016df2:	603b      	str	r3, [r7, #0]
  return(result);
 8016df4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d003      	beq.n	8016e02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8016dfa:	f06f 0305 	mvn.w	r3, #5
 8016dfe:	607b      	str	r3, [r7, #4]
 8016e00:	e010      	b.n	8016e24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016e02:	4b0b      	ldr	r3, [pc, #44]	@ (8016e30 <osKernelStart+0x48>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	2b01      	cmp	r3, #1
 8016e08:	d109      	bne.n	8016e1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016e0a:	f7ff ffbf 	bl	8016d8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016e0e:	4b08      	ldr	r3, [pc, #32]	@ (8016e30 <osKernelStart+0x48>)
 8016e10:	2202      	movs	r2, #2
 8016e12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016e14:	f001 fd6e 	bl	80188f4 <vTaskStartScheduler>
      stat = osOK;
 8016e18:	2300      	movs	r3, #0
 8016e1a:	607b      	str	r3, [r7, #4]
 8016e1c:	e002      	b.n	8016e24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8016e22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016e24:	687b      	ldr	r3, [r7, #4]
}
 8016e26:	4618      	mov	r0, r3
 8016e28:	3708      	adds	r7, #8
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	bd80      	pop	{r7, pc}
 8016e2e:	bf00      	nop
 8016e30:	20007afc 	.word	0x20007afc

08016e34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b08e      	sub	sp, #56	@ 0x38
 8016e38:	af04      	add	r7, sp, #16
 8016e3a:	60f8      	str	r0, [r7, #12]
 8016e3c:	60b9      	str	r1, [r7, #8]
 8016e3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016e40:	2300      	movs	r3, #0
 8016e42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016e44:	f3ef 8305 	mrs	r3, IPSR
 8016e48:	617b      	str	r3, [r7, #20]
  return(result);
 8016e4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d17e      	bne.n	8016f4e <osThreadNew+0x11a>
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d07b      	beq.n	8016f4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016e56:	2380      	movs	r3, #128	@ 0x80
 8016e58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016e5a:	2318      	movs	r3, #24
 8016e5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8016e62:	f04f 33ff 	mov.w	r3, #4294967295
 8016e66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d045      	beq.n	8016efa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d002      	beq.n	8016e7c <osThreadNew+0x48>
        name = attr->name;
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	699b      	ldr	r3, [r3, #24]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d002      	beq.n	8016e8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	699b      	ldr	r3, [r3, #24]
 8016e88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016e8a:	69fb      	ldr	r3, [r7, #28]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d008      	beq.n	8016ea2 <osThreadNew+0x6e>
 8016e90:	69fb      	ldr	r3, [r7, #28]
 8016e92:	2b38      	cmp	r3, #56	@ 0x38
 8016e94:	d805      	bhi.n	8016ea2 <osThreadNew+0x6e>
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	685b      	ldr	r3, [r3, #4]
 8016e9a:	f003 0301 	and.w	r3, r3, #1
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d001      	beq.n	8016ea6 <osThreadNew+0x72>
        return (NULL);
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	e054      	b.n	8016f50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	695b      	ldr	r3, [r3, #20]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d003      	beq.n	8016eb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	695b      	ldr	r3, [r3, #20]
 8016eb2:	089b      	lsrs	r3, r3, #2
 8016eb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	689b      	ldr	r3, [r3, #8]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d00e      	beq.n	8016edc <osThreadNew+0xa8>
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	68db      	ldr	r3, [r3, #12]
 8016ec2:	2ba7      	cmp	r3, #167	@ 0xa7
 8016ec4:	d90a      	bls.n	8016edc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d006      	beq.n	8016edc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	695b      	ldr	r3, [r3, #20]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d002      	beq.n	8016edc <osThreadNew+0xa8>
        mem = 1;
 8016ed6:	2301      	movs	r3, #1
 8016ed8:	61bb      	str	r3, [r7, #24]
 8016eda:	e010      	b.n	8016efe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	689b      	ldr	r3, [r3, #8]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d10c      	bne.n	8016efe <osThreadNew+0xca>
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	68db      	ldr	r3, [r3, #12]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d108      	bne.n	8016efe <osThreadNew+0xca>
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	691b      	ldr	r3, [r3, #16]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d104      	bne.n	8016efe <osThreadNew+0xca>
          mem = 0;
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	61bb      	str	r3, [r7, #24]
 8016ef8:	e001      	b.n	8016efe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016efa:	2300      	movs	r3, #0
 8016efc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016efe:	69bb      	ldr	r3, [r7, #24]
 8016f00:	2b01      	cmp	r3, #1
 8016f02:	d110      	bne.n	8016f26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016f08:	687a      	ldr	r2, [r7, #4]
 8016f0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016f0c:	9202      	str	r2, [sp, #8]
 8016f0e:	9301      	str	r3, [sp, #4]
 8016f10:	69fb      	ldr	r3, [r7, #28]
 8016f12:	9300      	str	r3, [sp, #0]
 8016f14:	68bb      	ldr	r3, [r7, #8]
 8016f16:	6a3a      	ldr	r2, [r7, #32]
 8016f18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016f1a:	68f8      	ldr	r0, [r7, #12]
 8016f1c:	f001 faf6 	bl	801850c <xTaskCreateStatic>
 8016f20:	4603      	mov	r3, r0
 8016f22:	613b      	str	r3, [r7, #16]
 8016f24:	e013      	b.n	8016f4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8016f26:	69bb      	ldr	r3, [r7, #24]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d110      	bne.n	8016f4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016f2c:	6a3b      	ldr	r3, [r7, #32]
 8016f2e:	b29a      	uxth	r2, r3
 8016f30:	f107 0310 	add.w	r3, r7, #16
 8016f34:	9301      	str	r3, [sp, #4]
 8016f36:	69fb      	ldr	r3, [r7, #28]
 8016f38:	9300      	str	r3, [sp, #0]
 8016f3a:	68bb      	ldr	r3, [r7, #8]
 8016f3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016f3e:	68f8      	ldr	r0, [r7, #12]
 8016f40:	f001 fb44 	bl	80185cc <xTaskCreate>
 8016f44:	4603      	mov	r3, r0
 8016f46:	2b01      	cmp	r3, #1
 8016f48:	d001      	beq.n	8016f4e <osThreadNew+0x11a>
            hTask = NULL;
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016f4e:	693b      	ldr	r3, [r7, #16]
}
 8016f50:	4618      	mov	r0, r3
 8016f52:	3728      	adds	r7, #40	@ 0x28
 8016f54:	46bd      	mov	sp, r7
 8016f56:	bd80      	pop	{r7, pc}

08016f58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	b084      	sub	sp, #16
 8016f5c:	af00      	add	r7, sp, #0
 8016f5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f60:	f3ef 8305 	mrs	r3, IPSR
 8016f64:	60bb      	str	r3, [r7, #8]
  return(result);
 8016f66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d003      	beq.n	8016f74 <osDelay+0x1c>
    stat = osErrorISR;
 8016f6c:	f06f 0305 	mvn.w	r3, #5
 8016f70:	60fb      	str	r3, [r7, #12]
 8016f72:	e007      	b.n	8016f84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016f74:	2300      	movs	r3, #0
 8016f76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d002      	beq.n	8016f84 <osDelay+0x2c>
      vTaskDelay(ticks);
 8016f7e:	6878      	ldr	r0, [r7, #4]
 8016f80:	f001 fc82 	bl	8018888 <vTaskDelay>
    }
  }

  return (stat);
 8016f84:	68fb      	ldr	r3, [r7, #12]
}
 8016f86:	4618      	mov	r0, r3
 8016f88:	3710      	adds	r7, #16
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	bd80      	pop	{r7, pc}

08016f8e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8016f8e:	b580      	push	{r7, lr}
 8016f90:	b088      	sub	sp, #32
 8016f92:	af00      	add	r7, sp, #0
 8016f94:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8016f96:	2300      	movs	r3, #0
 8016f98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f9a:	f3ef 8305 	mrs	r3, IPSR
 8016f9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8016fa0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d174      	bne.n	8017090 <osMutexNew+0x102>
    if (attr != NULL) {
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d003      	beq.n	8016fb4 <osMutexNew+0x26>
      type = attr->attr_bits;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	685b      	ldr	r3, [r3, #4]
 8016fb0:	61bb      	str	r3, [r7, #24]
 8016fb2:	e001      	b.n	8016fb8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8016fb8:	69bb      	ldr	r3, [r7, #24]
 8016fba:	f003 0301 	and.w	r3, r3, #1
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d002      	beq.n	8016fc8 <osMutexNew+0x3a>
      rmtx = 1U;
 8016fc2:	2301      	movs	r3, #1
 8016fc4:	617b      	str	r3, [r7, #20]
 8016fc6:	e001      	b.n	8016fcc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8016fc8:	2300      	movs	r3, #0
 8016fca:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8016fcc:	69bb      	ldr	r3, [r7, #24]
 8016fce:	f003 0308 	and.w	r3, r3, #8
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d15c      	bne.n	8017090 <osMutexNew+0x102>
      mem = -1;
 8016fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8016fda:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d015      	beq.n	801700e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	689b      	ldr	r3, [r3, #8]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d006      	beq.n	8016ff8 <osMutexNew+0x6a>
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	68db      	ldr	r3, [r3, #12]
 8016fee:	2b4f      	cmp	r3, #79	@ 0x4f
 8016ff0:	d902      	bls.n	8016ff8 <osMutexNew+0x6a>
          mem = 1;
 8016ff2:	2301      	movs	r3, #1
 8016ff4:	613b      	str	r3, [r7, #16]
 8016ff6:	e00c      	b.n	8017012 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	689b      	ldr	r3, [r3, #8]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d108      	bne.n	8017012 <osMutexNew+0x84>
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	68db      	ldr	r3, [r3, #12]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d104      	bne.n	8017012 <osMutexNew+0x84>
            mem = 0;
 8017008:	2300      	movs	r3, #0
 801700a:	613b      	str	r3, [r7, #16]
 801700c:	e001      	b.n	8017012 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 801700e:	2300      	movs	r3, #0
 8017010:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8017012:	693b      	ldr	r3, [r7, #16]
 8017014:	2b01      	cmp	r3, #1
 8017016:	d112      	bne.n	801703e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8017018:	697b      	ldr	r3, [r7, #20]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d007      	beq.n	801702e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	689b      	ldr	r3, [r3, #8]
 8017022:	4619      	mov	r1, r3
 8017024:	2004      	movs	r0, #4
 8017026:	f000 fc50 	bl	80178ca <xQueueCreateMutexStatic>
 801702a:	61f8      	str	r0, [r7, #28]
 801702c:	e016      	b.n	801705c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	689b      	ldr	r3, [r3, #8]
 8017032:	4619      	mov	r1, r3
 8017034:	2001      	movs	r0, #1
 8017036:	f000 fc48 	bl	80178ca <xQueueCreateMutexStatic>
 801703a:	61f8      	str	r0, [r7, #28]
 801703c:	e00e      	b.n	801705c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 801703e:	693b      	ldr	r3, [r7, #16]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d10b      	bne.n	801705c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8017044:	697b      	ldr	r3, [r7, #20]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d004      	beq.n	8017054 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 801704a:	2004      	movs	r0, #4
 801704c:	f000 fc25 	bl	801789a <xQueueCreateMutex>
 8017050:	61f8      	str	r0, [r7, #28]
 8017052:	e003      	b.n	801705c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8017054:	2001      	movs	r0, #1
 8017056:	f000 fc20 	bl	801789a <xQueueCreateMutex>
 801705a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801705c:	69fb      	ldr	r3, [r7, #28]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d00c      	beq.n	801707c <osMutexNew+0xee>
        if (attr != NULL) {
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d003      	beq.n	8017070 <osMutexNew+0xe2>
          name = attr->name;
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	60fb      	str	r3, [r7, #12]
 801706e:	e001      	b.n	8017074 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8017070:	2300      	movs	r3, #0
 8017072:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8017074:	68f9      	ldr	r1, [r7, #12]
 8017076:	69f8      	ldr	r0, [r7, #28]
 8017078:	f001 f9ea 	bl	8018450 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801707c:	69fb      	ldr	r3, [r7, #28]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d006      	beq.n	8017090 <osMutexNew+0x102>
 8017082:	697b      	ldr	r3, [r7, #20]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d003      	beq.n	8017090 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8017088:	69fb      	ldr	r3, [r7, #28]
 801708a:	f043 0301 	orr.w	r3, r3, #1
 801708e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8017090:	69fb      	ldr	r3, [r7, #28]
}
 8017092:	4618      	mov	r0, r3
 8017094:	3720      	adds	r7, #32
 8017096:	46bd      	mov	sp, r7
 8017098:	bd80      	pop	{r7, pc}

0801709a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801709a:	b580      	push	{r7, lr}
 801709c:	b086      	sub	sp, #24
 801709e:	af00      	add	r7, sp, #0
 80170a0:	6078      	str	r0, [r7, #4]
 80170a2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	f023 0301 	bic.w	r3, r3, #1
 80170aa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	f003 0301 	and.w	r3, r3, #1
 80170b2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80170b4:	2300      	movs	r3, #0
 80170b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80170b8:	f3ef 8305 	mrs	r3, IPSR
 80170bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80170be:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d003      	beq.n	80170cc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80170c4:	f06f 0305 	mvn.w	r3, #5
 80170c8:	617b      	str	r3, [r7, #20]
 80170ca:	e02c      	b.n	8017126 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80170cc:	693b      	ldr	r3, [r7, #16]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d103      	bne.n	80170da <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80170d2:	f06f 0303 	mvn.w	r3, #3
 80170d6:	617b      	str	r3, [r7, #20]
 80170d8:	e025      	b.n	8017126 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d011      	beq.n	8017104 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80170e0:	6839      	ldr	r1, [r7, #0]
 80170e2:	6938      	ldr	r0, [r7, #16]
 80170e4:	f000 fc41 	bl	801796a <xQueueTakeMutexRecursive>
 80170e8:	4603      	mov	r3, r0
 80170ea:	2b01      	cmp	r3, #1
 80170ec:	d01b      	beq.n	8017126 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80170ee:	683b      	ldr	r3, [r7, #0]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d003      	beq.n	80170fc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80170f4:	f06f 0301 	mvn.w	r3, #1
 80170f8:	617b      	str	r3, [r7, #20]
 80170fa:	e014      	b.n	8017126 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80170fc:	f06f 0302 	mvn.w	r3, #2
 8017100:	617b      	str	r3, [r7, #20]
 8017102:	e010      	b.n	8017126 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8017104:	6839      	ldr	r1, [r7, #0]
 8017106:	6938      	ldr	r0, [r7, #16]
 8017108:	f000 fee8 	bl	8017edc <xQueueSemaphoreTake>
 801710c:	4603      	mov	r3, r0
 801710e:	2b01      	cmp	r3, #1
 8017110:	d009      	beq.n	8017126 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8017112:	683b      	ldr	r3, [r7, #0]
 8017114:	2b00      	cmp	r3, #0
 8017116:	d003      	beq.n	8017120 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8017118:	f06f 0301 	mvn.w	r3, #1
 801711c:	617b      	str	r3, [r7, #20]
 801711e:	e002      	b.n	8017126 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8017120:	f06f 0302 	mvn.w	r3, #2
 8017124:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8017126:	697b      	ldr	r3, [r7, #20]
}
 8017128:	4618      	mov	r0, r3
 801712a:	3718      	adds	r7, #24
 801712c:	46bd      	mov	sp, r7
 801712e:	bd80      	pop	{r7, pc}

08017130 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8017130:	b580      	push	{r7, lr}
 8017132:	b086      	sub	sp, #24
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	f023 0301 	bic.w	r3, r3, #1
 801713e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	f003 0301 	and.w	r3, r3, #1
 8017146:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8017148:	2300      	movs	r3, #0
 801714a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801714c:	f3ef 8305 	mrs	r3, IPSR
 8017150:	60bb      	str	r3, [r7, #8]
  return(result);
 8017152:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8017154:	2b00      	cmp	r3, #0
 8017156:	d003      	beq.n	8017160 <osMutexRelease+0x30>
    stat = osErrorISR;
 8017158:	f06f 0305 	mvn.w	r3, #5
 801715c:	617b      	str	r3, [r7, #20]
 801715e:	e01f      	b.n	80171a0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8017160:	693b      	ldr	r3, [r7, #16]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d103      	bne.n	801716e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8017166:	f06f 0303 	mvn.w	r3, #3
 801716a:	617b      	str	r3, [r7, #20]
 801716c:	e018      	b.n	80171a0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d009      	beq.n	8017188 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8017174:	6938      	ldr	r0, [r7, #16]
 8017176:	f000 fbc3 	bl	8017900 <xQueueGiveMutexRecursive>
 801717a:	4603      	mov	r3, r0
 801717c:	2b01      	cmp	r3, #1
 801717e:	d00f      	beq.n	80171a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8017180:	f06f 0302 	mvn.w	r3, #2
 8017184:	617b      	str	r3, [r7, #20]
 8017186:	e00b      	b.n	80171a0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8017188:	2300      	movs	r3, #0
 801718a:	2200      	movs	r2, #0
 801718c:	2100      	movs	r1, #0
 801718e:	6938      	ldr	r0, [r7, #16]
 8017190:	f000 fc22 	bl	80179d8 <xQueueGenericSend>
 8017194:	4603      	mov	r3, r0
 8017196:	2b01      	cmp	r3, #1
 8017198:	d002      	beq.n	80171a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 801719a:	f06f 0302 	mvn.w	r3, #2
 801719e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80171a0:	697b      	ldr	r3, [r7, #20]
}
 80171a2:	4618      	mov	r0, r3
 80171a4:	3718      	adds	r7, #24
 80171a6:	46bd      	mov	sp, r7
 80171a8:	bd80      	pop	{r7, pc}

080171aa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80171aa:	b580      	push	{r7, lr}
 80171ac:	b08a      	sub	sp, #40	@ 0x28
 80171ae:	af02      	add	r7, sp, #8
 80171b0:	60f8      	str	r0, [r7, #12]
 80171b2:	60b9      	str	r1, [r7, #8]
 80171b4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80171b6:	2300      	movs	r3, #0
 80171b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80171ba:	f3ef 8305 	mrs	r3, IPSR
 80171be:	613b      	str	r3, [r7, #16]
  return(result);
 80171c0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d15f      	bne.n	8017286 <osMessageQueueNew+0xdc>
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d05c      	beq.n	8017286 <osMessageQueueNew+0xdc>
 80171cc:	68bb      	ldr	r3, [r7, #8]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d059      	beq.n	8017286 <osMessageQueueNew+0xdc>
    mem = -1;
 80171d2:	f04f 33ff 	mov.w	r3, #4294967295
 80171d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d029      	beq.n	8017232 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	689b      	ldr	r3, [r3, #8]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d012      	beq.n	801720c <osMessageQueueNew+0x62>
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	68db      	ldr	r3, [r3, #12]
 80171ea:	2b4f      	cmp	r3, #79	@ 0x4f
 80171ec:	d90e      	bls.n	801720c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d00a      	beq.n	801720c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	695a      	ldr	r2, [r3, #20]
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	68b9      	ldr	r1, [r7, #8]
 80171fe:	fb01 f303 	mul.w	r3, r1, r3
 8017202:	429a      	cmp	r2, r3
 8017204:	d302      	bcc.n	801720c <osMessageQueueNew+0x62>
        mem = 1;
 8017206:	2301      	movs	r3, #1
 8017208:	61bb      	str	r3, [r7, #24]
 801720a:	e014      	b.n	8017236 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	689b      	ldr	r3, [r3, #8]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d110      	bne.n	8017236 <osMessageQueueNew+0x8c>
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	68db      	ldr	r3, [r3, #12]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d10c      	bne.n	8017236 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8017220:	2b00      	cmp	r3, #0
 8017222:	d108      	bne.n	8017236 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	695b      	ldr	r3, [r3, #20]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d104      	bne.n	8017236 <osMessageQueueNew+0x8c>
          mem = 0;
 801722c:	2300      	movs	r3, #0
 801722e:	61bb      	str	r3, [r7, #24]
 8017230:	e001      	b.n	8017236 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8017232:	2300      	movs	r3, #0
 8017234:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8017236:	69bb      	ldr	r3, [r7, #24]
 8017238:	2b01      	cmp	r3, #1
 801723a:	d10b      	bne.n	8017254 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	691a      	ldr	r2, [r3, #16]
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	689b      	ldr	r3, [r3, #8]
 8017244:	2100      	movs	r1, #0
 8017246:	9100      	str	r1, [sp, #0]
 8017248:	68b9      	ldr	r1, [r7, #8]
 801724a:	68f8      	ldr	r0, [r7, #12]
 801724c:	f000 fa30 	bl	80176b0 <xQueueGenericCreateStatic>
 8017250:	61f8      	str	r0, [r7, #28]
 8017252:	e008      	b.n	8017266 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8017254:	69bb      	ldr	r3, [r7, #24]
 8017256:	2b00      	cmp	r3, #0
 8017258:	d105      	bne.n	8017266 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801725a:	2200      	movs	r2, #0
 801725c:	68b9      	ldr	r1, [r7, #8]
 801725e:	68f8      	ldr	r0, [r7, #12]
 8017260:	f000 faa3 	bl	80177aa <xQueueGenericCreate>
 8017264:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8017266:	69fb      	ldr	r3, [r7, #28]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d00c      	beq.n	8017286 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d003      	beq.n	801727a <osMessageQueueNew+0xd0>
        name = attr->name;
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	617b      	str	r3, [r7, #20]
 8017278:	e001      	b.n	801727e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801727a:	2300      	movs	r3, #0
 801727c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801727e:	6979      	ldr	r1, [r7, #20]
 8017280:	69f8      	ldr	r0, [r7, #28]
 8017282:	f001 f8e5 	bl	8018450 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8017286:	69fb      	ldr	r3, [r7, #28]
}
 8017288:	4618      	mov	r0, r3
 801728a:	3720      	adds	r7, #32
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}

08017290 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8017290:	b580      	push	{r7, lr}
 8017292:	b088      	sub	sp, #32
 8017294:	af00      	add	r7, sp, #0
 8017296:	60f8      	str	r0, [r7, #12]
 8017298:	60b9      	str	r1, [r7, #8]
 801729a:	603b      	str	r3, [r7, #0]
 801729c:	4613      	mov	r3, r2
 801729e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80172a4:	2300      	movs	r3, #0
 80172a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80172a8:	f3ef 8305 	mrs	r3, IPSR
 80172ac:	617b      	str	r3, [r7, #20]
  return(result);
 80172ae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d028      	beq.n	8017306 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80172b4:	69bb      	ldr	r3, [r7, #24]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d005      	beq.n	80172c6 <osMessageQueuePut+0x36>
 80172ba:	68bb      	ldr	r3, [r7, #8]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d002      	beq.n	80172c6 <osMessageQueuePut+0x36>
 80172c0:	683b      	ldr	r3, [r7, #0]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d003      	beq.n	80172ce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80172c6:	f06f 0303 	mvn.w	r3, #3
 80172ca:	61fb      	str	r3, [r7, #28]
 80172cc:	e038      	b.n	8017340 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80172ce:	2300      	movs	r3, #0
 80172d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80172d2:	f107 0210 	add.w	r2, r7, #16
 80172d6:	2300      	movs	r3, #0
 80172d8:	68b9      	ldr	r1, [r7, #8]
 80172da:	69b8      	ldr	r0, [r7, #24]
 80172dc:	f000 fc7e 	bl	8017bdc <xQueueGenericSendFromISR>
 80172e0:	4603      	mov	r3, r0
 80172e2:	2b01      	cmp	r3, #1
 80172e4:	d003      	beq.n	80172ee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80172e6:	f06f 0302 	mvn.w	r3, #2
 80172ea:	61fb      	str	r3, [r7, #28]
 80172ec:	e028      	b.n	8017340 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80172ee:	693b      	ldr	r3, [r7, #16]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d025      	beq.n	8017340 <osMessageQueuePut+0xb0>
 80172f4:	4b15      	ldr	r3, [pc, #84]	@ (801734c <osMessageQueuePut+0xbc>)
 80172f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80172fa:	601a      	str	r2, [r3, #0]
 80172fc:	f3bf 8f4f 	dsb	sy
 8017300:	f3bf 8f6f 	isb	sy
 8017304:	e01c      	b.n	8017340 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017306:	69bb      	ldr	r3, [r7, #24]
 8017308:	2b00      	cmp	r3, #0
 801730a:	d002      	beq.n	8017312 <osMessageQueuePut+0x82>
 801730c:	68bb      	ldr	r3, [r7, #8]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d103      	bne.n	801731a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8017312:	f06f 0303 	mvn.w	r3, #3
 8017316:	61fb      	str	r3, [r7, #28]
 8017318:	e012      	b.n	8017340 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801731a:	2300      	movs	r3, #0
 801731c:	683a      	ldr	r2, [r7, #0]
 801731e:	68b9      	ldr	r1, [r7, #8]
 8017320:	69b8      	ldr	r0, [r7, #24]
 8017322:	f000 fb59 	bl	80179d8 <xQueueGenericSend>
 8017326:	4603      	mov	r3, r0
 8017328:	2b01      	cmp	r3, #1
 801732a:	d009      	beq.n	8017340 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 801732c:	683b      	ldr	r3, [r7, #0]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d003      	beq.n	801733a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8017332:	f06f 0301 	mvn.w	r3, #1
 8017336:	61fb      	str	r3, [r7, #28]
 8017338:	e002      	b.n	8017340 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801733a:	f06f 0302 	mvn.w	r3, #2
 801733e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8017340:	69fb      	ldr	r3, [r7, #28]
}
 8017342:	4618      	mov	r0, r3
 8017344:	3720      	adds	r7, #32
 8017346:	46bd      	mov	sp, r7
 8017348:	bd80      	pop	{r7, pc}
 801734a:	bf00      	nop
 801734c:	e000ed04 	.word	0xe000ed04

08017350 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8017350:	b580      	push	{r7, lr}
 8017352:	b088      	sub	sp, #32
 8017354:	af00      	add	r7, sp, #0
 8017356:	60f8      	str	r0, [r7, #12]
 8017358:	60b9      	str	r1, [r7, #8]
 801735a:	607a      	str	r2, [r7, #4]
 801735c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8017362:	2300      	movs	r3, #0
 8017364:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017366:	f3ef 8305 	mrs	r3, IPSR
 801736a:	617b      	str	r3, [r7, #20]
  return(result);
 801736c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801736e:	2b00      	cmp	r3, #0
 8017370:	d028      	beq.n	80173c4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017372:	69bb      	ldr	r3, [r7, #24]
 8017374:	2b00      	cmp	r3, #0
 8017376:	d005      	beq.n	8017384 <osMessageQueueGet+0x34>
 8017378:	68bb      	ldr	r3, [r7, #8]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d002      	beq.n	8017384 <osMessageQueueGet+0x34>
 801737e:	683b      	ldr	r3, [r7, #0]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d003      	beq.n	801738c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8017384:	f06f 0303 	mvn.w	r3, #3
 8017388:	61fb      	str	r3, [r7, #28]
 801738a:	e037      	b.n	80173fc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801738c:	2300      	movs	r3, #0
 801738e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8017390:	f107 0310 	add.w	r3, r7, #16
 8017394:	461a      	mov	r2, r3
 8017396:	68b9      	ldr	r1, [r7, #8]
 8017398:	69b8      	ldr	r0, [r7, #24]
 801739a:	f000 feaf 	bl	80180fc <xQueueReceiveFromISR>
 801739e:	4603      	mov	r3, r0
 80173a0:	2b01      	cmp	r3, #1
 80173a2:	d003      	beq.n	80173ac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80173a4:	f06f 0302 	mvn.w	r3, #2
 80173a8:	61fb      	str	r3, [r7, #28]
 80173aa:	e027      	b.n	80173fc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80173ac:	693b      	ldr	r3, [r7, #16]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d024      	beq.n	80173fc <osMessageQueueGet+0xac>
 80173b2:	4b15      	ldr	r3, [pc, #84]	@ (8017408 <osMessageQueueGet+0xb8>)
 80173b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80173b8:	601a      	str	r2, [r3, #0]
 80173ba:	f3bf 8f4f 	dsb	sy
 80173be:	f3bf 8f6f 	isb	sy
 80173c2:	e01b      	b.n	80173fc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80173c4:	69bb      	ldr	r3, [r7, #24]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d002      	beq.n	80173d0 <osMessageQueueGet+0x80>
 80173ca:	68bb      	ldr	r3, [r7, #8]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d103      	bne.n	80173d8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80173d0:	f06f 0303 	mvn.w	r3, #3
 80173d4:	61fb      	str	r3, [r7, #28]
 80173d6:	e011      	b.n	80173fc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80173d8:	683a      	ldr	r2, [r7, #0]
 80173da:	68b9      	ldr	r1, [r7, #8]
 80173dc:	69b8      	ldr	r0, [r7, #24]
 80173de:	f000 fc9b 	bl	8017d18 <xQueueReceive>
 80173e2:	4603      	mov	r3, r0
 80173e4:	2b01      	cmp	r3, #1
 80173e6:	d009      	beq.n	80173fc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80173e8:	683b      	ldr	r3, [r7, #0]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d003      	beq.n	80173f6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80173ee:	f06f 0301 	mvn.w	r3, #1
 80173f2:	61fb      	str	r3, [r7, #28]
 80173f4:	e002      	b.n	80173fc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80173f6:	f06f 0302 	mvn.w	r3, #2
 80173fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80173fc:	69fb      	ldr	r3, [r7, #28]
}
 80173fe:	4618      	mov	r0, r3
 8017400:	3720      	adds	r7, #32
 8017402:	46bd      	mov	sp, r7
 8017404:	bd80      	pop	{r7, pc}
 8017406:	bf00      	nop
 8017408:	e000ed04 	.word	0xe000ed04

0801740c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801740c:	b480      	push	{r7}
 801740e:	b085      	sub	sp, #20
 8017410:	af00      	add	r7, sp, #0
 8017412:	60f8      	str	r0, [r7, #12]
 8017414:	60b9      	str	r1, [r7, #8]
 8017416:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	4a07      	ldr	r2, [pc, #28]	@ (8017438 <vApplicationGetIdleTaskMemory+0x2c>)
 801741c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801741e:	68bb      	ldr	r3, [r7, #8]
 8017420:	4a06      	ldr	r2, [pc, #24]	@ (801743c <vApplicationGetIdleTaskMemory+0x30>)
 8017422:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	2280      	movs	r2, #128	@ 0x80
 8017428:	601a      	str	r2, [r3, #0]
}
 801742a:	bf00      	nop
 801742c:	3714      	adds	r7, #20
 801742e:	46bd      	mov	sp, r7
 8017430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017434:	4770      	bx	lr
 8017436:	bf00      	nop
 8017438:	20007b00 	.word	0x20007b00
 801743c:	20007ba8 	.word	0x20007ba8

08017440 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8017440:	b480      	push	{r7}
 8017442:	b085      	sub	sp, #20
 8017444:	af00      	add	r7, sp, #0
 8017446:	60f8      	str	r0, [r7, #12]
 8017448:	60b9      	str	r1, [r7, #8]
 801744a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	4a07      	ldr	r2, [pc, #28]	@ (801746c <vApplicationGetTimerTaskMemory+0x2c>)
 8017450:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8017452:	68bb      	ldr	r3, [r7, #8]
 8017454:	4a06      	ldr	r2, [pc, #24]	@ (8017470 <vApplicationGetTimerTaskMemory+0x30>)
 8017456:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801745e:	601a      	str	r2, [r3, #0]
}
 8017460:	bf00      	nop
 8017462:	3714      	adds	r7, #20
 8017464:	46bd      	mov	sp, r7
 8017466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746a:	4770      	bx	lr
 801746c:	20007da8 	.word	0x20007da8
 8017470:	20007e50 	.word	0x20007e50

08017474 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017474:	b480      	push	{r7}
 8017476:	b083      	sub	sp, #12
 8017478:	af00      	add	r7, sp, #0
 801747a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	f103 0208 	add.w	r2, r3, #8
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	f04f 32ff 	mov.w	r2, #4294967295
 801748c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	f103 0208 	add.w	r2, r3, #8
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	f103 0208 	add.w	r2, r3, #8
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	2200      	movs	r2, #0
 80174a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80174a8:	bf00      	nop
 80174aa:	370c      	adds	r7, #12
 80174ac:	46bd      	mov	sp, r7
 80174ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b2:	4770      	bx	lr

080174b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80174b4:	b480      	push	{r7}
 80174b6:	b083      	sub	sp, #12
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	2200      	movs	r2, #0
 80174c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80174c2:	bf00      	nop
 80174c4:	370c      	adds	r7, #12
 80174c6:	46bd      	mov	sp, r7
 80174c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174cc:	4770      	bx	lr

080174ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80174ce:	b480      	push	{r7}
 80174d0:	b085      	sub	sp, #20
 80174d2:	af00      	add	r7, sp, #0
 80174d4:	6078      	str	r0, [r7, #4]
 80174d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	685b      	ldr	r3, [r3, #4]
 80174dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80174de:	683b      	ldr	r3, [r7, #0]
 80174e0:	68fa      	ldr	r2, [r7, #12]
 80174e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	689a      	ldr	r2, [r3, #8]
 80174e8:	683b      	ldr	r3, [r7, #0]
 80174ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	689b      	ldr	r3, [r3, #8]
 80174f0:	683a      	ldr	r2, [r7, #0]
 80174f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	683a      	ldr	r2, [r7, #0]
 80174f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80174fa:	683b      	ldr	r3, [r7, #0]
 80174fc:	687a      	ldr	r2, [r7, #4]
 80174fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	1c5a      	adds	r2, r3, #1
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	601a      	str	r2, [r3, #0]
}
 801750a:	bf00      	nop
 801750c:	3714      	adds	r7, #20
 801750e:	46bd      	mov	sp, r7
 8017510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017514:	4770      	bx	lr

08017516 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017516:	b480      	push	{r7}
 8017518:	b085      	sub	sp, #20
 801751a:	af00      	add	r7, sp, #0
 801751c:	6078      	str	r0, [r7, #4]
 801751e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017520:	683b      	ldr	r3, [r7, #0]
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017526:	68bb      	ldr	r3, [r7, #8]
 8017528:	f1b3 3fff 	cmp.w	r3, #4294967295
 801752c:	d103      	bne.n	8017536 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	691b      	ldr	r3, [r3, #16]
 8017532:	60fb      	str	r3, [r7, #12]
 8017534:	e00c      	b.n	8017550 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	3308      	adds	r3, #8
 801753a:	60fb      	str	r3, [r7, #12]
 801753c:	e002      	b.n	8017544 <vListInsert+0x2e>
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	685b      	ldr	r3, [r3, #4]
 8017542:	60fb      	str	r3, [r7, #12]
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	685b      	ldr	r3, [r3, #4]
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	68ba      	ldr	r2, [r7, #8]
 801754c:	429a      	cmp	r2, r3
 801754e:	d2f6      	bcs.n	801753e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	685a      	ldr	r2, [r3, #4]
 8017554:	683b      	ldr	r3, [r7, #0]
 8017556:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017558:	683b      	ldr	r3, [r7, #0]
 801755a:	685b      	ldr	r3, [r3, #4]
 801755c:	683a      	ldr	r2, [r7, #0]
 801755e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017560:	683b      	ldr	r3, [r7, #0]
 8017562:	68fa      	ldr	r2, [r7, #12]
 8017564:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	683a      	ldr	r2, [r7, #0]
 801756a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801756c:	683b      	ldr	r3, [r7, #0]
 801756e:	687a      	ldr	r2, [r7, #4]
 8017570:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	1c5a      	adds	r2, r3, #1
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	601a      	str	r2, [r3, #0]
}
 801757c:	bf00      	nop
 801757e:	3714      	adds	r7, #20
 8017580:	46bd      	mov	sp, r7
 8017582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017586:	4770      	bx	lr

08017588 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017588:	b480      	push	{r7}
 801758a:	b085      	sub	sp, #20
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	691b      	ldr	r3, [r3, #16]
 8017594:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	685b      	ldr	r3, [r3, #4]
 801759a:	687a      	ldr	r2, [r7, #4]
 801759c:	6892      	ldr	r2, [r2, #8]
 801759e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	689b      	ldr	r3, [r3, #8]
 80175a4:	687a      	ldr	r2, [r7, #4]
 80175a6:	6852      	ldr	r2, [r2, #4]
 80175a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	685b      	ldr	r3, [r3, #4]
 80175ae:	687a      	ldr	r2, [r7, #4]
 80175b0:	429a      	cmp	r2, r3
 80175b2:	d103      	bne.n	80175bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	689a      	ldr	r2, [r3, #8]
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	2200      	movs	r2, #0
 80175c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	1e5a      	subs	r2, r3, #1
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	681b      	ldr	r3, [r3, #0]
}
 80175d0:	4618      	mov	r0, r3
 80175d2:	3714      	adds	r7, #20
 80175d4:	46bd      	mov	sp, r7
 80175d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175da:	4770      	bx	lr

080175dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b084      	sub	sp, #16
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	6078      	str	r0, [r7, #4]
 80175e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d10b      	bne.n	8017608 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80175f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175f4:	f383 8811 	msr	BASEPRI, r3
 80175f8:	f3bf 8f6f 	isb	sy
 80175fc:	f3bf 8f4f 	dsb	sy
 8017600:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8017602:	bf00      	nop
 8017604:	bf00      	nop
 8017606:	e7fd      	b.n	8017604 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017608:	f002 fc56 	bl	8019eb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	681a      	ldr	r2, [r3, #0]
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017614:	68f9      	ldr	r1, [r7, #12]
 8017616:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8017618:	fb01 f303 	mul.w	r3, r1, r3
 801761c:	441a      	add	r2, r3
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	2200      	movs	r2, #0
 8017626:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	681a      	ldr	r2, [r3, #0]
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	681a      	ldr	r2, [r3, #0]
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017638:	3b01      	subs	r3, #1
 801763a:	68f9      	ldr	r1, [r7, #12]
 801763c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801763e:	fb01 f303 	mul.w	r3, r1, r3
 8017642:	441a      	add	r2, r3
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	22ff      	movs	r2, #255	@ 0xff
 801764c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	22ff      	movs	r2, #255	@ 0xff
 8017654:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8017658:	683b      	ldr	r3, [r7, #0]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d114      	bne.n	8017688 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	691b      	ldr	r3, [r3, #16]
 8017662:	2b00      	cmp	r3, #0
 8017664:	d01a      	beq.n	801769c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	3310      	adds	r3, #16
 801766a:	4618      	mov	r0, r3
 801766c:	f001 fbe0 	bl	8018e30 <xTaskRemoveFromEventList>
 8017670:	4603      	mov	r3, r0
 8017672:	2b00      	cmp	r3, #0
 8017674:	d012      	beq.n	801769c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017676:	4b0d      	ldr	r3, [pc, #52]	@ (80176ac <xQueueGenericReset+0xd0>)
 8017678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801767c:	601a      	str	r2, [r3, #0]
 801767e:	f3bf 8f4f 	dsb	sy
 8017682:	f3bf 8f6f 	isb	sy
 8017686:	e009      	b.n	801769c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	3310      	adds	r3, #16
 801768c:	4618      	mov	r0, r3
 801768e:	f7ff fef1 	bl	8017474 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	3324      	adds	r3, #36	@ 0x24
 8017696:	4618      	mov	r0, r3
 8017698:	f7ff feec 	bl	8017474 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801769c:	f002 fc3e 	bl	8019f1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80176a0:	2301      	movs	r3, #1
}
 80176a2:	4618      	mov	r0, r3
 80176a4:	3710      	adds	r7, #16
 80176a6:	46bd      	mov	sp, r7
 80176a8:	bd80      	pop	{r7, pc}
 80176aa:	bf00      	nop
 80176ac:	e000ed04 	.word	0xe000ed04

080176b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b08e      	sub	sp, #56	@ 0x38
 80176b4:	af02      	add	r7, sp, #8
 80176b6:	60f8      	str	r0, [r7, #12]
 80176b8:	60b9      	str	r1, [r7, #8]
 80176ba:	607a      	str	r2, [r7, #4]
 80176bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d10b      	bne.n	80176dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80176c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176c8:	f383 8811 	msr	BASEPRI, r3
 80176cc:	f3bf 8f6f 	isb	sy
 80176d0:	f3bf 8f4f 	dsb	sy
 80176d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80176d6:	bf00      	nop
 80176d8:	bf00      	nop
 80176da:	e7fd      	b.n	80176d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80176dc:	683b      	ldr	r3, [r7, #0]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d10b      	bne.n	80176fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80176e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176e6:	f383 8811 	msr	BASEPRI, r3
 80176ea:	f3bf 8f6f 	isb	sy
 80176ee:	f3bf 8f4f 	dsb	sy
 80176f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80176f4:	bf00      	nop
 80176f6:	bf00      	nop
 80176f8:	e7fd      	b.n	80176f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d002      	beq.n	8017706 <xQueueGenericCreateStatic+0x56>
 8017700:	68bb      	ldr	r3, [r7, #8]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d001      	beq.n	801770a <xQueueGenericCreateStatic+0x5a>
 8017706:	2301      	movs	r3, #1
 8017708:	e000      	b.n	801770c <xQueueGenericCreateStatic+0x5c>
 801770a:	2300      	movs	r3, #0
 801770c:	2b00      	cmp	r3, #0
 801770e:	d10b      	bne.n	8017728 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8017710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017714:	f383 8811 	msr	BASEPRI, r3
 8017718:	f3bf 8f6f 	isb	sy
 801771c:	f3bf 8f4f 	dsb	sy
 8017720:	623b      	str	r3, [r7, #32]
}
 8017722:	bf00      	nop
 8017724:	bf00      	nop
 8017726:	e7fd      	b.n	8017724 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d102      	bne.n	8017734 <xQueueGenericCreateStatic+0x84>
 801772e:	68bb      	ldr	r3, [r7, #8]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d101      	bne.n	8017738 <xQueueGenericCreateStatic+0x88>
 8017734:	2301      	movs	r3, #1
 8017736:	e000      	b.n	801773a <xQueueGenericCreateStatic+0x8a>
 8017738:	2300      	movs	r3, #0
 801773a:	2b00      	cmp	r3, #0
 801773c:	d10b      	bne.n	8017756 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801773e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017742:	f383 8811 	msr	BASEPRI, r3
 8017746:	f3bf 8f6f 	isb	sy
 801774a:	f3bf 8f4f 	dsb	sy
 801774e:	61fb      	str	r3, [r7, #28]
}
 8017750:	bf00      	nop
 8017752:	bf00      	nop
 8017754:	e7fd      	b.n	8017752 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017756:	2350      	movs	r3, #80	@ 0x50
 8017758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801775a:	697b      	ldr	r3, [r7, #20]
 801775c:	2b50      	cmp	r3, #80	@ 0x50
 801775e:	d00b      	beq.n	8017778 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8017760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017764:	f383 8811 	msr	BASEPRI, r3
 8017768:	f3bf 8f6f 	isb	sy
 801776c:	f3bf 8f4f 	dsb	sy
 8017770:	61bb      	str	r3, [r7, #24]
}
 8017772:	bf00      	nop
 8017774:	bf00      	nop
 8017776:	e7fd      	b.n	8017774 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017778:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801777a:	683b      	ldr	r3, [r7, #0]
 801777c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801777e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017780:	2b00      	cmp	r3, #0
 8017782:	d00d      	beq.n	80177a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017786:	2201      	movs	r2, #1
 8017788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801778c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8017790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017792:	9300      	str	r3, [sp, #0]
 8017794:	4613      	mov	r3, r2
 8017796:	687a      	ldr	r2, [r7, #4]
 8017798:	68b9      	ldr	r1, [r7, #8]
 801779a:	68f8      	ldr	r0, [r7, #12]
 801779c:	f000 f840 	bl	8017820 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80177a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80177a2:	4618      	mov	r0, r3
 80177a4:	3730      	adds	r7, #48	@ 0x30
 80177a6:	46bd      	mov	sp, r7
 80177a8:	bd80      	pop	{r7, pc}

080177aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80177aa:	b580      	push	{r7, lr}
 80177ac:	b08a      	sub	sp, #40	@ 0x28
 80177ae:	af02      	add	r7, sp, #8
 80177b0:	60f8      	str	r0, [r7, #12]
 80177b2:	60b9      	str	r1, [r7, #8]
 80177b4:	4613      	mov	r3, r2
 80177b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d10b      	bne.n	80177d6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80177be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80177c2:	f383 8811 	msr	BASEPRI, r3
 80177c6:	f3bf 8f6f 	isb	sy
 80177ca:	f3bf 8f4f 	dsb	sy
 80177ce:	613b      	str	r3, [r7, #16]
}
 80177d0:	bf00      	nop
 80177d2:	bf00      	nop
 80177d4:	e7fd      	b.n	80177d2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	68ba      	ldr	r2, [r7, #8]
 80177da:	fb02 f303 	mul.w	r3, r2, r3
 80177de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80177e0:	69fb      	ldr	r3, [r7, #28]
 80177e2:	3350      	adds	r3, #80	@ 0x50
 80177e4:	4618      	mov	r0, r3
 80177e6:	f002 fc89 	bl	801a0fc <pvPortMalloc>
 80177ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80177ec:	69bb      	ldr	r3, [r7, #24]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d011      	beq.n	8017816 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80177f2:	69bb      	ldr	r3, [r7, #24]
 80177f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80177f6:	697b      	ldr	r3, [r7, #20]
 80177f8:	3350      	adds	r3, #80	@ 0x50
 80177fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80177fc:	69bb      	ldr	r3, [r7, #24]
 80177fe:	2200      	movs	r2, #0
 8017800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017804:	79fa      	ldrb	r2, [r7, #7]
 8017806:	69bb      	ldr	r3, [r7, #24]
 8017808:	9300      	str	r3, [sp, #0]
 801780a:	4613      	mov	r3, r2
 801780c:	697a      	ldr	r2, [r7, #20]
 801780e:	68b9      	ldr	r1, [r7, #8]
 8017810:	68f8      	ldr	r0, [r7, #12]
 8017812:	f000 f805 	bl	8017820 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017816:	69bb      	ldr	r3, [r7, #24]
	}
 8017818:	4618      	mov	r0, r3
 801781a:	3720      	adds	r7, #32
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}

08017820 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b084      	sub	sp, #16
 8017824:	af00      	add	r7, sp, #0
 8017826:	60f8      	str	r0, [r7, #12]
 8017828:	60b9      	str	r1, [r7, #8]
 801782a:	607a      	str	r2, [r7, #4]
 801782c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801782e:	68bb      	ldr	r3, [r7, #8]
 8017830:	2b00      	cmp	r3, #0
 8017832:	d103      	bne.n	801783c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017834:	69bb      	ldr	r3, [r7, #24]
 8017836:	69ba      	ldr	r2, [r7, #24]
 8017838:	601a      	str	r2, [r3, #0]
 801783a:	e002      	b.n	8017842 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801783c:	69bb      	ldr	r3, [r7, #24]
 801783e:	687a      	ldr	r2, [r7, #4]
 8017840:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017842:	69bb      	ldr	r3, [r7, #24]
 8017844:	68fa      	ldr	r2, [r7, #12]
 8017846:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017848:	69bb      	ldr	r3, [r7, #24]
 801784a:	68ba      	ldr	r2, [r7, #8]
 801784c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801784e:	2101      	movs	r1, #1
 8017850:	69b8      	ldr	r0, [r7, #24]
 8017852:	f7ff fec3 	bl	80175dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017856:	69bb      	ldr	r3, [r7, #24]
 8017858:	78fa      	ldrb	r2, [r7, #3]
 801785a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801785e:	bf00      	nop
 8017860:	3710      	adds	r7, #16
 8017862:	46bd      	mov	sp, r7
 8017864:	bd80      	pop	{r7, pc}

08017866 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8017866:	b580      	push	{r7, lr}
 8017868:	b082      	sub	sp, #8
 801786a:	af00      	add	r7, sp, #0
 801786c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d00e      	beq.n	8017892 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	2200      	movs	r2, #0
 8017878:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	2200      	movs	r2, #0
 801787e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	2200      	movs	r2, #0
 8017884:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8017886:	2300      	movs	r3, #0
 8017888:	2200      	movs	r2, #0
 801788a:	2100      	movs	r1, #0
 801788c:	6878      	ldr	r0, [r7, #4]
 801788e:	f000 f8a3 	bl	80179d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8017892:	bf00      	nop
 8017894:	3708      	adds	r7, #8
 8017896:	46bd      	mov	sp, r7
 8017898:	bd80      	pop	{r7, pc}

0801789a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801789a:	b580      	push	{r7, lr}
 801789c:	b086      	sub	sp, #24
 801789e:	af00      	add	r7, sp, #0
 80178a0:	4603      	mov	r3, r0
 80178a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80178a4:	2301      	movs	r3, #1
 80178a6:	617b      	str	r3, [r7, #20]
 80178a8:	2300      	movs	r3, #0
 80178aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80178ac:	79fb      	ldrb	r3, [r7, #7]
 80178ae:	461a      	mov	r2, r3
 80178b0:	6939      	ldr	r1, [r7, #16]
 80178b2:	6978      	ldr	r0, [r7, #20]
 80178b4:	f7ff ff79 	bl	80177aa <xQueueGenericCreate>
 80178b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80178ba:	68f8      	ldr	r0, [r7, #12]
 80178bc:	f7ff ffd3 	bl	8017866 <prvInitialiseMutex>

		return xNewQueue;
 80178c0:	68fb      	ldr	r3, [r7, #12]
	}
 80178c2:	4618      	mov	r0, r3
 80178c4:	3718      	adds	r7, #24
 80178c6:	46bd      	mov	sp, r7
 80178c8:	bd80      	pop	{r7, pc}

080178ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80178ca:	b580      	push	{r7, lr}
 80178cc:	b088      	sub	sp, #32
 80178ce:	af02      	add	r7, sp, #8
 80178d0:	4603      	mov	r3, r0
 80178d2:	6039      	str	r1, [r7, #0]
 80178d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80178d6:	2301      	movs	r3, #1
 80178d8:	617b      	str	r3, [r7, #20]
 80178da:	2300      	movs	r3, #0
 80178dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80178de:	79fb      	ldrb	r3, [r7, #7]
 80178e0:	9300      	str	r3, [sp, #0]
 80178e2:	683b      	ldr	r3, [r7, #0]
 80178e4:	2200      	movs	r2, #0
 80178e6:	6939      	ldr	r1, [r7, #16]
 80178e8:	6978      	ldr	r0, [r7, #20]
 80178ea:	f7ff fee1 	bl	80176b0 <xQueueGenericCreateStatic>
 80178ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80178f0:	68f8      	ldr	r0, [r7, #12]
 80178f2:	f7ff ffb8 	bl	8017866 <prvInitialiseMutex>

		return xNewQueue;
 80178f6:	68fb      	ldr	r3, [r7, #12]
	}
 80178f8:	4618      	mov	r0, r3
 80178fa:	3718      	adds	r7, #24
 80178fc:	46bd      	mov	sp, r7
 80178fe:	bd80      	pop	{r7, pc}

08017900 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8017900:	b590      	push	{r4, r7, lr}
 8017902:	b087      	sub	sp, #28
 8017904:	af00      	add	r7, sp, #0
 8017906:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801790c:	693b      	ldr	r3, [r7, #16]
 801790e:	2b00      	cmp	r3, #0
 8017910:	d10b      	bne.n	801792a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8017912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017916:	f383 8811 	msr	BASEPRI, r3
 801791a:	f3bf 8f6f 	isb	sy
 801791e:	f3bf 8f4f 	dsb	sy
 8017922:	60fb      	str	r3, [r7, #12]
}
 8017924:	bf00      	nop
 8017926:	bf00      	nop
 8017928:	e7fd      	b.n	8017926 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801792a:	693b      	ldr	r3, [r7, #16]
 801792c:	689c      	ldr	r4, [r3, #8]
 801792e:	f001 fc45 	bl	80191bc <xTaskGetCurrentTaskHandle>
 8017932:	4603      	mov	r3, r0
 8017934:	429c      	cmp	r4, r3
 8017936:	d111      	bne.n	801795c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8017938:	693b      	ldr	r3, [r7, #16]
 801793a:	68db      	ldr	r3, [r3, #12]
 801793c:	1e5a      	subs	r2, r3, #1
 801793e:	693b      	ldr	r3, [r7, #16]
 8017940:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8017942:	693b      	ldr	r3, [r7, #16]
 8017944:	68db      	ldr	r3, [r3, #12]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d105      	bne.n	8017956 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801794a:	2300      	movs	r3, #0
 801794c:	2200      	movs	r2, #0
 801794e:	2100      	movs	r1, #0
 8017950:	6938      	ldr	r0, [r7, #16]
 8017952:	f000 f841 	bl	80179d8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8017956:	2301      	movs	r3, #1
 8017958:	617b      	str	r3, [r7, #20]
 801795a:	e001      	b.n	8017960 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801795c:	2300      	movs	r3, #0
 801795e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8017960:	697b      	ldr	r3, [r7, #20]
	}
 8017962:	4618      	mov	r0, r3
 8017964:	371c      	adds	r7, #28
 8017966:	46bd      	mov	sp, r7
 8017968:	bd90      	pop	{r4, r7, pc}

0801796a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801796a:	b590      	push	{r4, r7, lr}
 801796c:	b087      	sub	sp, #28
 801796e:	af00      	add	r7, sp, #0
 8017970:	6078      	str	r0, [r7, #4]
 8017972:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8017978:	693b      	ldr	r3, [r7, #16]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d10b      	bne.n	8017996 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 801797e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017982:	f383 8811 	msr	BASEPRI, r3
 8017986:	f3bf 8f6f 	isb	sy
 801798a:	f3bf 8f4f 	dsb	sy
 801798e:	60fb      	str	r3, [r7, #12]
}
 8017990:	bf00      	nop
 8017992:	bf00      	nop
 8017994:	e7fd      	b.n	8017992 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8017996:	693b      	ldr	r3, [r7, #16]
 8017998:	689c      	ldr	r4, [r3, #8]
 801799a:	f001 fc0f 	bl	80191bc <xTaskGetCurrentTaskHandle>
 801799e:	4603      	mov	r3, r0
 80179a0:	429c      	cmp	r4, r3
 80179a2:	d107      	bne.n	80179b4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80179a4:	693b      	ldr	r3, [r7, #16]
 80179a6:	68db      	ldr	r3, [r3, #12]
 80179a8:	1c5a      	adds	r2, r3, #1
 80179aa:	693b      	ldr	r3, [r7, #16]
 80179ac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80179ae:	2301      	movs	r3, #1
 80179b0:	617b      	str	r3, [r7, #20]
 80179b2:	e00c      	b.n	80179ce <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80179b4:	6839      	ldr	r1, [r7, #0]
 80179b6:	6938      	ldr	r0, [r7, #16]
 80179b8:	f000 fa90 	bl	8017edc <xQueueSemaphoreTake>
 80179bc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80179be:	697b      	ldr	r3, [r7, #20]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d004      	beq.n	80179ce <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80179c4:	693b      	ldr	r3, [r7, #16]
 80179c6:	68db      	ldr	r3, [r3, #12]
 80179c8:	1c5a      	adds	r2, r3, #1
 80179ca:	693b      	ldr	r3, [r7, #16]
 80179cc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80179ce:	697b      	ldr	r3, [r7, #20]
	}
 80179d0:	4618      	mov	r0, r3
 80179d2:	371c      	adds	r7, #28
 80179d4:	46bd      	mov	sp, r7
 80179d6:	bd90      	pop	{r4, r7, pc}

080179d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b08e      	sub	sp, #56	@ 0x38
 80179dc:	af00      	add	r7, sp, #0
 80179de:	60f8      	str	r0, [r7, #12]
 80179e0:	60b9      	str	r1, [r7, #8]
 80179e2:	607a      	str	r2, [r7, #4]
 80179e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80179e6:	2300      	movs	r3, #0
 80179e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80179ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d10b      	bne.n	8017a0c <xQueueGenericSend+0x34>
	__asm volatile
 80179f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80179f8:	f383 8811 	msr	BASEPRI, r3
 80179fc:	f3bf 8f6f 	isb	sy
 8017a00:	f3bf 8f4f 	dsb	sy
 8017a04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8017a06:	bf00      	nop
 8017a08:	bf00      	nop
 8017a0a:	e7fd      	b.n	8017a08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017a0c:	68bb      	ldr	r3, [r7, #8]
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d103      	bne.n	8017a1a <xQueueGenericSend+0x42>
 8017a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d101      	bne.n	8017a1e <xQueueGenericSend+0x46>
 8017a1a:	2301      	movs	r3, #1
 8017a1c:	e000      	b.n	8017a20 <xQueueGenericSend+0x48>
 8017a1e:	2300      	movs	r3, #0
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d10b      	bne.n	8017a3c <xQueueGenericSend+0x64>
	__asm volatile
 8017a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a28:	f383 8811 	msr	BASEPRI, r3
 8017a2c:	f3bf 8f6f 	isb	sy
 8017a30:	f3bf 8f4f 	dsb	sy
 8017a34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8017a36:	bf00      	nop
 8017a38:	bf00      	nop
 8017a3a:	e7fd      	b.n	8017a38 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017a3c:	683b      	ldr	r3, [r7, #0]
 8017a3e:	2b02      	cmp	r3, #2
 8017a40:	d103      	bne.n	8017a4a <xQueueGenericSend+0x72>
 8017a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017a46:	2b01      	cmp	r3, #1
 8017a48:	d101      	bne.n	8017a4e <xQueueGenericSend+0x76>
 8017a4a:	2301      	movs	r3, #1
 8017a4c:	e000      	b.n	8017a50 <xQueueGenericSend+0x78>
 8017a4e:	2300      	movs	r3, #0
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d10b      	bne.n	8017a6c <xQueueGenericSend+0x94>
	__asm volatile
 8017a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a58:	f383 8811 	msr	BASEPRI, r3
 8017a5c:	f3bf 8f6f 	isb	sy
 8017a60:	f3bf 8f4f 	dsb	sy
 8017a64:	623b      	str	r3, [r7, #32]
}
 8017a66:	bf00      	nop
 8017a68:	bf00      	nop
 8017a6a:	e7fd      	b.n	8017a68 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017a6c:	f001 fbb6 	bl	80191dc <xTaskGetSchedulerState>
 8017a70:	4603      	mov	r3, r0
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d102      	bne.n	8017a7c <xQueueGenericSend+0xa4>
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d101      	bne.n	8017a80 <xQueueGenericSend+0xa8>
 8017a7c:	2301      	movs	r3, #1
 8017a7e:	e000      	b.n	8017a82 <xQueueGenericSend+0xaa>
 8017a80:	2300      	movs	r3, #0
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d10b      	bne.n	8017a9e <xQueueGenericSend+0xc6>
	__asm volatile
 8017a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a8a:	f383 8811 	msr	BASEPRI, r3
 8017a8e:	f3bf 8f6f 	isb	sy
 8017a92:	f3bf 8f4f 	dsb	sy
 8017a96:	61fb      	str	r3, [r7, #28]
}
 8017a98:	bf00      	nop
 8017a9a:	bf00      	nop
 8017a9c:	e7fd      	b.n	8017a9a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017a9e:	f002 fa0b 	bl	8019eb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017aa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017aaa:	429a      	cmp	r2, r3
 8017aac:	d302      	bcc.n	8017ab4 <xQueueGenericSend+0xdc>
 8017aae:	683b      	ldr	r3, [r7, #0]
 8017ab0:	2b02      	cmp	r3, #2
 8017ab2:	d129      	bne.n	8017b08 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017ab4:	683a      	ldr	r2, [r7, #0]
 8017ab6:	68b9      	ldr	r1, [r7, #8]
 8017ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017aba:	f000 fbb9 	bl	8018230 <prvCopyDataToQueue>
 8017abe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d010      	beq.n	8017aea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017aca:	3324      	adds	r3, #36	@ 0x24
 8017acc:	4618      	mov	r0, r3
 8017ace:	f001 f9af 	bl	8018e30 <xTaskRemoveFromEventList>
 8017ad2:	4603      	mov	r3, r0
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d013      	beq.n	8017b00 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017ad8:	4b3f      	ldr	r3, [pc, #252]	@ (8017bd8 <xQueueGenericSend+0x200>)
 8017ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017ade:	601a      	str	r2, [r3, #0]
 8017ae0:	f3bf 8f4f 	dsb	sy
 8017ae4:	f3bf 8f6f 	isb	sy
 8017ae8:	e00a      	b.n	8017b00 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d007      	beq.n	8017b00 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017af0:	4b39      	ldr	r3, [pc, #228]	@ (8017bd8 <xQueueGenericSend+0x200>)
 8017af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017af6:	601a      	str	r2, [r3, #0]
 8017af8:	f3bf 8f4f 	dsb	sy
 8017afc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017b00:	f002 fa0c 	bl	8019f1c <vPortExitCritical>
				return pdPASS;
 8017b04:	2301      	movs	r3, #1
 8017b06:	e063      	b.n	8017bd0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d103      	bne.n	8017b16 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017b0e:	f002 fa05 	bl	8019f1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017b12:	2300      	movs	r3, #0
 8017b14:	e05c      	b.n	8017bd0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d106      	bne.n	8017b2a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017b1c:	f107 0314 	add.w	r3, r7, #20
 8017b20:	4618      	mov	r0, r3
 8017b22:	f001 f9e9 	bl	8018ef8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017b26:	2301      	movs	r3, #1
 8017b28:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017b2a:	f002 f9f7 	bl	8019f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017b2e:	f000 ff51 	bl	80189d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017b32:	f002 f9c1 	bl	8019eb8 <vPortEnterCritical>
 8017b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017b3c:	b25b      	sxtb	r3, r3
 8017b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b42:	d103      	bne.n	8017b4c <xQueueGenericSend+0x174>
 8017b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b46:	2200      	movs	r2, #0
 8017b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017b52:	b25b      	sxtb	r3, r3
 8017b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b58:	d103      	bne.n	8017b62 <xQueueGenericSend+0x18a>
 8017b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b5c:	2200      	movs	r2, #0
 8017b5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017b62:	f002 f9db 	bl	8019f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017b66:	1d3a      	adds	r2, r7, #4
 8017b68:	f107 0314 	add.w	r3, r7, #20
 8017b6c:	4611      	mov	r1, r2
 8017b6e:	4618      	mov	r0, r3
 8017b70:	f001 f9d8 	bl	8018f24 <xTaskCheckForTimeOut>
 8017b74:	4603      	mov	r3, r0
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d124      	bne.n	8017bc4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017b7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017b7c:	f000 fc50 	bl	8018420 <prvIsQueueFull>
 8017b80:	4603      	mov	r3, r0
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d018      	beq.n	8017bb8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b88:	3310      	adds	r3, #16
 8017b8a:	687a      	ldr	r2, [r7, #4]
 8017b8c:	4611      	mov	r1, r2
 8017b8e:	4618      	mov	r0, r3
 8017b90:	f001 f8fc 	bl	8018d8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017b94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017b96:	f000 fbdb 	bl	8018350 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017b9a:	f000 ff29 	bl	80189f0 <xTaskResumeAll>
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	f47f af7c 	bne.w	8017a9e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8017ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8017bd8 <xQueueGenericSend+0x200>)
 8017ba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017bac:	601a      	str	r2, [r3, #0]
 8017bae:	f3bf 8f4f 	dsb	sy
 8017bb2:	f3bf 8f6f 	isb	sy
 8017bb6:	e772      	b.n	8017a9e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017bb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017bba:	f000 fbc9 	bl	8018350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017bbe:	f000 ff17 	bl	80189f0 <xTaskResumeAll>
 8017bc2:	e76c      	b.n	8017a9e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017bc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017bc6:	f000 fbc3 	bl	8018350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017bca:	f000 ff11 	bl	80189f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017bce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	3738      	adds	r7, #56	@ 0x38
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	bd80      	pop	{r7, pc}
 8017bd8:	e000ed04 	.word	0xe000ed04

08017bdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b090      	sub	sp, #64	@ 0x40
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	60f8      	str	r0, [r7, #12]
 8017be4:	60b9      	str	r1, [r7, #8]
 8017be6:	607a      	str	r2, [r7, #4]
 8017be8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8017bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d10b      	bne.n	8017c0c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8017bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017bf8:	f383 8811 	msr	BASEPRI, r3
 8017bfc:	f3bf 8f6f 	isb	sy
 8017c00:	f3bf 8f4f 	dsb	sy
 8017c04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8017c06:	bf00      	nop
 8017c08:	bf00      	nop
 8017c0a:	e7fd      	b.n	8017c08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017c0c:	68bb      	ldr	r3, [r7, #8]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d103      	bne.n	8017c1a <xQueueGenericSendFromISR+0x3e>
 8017c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d101      	bne.n	8017c1e <xQueueGenericSendFromISR+0x42>
 8017c1a:	2301      	movs	r3, #1
 8017c1c:	e000      	b.n	8017c20 <xQueueGenericSendFromISR+0x44>
 8017c1e:	2300      	movs	r3, #0
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d10b      	bne.n	8017c3c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8017c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c28:	f383 8811 	msr	BASEPRI, r3
 8017c2c:	f3bf 8f6f 	isb	sy
 8017c30:	f3bf 8f4f 	dsb	sy
 8017c34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8017c36:	bf00      	nop
 8017c38:	bf00      	nop
 8017c3a:	e7fd      	b.n	8017c38 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017c3c:	683b      	ldr	r3, [r7, #0]
 8017c3e:	2b02      	cmp	r3, #2
 8017c40:	d103      	bne.n	8017c4a <xQueueGenericSendFromISR+0x6e>
 8017c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017c46:	2b01      	cmp	r3, #1
 8017c48:	d101      	bne.n	8017c4e <xQueueGenericSendFromISR+0x72>
 8017c4a:	2301      	movs	r3, #1
 8017c4c:	e000      	b.n	8017c50 <xQueueGenericSendFromISR+0x74>
 8017c4e:	2300      	movs	r3, #0
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d10b      	bne.n	8017c6c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8017c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c58:	f383 8811 	msr	BASEPRI, r3
 8017c5c:	f3bf 8f6f 	isb	sy
 8017c60:	f3bf 8f4f 	dsb	sy
 8017c64:	623b      	str	r3, [r7, #32]
}
 8017c66:	bf00      	nop
 8017c68:	bf00      	nop
 8017c6a:	e7fd      	b.n	8017c68 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017c6c:	f002 fa04 	bl	801a078 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017c70:	f3ef 8211 	mrs	r2, BASEPRI
 8017c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c78:	f383 8811 	msr	BASEPRI, r3
 8017c7c:	f3bf 8f6f 	isb	sy
 8017c80:	f3bf 8f4f 	dsb	sy
 8017c84:	61fa      	str	r2, [r7, #28]
 8017c86:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017c88:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017c8a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017c94:	429a      	cmp	r2, r3
 8017c96:	d302      	bcc.n	8017c9e <xQueueGenericSendFromISR+0xc2>
 8017c98:	683b      	ldr	r3, [r7, #0]
 8017c9a:	2b02      	cmp	r3, #2
 8017c9c:	d12f      	bne.n	8017cfe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017ca4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017cae:	683a      	ldr	r2, [r7, #0]
 8017cb0:	68b9      	ldr	r1, [r7, #8]
 8017cb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017cb4:	f000 fabc 	bl	8018230 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017cb8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8017cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cc0:	d112      	bne.n	8017ce8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d016      	beq.n	8017cf8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ccc:	3324      	adds	r3, #36	@ 0x24
 8017cce:	4618      	mov	r0, r3
 8017cd0:	f001 f8ae 	bl	8018e30 <xTaskRemoveFromEventList>
 8017cd4:	4603      	mov	r3, r0
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d00e      	beq.n	8017cf8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d00b      	beq.n	8017cf8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	2201      	movs	r2, #1
 8017ce4:	601a      	str	r2, [r3, #0]
 8017ce6:	e007      	b.n	8017cf8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017ce8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8017cec:	3301      	adds	r3, #1
 8017cee:	b2db      	uxtb	r3, r3
 8017cf0:	b25a      	sxtb	r2, r3
 8017cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8017cfc:	e001      	b.n	8017d02 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017cfe:	2300      	movs	r3, #0
 8017d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d04:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017d06:	697b      	ldr	r3, [r7, #20]
 8017d08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017d0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8017d10:	4618      	mov	r0, r3
 8017d12:	3740      	adds	r7, #64	@ 0x40
 8017d14:	46bd      	mov	sp, r7
 8017d16:	bd80      	pop	{r7, pc}

08017d18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b08c      	sub	sp, #48	@ 0x30
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	60f8      	str	r0, [r7, #12]
 8017d20:	60b9      	str	r1, [r7, #8]
 8017d22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017d24:	2300      	movs	r3, #0
 8017d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d10b      	bne.n	8017d4a <xQueueReceive+0x32>
	__asm volatile
 8017d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d36:	f383 8811 	msr	BASEPRI, r3
 8017d3a:	f3bf 8f6f 	isb	sy
 8017d3e:	f3bf 8f4f 	dsb	sy
 8017d42:	623b      	str	r3, [r7, #32]
}
 8017d44:	bf00      	nop
 8017d46:	bf00      	nop
 8017d48:	e7fd      	b.n	8017d46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017d4a:	68bb      	ldr	r3, [r7, #8]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d103      	bne.n	8017d58 <xQueueReceive+0x40>
 8017d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d101      	bne.n	8017d5c <xQueueReceive+0x44>
 8017d58:	2301      	movs	r3, #1
 8017d5a:	e000      	b.n	8017d5e <xQueueReceive+0x46>
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d10b      	bne.n	8017d7a <xQueueReceive+0x62>
	__asm volatile
 8017d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d66:	f383 8811 	msr	BASEPRI, r3
 8017d6a:	f3bf 8f6f 	isb	sy
 8017d6e:	f3bf 8f4f 	dsb	sy
 8017d72:	61fb      	str	r3, [r7, #28]
}
 8017d74:	bf00      	nop
 8017d76:	bf00      	nop
 8017d78:	e7fd      	b.n	8017d76 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017d7a:	f001 fa2f 	bl	80191dc <xTaskGetSchedulerState>
 8017d7e:	4603      	mov	r3, r0
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d102      	bne.n	8017d8a <xQueueReceive+0x72>
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d101      	bne.n	8017d8e <xQueueReceive+0x76>
 8017d8a:	2301      	movs	r3, #1
 8017d8c:	e000      	b.n	8017d90 <xQueueReceive+0x78>
 8017d8e:	2300      	movs	r3, #0
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d10b      	bne.n	8017dac <xQueueReceive+0x94>
	__asm volatile
 8017d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d98:	f383 8811 	msr	BASEPRI, r3
 8017d9c:	f3bf 8f6f 	isb	sy
 8017da0:	f3bf 8f4f 	dsb	sy
 8017da4:	61bb      	str	r3, [r7, #24]
}
 8017da6:	bf00      	nop
 8017da8:	bf00      	nop
 8017daa:	e7fd      	b.n	8017da8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017dac:	f002 f884 	bl	8019eb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017db4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d01f      	beq.n	8017dfc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017dbc:	68b9      	ldr	r1, [r7, #8]
 8017dbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017dc0:	f000 faa0 	bl	8018304 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dc6:	1e5a      	subs	r2, r3, #1
 8017dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dce:	691b      	ldr	r3, [r3, #16]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d00f      	beq.n	8017df4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dd6:	3310      	adds	r3, #16
 8017dd8:	4618      	mov	r0, r3
 8017dda:	f001 f829 	bl	8018e30 <xTaskRemoveFromEventList>
 8017dde:	4603      	mov	r3, r0
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d007      	beq.n	8017df4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017de4:	4b3c      	ldr	r3, [pc, #240]	@ (8017ed8 <xQueueReceive+0x1c0>)
 8017de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017dea:	601a      	str	r2, [r3, #0]
 8017dec:	f3bf 8f4f 	dsb	sy
 8017df0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017df4:	f002 f892 	bl	8019f1c <vPortExitCritical>
				return pdPASS;
 8017df8:	2301      	movs	r3, #1
 8017dfa:	e069      	b.n	8017ed0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d103      	bne.n	8017e0a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017e02:	f002 f88b 	bl	8019f1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017e06:	2300      	movs	r3, #0
 8017e08:	e062      	b.n	8017ed0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d106      	bne.n	8017e1e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017e10:	f107 0310 	add.w	r3, r7, #16
 8017e14:	4618      	mov	r0, r3
 8017e16:	f001 f86f 	bl	8018ef8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017e1a:	2301      	movs	r3, #1
 8017e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017e1e:	f002 f87d 	bl	8019f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017e22:	f000 fdd7 	bl	80189d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017e26:	f002 f847 	bl	8019eb8 <vPortEnterCritical>
 8017e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017e30:	b25b      	sxtb	r3, r3
 8017e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e36:	d103      	bne.n	8017e40 <xQueueReceive+0x128>
 8017e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017e46:	b25b      	sxtb	r3, r3
 8017e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e4c:	d103      	bne.n	8017e56 <xQueueReceive+0x13e>
 8017e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e50:	2200      	movs	r2, #0
 8017e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017e56:	f002 f861 	bl	8019f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017e5a:	1d3a      	adds	r2, r7, #4
 8017e5c:	f107 0310 	add.w	r3, r7, #16
 8017e60:	4611      	mov	r1, r2
 8017e62:	4618      	mov	r0, r3
 8017e64:	f001 f85e 	bl	8018f24 <xTaskCheckForTimeOut>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d123      	bne.n	8017eb6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017e70:	f000 fac0 	bl	80183f4 <prvIsQueueEmpty>
 8017e74:	4603      	mov	r3, r0
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d017      	beq.n	8017eaa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e7c:	3324      	adds	r3, #36	@ 0x24
 8017e7e:	687a      	ldr	r2, [r7, #4]
 8017e80:	4611      	mov	r1, r2
 8017e82:	4618      	mov	r0, r3
 8017e84:	f000 ff82 	bl	8018d8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017e88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017e8a:	f000 fa61 	bl	8018350 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017e8e:	f000 fdaf 	bl	80189f0 <xTaskResumeAll>
 8017e92:	4603      	mov	r3, r0
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d189      	bne.n	8017dac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8017e98:	4b0f      	ldr	r3, [pc, #60]	@ (8017ed8 <xQueueReceive+0x1c0>)
 8017e9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017e9e:	601a      	str	r2, [r3, #0]
 8017ea0:	f3bf 8f4f 	dsb	sy
 8017ea4:	f3bf 8f6f 	isb	sy
 8017ea8:	e780      	b.n	8017dac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017eac:	f000 fa50 	bl	8018350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017eb0:	f000 fd9e 	bl	80189f0 <xTaskResumeAll>
 8017eb4:	e77a      	b.n	8017dac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017eb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017eb8:	f000 fa4a 	bl	8018350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017ebc:	f000 fd98 	bl	80189f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017ec0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017ec2:	f000 fa97 	bl	80183f4 <prvIsQueueEmpty>
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	f43f af6f 	beq.w	8017dac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017ece:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	3730      	adds	r7, #48	@ 0x30
 8017ed4:	46bd      	mov	sp, r7
 8017ed6:	bd80      	pop	{r7, pc}
 8017ed8:	e000ed04 	.word	0xe000ed04

08017edc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b08e      	sub	sp, #56	@ 0x38
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
 8017ee4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8017eee:	2300      	movs	r3, #0
 8017ef0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d10b      	bne.n	8017f10 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8017ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017efc:	f383 8811 	msr	BASEPRI, r3
 8017f00:	f3bf 8f6f 	isb	sy
 8017f04:	f3bf 8f4f 	dsb	sy
 8017f08:	623b      	str	r3, [r7, #32]
}
 8017f0a:	bf00      	nop
 8017f0c:	bf00      	nop
 8017f0e:	e7fd      	b.n	8017f0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d00b      	beq.n	8017f30 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8017f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017f1c:	f383 8811 	msr	BASEPRI, r3
 8017f20:	f3bf 8f6f 	isb	sy
 8017f24:	f3bf 8f4f 	dsb	sy
 8017f28:	61fb      	str	r3, [r7, #28]
}
 8017f2a:	bf00      	nop
 8017f2c:	bf00      	nop
 8017f2e:	e7fd      	b.n	8017f2c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017f30:	f001 f954 	bl	80191dc <xTaskGetSchedulerState>
 8017f34:	4603      	mov	r3, r0
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d102      	bne.n	8017f40 <xQueueSemaphoreTake+0x64>
 8017f3a:	683b      	ldr	r3, [r7, #0]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d101      	bne.n	8017f44 <xQueueSemaphoreTake+0x68>
 8017f40:	2301      	movs	r3, #1
 8017f42:	e000      	b.n	8017f46 <xQueueSemaphoreTake+0x6a>
 8017f44:	2300      	movs	r3, #0
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d10b      	bne.n	8017f62 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8017f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017f4e:	f383 8811 	msr	BASEPRI, r3
 8017f52:	f3bf 8f6f 	isb	sy
 8017f56:	f3bf 8f4f 	dsb	sy
 8017f5a:	61bb      	str	r3, [r7, #24]
}
 8017f5c:	bf00      	nop
 8017f5e:	bf00      	nop
 8017f60:	e7fd      	b.n	8017f5e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017f62:	f001 ffa9 	bl	8019eb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017f6a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d024      	beq.n	8017fbc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f74:	1e5a      	subs	r2, r3, #1
 8017f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f78:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d104      	bne.n	8017f8c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017f82:	f001 faa5 	bl	80194d0 <pvTaskIncrementMutexHeldCount>
 8017f86:	4602      	mov	r2, r0
 8017f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f8a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f8e:	691b      	ldr	r3, [r3, #16]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d00f      	beq.n	8017fb4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f96:	3310      	adds	r3, #16
 8017f98:	4618      	mov	r0, r3
 8017f9a:	f000 ff49 	bl	8018e30 <xTaskRemoveFromEventList>
 8017f9e:	4603      	mov	r3, r0
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d007      	beq.n	8017fb4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017fa4:	4b54      	ldr	r3, [pc, #336]	@ (80180f8 <xQueueSemaphoreTake+0x21c>)
 8017fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017faa:	601a      	str	r2, [r3, #0]
 8017fac:	f3bf 8f4f 	dsb	sy
 8017fb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017fb4:	f001 ffb2 	bl	8019f1c <vPortExitCritical>
				return pdPASS;
 8017fb8:	2301      	movs	r3, #1
 8017fba:	e098      	b.n	80180ee <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d112      	bne.n	8017fe8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d00b      	beq.n	8017fe0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8017fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017fcc:	f383 8811 	msr	BASEPRI, r3
 8017fd0:	f3bf 8f6f 	isb	sy
 8017fd4:	f3bf 8f4f 	dsb	sy
 8017fd8:	617b      	str	r3, [r7, #20]
}
 8017fda:	bf00      	nop
 8017fdc:	bf00      	nop
 8017fde:	e7fd      	b.n	8017fdc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8017fe0:	f001 ff9c 	bl	8019f1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	e082      	b.n	80180ee <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d106      	bne.n	8017ffc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017fee:	f107 030c 	add.w	r3, r7, #12
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	f000 ff80 	bl	8018ef8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017ff8:	2301      	movs	r3, #1
 8017ffa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017ffc:	f001 ff8e 	bl	8019f1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018000:	f000 fce8 	bl	80189d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018004:	f001 ff58 	bl	8019eb8 <vPortEnterCritical>
 8018008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801800a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801800e:	b25b      	sxtb	r3, r3
 8018010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018014:	d103      	bne.n	801801e <xQueueSemaphoreTake+0x142>
 8018016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018018:	2200      	movs	r2, #0
 801801a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801801e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018020:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018024:	b25b      	sxtb	r3, r3
 8018026:	f1b3 3fff 	cmp.w	r3, #4294967295
 801802a:	d103      	bne.n	8018034 <xQueueSemaphoreTake+0x158>
 801802c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801802e:	2200      	movs	r2, #0
 8018030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8018034:	f001 ff72 	bl	8019f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018038:	463a      	mov	r2, r7
 801803a:	f107 030c 	add.w	r3, r7, #12
 801803e:	4611      	mov	r1, r2
 8018040:	4618      	mov	r0, r3
 8018042:	f000 ff6f 	bl	8018f24 <xTaskCheckForTimeOut>
 8018046:	4603      	mov	r3, r0
 8018048:	2b00      	cmp	r3, #0
 801804a:	d132      	bne.n	80180b2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801804c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801804e:	f000 f9d1 	bl	80183f4 <prvIsQueueEmpty>
 8018052:	4603      	mov	r3, r0
 8018054:	2b00      	cmp	r3, #0
 8018056:	d026      	beq.n	80180a6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d109      	bne.n	8018074 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8018060:	f001 ff2a 	bl	8019eb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018066:	689b      	ldr	r3, [r3, #8]
 8018068:	4618      	mov	r0, r3
 801806a:	f001 f8d5 	bl	8019218 <xTaskPriorityInherit>
 801806e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8018070:	f001 ff54 	bl	8019f1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018076:	3324      	adds	r3, #36	@ 0x24
 8018078:	683a      	ldr	r2, [r7, #0]
 801807a:	4611      	mov	r1, r2
 801807c:	4618      	mov	r0, r3
 801807e:	f000 fe85 	bl	8018d8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018082:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018084:	f000 f964 	bl	8018350 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018088:	f000 fcb2 	bl	80189f0 <xTaskResumeAll>
 801808c:	4603      	mov	r3, r0
 801808e:	2b00      	cmp	r3, #0
 8018090:	f47f af67 	bne.w	8017f62 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8018094:	4b18      	ldr	r3, [pc, #96]	@ (80180f8 <xQueueSemaphoreTake+0x21c>)
 8018096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801809a:	601a      	str	r2, [r3, #0]
 801809c:	f3bf 8f4f 	dsb	sy
 80180a0:	f3bf 8f6f 	isb	sy
 80180a4:	e75d      	b.n	8017f62 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80180a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80180a8:	f000 f952 	bl	8018350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80180ac:	f000 fca0 	bl	80189f0 <xTaskResumeAll>
 80180b0:	e757      	b.n	8017f62 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80180b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80180b4:	f000 f94c 	bl	8018350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80180b8:	f000 fc9a 	bl	80189f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80180bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80180be:	f000 f999 	bl	80183f4 <prvIsQueueEmpty>
 80180c2:	4603      	mov	r3, r0
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	f43f af4c 	beq.w	8017f62 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80180ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d00d      	beq.n	80180ec <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80180d0:	f001 fef2 	bl	8019eb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80180d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80180d6:	f000 f893 	bl	8018200 <prvGetDisinheritPriorityAfterTimeout>
 80180da:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80180dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180de:	689b      	ldr	r3, [r3, #8]
 80180e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80180e2:	4618      	mov	r0, r3
 80180e4:	f001 f970 	bl	80193c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80180e8:	f001 ff18 	bl	8019f1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80180ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80180ee:	4618      	mov	r0, r3
 80180f0:	3738      	adds	r7, #56	@ 0x38
 80180f2:	46bd      	mov	sp, r7
 80180f4:	bd80      	pop	{r7, pc}
 80180f6:	bf00      	nop
 80180f8:	e000ed04 	.word	0xe000ed04

080180fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80180fc:	b580      	push	{r7, lr}
 80180fe:	b08e      	sub	sp, #56	@ 0x38
 8018100:	af00      	add	r7, sp, #0
 8018102:	60f8      	str	r0, [r7, #12]
 8018104:	60b9      	str	r1, [r7, #8]
 8018106:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801810c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801810e:	2b00      	cmp	r3, #0
 8018110:	d10b      	bne.n	801812a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8018112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018116:	f383 8811 	msr	BASEPRI, r3
 801811a:	f3bf 8f6f 	isb	sy
 801811e:	f3bf 8f4f 	dsb	sy
 8018122:	623b      	str	r3, [r7, #32]
}
 8018124:	bf00      	nop
 8018126:	bf00      	nop
 8018128:	e7fd      	b.n	8018126 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801812a:	68bb      	ldr	r3, [r7, #8]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d103      	bne.n	8018138 <xQueueReceiveFromISR+0x3c>
 8018130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018134:	2b00      	cmp	r3, #0
 8018136:	d101      	bne.n	801813c <xQueueReceiveFromISR+0x40>
 8018138:	2301      	movs	r3, #1
 801813a:	e000      	b.n	801813e <xQueueReceiveFromISR+0x42>
 801813c:	2300      	movs	r3, #0
 801813e:	2b00      	cmp	r3, #0
 8018140:	d10b      	bne.n	801815a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8018142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018146:	f383 8811 	msr	BASEPRI, r3
 801814a:	f3bf 8f6f 	isb	sy
 801814e:	f3bf 8f4f 	dsb	sy
 8018152:	61fb      	str	r3, [r7, #28]
}
 8018154:	bf00      	nop
 8018156:	bf00      	nop
 8018158:	e7fd      	b.n	8018156 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801815a:	f001 ff8d 	bl	801a078 <vPortValidateInterruptPriority>
	__asm volatile
 801815e:	f3ef 8211 	mrs	r2, BASEPRI
 8018162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018166:	f383 8811 	msr	BASEPRI, r3
 801816a:	f3bf 8f6f 	isb	sy
 801816e:	f3bf 8f4f 	dsb	sy
 8018172:	61ba      	str	r2, [r7, #24]
 8018174:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8018176:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018178:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801817a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801817c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801817e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018182:	2b00      	cmp	r3, #0
 8018184:	d02f      	beq.n	80181e6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8018186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018188:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801818c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018190:	68b9      	ldr	r1, [r7, #8]
 8018192:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018194:	f000 f8b6 	bl	8018304 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801819a:	1e5a      	subs	r2, r3, #1
 801819c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801819e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80181a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80181a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181a8:	d112      	bne.n	80181d0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80181aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181ac:	691b      	ldr	r3, [r3, #16]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d016      	beq.n	80181e0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80181b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181b4:	3310      	adds	r3, #16
 80181b6:	4618      	mov	r0, r3
 80181b8:	f000 fe3a 	bl	8018e30 <xTaskRemoveFromEventList>
 80181bc:	4603      	mov	r3, r0
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d00e      	beq.n	80181e0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d00b      	beq.n	80181e0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	2201      	movs	r2, #1
 80181cc:	601a      	str	r2, [r3, #0]
 80181ce:	e007      	b.n	80181e0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80181d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80181d4:	3301      	adds	r3, #1
 80181d6:	b2db      	uxtb	r3, r3
 80181d8:	b25a      	sxtb	r2, r3
 80181da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80181e0:	2301      	movs	r3, #1
 80181e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80181e4:	e001      	b.n	80181ea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80181e6:	2300      	movs	r3, #0
 80181e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80181ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80181ee:	693b      	ldr	r3, [r7, #16]
 80181f0:	f383 8811 	msr	BASEPRI, r3
}
 80181f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80181f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80181f8:	4618      	mov	r0, r3
 80181fa:	3738      	adds	r7, #56	@ 0x38
 80181fc:	46bd      	mov	sp, r7
 80181fe:	bd80      	pop	{r7, pc}

08018200 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8018200:	b480      	push	{r7}
 8018202:	b085      	sub	sp, #20
 8018204:	af00      	add	r7, sp, #0
 8018206:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801820c:	2b00      	cmp	r3, #0
 801820e:	d006      	beq.n	801821e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801821a:	60fb      	str	r3, [r7, #12]
 801821c:	e001      	b.n	8018222 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801821e:	2300      	movs	r3, #0
 8018220:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8018222:	68fb      	ldr	r3, [r7, #12]
	}
 8018224:	4618      	mov	r0, r3
 8018226:	3714      	adds	r7, #20
 8018228:	46bd      	mov	sp, r7
 801822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801822e:	4770      	bx	lr

08018230 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b086      	sub	sp, #24
 8018234:	af00      	add	r7, sp, #0
 8018236:	60f8      	str	r0, [r7, #12]
 8018238:	60b9      	str	r1, [r7, #8]
 801823a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801823c:	2300      	movs	r3, #0
 801823e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018240:	68fb      	ldr	r3, [r7, #12]
 8018242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018244:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018246:	68fb      	ldr	r3, [r7, #12]
 8018248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801824a:	2b00      	cmp	r3, #0
 801824c:	d10d      	bne.n	801826a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d14d      	bne.n	80182f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	689b      	ldr	r3, [r3, #8]
 801825a:	4618      	mov	r0, r3
 801825c:	f001 f844 	bl	80192e8 <xTaskPriorityDisinherit>
 8018260:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	2200      	movs	r2, #0
 8018266:	609a      	str	r2, [r3, #8]
 8018268:	e043      	b.n	80182f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d119      	bne.n	80182a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	6858      	ldr	r0, [r3, #4]
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018278:	461a      	mov	r2, r3
 801827a:	68b9      	ldr	r1, [r7, #8]
 801827c:	f002 fc77 	bl	801ab6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	685a      	ldr	r2, [r3, #4]
 8018284:	68fb      	ldr	r3, [r7, #12]
 8018286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018288:	441a      	add	r2, r3
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	685a      	ldr	r2, [r3, #4]
 8018292:	68fb      	ldr	r3, [r7, #12]
 8018294:	689b      	ldr	r3, [r3, #8]
 8018296:	429a      	cmp	r2, r3
 8018298:	d32b      	bcc.n	80182f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	681a      	ldr	r2, [r3, #0]
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	605a      	str	r2, [r3, #4]
 80182a2:	e026      	b.n	80182f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	68d8      	ldr	r0, [r3, #12]
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80182ac:	461a      	mov	r2, r3
 80182ae:	68b9      	ldr	r1, [r7, #8]
 80182b0:	f002 fc5d 	bl	801ab6e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	68da      	ldr	r2, [r3, #12]
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80182bc:	425b      	negs	r3, r3
 80182be:	441a      	add	r2, r3
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	68da      	ldr	r2, [r3, #12]
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	429a      	cmp	r2, r3
 80182ce:	d207      	bcs.n	80182e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	689a      	ldr	r2, [r3, #8]
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80182d8:	425b      	negs	r3, r3
 80182da:	441a      	add	r2, r3
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	2b02      	cmp	r3, #2
 80182e4:	d105      	bne.n	80182f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80182e6:	693b      	ldr	r3, [r7, #16]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d002      	beq.n	80182f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80182ec:	693b      	ldr	r3, [r7, #16]
 80182ee:	3b01      	subs	r3, #1
 80182f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80182f2:	693b      	ldr	r3, [r7, #16]
 80182f4:	1c5a      	adds	r2, r3, #1
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80182fa:	697b      	ldr	r3, [r7, #20]
}
 80182fc:	4618      	mov	r0, r3
 80182fe:	3718      	adds	r7, #24
 8018300:	46bd      	mov	sp, r7
 8018302:	bd80      	pop	{r7, pc}

08018304 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018304:	b580      	push	{r7, lr}
 8018306:	b082      	sub	sp, #8
 8018308:	af00      	add	r7, sp, #0
 801830a:	6078      	str	r0, [r7, #4]
 801830c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018312:	2b00      	cmp	r3, #0
 8018314:	d018      	beq.n	8018348 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	68da      	ldr	r2, [r3, #12]
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801831e:	441a      	add	r2, r3
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	68da      	ldr	r2, [r3, #12]
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	689b      	ldr	r3, [r3, #8]
 801832c:	429a      	cmp	r2, r3
 801832e:	d303      	bcc.n	8018338 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	681a      	ldr	r2, [r3, #0]
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	68d9      	ldr	r1, [r3, #12]
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018340:	461a      	mov	r2, r3
 8018342:	6838      	ldr	r0, [r7, #0]
 8018344:	f002 fc13 	bl	801ab6e <memcpy>
	}
}
 8018348:	bf00      	nop
 801834a:	3708      	adds	r7, #8
 801834c:	46bd      	mov	sp, r7
 801834e:	bd80      	pop	{r7, pc}

08018350 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018350:	b580      	push	{r7, lr}
 8018352:	b084      	sub	sp, #16
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018358:	f001 fdae 	bl	8019eb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018362:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018364:	e011      	b.n	801838a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801836a:	2b00      	cmp	r3, #0
 801836c:	d012      	beq.n	8018394 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	3324      	adds	r3, #36	@ 0x24
 8018372:	4618      	mov	r0, r3
 8018374:	f000 fd5c 	bl	8018e30 <xTaskRemoveFromEventList>
 8018378:	4603      	mov	r3, r0
 801837a:	2b00      	cmp	r3, #0
 801837c:	d001      	beq.n	8018382 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801837e:	f000 fe35 	bl	8018fec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8018382:	7bfb      	ldrb	r3, [r7, #15]
 8018384:	3b01      	subs	r3, #1
 8018386:	b2db      	uxtb	r3, r3
 8018388:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801838a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801838e:	2b00      	cmp	r3, #0
 8018390:	dce9      	bgt.n	8018366 <prvUnlockQueue+0x16>
 8018392:	e000      	b.n	8018396 <prvUnlockQueue+0x46>
					break;
 8018394:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	22ff      	movs	r2, #255	@ 0xff
 801839a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801839e:	f001 fdbd 	bl	8019f1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80183a2:	f001 fd89 	bl	8019eb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80183ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80183ae:	e011      	b.n	80183d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	691b      	ldr	r3, [r3, #16]
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d012      	beq.n	80183de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	3310      	adds	r3, #16
 80183bc:	4618      	mov	r0, r3
 80183be:	f000 fd37 	bl	8018e30 <xTaskRemoveFromEventList>
 80183c2:	4603      	mov	r3, r0
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d001      	beq.n	80183cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80183c8:	f000 fe10 	bl	8018fec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80183cc:	7bbb      	ldrb	r3, [r7, #14]
 80183ce:	3b01      	subs	r3, #1
 80183d0:	b2db      	uxtb	r3, r3
 80183d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80183d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	dce9      	bgt.n	80183b0 <prvUnlockQueue+0x60>
 80183dc:	e000      	b.n	80183e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80183de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	22ff      	movs	r2, #255	@ 0xff
 80183e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80183e8:	f001 fd98 	bl	8019f1c <vPortExitCritical>
}
 80183ec:	bf00      	nop
 80183ee:	3710      	adds	r7, #16
 80183f0:	46bd      	mov	sp, r7
 80183f2:	bd80      	pop	{r7, pc}

080183f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80183f4:	b580      	push	{r7, lr}
 80183f6:	b084      	sub	sp, #16
 80183f8:	af00      	add	r7, sp, #0
 80183fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80183fc:	f001 fd5c 	bl	8019eb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018404:	2b00      	cmp	r3, #0
 8018406:	d102      	bne.n	801840e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018408:	2301      	movs	r3, #1
 801840a:	60fb      	str	r3, [r7, #12]
 801840c:	e001      	b.n	8018412 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801840e:	2300      	movs	r3, #0
 8018410:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018412:	f001 fd83 	bl	8019f1c <vPortExitCritical>

	return xReturn;
 8018416:	68fb      	ldr	r3, [r7, #12]
}
 8018418:	4618      	mov	r0, r3
 801841a:	3710      	adds	r7, #16
 801841c:	46bd      	mov	sp, r7
 801841e:	bd80      	pop	{r7, pc}

08018420 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018420:	b580      	push	{r7, lr}
 8018422:	b084      	sub	sp, #16
 8018424:	af00      	add	r7, sp, #0
 8018426:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018428:	f001 fd46 	bl	8019eb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018434:	429a      	cmp	r2, r3
 8018436:	d102      	bne.n	801843e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018438:	2301      	movs	r3, #1
 801843a:	60fb      	str	r3, [r7, #12]
 801843c:	e001      	b.n	8018442 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801843e:	2300      	movs	r3, #0
 8018440:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018442:	f001 fd6b 	bl	8019f1c <vPortExitCritical>

	return xReturn;
 8018446:	68fb      	ldr	r3, [r7, #12]
}
 8018448:	4618      	mov	r0, r3
 801844a:	3710      	adds	r7, #16
 801844c:	46bd      	mov	sp, r7
 801844e:	bd80      	pop	{r7, pc}

08018450 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018450:	b480      	push	{r7}
 8018452:	b085      	sub	sp, #20
 8018454:	af00      	add	r7, sp, #0
 8018456:	6078      	str	r0, [r7, #4]
 8018458:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801845a:	2300      	movs	r3, #0
 801845c:	60fb      	str	r3, [r7, #12]
 801845e:	e014      	b.n	801848a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018460:	4a0f      	ldr	r2, [pc, #60]	@ (80184a0 <vQueueAddToRegistry+0x50>)
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d10b      	bne.n	8018484 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801846c:	490c      	ldr	r1, [pc, #48]	@ (80184a0 <vQueueAddToRegistry+0x50>)
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	683a      	ldr	r2, [r7, #0]
 8018472:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018476:	4a0a      	ldr	r2, [pc, #40]	@ (80184a0 <vQueueAddToRegistry+0x50>)
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	00db      	lsls	r3, r3, #3
 801847c:	4413      	add	r3, r2
 801847e:	687a      	ldr	r2, [r7, #4]
 8018480:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018482:	e006      	b.n	8018492 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	3301      	adds	r3, #1
 8018488:	60fb      	str	r3, [r7, #12]
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	2b07      	cmp	r3, #7
 801848e:	d9e7      	bls.n	8018460 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018490:	bf00      	nop
 8018492:	bf00      	nop
 8018494:	3714      	adds	r7, #20
 8018496:	46bd      	mov	sp, r7
 8018498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801849c:	4770      	bx	lr
 801849e:	bf00      	nop
 80184a0:	20008250 	.word	0x20008250

080184a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80184a4:	b580      	push	{r7, lr}
 80184a6:	b086      	sub	sp, #24
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	60f8      	str	r0, [r7, #12]
 80184ac:	60b9      	str	r1, [r7, #8]
 80184ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80184b4:	f001 fd00 	bl	8019eb8 <vPortEnterCritical>
 80184b8:	697b      	ldr	r3, [r7, #20]
 80184ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80184be:	b25b      	sxtb	r3, r3
 80184c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184c4:	d103      	bne.n	80184ce <vQueueWaitForMessageRestricted+0x2a>
 80184c6:	697b      	ldr	r3, [r7, #20]
 80184c8:	2200      	movs	r2, #0
 80184ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80184ce:	697b      	ldr	r3, [r7, #20]
 80184d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80184d4:	b25b      	sxtb	r3, r3
 80184d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184da:	d103      	bne.n	80184e4 <vQueueWaitForMessageRestricted+0x40>
 80184dc:	697b      	ldr	r3, [r7, #20]
 80184de:	2200      	movs	r2, #0
 80184e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80184e4:	f001 fd1a 	bl	8019f1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80184e8:	697b      	ldr	r3, [r7, #20]
 80184ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d106      	bne.n	80184fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80184f0:	697b      	ldr	r3, [r7, #20]
 80184f2:	3324      	adds	r3, #36	@ 0x24
 80184f4:	687a      	ldr	r2, [r7, #4]
 80184f6:	68b9      	ldr	r1, [r7, #8]
 80184f8:	4618      	mov	r0, r3
 80184fa:	f000 fc6d 	bl	8018dd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80184fe:	6978      	ldr	r0, [r7, #20]
 8018500:	f7ff ff26 	bl	8018350 <prvUnlockQueue>
	}
 8018504:	bf00      	nop
 8018506:	3718      	adds	r7, #24
 8018508:	46bd      	mov	sp, r7
 801850a:	bd80      	pop	{r7, pc}

0801850c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801850c:	b580      	push	{r7, lr}
 801850e:	b08e      	sub	sp, #56	@ 0x38
 8018510:	af04      	add	r7, sp, #16
 8018512:	60f8      	str	r0, [r7, #12]
 8018514:	60b9      	str	r1, [r7, #8]
 8018516:	607a      	str	r2, [r7, #4]
 8018518:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801851a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801851c:	2b00      	cmp	r3, #0
 801851e:	d10b      	bne.n	8018538 <xTaskCreateStatic+0x2c>
	__asm volatile
 8018520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018524:	f383 8811 	msr	BASEPRI, r3
 8018528:	f3bf 8f6f 	isb	sy
 801852c:	f3bf 8f4f 	dsb	sy
 8018530:	623b      	str	r3, [r7, #32]
}
 8018532:	bf00      	nop
 8018534:	bf00      	nop
 8018536:	e7fd      	b.n	8018534 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8018538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801853a:	2b00      	cmp	r3, #0
 801853c:	d10b      	bne.n	8018556 <xTaskCreateStatic+0x4a>
	__asm volatile
 801853e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018542:	f383 8811 	msr	BASEPRI, r3
 8018546:	f3bf 8f6f 	isb	sy
 801854a:	f3bf 8f4f 	dsb	sy
 801854e:	61fb      	str	r3, [r7, #28]
}
 8018550:	bf00      	nop
 8018552:	bf00      	nop
 8018554:	e7fd      	b.n	8018552 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8018556:	23a8      	movs	r3, #168	@ 0xa8
 8018558:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801855a:	693b      	ldr	r3, [r7, #16]
 801855c:	2ba8      	cmp	r3, #168	@ 0xa8
 801855e:	d00b      	beq.n	8018578 <xTaskCreateStatic+0x6c>
	__asm volatile
 8018560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018564:	f383 8811 	msr	BASEPRI, r3
 8018568:	f3bf 8f6f 	isb	sy
 801856c:	f3bf 8f4f 	dsb	sy
 8018570:	61bb      	str	r3, [r7, #24]
}
 8018572:	bf00      	nop
 8018574:	bf00      	nop
 8018576:	e7fd      	b.n	8018574 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018578:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801857a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801857c:	2b00      	cmp	r3, #0
 801857e:	d01e      	beq.n	80185be <xTaskCreateStatic+0xb2>
 8018580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018582:	2b00      	cmp	r3, #0
 8018584:	d01b      	beq.n	80185be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018588:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801858c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801858e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018592:	2202      	movs	r2, #2
 8018594:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018598:	2300      	movs	r3, #0
 801859a:	9303      	str	r3, [sp, #12]
 801859c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801859e:	9302      	str	r3, [sp, #8]
 80185a0:	f107 0314 	add.w	r3, r7, #20
 80185a4:	9301      	str	r3, [sp, #4]
 80185a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185a8:	9300      	str	r3, [sp, #0]
 80185aa:	683b      	ldr	r3, [r7, #0]
 80185ac:	687a      	ldr	r2, [r7, #4]
 80185ae:	68b9      	ldr	r1, [r7, #8]
 80185b0:	68f8      	ldr	r0, [r7, #12]
 80185b2:	f000 f851 	bl	8018658 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80185b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80185b8:	f000 f8f6 	bl	80187a8 <prvAddNewTaskToReadyList>
 80185bc:	e001      	b.n	80185c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80185be:	2300      	movs	r3, #0
 80185c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80185c2:	697b      	ldr	r3, [r7, #20]
	}
 80185c4:	4618      	mov	r0, r3
 80185c6:	3728      	adds	r7, #40	@ 0x28
 80185c8:	46bd      	mov	sp, r7
 80185ca:	bd80      	pop	{r7, pc}

080185cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b08c      	sub	sp, #48	@ 0x30
 80185d0:	af04      	add	r7, sp, #16
 80185d2:	60f8      	str	r0, [r7, #12]
 80185d4:	60b9      	str	r1, [r7, #8]
 80185d6:	603b      	str	r3, [r7, #0]
 80185d8:	4613      	mov	r3, r2
 80185da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80185dc:	88fb      	ldrh	r3, [r7, #6]
 80185de:	009b      	lsls	r3, r3, #2
 80185e0:	4618      	mov	r0, r3
 80185e2:	f001 fd8b 	bl	801a0fc <pvPortMalloc>
 80185e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80185e8:	697b      	ldr	r3, [r7, #20]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d00e      	beq.n	801860c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80185ee:	20a8      	movs	r0, #168	@ 0xa8
 80185f0:	f001 fd84 	bl	801a0fc <pvPortMalloc>
 80185f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80185f6:	69fb      	ldr	r3, [r7, #28]
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d003      	beq.n	8018604 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80185fc:	69fb      	ldr	r3, [r7, #28]
 80185fe:	697a      	ldr	r2, [r7, #20]
 8018600:	631a      	str	r2, [r3, #48]	@ 0x30
 8018602:	e005      	b.n	8018610 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018604:	6978      	ldr	r0, [r7, #20]
 8018606:	f001 fe47 	bl	801a298 <vPortFree>
 801860a:	e001      	b.n	8018610 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801860c:	2300      	movs	r3, #0
 801860e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018610:	69fb      	ldr	r3, [r7, #28]
 8018612:	2b00      	cmp	r3, #0
 8018614:	d017      	beq.n	8018646 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018616:	69fb      	ldr	r3, [r7, #28]
 8018618:	2200      	movs	r2, #0
 801861a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801861e:	88fa      	ldrh	r2, [r7, #6]
 8018620:	2300      	movs	r3, #0
 8018622:	9303      	str	r3, [sp, #12]
 8018624:	69fb      	ldr	r3, [r7, #28]
 8018626:	9302      	str	r3, [sp, #8]
 8018628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801862a:	9301      	str	r3, [sp, #4]
 801862c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801862e:	9300      	str	r3, [sp, #0]
 8018630:	683b      	ldr	r3, [r7, #0]
 8018632:	68b9      	ldr	r1, [r7, #8]
 8018634:	68f8      	ldr	r0, [r7, #12]
 8018636:	f000 f80f 	bl	8018658 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801863a:	69f8      	ldr	r0, [r7, #28]
 801863c:	f000 f8b4 	bl	80187a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018640:	2301      	movs	r3, #1
 8018642:	61bb      	str	r3, [r7, #24]
 8018644:	e002      	b.n	801864c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018646:	f04f 33ff 	mov.w	r3, #4294967295
 801864a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801864c:	69bb      	ldr	r3, [r7, #24]
	}
 801864e:	4618      	mov	r0, r3
 8018650:	3720      	adds	r7, #32
 8018652:	46bd      	mov	sp, r7
 8018654:	bd80      	pop	{r7, pc}
	...

08018658 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b088      	sub	sp, #32
 801865c:	af00      	add	r7, sp, #0
 801865e:	60f8      	str	r0, [r7, #12]
 8018660:	60b9      	str	r1, [r7, #8]
 8018662:	607a      	str	r2, [r7, #4]
 8018664:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018668:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	009b      	lsls	r3, r3, #2
 801866e:	461a      	mov	r2, r3
 8018670:	21a5      	movs	r1, #165	@ 0xa5
 8018672:	f002 f997 	bl	801a9a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018678:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8018680:	3b01      	subs	r3, #1
 8018682:	009b      	lsls	r3, r3, #2
 8018684:	4413      	add	r3, r2
 8018686:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018688:	69bb      	ldr	r3, [r7, #24]
 801868a:	f023 0307 	bic.w	r3, r3, #7
 801868e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018690:	69bb      	ldr	r3, [r7, #24]
 8018692:	f003 0307 	and.w	r3, r3, #7
 8018696:	2b00      	cmp	r3, #0
 8018698:	d00b      	beq.n	80186b2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801869a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801869e:	f383 8811 	msr	BASEPRI, r3
 80186a2:	f3bf 8f6f 	isb	sy
 80186a6:	f3bf 8f4f 	dsb	sy
 80186aa:	617b      	str	r3, [r7, #20]
}
 80186ac:	bf00      	nop
 80186ae:	bf00      	nop
 80186b0:	e7fd      	b.n	80186ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80186b2:	68bb      	ldr	r3, [r7, #8]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d01f      	beq.n	80186f8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80186b8:	2300      	movs	r3, #0
 80186ba:	61fb      	str	r3, [r7, #28]
 80186bc:	e012      	b.n	80186e4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80186be:	68ba      	ldr	r2, [r7, #8]
 80186c0:	69fb      	ldr	r3, [r7, #28]
 80186c2:	4413      	add	r3, r2
 80186c4:	7819      	ldrb	r1, [r3, #0]
 80186c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80186c8:	69fb      	ldr	r3, [r7, #28]
 80186ca:	4413      	add	r3, r2
 80186cc:	3334      	adds	r3, #52	@ 0x34
 80186ce:	460a      	mov	r2, r1
 80186d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80186d2:	68ba      	ldr	r2, [r7, #8]
 80186d4:	69fb      	ldr	r3, [r7, #28]
 80186d6:	4413      	add	r3, r2
 80186d8:	781b      	ldrb	r3, [r3, #0]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d006      	beq.n	80186ec <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80186de:	69fb      	ldr	r3, [r7, #28]
 80186e0:	3301      	adds	r3, #1
 80186e2:	61fb      	str	r3, [r7, #28]
 80186e4:	69fb      	ldr	r3, [r7, #28]
 80186e6:	2b0f      	cmp	r3, #15
 80186e8:	d9e9      	bls.n	80186be <prvInitialiseNewTask+0x66>
 80186ea:	e000      	b.n	80186ee <prvInitialiseNewTask+0x96>
			{
				break;
 80186ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80186ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186f0:	2200      	movs	r2, #0
 80186f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80186f6:	e003      	b.n	8018700 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80186f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186fa:	2200      	movs	r2, #0
 80186fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018702:	2b37      	cmp	r3, #55	@ 0x37
 8018704:	d901      	bls.n	801870a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018706:	2337      	movs	r3, #55	@ 0x37
 8018708:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801870a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801870c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801870e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018712:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018714:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018718:	2200      	movs	r2, #0
 801871a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801871c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801871e:	3304      	adds	r3, #4
 8018720:	4618      	mov	r0, r3
 8018722:	f7fe fec7 	bl	80174b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018728:	3318      	adds	r3, #24
 801872a:	4618      	mov	r0, r3
 801872c:	f7fe fec2 	bl	80174b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018734:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018738:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801873c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801873e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018744:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018748:	2200      	movs	r2, #0
 801874a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801874e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018750:	2200      	movs	r2, #0
 8018752:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8018756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018758:	3354      	adds	r3, #84	@ 0x54
 801875a:	224c      	movs	r2, #76	@ 0x4c
 801875c:	2100      	movs	r1, #0
 801875e:	4618      	mov	r0, r3
 8018760:	f002 f920 	bl	801a9a4 <memset>
 8018764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018766:	4a0d      	ldr	r2, [pc, #52]	@ (801879c <prvInitialiseNewTask+0x144>)
 8018768:	659a      	str	r2, [r3, #88]	@ 0x58
 801876a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801876c:	4a0c      	ldr	r2, [pc, #48]	@ (80187a0 <prvInitialiseNewTask+0x148>)
 801876e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8018770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018772:	4a0c      	ldr	r2, [pc, #48]	@ (80187a4 <prvInitialiseNewTask+0x14c>)
 8018774:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018776:	683a      	ldr	r2, [r7, #0]
 8018778:	68f9      	ldr	r1, [r7, #12]
 801877a:	69b8      	ldr	r0, [r7, #24]
 801877c:	f001 fa6a 	bl	8019c54 <pxPortInitialiseStack>
 8018780:	4602      	mov	r2, r0
 8018782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018784:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018788:	2b00      	cmp	r3, #0
 801878a:	d002      	beq.n	8018792 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801878c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801878e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018790:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018792:	bf00      	nop
 8018794:	3720      	adds	r7, #32
 8018796:	46bd      	mov	sp, r7
 8018798:	bd80      	pop	{r7, pc}
 801879a:	bf00      	nop
 801879c:	2000a0ec 	.word	0x2000a0ec
 80187a0:	2000a154 	.word	0x2000a154
 80187a4:	2000a1bc 	.word	0x2000a1bc

080187a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b082      	sub	sp, #8
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80187b0:	f001 fb82 	bl	8019eb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80187b4:	4b2d      	ldr	r3, [pc, #180]	@ (801886c <prvAddNewTaskToReadyList+0xc4>)
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	3301      	adds	r3, #1
 80187ba:	4a2c      	ldr	r2, [pc, #176]	@ (801886c <prvAddNewTaskToReadyList+0xc4>)
 80187bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80187be:	4b2c      	ldr	r3, [pc, #176]	@ (8018870 <prvAddNewTaskToReadyList+0xc8>)
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d109      	bne.n	80187da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80187c6:	4a2a      	ldr	r2, [pc, #168]	@ (8018870 <prvAddNewTaskToReadyList+0xc8>)
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80187cc:	4b27      	ldr	r3, [pc, #156]	@ (801886c <prvAddNewTaskToReadyList+0xc4>)
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	2b01      	cmp	r3, #1
 80187d2:	d110      	bne.n	80187f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80187d4:	f000 fc2e 	bl	8019034 <prvInitialiseTaskLists>
 80187d8:	e00d      	b.n	80187f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80187da:	4b26      	ldr	r3, [pc, #152]	@ (8018874 <prvAddNewTaskToReadyList+0xcc>)
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d109      	bne.n	80187f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80187e2:	4b23      	ldr	r3, [pc, #140]	@ (8018870 <prvAddNewTaskToReadyList+0xc8>)
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187ec:	429a      	cmp	r2, r3
 80187ee:	d802      	bhi.n	80187f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80187f0:	4a1f      	ldr	r2, [pc, #124]	@ (8018870 <prvAddNewTaskToReadyList+0xc8>)
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80187f6:	4b20      	ldr	r3, [pc, #128]	@ (8018878 <prvAddNewTaskToReadyList+0xd0>)
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	3301      	adds	r3, #1
 80187fc:	4a1e      	ldr	r2, [pc, #120]	@ (8018878 <prvAddNewTaskToReadyList+0xd0>)
 80187fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018800:	4b1d      	ldr	r3, [pc, #116]	@ (8018878 <prvAddNewTaskToReadyList+0xd0>)
 8018802:	681a      	ldr	r2, [r3, #0]
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801880c:	4b1b      	ldr	r3, [pc, #108]	@ (801887c <prvAddNewTaskToReadyList+0xd4>)
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	429a      	cmp	r2, r3
 8018812:	d903      	bls.n	801881c <prvAddNewTaskToReadyList+0x74>
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018818:	4a18      	ldr	r2, [pc, #96]	@ (801887c <prvAddNewTaskToReadyList+0xd4>)
 801881a:	6013      	str	r3, [r2, #0]
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018820:	4613      	mov	r3, r2
 8018822:	009b      	lsls	r3, r3, #2
 8018824:	4413      	add	r3, r2
 8018826:	009b      	lsls	r3, r3, #2
 8018828:	4a15      	ldr	r2, [pc, #84]	@ (8018880 <prvAddNewTaskToReadyList+0xd8>)
 801882a:	441a      	add	r2, r3
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	3304      	adds	r3, #4
 8018830:	4619      	mov	r1, r3
 8018832:	4610      	mov	r0, r2
 8018834:	f7fe fe4b 	bl	80174ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018838:	f001 fb70 	bl	8019f1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801883c:	4b0d      	ldr	r3, [pc, #52]	@ (8018874 <prvAddNewTaskToReadyList+0xcc>)
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d00e      	beq.n	8018862 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018844:	4b0a      	ldr	r3, [pc, #40]	@ (8018870 <prvAddNewTaskToReadyList+0xc8>)
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801884e:	429a      	cmp	r2, r3
 8018850:	d207      	bcs.n	8018862 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018852:	4b0c      	ldr	r3, [pc, #48]	@ (8018884 <prvAddNewTaskToReadyList+0xdc>)
 8018854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018858:	601a      	str	r2, [r3, #0]
 801885a:	f3bf 8f4f 	dsb	sy
 801885e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018862:	bf00      	nop
 8018864:	3708      	adds	r7, #8
 8018866:	46bd      	mov	sp, r7
 8018868:	bd80      	pop	{r7, pc}
 801886a:	bf00      	nop
 801886c:	20008764 	.word	0x20008764
 8018870:	20008290 	.word	0x20008290
 8018874:	20008770 	.word	0x20008770
 8018878:	20008780 	.word	0x20008780
 801887c:	2000876c 	.word	0x2000876c
 8018880:	20008294 	.word	0x20008294
 8018884:	e000ed04 	.word	0xe000ed04

08018888 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018888:	b580      	push	{r7, lr}
 801888a:	b084      	sub	sp, #16
 801888c:	af00      	add	r7, sp, #0
 801888e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018890:	2300      	movs	r3, #0
 8018892:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d018      	beq.n	80188cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801889a:	4b14      	ldr	r3, [pc, #80]	@ (80188ec <vTaskDelay+0x64>)
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d00b      	beq.n	80188ba <vTaskDelay+0x32>
	__asm volatile
 80188a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80188a6:	f383 8811 	msr	BASEPRI, r3
 80188aa:	f3bf 8f6f 	isb	sy
 80188ae:	f3bf 8f4f 	dsb	sy
 80188b2:	60bb      	str	r3, [r7, #8]
}
 80188b4:	bf00      	nop
 80188b6:	bf00      	nop
 80188b8:	e7fd      	b.n	80188b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80188ba:	f000 f88b 	bl	80189d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80188be:	2100      	movs	r1, #0
 80188c0:	6878      	ldr	r0, [r7, #4]
 80188c2:	f000 fe19 	bl	80194f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80188c6:	f000 f893 	bl	80189f0 <xTaskResumeAll>
 80188ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d107      	bne.n	80188e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80188d2:	4b07      	ldr	r3, [pc, #28]	@ (80188f0 <vTaskDelay+0x68>)
 80188d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80188d8:	601a      	str	r2, [r3, #0]
 80188da:	f3bf 8f4f 	dsb	sy
 80188de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80188e2:	bf00      	nop
 80188e4:	3710      	adds	r7, #16
 80188e6:	46bd      	mov	sp, r7
 80188e8:	bd80      	pop	{r7, pc}
 80188ea:	bf00      	nop
 80188ec:	2000878c 	.word	0x2000878c
 80188f0:	e000ed04 	.word	0xe000ed04

080188f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b08a      	sub	sp, #40	@ 0x28
 80188f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80188fa:	2300      	movs	r3, #0
 80188fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80188fe:	2300      	movs	r3, #0
 8018900:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018902:	463a      	mov	r2, r7
 8018904:	1d39      	adds	r1, r7, #4
 8018906:	f107 0308 	add.w	r3, r7, #8
 801890a:	4618      	mov	r0, r3
 801890c:	f7fe fd7e 	bl	801740c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018910:	6839      	ldr	r1, [r7, #0]
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	68ba      	ldr	r2, [r7, #8]
 8018916:	9202      	str	r2, [sp, #8]
 8018918:	9301      	str	r3, [sp, #4]
 801891a:	2300      	movs	r3, #0
 801891c:	9300      	str	r3, [sp, #0]
 801891e:	2300      	movs	r3, #0
 8018920:	460a      	mov	r2, r1
 8018922:	4924      	ldr	r1, [pc, #144]	@ (80189b4 <vTaskStartScheduler+0xc0>)
 8018924:	4824      	ldr	r0, [pc, #144]	@ (80189b8 <vTaskStartScheduler+0xc4>)
 8018926:	f7ff fdf1 	bl	801850c <xTaskCreateStatic>
 801892a:	4603      	mov	r3, r0
 801892c:	4a23      	ldr	r2, [pc, #140]	@ (80189bc <vTaskStartScheduler+0xc8>)
 801892e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018930:	4b22      	ldr	r3, [pc, #136]	@ (80189bc <vTaskStartScheduler+0xc8>)
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d002      	beq.n	801893e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018938:	2301      	movs	r3, #1
 801893a:	617b      	str	r3, [r7, #20]
 801893c:	e001      	b.n	8018942 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801893e:	2300      	movs	r3, #0
 8018940:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018942:	697b      	ldr	r3, [r7, #20]
 8018944:	2b01      	cmp	r3, #1
 8018946:	d102      	bne.n	801894e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018948:	f000 fe2a 	bl	80195a0 <xTimerCreateTimerTask>
 801894c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801894e:	697b      	ldr	r3, [r7, #20]
 8018950:	2b01      	cmp	r3, #1
 8018952:	d11b      	bne.n	801898c <vTaskStartScheduler+0x98>
	__asm volatile
 8018954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018958:	f383 8811 	msr	BASEPRI, r3
 801895c:	f3bf 8f6f 	isb	sy
 8018960:	f3bf 8f4f 	dsb	sy
 8018964:	613b      	str	r3, [r7, #16]
}
 8018966:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018968:	4b15      	ldr	r3, [pc, #84]	@ (80189c0 <vTaskStartScheduler+0xcc>)
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	3354      	adds	r3, #84	@ 0x54
 801896e:	4a15      	ldr	r2, [pc, #84]	@ (80189c4 <vTaskStartScheduler+0xd0>)
 8018970:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018972:	4b15      	ldr	r3, [pc, #84]	@ (80189c8 <vTaskStartScheduler+0xd4>)
 8018974:	f04f 32ff 	mov.w	r2, #4294967295
 8018978:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801897a:	4b14      	ldr	r3, [pc, #80]	@ (80189cc <vTaskStartScheduler+0xd8>)
 801897c:	2201      	movs	r2, #1
 801897e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018980:	4b13      	ldr	r3, [pc, #76]	@ (80189d0 <vTaskStartScheduler+0xdc>)
 8018982:	2200      	movs	r2, #0
 8018984:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018986:	f001 f9f3 	bl	8019d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801898a:	e00f      	b.n	80189ac <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801898c:	697b      	ldr	r3, [r7, #20]
 801898e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018992:	d10b      	bne.n	80189ac <vTaskStartScheduler+0xb8>
	__asm volatile
 8018994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018998:	f383 8811 	msr	BASEPRI, r3
 801899c:	f3bf 8f6f 	isb	sy
 80189a0:	f3bf 8f4f 	dsb	sy
 80189a4:	60fb      	str	r3, [r7, #12]
}
 80189a6:	bf00      	nop
 80189a8:	bf00      	nop
 80189aa:	e7fd      	b.n	80189a8 <vTaskStartScheduler+0xb4>
}
 80189ac:	bf00      	nop
 80189ae:	3718      	adds	r7, #24
 80189b0:	46bd      	mov	sp, r7
 80189b2:	bd80      	pop	{r7, pc}
 80189b4:	0801b7b0 	.word	0x0801b7b0
 80189b8:	08019005 	.word	0x08019005
 80189bc:	20008788 	.word	0x20008788
 80189c0:	20008290 	.word	0x20008290
 80189c4:	20000094 	.word	0x20000094
 80189c8:	20008784 	.word	0x20008784
 80189cc:	20008770 	.word	0x20008770
 80189d0:	20008768 	.word	0x20008768

080189d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80189d4:	b480      	push	{r7}
 80189d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80189d8:	4b04      	ldr	r3, [pc, #16]	@ (80189ec <vTaskSuspendAll+0x18>)
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	3301      	adds	r3, #1
 80189de:	4a03      	ldr	r2, [pc, #12]	@ (80189ec <vTaskSuspendAll+0x18>)
 80189e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80189e2:	bf00      	nop
 80189e4:	46bd      	mov	sp, r7
 80189e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189ea:	4770      	bx	lr
 80189ec:	2000878c 	.word	0x2000878c

080189f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80189f0:	b580      	push	{r7, lr}
 80189f2:	b084      	sub	sp, #16
 80189f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80189f6:	2300      	movs	r3, #0
 80189f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80189fa:	2300      	movs	r3, #0
 80189fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80189fe:	4b42      	ldr	r3, [pc, #264]	@ (8018b08 <xTaskResumeAll+0x118>)
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d10b      	bne.n	8018a1e <xTaskResumeAll+0x2e>
	__asm volatile
 8018a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a0a:	f383 8811 	msr	BASEPRI, r3
 8018a0e:	f3bf 8f6f 	isb	sy
 8018a12:	f3bf 8f4f 	dsb	sy
 8018a16:	603b      	str	r3, [r7, #0]
}
 8018a18:	bf00      	nop
 8018a1a:	bf00      	nop
 8018a1c:	e7fd      	b.n	8018a1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018a1e:	f001 fa4b 	bl	8019eb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018a22:	4b39      	ldr	r3, [pc, #228]	@ (8018b08 <xTaskResumeAll+0x118>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	3b01      	subs	r3, #1
 8018a28:	4a37      	ldr	r2, [pc, #220]	@ (8018b08 <xTaskResumeAll+0x118>)
 8018a2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018a2c:	4b36      	ldr	r3, [pc, #216]	@ (8018b08 <xTaskResumeAll+0x118>)
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d162      	bne.n	8018afa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018a34:	4b35      	ldr	r3, [pc, #212]	@ (8018b0c <xTaskResumeAll+0x11c>)
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d05e      	beq.n	8018afa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018a3c:	e02f      	b.n	8018a9e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a3e:	4b34      	ldr	r3, [pc, #208]	@ (8018b10 <xTaskResumeAll+0x120>)
 8018a40:	68db      	ldr	r3, [r3, #12]
 8018a42:	68db      	ldr	r3, [r3, #12]
 8018a44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	3318      	adds	r3, #24
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	f7fe fd9c 	bl	8017588 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	3304      	adds	r3, #4
 8018a54:	4618      	mov	r0, r3
 8018a56:	f7fe fd97 	bl	8017588 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8018b14 <xTaskResumeAll+0x124>)
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	429a      	cmp	r2, r3
 8018a64:	d903      	bls.n	8018a6e <xTaskResumeAll+0x7e>
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8018b14 <xTaskResumeAll+0x124>)
 8018a6c:	6013      	str	r3, [r2, #0]
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a72:	4613      	mov	r3, r2
 8018a74:	009b      	lsls	r3, r3, #2
 8018a76:	4413      	add	r3, r2
 8018a78:	009b      	lsls	r3, r3, #2
 8018a7a:	4a27      	ldr	r2, [pc, #156]	@ (8018b18 <xTaskResumeAll+0x128>)
 8018a7c:	441a      	add	r2, r3
 8018a7e:	68fb      	ldr	r3, [r7, #12]
 8018a80:	3304      	adds	r3, #4
 8018a82:	4619      	mov	r1, r3
 8018a84:	4610      	mov	r0, r2
 8018a86:	f7fe fd22 	bl	80174ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a8e:	4b23      	ldr	r3, [pc, #140]	@ (8018b1c <xTaskResumeAll+0x12c>)
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a94:	429a      	cmp	r2, r3
 8018a96:	d302      	bcc.n	8018a9e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8018a98:	4b21      	ldr	r3, [pc, #132]	@ (8018b20 <xTaskResumeAll+0x130>)
 8018a9a:	2201      	movs	r2, #1
 8018a9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8018b10 <xTaskResumeAll+0x120>)
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d1cb      	bne.n	8018a3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d001      	beq.n	8018ab0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018aac:	f000 fb66 	bl	801917c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8018b24 <xTaskResumeAll+0x134>)
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d010      	beq.n	8018ade <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018abc:	f000 f846 	bl	8018b4c <xTaskIncrementTick>
 8018ac0:	4603      	mov	r3, r0
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d002      	beq.n	8018acc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8018ac6:	4b16      	ldr	r3, [pc, #88]	@ (8018b20 <xTaskResumeAll+0x130>)
 8018ac8:	2201      	movs	r2, #1
 8018aca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	3b01      	subs	r3, #1
 8018ad0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d1f1      	bne.n	8018abc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8018ad8:	4b12      	ldr	r3, [pc, #72]	@ (8018b24 <xTaskResumeAll+0x134>)
 8018ada:	2200      	movs	r2, #0
 8018adc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018ade:	4b10      	ldr	r3, [pc, #64]	@ (8018b20 <xTaskResumeAll+0x130>)
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d009      	beq.n	8018afa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018ae6:	2301      	movs	r3, #1
 8018ae8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018aea:	4b0f      	ldr	r3, [pc, #60]	@ (8018b28 <xTaskResumeAll+0x138>)
 8018aec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018af0:	601a      	str	r2, [r3, #0]
 8018af2:	f3bf 8f4f 	dsb	sy
 8018af6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018afa:	f001 fa0f 	bl	8019f1c <vPortExitCritical>

	return xAlreadyYielded;
 8018afe:	68bb      	ldr	r3, [r7, #8]
}
 8018b00:	4618      	mov	r0, r3
 8018b02:	3710      	adds	r7, #16
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}
 8018b08:	2000878c 	.word	0x2000878c
 8018b0c:	20008764 	.word	0x20008764
 8018b10:	20008724 	.word	0x20008724
 8018b14:	2000876c 	.word	0x2000876c
 8018b18:	20008294 	.word	0x20008294
 8018b1c:	20008290 	.word	0x20008290
 8018b20:	20008778 	.word	0x20008778
 8018b24:	20008774 	.word	0x20008774
 8018b28:	e000ed04 	.word	0xe000ed04

08018b2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018b2c:	b480      	push	{r7}
 8018b2e:	b083      	sub	sp, #12
 8018b30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018b32:	4b05      	ldr	r3, [pc, #20]	@ (8018b48 <xTaskGetTickCount+0x1c>)
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018b38:	687b      	ldr	r3, [r7, #4]
}
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	370c      	adds	r7, #12
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b44:	4770      	bx	lr
 8018b46:	bf00      	nop
 8018b48:	20008768 	.word	0x20008768

08018b4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b086      	sub	sp, #24
 8018b50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018b52:	2300      	movs	r3, #0
 8018b54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b56:	4b4f      	ldr	r3, [pc, #316]	@ (8018c94 <xTaskIncrementTick+0x148>)
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	f040 8090 	bne.w	8018c80 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018b60:	4b4d      	ldr	r3, [pc, #308]	@ (8018c98 <xTaskIncrementTick+0x14c>)
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	3301      	adds	r3, #1
 8018b66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018b68:	4a4b      	ldr	r2, [pc, #300]	@ (8018c98 <xTaskIncrementTick+0x14c>)
 8018b6a:	693b      	ldr	r3, [r7, #16]
 8018b6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018b6e:	693b      	ldr	r3, [r7, #16]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d121      	bne.n	8018bb8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8018b74:	4b49      	ldr	r3, [pc, #292]	@ (8018c9c <xTaskIncrementTick+0x150>)
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d00b      	beq.n	8018b96 <xTaskIncrementTick+0x4a>
	__asm volatile
 8018b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b82:	f383 8811 	msr	BASEPRI, r3
 8018b86:	f3bf 8f6f 	isb	sy
 8018b8a:	f3bf 8f4f 	dsb	sy
 8018b8e:	603b      	str	r3, [r7, #0]
}
 8018b90:	bf00      	nop
 8018b92:	bf00      	nop
 8018b94:	e7fd      	b.n	8018b92 <xTaskIncrementTick+0x46>
 8018b96:	4b41      	ldr	r3, [pc, #260]	@ (8018c9c <xTaskIncrementTick+0x150>)
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	60fb      	str	r3, [r7, #12]
 8018b9c:	4b40      	ldr	r3, [pc, #256]	@ (8018ca0 <xTaskIncrementTick+0x154>)
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	4a3e      	ldr	r2, [pc, #248]	@ (8018c9c <xTaskIncrementTick+0x150>)
 8018ba2:	6013      	str	r3, [r2, #0]
 8018ba4:	4a3e      	ldr	r2, [pc, #248]	@ (8018ca0 <xTaskIncrementTick+0x154>)
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	6013      	str	r3, [r2, #0]
 8018baa:	4b3e      	ldr	r3, [pc, #248]	@ (8018ca4 <xTaskIncrementTick+0x158>)
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	3301      	adds	r3, #1
 8018bb0:	4a3c      	ldr	r2, [pc, #240]	@ (8018ca4 <xTaskIncrementTick+0x158>)
 8018bb2:	6013      	str	r3, [r2, #0]
 8018bb4:	f000 fae2 	bl	801917c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018bb8:	4b3b      	ldr	r3, [pc, #236]	@ (8018ca8 <xTaskIncrementTick+0x15c>)
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	693a      	ldr	r2, [r7, #16]
 8018bbe:	429a      	cmp	r2, r3
 8018bc0:	d349      	bcc.n	8018c56 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018bc2:	4b36      	ldr	r3, [pc, #216]	@ (8018c9c <xTaskIncrementTick+0x150>)
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d104      	bne.n	8018bd6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018bcc:	4b36      	ldr	r3, [pc, #216]	@ (8018ca8 <xTaskIncrementTick+0x15c>)
 8018bce:	f04f 32ff 	mov.w	r2, #4294967295
 8018bd2:	601a      	str	r2, [r3, #0]
					break;
 8018bd4:	e03f      	b.n	8018c56 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018bd6:	4b31      	ldr	r3, [pc, #196]	@ (8018c9c <xTaskIncrementTick+0x150>)
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	68db      	ldr	r3, [r3, #12]
 8018bdc:	68db      	ldr	r3, [r3, #12]
 8018bde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018be0:	68bb      	ldr	r3, [r7, #8]
 8018be2:	685b      	ldr	r3, [r3, #4]
 8018be4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018be6:	693a      	ldr	r2, [r7, #16]
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	429a      	cmp	r2, r3
 8018bec:	d203      	bcs.n	8018bf6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018bee:	4a2e      	ldr	r2, [pc, #184]	@ (8018ca8 <xTaskIncrementTick+0x15c>)
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018bf4:	e02f      	b.n	8018c56 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018bf6:	68bb      	ldr	r3, [r7, #8]
 8018bf8:	3304      	adds	r3, #4
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f7fe fcc4 	bl	8017588 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018c00:	68bb      	ldr	r3, [r7, #8]
 8018c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d004      	beq.n	8018c12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018c08:	68bb      	ldr	r3, [r7, #8]
 8018c0a:	3318      	adds	r3, #24
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	f7fe fcbb 	bl	8017588 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018c12:	68bb      	ldr	r3, [r7, #8]
 8018c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018c16:	4b25      	ldr	r3, [pc, #148]	@ (8018cac <xTaskIncrementTick+0x160>)
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	429a      	cmp	r2, r3
 8018c1c:	d903      	bls.n	8018c26 <xTaskIncrementTick+0xda>
 8018c1e:	68bb      	ldr	r3, [r7, #8]
 8018c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c22:	4a22      	ldr	r2, [pc, #136]	@ (8018cac <xTaskIncrementTick+0x160>)
 8018c24:	6013      	str	r3, [r2, #0]
 8018c26:	68bb      	ldr	r3, [r7, #8]
 8018c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018c2a:	4613      	mov	r3, r2
 8018c2c:	009b      	lsls	r3, r3, #2
 8018c2e:	4413      	add	r3, r2
 8018c30:	009b      	lsls	r3, r3, #2
 8018c32:	4a1f      	ldr	r2, [pc, #124]	@ (8018cb0 <xTaskIncrementTick+0x164>)
 8018c34:	441a      	add	r2, r3
 8018c36:	68bb      	ldr	r3, [r7, #8]
 8018c38:	3304      	adds	r3, #4
 8018c3a:	4619      	mov	r1, r3
 8018c3c:	4610      	mov	r0, r2
 8018c3e:	f7fe fc46 	bl	80174ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018c42:	68bb      	ldr	r3, [r7, #8]
 8018c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018c46:	4b1b      	ldr	r3, [pc, #108]	@ (8018cb4 <xTaskIncrementTick+0x168>)
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c4c:	429a      	cmp	r2, r3
 8018c4e:	d3b8      	bcc.n	8018bc2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8018c50:	2301      	movs	r3, #1
 8018c52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018c54:	e7b5      	b.n	8018bc2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018c56:	4b17      	ldr	r3, [pc, #92]	@ (8018cb4 <xTaskIncrementTick+0x168>)
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018c5c:	4914      	ldr	r1, [pc, #80]	@ (8018cb0 <xTaskIncrementTick+0x164>)
 8018c5e:	4613      	mov	r3, r2
 8018c60:	009b      	lsls	r3, r3, #2
 8018c62:	4413      	add	r3, r2
 8018c64:	009b      	lsls	r3, r3, #2
 8018c66:	440b      	add	r3, r1
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	2b01      	cmp	r3, #1
 8018c6c:	d901      	bls.n	8018c72 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8018c6e:	2301      	movs	r3, #1
 8018c70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018c72:	4b11      	ldr	r3, [pc, #68]	@ (8018cb8 <xTaskIncrementTick+0x16c>)
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d007      	beq.n	8018c8a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8018c7a:	2301      	movs	r3, #1
 8018c7c:	617b      	str	r3, [r7, #20]
 8018c7e:	e004      	b.n	8018c8a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018c80:	4b0e      	ldr	r3, [pc, #56]	@ (8018cbc <xTaskIncrementTick+0x170>)
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	3301      	adds	r3, #1
 8018c86:	4a0d      	ldr	r2, [pc, #52]	@ (8018cbc <xTaskIncrementTick+0x170>)
 8018c88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018c8a:	697b      	ldr	r3, [r7, #20]
}
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	3718      	adds	r7, #24
 8018c90:	46bd      	mov	sp, r7
 8018c92:	bd80      	pop	{r7, pc}
 8018c94:	2000878c 	.word	0x2000878c
 8018c98:	20008768 	.word	0x20008768
 8018c9c:	2000871c 	.word	0x2000871c
 8018ca0:	20008720 	.word	0x20008720
 8018ca4:	2000877c 	.word	0x2000877c
 8018ca8:	20008784 	.word	0x20008784
 8018cac:	2000876c 	.word	0x2000876c
 8018cb0:	20008294 	.word	0x20008294
 8018cb4:	20008290 	.word	0x20008290
 8018cb8:	20008778 	.word	0x20008778
 8018cbc:	20008774 	.word	0x20008774

08018cc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018cc0:	b480      	push	{r7}
 8018cc2:	b085      	sub	sp, #20
 8018cc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018cc6:	4b2b      	ldr	r3, [pc, #172]	@ (8018d74 <vTaskSwitchContext+0xb4>)
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d003      	beq.n	8018cd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018cce:	4b2a      	ldr	r3, [pc, #168]	@ (8018d78 <vTaskSwitchContext+0xb8>)
 8018cd0:	2201      	movs	r2, #1
 8018cd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018cd4:	e047      	b.n	8018d66 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8018cd6:	4b28      	ldr	r3, [pc, #160]	@ (8018d78 <vTaskSwitchContext+0xb8>)
 8018cd8:	2200      	movs	r2, #0
 8018cda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018cdc:	4b27      	ldr	r3, [pc, #156]	@ (8018d7c <vTaskSwitchContext+0xbc>)
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	60fb      	str	r3, [r7, #12]
 8018ce2:	e011      	b.n	8018d08 <vTaskSwitchContext+0x48>
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d10b      	bne.n	8018d02 <vTaskSwitchContext+0x42>
	__asm volatile
 8018cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018cee:	f383 8811 	msr	BASEPRI, r3
 8018cf2:	f3bf 8f6f 	isb	sy
 8018cf6:	f3bf 8f4f 	dsb	sy
 8018cfa:	607b      	str	r3, [r7, #4]
}
 8018cfc:	bf00      	nop
 8018cfe:	bf00      	nop
 8018d00:	e7fd      	b.n	8018cfe <vTaskSwitchContext+0x3e>
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	3b01      	subs	r3, #1
 8018d06:	60fb      	str	r3, [r7, #12]
 8018d08:	491d      	ldr	r1, [pc, #116]	@ (8018d80 <vTaskSwitchContext+0xc0>)
 8018d0a:	68fa      	ldr	r2, [r7, #12]
 8018d0c:	4613      	mov	r3, r2
 8018d0e:	009b      	lsls	r3, r3, #2
 8018d10:	4413      	add	r3, r2
 8018d12:	009b      	lsls	r3, r3, #2
 8018d14:	440b      	add	r3, r1
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d0e3      	beq.n	8018ce4 <vTaskSwitchContext+0x24>
 8018d1c:	68fa      	ldr	r2, [r7, #12]
 8018d1e:	4613      	mov	r3, r2
 8018d20:	009b      	lsls	r3, r3, #2
 8018d22:	4413      	add	r3, r2
 8018d24:	009b      	lsls	r3, r3, #2
 8018d26:	4a16      	ldr	r2, [pc, #88]	@ (8018d80 <vTaskSwitchContext+0xc0>)
 8018d28:	4413      	add	r3, r2
 8018d2a:	60bb      	str	r3, [r7, #8]
 8018d2c:	68bb      	ldr	r3, [r7, #8]
 8018d2e:	685b      	ldr	r3, [r3, #4]
 8018d30:	685a      	ldr	r2, [r3, #4]
 8018d32:	68bb      	ldr	r3, [r7, #8]
 8018d34:	605a      	str	r2, [r3, #4]
 8018d36:	68bb      	ldr	r3, [r7, #8]
 8018d38:	685a      	ldr	r2, [r3, #4]
 8018d3a:	68bb      	ldr	r3, [r7, #8]
 8018d3c:	3308      	adds	r3, #8
 8018d3e:	429a      	cmp	r2, r3
 8018d40:	d104      	bne.n	8018d4c <vTaskSwitchContext+0x8c>
 8018d42:	68bb      	ldr	r3, [r7, #8]
 8018d44:	685b      	ldr	r3, [r3, #4]
 8018d46:	685a      	ldr	r2, [r3, #4]
 8018d48:	68bb      	ldr	r3, [r7, #8]
 8018d4a:	605a      	str	r2, [r3, #4]
 8018d4c:	68bb      	ldr	r3, [r7, #8]
 8018d4e:	685b      	ldr	r3, [r3, #4]
 8018d50:	68db      	ldr	r3, [r3, #12]
 8018d52:	4a0c      	ldr	r2, [pc, #48]	@ (8018d84 <vTaskSwitchContext+0xc4>)
 8018d54:	6013      	str	r3, [r2, #0]
 8018d56:	4a09      	ldr	r2, [pc, #36]	@ (8018d7c <vTaskSwitchContext+0xbc>)
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018d5c:	4b09      	ldr	r3, [pc, #36]	@ (8018d84 <vTaskSwitchContext+0xc4>)
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	3354      	adds	r3, #84	@ 0x54
 8018d62:	4a09      	ldr	r2, [pc, #36]	@ (8018d88 <vTaskSwitchContext+0xc8>)
 8018d64:	6013      	str	r3, [r2, #0]
}
 8018d66:	bf00      	nop
 8018d68:	3714      	adds	r7, #20
 8018d6a:	46bd      	mov	sp, r7
 8018d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d70:	4770      	bx	lr
 8018d72:	bf00      	nop
 8018d74:	2000878c 	.word	0x2000878c
 8018d78:	20008778 	.word	0x20008778
 8018d7c:	2000876c 	.word	0x2000876c
 8018d80:	20008294 	.word	0x20008294
 8018d84:	20008290 	.word	0x20008290
 8018d88:	20000094 	.word	0x20000094

08018d8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b084      	sub	sp, #16
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
 8018d94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d10b      	bne.n	8018db4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8018d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018da0:	f383 8811 	msr	BASEPRI, r3
 8018da4:	f3bf 8f6f 	isb	sy
 8018da8:	f3bf 8f4f 	dsb	sy
 8018dac:	60fb      	str	r3, [r7, #12]
}
 8018dae:	bf00      	nop
 8018db0:	bf00      	nop
 8018db2:	e7fd      	b.n	8018db0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018db4:	4b07      	ldr	r3, [pc, #28]	@ (8018dd4 <vTaskPlaceOnEventList+0x48>)
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	3318      	adds	r3, #24
 8018dba:	4619      	mov	r1, r3
 8018dbc:	6878      	ldr	r0, [r7, #4]
 8018dbe:	f7fe fbaa 	bl	8017516 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018dc2:	2101      	movs	r1, #1
 8018dc4:	6838      	ldr	r0, [r7, #0]
 8018dc6:	f000 fb97 	bl	80194f8 <prvAddCurrentTaskToDelayedList>
}
 8018dca:	bf00      	nop
 8018dcc:	3710      	adds	r7, #16
 8018dce:	46bd      	mov	sp, r7
 8018dd0:	bd80      	pop	{r7, pc}
 8018dd2:	bf00      	nop
 8018dd4:	20008290 	.word	0x20008290

08018dd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b086      	sub	sp, #24
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	60f8      	str	r0, [r7, #12]
 8018de0:	60b9      	str	r1, [r7, #8]
 8018de2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d10b      	bne.n	8018e02 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8018dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018dee:	f383 8811 	msr	BASEPRI, r3
 8018df2:	f3bf 8f6f 	isb	sy
 8018df6:	f3bf 8f4f 	dsb	sy
 8018dfa:	617b      	str	r3, [r7, #20]
}
 8018dfc:	bf00      	nop
 8018dfe:	bf00      	nop
 8018e00:	e7fd      	b.n	8018dfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018e02:	4b0a      	ldr	r3, [pc, #40]	@ (8018e2c <vTaskPlaceOnEventListRestricted+0x54>)
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	3318      	adds	r3, #24
 8018e08:	4619      	mov	r1, r3
 8018e0a:	68f8      	ldr	r0, [r7, #12]
 8018e0c:	f7fe fb5f 	bl	80174ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d002      	beq.n	8018e1c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8018e16:	f04f 33ff 	mov.w	r3, #4294967295
 8018e1a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018e1c:	6879      	ldr	r1, [r7, #4]
 8018e1e:	68b8      	ldr	r0, [r7, #8]
 8018e20:	f000 fb6a 	bl	80194f8 <prvAddCurrentTaskToDelayedList>
	}
 8018e24:	bf00      	nop
 8018e26:	3718      	adds	r7, #24
 8018e28:	46bd      	mov	sp, r7
 8018e2a:	bd80      	pop	{r7, pc}
 8018e2c:	20008290 	.word	0x20008290

08018e30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b086      	sub	sp, #24
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	68db      	ldr	r3, [r3, #12]
 8018e3c:	68db      	ldr	r3, [r3, #12]
 8018e3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018e40:	693b      	ldr	r3, [r7, #16]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d10b      	bne.n	8018e5e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8018e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e4a:	f383 8811 	msr	BASEPRI, r3
 8018e4e:	f3bf 8f6f 	isb	sy
 8018e52:	f3bf 8f4f 	dsb	sy
 8018e56:	60fb      	str	r3, [r7, #12]
}
 8018e58:	bf00      	nop
 8018e5a:	bf00      	nop
 8018e5c:	e7fd      	b.n	8018e5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018e5e:	693b      	ldr	r3, [r7, #16]
 8018e60:	3318      	adds	r3, #24
 8018e62:	4618      	mov	r0, r3
 8018e64:	f7fe fb90 	bl	8017588 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018e68:	4b1d      	ldr	r3, [pc, #116]	@ (8018ee0 <xTaskRemoveFromEventList+0xb0>)
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d11d      	bne.n	8018eac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018e70:	693b      	ldr	r3, [r7, #16]
 8018e72:	3304      	adds	r3, #4
 8018e74:	4618      	mov	r0, r3
 8018e76:	f7fe fb87 	bl	8017588 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018e7a:	693b      	ldr	r3, [r7, #16]
 8018e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018e7e:	4b19      	ldr	r3, [pc, #100]	@ (8018ee4 <xTaskRemoveFromEventList+0xb4>)
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	429a      	cmp	r2, r3
 8018e84:	d903      	bls.n	8018e8e <xTaskRemoveFromEventList+0x5e>
 8018e86:	693b      	ldr	r3, [r7, #16]
 8018e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018e8a:	4a16      	ldr	r2, [pc, #88]	@ (8018ee4 <xTaskRemoveFromEventList+0xb4>)
 8018e8c:	6013      	str	r3, [r2, #0]
 8018e8e:	693b      	ldr	r3, [r7, #16]
 8018e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018e92:	4613      	mov	r3, r2
 8018e94:	009b      	lsls	r3, r3, #2
 8018e96:	4413      	add	r3, r2
 8018e98:	009b      	lsls	r3, r3, #2
 8018e9a:	4a13      	ldr	r2, [pc, #76]	@ (8018ee8 <xTaskRemoveFromEventList+0xb8>)
 8018e9c:	441a      	add	r2, r3
 8018e9e:	693b      	ldr	r3, [r7, #16]
 8018ea0:	3304      	adds	r3, #4
 8018ea2:	4619      	mov	r1, r3
 8018ea4:	4610      	mov	r0, r2
 8018ea6:	f7fe fb12 	bl	80174ce <vListInsertEnd>
 8018eaa:	e005      	b.n	8018eb8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018eac:	693b      	ldr	r3, [r7, #16]
 8018eae:	3318      	adds	r3, #24
 8018eb0:	4619      	mov	r1, r3
 8018eb2:	480e      	ldr	r0, [pc, #56]	@ (8018eec <xTaskRemoveFromEventList+0xbc>)
 8018eb4:	f7fe fb0b 	bl	80174ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018eb8:	693b      	ldr	r3, [r7, #16]
 8018eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8018ef0 <xTaskRemoveFromEventList+0xc0>)
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ec2:	429a      	cmp	r2, r3
 8018ec4:	d905      	bls.n	8018ed2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018ec6:	2301      	movs	r3, #1
 8018ec8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018eca:	4b0a      	ldr	r3, [pc, #40]	@ (8018ef4 <xTaskRemoveFromEventList+0xc4>)
 8018ecc:	2201      	movs	r2, #1
 8018ece:	601a      	str	r2, [r3, #0]
 8018ed0:	e001      	b.n	8018ed6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8018ed2:	2300      	movs	r3, #0
 8018ed4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018ed6:	697b      	ldr	r3, [r7, #20]
}
 8018ed8:	4618      	mov	r0, r3
 8018eda:	3718      	adds	r7, #24
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bd80      	pop	{r7, pc}
 8018ee0:	2000878c 	.word	0x2000878c
 8018ee4:	2000876c 	.word	0x2000876c
 8018ee8:	20008294 	.word	0x20008294
 8018eec:	20008724 	.word	0x20008724
 8018ef0:	20008290 	.word	0x20008290
 8018ef4:	20008778 	.word	0x20008778

08018ef8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018ef8:	b480      	push	{r7}
 8018efa:	b083      	sub	sp, #12
 8018efc:	af00      	add	r7, sp, #0
 8018efe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018f00:	4b06      	ldr	r3, [pc, #24]	@ (8018f1c <vTaskInternalSetTimeOutState+0x24>)
 8018f02:	681a      	ldr	r2, [r3, #0]
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018f08:	4b05      	ldr	r3, [pc, #20]	@ (8018f20 <vTaskInternalSetTimeOutState+0x28>)
 8018f0a:	681a      	ldr	r2, [r3, #0]
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	605a      	str	r2, [r3, #4]
}
 8018f10:	bf00      	nop
 8018f12:	370c      	adds	r7, #12
 8018f14:	46bd      	mov	sp, r7
 8018f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f1a:	4770      	bx	lr
 8018f1c:	2000877c 	.word	0x2000877c
 8018f20:	20008768 	.word	0x20008768

08018f24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b088      	sub	sp, #32
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
 8018f2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d10b      	bne.n	8018f4c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8018f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f38:	f383 8811 	msr	BASEPRI, r3
 8018f3c:	f3bf 8f6f 	isb	sy
 8018f40:	f3bf 8f4f 	dsb	sy
 8018f44:	613b      	str	r3, [r7, #16]
}
 8018f46:	bf00      	nop
 8018f48:	bf00      	nop
 8018f4a:	e7fd      	b.n	8018f48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018f4c:	683b      	ldr	r3, [r7, #0]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d10b      	bne.n	8018f6a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8018f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f56:	f383 8811 	msr	BASEPRI, r3
 8018f5a:	f3bf 8f6f 	isb	sy
 8018f5e:	f3bf 8f4f 	dsb	sy
 8018f62:	60fb      	str	r3, [r7, #12]
}
 8018f64:	bf00      	nop
 8018f66:	bf00      	nop
 8018f68:	e7fd      	b.n	8018f66 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8018f6a:	f000 ffa5 	bl	8019eb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8018fe4 <xTaskCheckForTimeOut+0xc0>)
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	685b      	ldr	r3, [r3, #4]
 8018f78:	69ba      	ldr	r2, [r7, #24]
 8018f7a:	1ad3      	subs	r3, r2, r3
 8018f7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018f7e:	683b      	ldr	r3, [r7, #0]
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f86:	d102      	bne.n	8018f8e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018f88:	2300      	movs	r3, #0
 8018f8a:	61fb      	str	r3, [r7, #28]
 8018f8c:	e023      	b.n	8018fd6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	681a      	ldr	r2, [r3, #0]
 8018f92:	4b15      	ldr	r3, [pc, #84]	@ (8018fe8 <xTaskCheckForTimeOut+0xc4>)
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	429a      	cmp	r2, r3
 8018f98:	d007      	beq.n	8018faa <xTaskCheckForTimeOut+0x86>
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	685b      	ldr	r3, [r3, #4]
 8018f9e:	69ba      	ldr	r2, [r7, #24]
 8018fa0:	429a      	cmp	r2, r3
 8018fa2:	d302      	bcc.n	8018faa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018fa4:	2301      	movs	r3, #1
 8018fa6:	61fb      	str	r3, [r7, #28]
 8018fa8:	e015      	b.n	8018fd6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018faa:	683b      	ldr	r3, [r7, #0]
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	697a      	ldr	r2, [r7, #20]
 8018fb0:	429a      	cmp	r2, r3
 8018fb2:	d20b      	bcs.n	8018fcc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018fb4:	683b      	ldr	r3, [r7, #0]
 8018fb6:	681a      	ldr	r2, [r3, #0]
 8018fb8:	697b      	ldr	r3, [r7, #20]
 8018fba:	1ad2      	subs	r2, r2, r3
 8018fbc:	683b      	ldr	r3, [r7, #0]
 8018fbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018fc0:	6878      	ldr	r0, [r7, #4]
 8018fc2:	f7ff ff99 	bl	8018ef8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018fc6:	2300      	movs	r3, #0
 8018fc8:	61fb      	str	r3, [r7, #28]
 8018fca:	e004      	b.n	8018fd6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8018fcc:	683b      	ldr	r3, [r7, #0]
 8018fce:	2200      	movs	r2, #0
 8018fd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018fd2:	2301      	movs	r3, #1
 8018fd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018fd6:	f000 ffa1 	bl	8019f1c <vPortExitCritical>

	return xReturn;
 8018fda:	69fb      	ldr	r3, [r7, #28]
}
 8018fdc:	4618      	mov	r0, r3
 8018fde:	3720      	adds	r7, #32
 8018fe0:	46bd      	mov	sp, r7
 8018fe2:	bd80      	pop	{r7, pc}
 8018fe4:	20008768 	.word	0x20008768
 8018fe8:	2000877c 	.word	0x2000877c

08018fec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018fec:	b480      	push	{r7}
 8018fee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018ff0:	4b03      	ldr	r3, [pc, #12]	@ (8019000 <vTaskMissedYield+0x14>)
 8018ff2:	2201      	movs	r2, #1
 8018ff4:	601a      	str	r2, [r3, #0]
}
 8018ff6:	bf00      	nop
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ffe:	4770      	bx	lr
 8019000:	20008778 	.word	0x20008778

08019004 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019004:	b580      	push	{r7, lr}
 8019006:	b082      	sub	sp, #8
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801900c:	f000 f852 	bl	80190b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019010:	4b06      	ldr	r3, [pc, #24]	@ (801902c <prvIdleTask+0x28>)
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	2b01      	cmp	r3, #1
 8019016:	d9f9      	bls.n	801900c <prvIdleTask+0x8>
			{
				taskYIELD();
 8019018:	4b05      	ldr	r3, [pc, #20]	@ (8019030 <prvIdleTask+0x2c>)
 801901a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801901e:	601a      	str	r2, [r3, #0]
 8019020:	f3bf 8f4f 	dsb	sy
 8019024:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8019028:	e7f0      	b.n	801900c <prvIdleTask+0x8>
 801902a:	bf00      	nop
 801902c:	20008294 	.word	0x20008294
 8019030:	e000ed04 	.word	0xe000ed04

08019034 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b082      	sub	sp, #8
 8019038:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801903a:	2300      	movs	r3, #0
 801903c:	607b      	str	r3, [r7, #4]
 801903e:	e00c      	b.n	801905a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019040:	687a      	ldr	r2, [r7, #4]
 8019042:	4613      	mov	r3, r2
 8019044:	009b      	lsls	r3, r3, #2
 8019046:	4413      	add	r3, r2
 8019048:	009b      	lsls	r3, r3, #2
 801904a:	4a12      	ldr	r2, [pc, #72]	@ (8019094 <prvInitialiseTaskLists+0x60>)
 801904c:	4413      	add	r3, r2
 801904e:	4618      	mov	r0, r3
 8019050:	f7fe fa10 	bl	8017474 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	3301      	adds	r3, #1
 8019058:	607b      	str	r3, [r7, #4]
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	2b37      	cmp	r3, #55	@ 0x37
 801905e:	d9ef      	bls.n	8019040 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019060:	480d      	ldr	r0, [pc, #52]	@ (8019098 <prvInitialiseTaskLists+0x64>)
 8019062:	f7fe fa07 	bl	8017474 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019066:	480d      	ldr	r0, [pc, #52]	@ (801909c <prvInitialiseTaskLists+0x68>)
 8019068:	f7fe fa04 	bl	8017474 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801906c:	480c      	ldr	r0, [pc, #48]	@ (80190a0 <prvInitialiseTaskLists+0x6c>)
 801906e:	f7fe fa01 	bl	8017474 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019072:	480c      	ldr	r0, [pc, #48]	@ (80190a4 <prvInitialiseTaskLists+0x70>)
 8019074:	f7fe f9fe 	bl	8017474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019078:	480b      	ldr	r0, [pc, #44]	@ (80190a8 <prvInitialiseTaskLists+0x74>)
 801907a:	f7fe f9fb 	bl	8017474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801907e:	4b0b      	ldr	r3, [pc, #44]	@ (80190ac <prvInitialiseTaskLists+0x78>)
 8019080:	4a05      	ldr	r2, [pc, #20]	@ (8019098 <prvInitialiseTaskLists+0x64>)
 8019082:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019084:	4b0a      	ldr	r3, [pc, #40]	@ (80190b0 <prvInitialiseTaskLists+0x7c>)
 8019086:	4a05      	ldr	r2, [pc, #20]	@ (801909c <prvInitialiseTaskLists+0x68>)
 8019088:	601a      	str	r2, [r3, #0]
}
 801908a:	bf00      	nop
 801908c:	3708      	adds	r7, #8
 801908e:	46bd      	mov	sp, r7
 8019090:	bd80      	pop	{r7, pc}
 8019092:	bf00      	nop
 8019094:	20008294 	.word	0x20008294
 8019098:	200086f4 	.word	0x200086f4
 801909c:	20008708 	.word	0x20008708
 80190a0:	20008724 	.word	0x20008724
 80190a4:	20008738 	.word	0x20008738
 80190a8:	20008750 	.word	0x20008750
 80190ac:	2000871c 	.word	0x2000871c
 80190b0:	20008720 	.word	0x20008720

080190b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80190b4:	b580      	push	{r7, lr}
 80190b6:	b082      	sub	sp, #8
 80190b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80190ba:	e019      	b.n	80190f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80190bc:	f000 fefc 	bl	8019eb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80190c0:	4b10      	ldr	r3, [pc, #64]	@ (8019104 <prvCheckTasksWaitingTermination+0x50>)
 80190c2:	68db      	ldr	r3, [r3, #12]
 80190c4:	68db      	ldr	r3, [r3, #12]
 80190c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	3304      	adds	r3, #4
 80190cc:	4618      	mov	r0, r3
 80190ce:	f7fe fa5b 	bl	8017588 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80190d2:	4b0d      	ldr	r3, [pc, #52]	@ (8019108 <prvCheckTasksWaitingTermination+0x54>)
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	3b01      	subs	r3, #1
 80190d8:	4a0b      	ldr	r2, [pc, #44]	@ (8019108 <prvCheckTasksWaitingTermination+0x54>)
 80190da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80190dc:	4b0b      	ldr	r3, [pc, #44]	@ (801910c <prvCheckTasksWaitingTermination+0x58>)
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	3b01      	subs	r3, #1
 80190e2:	4a0a      	ldr	r2, [pc, #40]	@ (801910c <prvCheckTasksWaitingTermination+0x58>)
 80190e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80190e6:	f000 ff19 	bl	8019f1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80190ea:	6878      	ldr	r0, [r7, #4]
 80190ec:	f000 f810 	bl	8019110 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80190f0:	4b06      	ldr	r3, [pc, #24]	@ (801910c <prvCheckTasksWaitingTermination+0x58>)
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d1e1      	bne.n	80190bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80190f8:	bf00      	nop
 80190fa:	bf00      	nop
 80190fc:	3708      	adds	r7, #8
 80190fe:	46bd      	mov	sp, r7
 8019100:	bd80      	pop	{r7, pc}
 8019102:	bf00      	nop
 8019104:	20008738 	.word	0x20008738
 8019108:	20008764 	.word	0x20008764
 801910c:	2000874c 	.word	0x2000874c

08019110 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019110:	b580      	push	{r7, lr}
 8019112:	b084      	sub	sp, #16
 8019114:	af00      	add	r7, sp, #0
 8019116:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	3354      	adds	r3, #84	@ 0x54
 801911c:	4618      	mov	r0, r3
 801911e:	f001 fc6d 	bl	801a9fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8019128:	2b00      	cmp	r3, #0
 801912a:	d108      	bne.n	801913e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019130:	4618      	mov	r0, r3
 8019132:	f001 f8b1 	bl	801a298 <vPortFree>
				vPortFree( pxTCB );
 8019136:	6878      	ldr	r0, [r7, #4]
 8019138:	f001 f8ae 	bl	801a298 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801913c:	e019      	b.n	8019172 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8019144:	2b01      	cmp	r3, #1
 8019146:	d103      	bne.n	8019150 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8019148:	6878      	ldr	r0, [r7, #4]
 801914a:	f001 f8a5 	bl	801a298 <vPortFree>
	}
 801914e:	e010      	b.n	8019172 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8019156:	2b02      	cmp	r3, #2
 8019158:	d00b      	beq.n	8019172 <prvDeleteTCB+0x62>
	__asm volatile
 801915a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801915e:	f383 8811 	msr	BASEPRI, r3
 8019162:	f3bf 8f6f 	isb	sy
 8019166:	f3bf 8f4f 	dsb	sy
 801916a:	60fb      	str	r3, [r7, #12]
}
 801916c:	bf00      	nop
 801916e:	bf00      	nop
 8019170:	e7fd      	b.n	801916e <prvDeleteTCB+0x5e>
	}
 8019172:	bf00      	nop
 8019174:	3710      	adds	r7, #16
 8019176:	46bd      	mov	sp, r7
 8019178:	bd80      	pop	{r7, pc}
	...

0801917c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801917c:	b480      	push	{r7}
 801917e:	b083      	sub	sp, #12
 8019180:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019182:	4b0c      	ldr	r3, [pc, #48]	@ (80191b4 <prvResetNextTaskUnblockTime+0x38>)
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	2b00      	cmp	r3, #0
 801918a:	d104      	bne.n	8019196 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801918c:	4b0a      	ldr	r3, [pc, #40]	@ (80191b8 <prvResetNextTaskUnblockTime+0x3c>)
 801918e:	f04f 32ff 	mov.w	r2, #4294967295
 8019192:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8019194:	e008      	b.n	80191a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019196:	4b07      	ldr	r3, [pc, #28]	@ (80191b4 <prvResetNextTaskUnblockTime+0x38>)
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	68db      	ldr	r3, [r3, #12]
 801919c:	68db      	ldr	r3, [r3, #12]
 801919e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	685b      	ldr	r3, [r3, #4]
 80191a4:	4a04      	ldr	r2, [pc, #16]	@ (80191b8 <prvResetNextTaskUnblockTime+0x3c>)
 80191a6:	6013      	str	r3, [r2, #0]
}
 80191a8:	bf00      	nop
 80191aa:	370c      	adds	r7, #12
 80191ac:	46bd      	mov	sp, r7
 80191ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b2:	4770      	bx	lr
 80191b4:	2000871c 	.word	0x2000871c
 80191b8:	20008784 	.word	0x20008784

080191bc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80191bc:	b480      	push	{r7}
 80191be:	b083      	sub	sp, #12
 80191c0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80191c2:	4b05      	ldr	r3, [pc, #20]	@ (80191d8 <xTaskGetCurrentTaskHandle+0x1c>)
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80191c8:	687b      	ldr	r3, [r7, #4]
	}
 80191ca:	4618      	mov	r0, r3
 80191cc:	370c      	adds	r7, #12
 80191ce:	46bd      	mov	sp, r7
 80191d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d4:	4770      	bx	lr
 80191d6:	bf00      	nop
 80191d8:	20008290 	.word	0x20008290

080191dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80191dc:	b480      	push	{r7}
 80191de:	b083      	sub	sp, #12
 80191e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80191e2:	4b0b      	ldr	r3, [pc, #44]	@ (8019210 <xTaskGetSchedulerState+0x34>)
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d102      	bne.n	80191f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80191ea:	2301      	movs	r3, #1
 80191ec:	607b      	str	r3, [r7, #4]
 80191ee:	e008      	b.n	8019202 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80191f0:	4b08      	ldr	r3, [pc, #32]	@ (8019214 <xTaskGetSchedulerState+0x38>)
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d102      	bne.n	80191fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80191f8:	2302      	movs	r3, #2
 80191fa:	607b      	str	r3, [r7, #4]
 80191fc:	e001      	b.n	8019202 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80191fe:	2300      	movs	r3, #0
 8019200:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8019202:	687b      	ldr	r3, [r7, #4]
	}
 8019204:	4618      	mov	r0, r3
 8019206:	370c      	adds	r7, #12
 8019208:	46bd      	mov	sp, r7
 801920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801920e:	4770      	bx	lr
 8019210:	20008770 	.word	0x20008770
 8019214:	2000878c 	.word	0x2000878c

08019218 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8019218:	b580      	push	{r7, lr}
 801921a:	b084      	sub	sp, #16
 801921c:	af00      	add	r7, sp, #0
 801921e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8019224:	2300      	movs	r3, #0
 8019226:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	2b00      	cmp	r3, #0
 801922c:	d051      	beq.n	80192d2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801922e:	68bb      	ldr	r3, [r7, #8]
 8019230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019232:	4b2a      	ldr	r3, [pc, #168]	@ (80192dc <xTaskPriorityInherit+0xc4>)
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019238:	429a      	cmp	r2, r3
 801923a:	d241      	bcs.n	80192c0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801923c:	68bb      	ldr	r3, [r7, #8]
 801923e:	699b      	ldr	r3, [r3, #24]
 8019240:	2b00      	cmp	r3, #0
 8019242:	db06      	blt.n	8019252 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019244:	4b25      	ldr	r3, [pc, #148]	@ (80192dc <xTaskPriorityInherit+0xc4>)
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801924a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801924e:	68bb      	ldr	r3, [r7, #8]
 8019250:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8019252:	68bb      	ldr	r3, [r7, #8]
 8019254:	6959      	ldr	r1, [r3, #20]
 8019256:	68bb      	ldr	r3, [r7, #8]
 8019258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801925a:	4613      	mov	r3, r2
 801925c:	009b      	lsls	r3, r3, #2
 801925e:	4413      	add	r3, r2
 8019260:	009b      	lsls	r3, r3, #2
 8019262:	4a1f      	ldr	r2, [pc, #124]	@ (80192e0 <xTaskPriorityInherit+0xc8>)
 8019264:	4413      	add	r3, r2
 8019266:	4299      	cmp	r1, r3
 8019268:	d122      	bne.n	80192b0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801926a:	68bb      	ldr	r3, [r7, #8]
 801926c:	3304      	adds	r3, #4
 801926e:	4618      	mov	r0, r3
 8019270:	f7fe f98a 	bl	8017588 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019274:	4b19      	ldr	r3, [pc, #100]	@ (80192dc <xTaskPriorityInherit+0xc4>)
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801927a:	68bb      	ldr	r3, [r7, #8]
 801927c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801927e:	68bb      	ldr	r3, [r7, #8]
 8019280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019282:	4b18      	ldr	r3, [pc, #96]	@ (80192e4 <xTaskPriorityInherit+0xcc>)
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	429a      	cmp	r2, r3
 8019288:	d903      	bls.n	8019292 <xTaskPriorityInherit+0x7a>
 801928a:	68bb      	ldr	r3, [r7, #8]
 801928c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801928e:	4a15      	ldr	r2, [pc, #84]	@ (80192e4 <xTaskPriorityInherit+0xcc>)
 8019290:	6013      	str	r3, [r2, #0]
 8019292:	68bb      	ldr	r3, [r7, #8]
 8019294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019296:	4613      	mov	r3, r2
 8019298:	009b      	lsls	r3, r3, #2
 801929a:	4413      	add	r3, r2
 801929c:	009b      	lsls	r3, r3, #2
 801929e:	4a10      	ldr	r2, [pc, #64]	@ (80192e0 <xTaskPriorityInherit+0xc8>)
 80192a0:	441a      	add	r2, r3
 80192a2:	68bb      	ldr	r3, [r7, #8]
 80192a4:	3304      	adds	r3, #4
 80192a6:	4619      	mov	r1, r3
 80192a8:	4610      	mov	r0, r2
 80192aa:	f7fe f910 	bl	80174ce <vListInsertEnd>
 80192ae:	e004      	b.n	80192ba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80192b0:	4b0a      	ldr	r3, [pc, #40]	@ (80192dc <xTaskPriorityInherit+0xc4>)
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80192b6:	68bb      	ldr	r3, [r7, #8]
 80192b8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80192ba:	2301      	movs	r3, #1
 80192bc:	60fb      	str	r3, [r7, #12]
 80192be:	e008      	b.n	80192d2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80192c0:	68bb      	ldr	r3, [r7, #8]
 80192c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80192c4:	4b05      	ldr	r3, [pc, #20]	@ (80192dc <xTaskPriorityInherit+0xc4>)
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80192ca:	429a      	cmp	r2, r3
 80192cc:	d201      	bcs.n	80192d2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80192ce:	2301      	movs	r3, #1
 80192d0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80192d2:	68fb      	ldr	r3, [r7, #12]
	}
 80192d4:	4618      	mov	r0, r3
 80192d6:	3710      	adds	r7, #16
 80192d8:	46bd      	mov	sp, r7
 80192da:	bd80      	pop	{r7, pc}
 80192dc:	20008290 	.word	0x20008290
 80192e0:	20008294 	.word	0x20008294
 80192e4:	2000876c 	.word	0x2000876c

080192e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b086      	sub	sp, #24
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80192f4:	2300      	movs	r3, #0
 80192f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d058      	beq.n	80193b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80192fe:	4b2f      	ldr	r3, [pc, #188]	@ (80193bc <xTaskPriorityDisinherit+0xd4>)
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	693a      	ldr	r2, [r7, #16]
 8019304:	429a      	cmp	r2, r3
 8019306:	d00b      	beq.n	8019320 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8019308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801930c:	f383 8811 	msr	BASEPRI, r3
 8019310:	f3bf 8f6f 	isb	sy
 8019314:	f3bf 8f4f 	dsb	sy
 8019318:	60fb      	str	r3, [r7, #12]
}
 801931a:	bf00      	nop
 801931c:	bf00      	nop
 801931e:	e7fd      	b.n	801931c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8019320:	693b      	ldr	r3, [r7, #16]
 8019322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019324:	2b00      	cmp	r3, #0
 8019326:	d10b      	bne.n	8019340 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8019328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801932c:	f383 8811 	msr	BASEPRI, r3
 8019330:	f3bf 8f6f 	isb	sy
 8019334:	f3bf 8f4f 	dsb	sy
 8019338:	60bb      	str	r3, [r7, #8]
}
 801933a:	bf00      	nop
 801933c:	bf00      	nop
 801933e:	e7fd      	b.n	801933c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8019340:	693b      	ldr	r3, [r7, #16]
 8019342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019344:	1e5a      	subs	r2, r3, #1
 8019346:	693b      	ldr	r3, [r7, #16]
 8019348:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801934a:	693b      	ldr	r3, [r7, #16]
 801934c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801934e:	693b      	ldr	r3, [r7, #16]
 8019350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019352:	429a      	cmp	r2, r3
 8019354:	d02c      	beq.n	80193b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019356:	693b      	ldr	r3, [r7, #16]
 8019358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801935a:	2b00      	cmp	r3, #0
 801935c:	d128      	bne.n	80193b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801935e:	693b      	ldr	r3, [r7, #16]
 8019360:	3304      	adds	r3, #4
 8019362:	4618      	mov	r0, r3
 8019364:	f7fe f910 	bl	8017588 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019368:	693b      	ldr	r3, [r7, #16]
 801936a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801936c:	693b      	ldr	r3, [r7, #16]
 801936e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019370:	693b      	ldr	r3, [r7, #16]
 8019372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019374:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8019378:	693b      	ldr	r3, [r7, #16]
 801937a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801937c:	693b      	ldr	r3, [r7, #16]
 801937e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019380:	4b0f      	ldr	r3, [pc, #60]	@ (80193c0 <xTaskPriorityDisinherit+0xd8>)
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	429a      	cmp	r2, r3
 8019386:	d903      	bls.n	8019390 <xTaskPriorityDisinherit+0xa8>
 8019388:	693b      	ldr	r3, [r7, #16]
 801938a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801938c:	4a0c      	ldr	r2, [pc, #48]	@ (80193c0 <xTaskPriorityDisinherit+0xd8>)
 801938e:	6013      	str	r3, [r2, #0]
 8019390:	693b      	ldr	r3, [r7, #16]
 8019392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019394:	4613      	mov	r3, r2
 8019396:	009b      	lsls	r3, r3, #2
 8019398:	4413      	add	r3, r2
 801939a:	009b      	lsls	r3, r3, #2
 801939c:	4a09      	ldr	r2, [pc, #36]	@ (80193c4 <xTaskPriorityDisinherit+0xdc>)
 801939e:	441a      	add	r2, r3
 80193a0:	693b      	ldr	r3, [r7, #16]
 80193a2:	3304      	adds	r3, #4
 80193a4:	4619      	mov	r1, r3
 80193a6:	4610      	mov	r0, r2
 80193a8:	f7fe f891 	bl	80174ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80193ac:	2301      	movs	r3, #1
 80193ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80193b0:	697b      	ldr	r3, [r7, #20]
	}
 80193b2:	4618      	mov	r0, r3
 80193b4:	3718      	adds	r7, #24
 80193b6:	46bd      	mov	sp, r7
 80193b8:	bd80      	pop	{r7, pc}
 80193ba:	bf00      	nop
 80193bc:	20008290 	.word	0x20008290
 80193c0:	2000876c 	.word	0x2000876c
 80193c4:	20008294 	.word	0x20008294

080193c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80193c8:	b580      	push	{r7, lr}
 80193ca:	b088      	sub	sp, #32
 80193cc:	af00      	add	r7, sp, #0
 80193ce:	6078      	str	r0, [r7, #4]
 80193d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80193d6:	2301      	movs	r3, #1
 80193d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d06c      	beq.n	80194ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80193e0:	69bb      	ldr	r3, [r7, #24]
 80193e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d10b      	bne.n	8019400 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80193e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193ec:	f383 8811 	msr	BASEPRI, r3
 80193f0:	f3bf 8f6f 	isb	sy
 80193f4:	f3bf 8f4f 	dsb	sy
 80193f8:	60fb      	str	r3, [r7, #12]
}
 80193fa:	bf00      	nop
 80193fc:	bf00      	nop
 80193fe:	e7fd      	b.n	80193fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8019400:	69bb      	ldr	r3, [r7, #24]
 8019402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019404:	683a      	ldr	r2, [r7, #0]
 8019406:	429a      	cmp	r2, r3
 8019408:	d902      	bls.n	8019410 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801940a:	683b      	ldr	r3, [r7, #0]
 801940c:	61fb      	str	r3, [r7, #28]
 801940e:	e002      	b.n	8019416 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8019410:	69bb      	ldr	r3, [r7, #24]
 8019412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019414:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8019416:	69bb      	ldr	r3, [r7, #24]
 8019418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801941a:	69fa      	ldr	r2, [r7, #28]
 801941c:	429a      	cmp	r2, r3
 801941e:	d04c      	beq.n	80194ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8019420:	69bb      	ldr	r3, [r7, #24]
 8019422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019424:	697a      	ldr	r2, [r7, #20]
 8019426:	429a      	cmp	r2, r3
 8019428:	d147      	bne.n	80194ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801942a:	4b26      	ldr	r3, [pc, #152]	@ (80194c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	69ba      	ldr	r2, [r7, #24]
 8019430:	429a      	cmp	r2, r3
 8019432:	d10b      	bne.n	801944c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8019434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019438:	f383 8811 	msr	BASEPRI, r3
 801943c:	f3bf 8f6f 	isb	sy
 8019440:	f3bf 8f4f 	dsb	sy
 8019444:	60bb      	str	r3, [r7, #8]
}
 8019446:	bf00      	nop
 8019448:	bf00      	nop
 801944a:	e7fd      	b.n	8019448 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801944c:	69bb      	ldr	r3, [r7, #24]
 801944e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019450:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8019452:	69bb      	ldr	r3, [r7, #24]
 8019454:	69fa      	ldr	r2, [r7, #28]
 8019456:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019458:	69bb      	ldr	r3, [r7, #24]
 801945a:	699b      	ldr	r3, [r3, #24]
 801945c:	2b00      	cmp	r3, #0
 801945e:	db04      	blt.n	801946a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019460:	69fb      	ldr	r3, [r7, #28]
 8019462:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8019466:	69bb      	ldr	r3, [r7, #24]
 8019468:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801946a:	69bb      	ldr	r3, [r7, #24]
 801946c:	6959      	ldr	r1, [r3, #20]
 801946e:	693a      	ldr	r2, [r7, #16]
 8019470:	4613      	mov	r3, r2
 8019472:	009b      	lsls	r3, r3, #2
 8019474:	4413      	add	r3, r2
 8019476:	009b      	lsls	r3, r3, #2
 8019478:	4a13      	ldr	r2, [pc, #76]	@ (80194c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801947a:	4413      	add	r3, r2
 801947c:	4299      	cmp	r1, r3
 801947e:	d11c      	bne.n	80194ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019480:	69bb      	ldr	r3, [r7, #24]
 8019482:	3304      	adds	r3, #4
 8019484:	4618      	mov	r0, r3
 8019486:	f7fe f87f 	bl	8017588 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801948a:	69bb      	ldr	r3, [r7, #24]
 801948c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801948e:	4b0f      	ldr	r3, [pc, #60]	@ (80194cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	429a      	cmp	r2, r3
 8019494:	d903      	bls.n	801949e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8019496:	69bb      	ldr	r3, [r7, #24]
 8019498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801949a:	4a0c      	ldr	r2, [pc, #48]	@ (80194cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801949c:	6013      	str	r3, [r2, #0]
 801949e:	69bb      	ldr	r3, [r7, #24]
 80194a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80194a2:	4613      	mov	r3, r2
 80194a4:	009b      	lsls	r3, r3, #2
 80194a6:	4413      	add	r3, r2
 80194a8:	009b      	lsls	r3, r3, #2
 80194aa:	4a07      	ldr	r2, [pc, #28]	@ (80194c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80194ac:	441a      	add	r2, r3
 80194ae:	69bb      	ldr	r3, [r7, #24]
 80194b0:	3304      	adds	r3, #4
 80194b2:	4619      	mov	r1, r3
 80194b4:	4610      	mov	r0, r2
 80194b6:	f7fe f80a 	bl	80174ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80194ba:	bf00      	nop
 80194bc:	3720      	adds	r7, #32
 80194be:	46bd      	mov	sp, r7
 80194c0:	bd80      	pop	{r7, pc}
 80194c2:	bf00      	nop
 80194c4:	20008290 	.word	0x20008290
 80194c8:	20008294 	.word	0x20008294
 80194cc:	2000876c 	.word	0x2000876c

080194d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80194d0:	b480      	push	{r7}
 80194d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80194d4:	4b07      	ldr	r3, [pc, #28]	@ (80194f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d004      	beq.n	80194e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80194dc:	4b05      	ldr	r3, [pc, #20]	@ (80194f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80194e2:	3201      	adds	r2, #1
 80194e4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80194e6:	4b03      	ldr	r3, [pc, #12]	@ (80194f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80194e8:	681b      	ldr	r3, [r3, #0]
	}
 80194ea:	4618      	mov	r0, r3
 80194ec:	46bd      	mov	sp, r7
 80194ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f2:	4770      	bx	lr
 80194f4:	20008290 	.word	0x20008290

080194f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80194f8:	b580      	push	{r7, lr}
 80194fa:	b084      	sub	sp, #16
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	6078      	str	r0, [r7, #4]
 8019500:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019502:	4b21      	ldr	r3, [pc, #132]	@ (8019588 <prvAddCurrentTaskToDelayedList+0x90>)
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019508:	4b20      	ldr	r3, [pc, #128]	@ (801958c <prvAddCurrentTaskToDelayedList+0x94>)
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	3304      	adds	r3, #4
 801950e:	4618      	mov	r0, r3
 8019510:	f7fe f83a 	bl	8017588 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	f1b3 3fff 	cmp.w	r3, #4294967295
 801951a:	d10a      	bne.n	8019532 <prvAddCurrentTaskToDelayedList+0x3a>
 801951c:	683b      	ldr	r3, [r7, #0]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d007      	beq.n	8019532 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019522:	4b1a      	ldr	r3, [pc, #104]	@ (801958c <prvAddCurrentTaskToDelayedList+0x94>)
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	3304      	adds	r3, #4
 8019528:	4619      	mov	r1, r3
 801952a:	4819      	ldr	r0, [pc, #100]	@ (8019590 <prvAddCurrentTaskToDelayedList+0x98>)
 801952c:	f7fd ffcf 	bl	80174ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019530:	e026      	b.n	8019580 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019532:	68fa      	ldr	r2, [r7, #12]
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	4413      	add	r3, r2
 8019538:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801953a:	4b14      	ldr	r3, [pc, #80]	@ (801958c <prvAddCurrentTaskToDelayedList+0x94>)
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	68ba      	ldr	r2, [r7, #8]
 8019540:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019542:	68ba      	ldr	r2, [r7, #8]
 8019544:	68fb      	ldr	r3, [r7, #12]
 8019546:	429a      	cmp	r2, r3
 8019548:	d209      	bcs.n	801955e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801954a:	4b12      	ldr	r3, [pc, #72]	@ (8019594 <prvAddCurrentTaskToDelayedList+0x9c>)
 801954c:	681a      	ldr	r2, [r3, #0]
 801954e:	4b0f      	ldr	r3, [pc, #60]	@ (801958c <prvAddCurrentTaskToDelayedList+0x94>)
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	3304      	adds	r3, #4
 8019554:	4619      	mov	r1, r3
 8019556:	4610      	mov	r0, r2
 8019558:	f7fd ffdd 	bl	8017516 <vListInsert>
}
 801955c:	e010      	b.n	8019580 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801955e:	4b0e      	ldr	r3, [pc, #56]	@ (8019598 <prvAddCurrentTaskToDelayedList+0xa0>)
 8019560:	681a      	ldr	r2, [r3, #0]
 8019562:	4b0a      	ldr	r3, [pc, #40]	@ (801958c <prvAddCurrentTaskToDelayedList+0x94>)
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	3304      	adds	r3, #4
 8019568:	4619      	mov	r1, r3
 801956a:	4610      	mov	r0, r2
 801956c:	f7fd ffd3 	bl	8017516 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019570:	4b0a      	ldr	r3, [pc, #40]	@ (801959c <prvAddCurrentTaskToDelayedList+0xa4>)
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	68ba      	ldr	r2, [r7, #8]
 8019576:	429a      	cmp	r2, r3
 8019578:	d202      	bcs.n	8019580 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801957a:	4a08      	ldr	r2, [pc, #32]	@ (801959c <prvAddCurrentTaskToDelayedList+0xa4>)
 801957c:	68bb      	ldr	r3, [r7, #8]
 801957e:	6013      	str	r3, [r2, #0]
}
 8019580:	bf00      	nop
 8019582:	3710      	adds	r7, #16
 8019584:	46bd      	mov	sp, r7
 8019586:	bd80      	pop	{r7, pc}
 8019588:	20008768 	.word	0x20008768
 801958c:	20008290 	.word	0x20008290
 8019590:	20008750 	.word	0x20008750
 8019594:	20008720 	.word	0x20008720
 8019598:	2000871c 	.word	0x2000871c
 801959c:	20008784 	.word	0x20008784

080195a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80195a0:	b580      	push	{r7, lr}
 80195a2:	b08a      	sub	sp, #40	@ 0x28
 80195a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80195a6:	2300      	movs	r3, #0
 80195a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80195aa:	f000 fb13 	bl	8019bd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80195ae:	4b1d      	ldr	r3, [pc, #116]	@ (8019624 <xTimerCreateTimerTask+0x84>)
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d021      	beq.n	80195fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80195b6:	2300      	movs	r3, #0
 80195b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80195ba:	2300      	movs	r3, #0
 80195bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80195be:	1d3a      	adds	r2, r7, #4
 80195c0:	f107 0108 	add.w	r1, r7, #8
 80195c4:	f107 030c 	add.w	r3, r7, #12
 80195c8:	4618      	mov	r0, r3
 80195ca:	f7fd ff39 	bl	8017440 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80195ce:	6879      	ldr	r1, [r7, #4]
 80195d0:	68bb      	ldr	r3, [r7, #8]
 80195d2:	68fa      	ldr	r2, [r7, #12]
 80195d4:	9202      	str	r2, [sp, #8]
 80195d6:	9301      	str	r3, [sp, #4]
 80195d8:	2302      	movs	r3, #2
 80195da:	9300      	str	r3, [sp, #0]
 80195dc:	2300      	movs	r3, #0
 80195de:	460a      	mov	r2, r1
 80195e0:	4911      	ldr	r1, [pc, #68]	@ (8019628 <xTimerCreateTimerTask+0x88>)
 80195e2:	4812      	ldr	r0, [pc, #72]	@ (801962c <xTimerCreateTimerTask+0x8c>)
 80195e4:	f7fe ff92 	bl	801850c <xTaskCreateStatic>
 80195e8:	4603      	mov	r3, r0
 80195ea:	4a11      	ldr	r2, [pc, #68]	@ (8019630 <xTimerCreateTimerTask+0x90>)
 80195ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80195ee:	4b10      	ldr	r3, [pc, #64]	@ (8019630 <xTimerCreateTimerTask+0x90>)
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d001      	beq.n	80195fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80195f6:	2301      	movs	r3, #1
 80195f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80195fa:	697b      	ldr	r3, [r7, #20]
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d10b      	bne.n	8019618 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8019600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019604:	f383 8811 	msr	BASEPRI, r3
 8019608:	f3bf 8f6f 	isb	sy
 801960c:	f3bf 8f4f 	dsb	sy
 8019610:	613b      	str	r3, [r7, #16]
}
 8019612:	bf00      	nop
 8019614:	bf00      	nop
 8019616:	e7fd      	b.n	8019614 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8019618:	697b      	ldr	r3, [r7, #20]
}
 801961a:	4618      	mov	r0, r3
 801961c:	3718      	adds	r7, #24
 801961e:	46bd      	mov	sp, r7
 8019620:	bd80      	pop	{r7, pc}
 8019622:	bf00      	nop
 8019624:	200087c0 	.word	0x200087c0
 8019628:	0801b7b8 	.word	0x0801b7b8
 801962c:	0801976d 	.word	0x0801976d
 8019630:	200087c4 	.word	0x200087c4

08019634 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019634:	b580      	push	{r7, lr}
 8019636:	b08a      	sub	sp, #40	@ 0x28
 8019638:	af00      	add	r7, sp, #0
 801963a:	60f8      	str	r0, [r7, #12]
 801963c:	60b9      	str	r1, [r7, #8]
 801963e:	607a      	str	r2, [r7, #4]
 8019640:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019642:	2300      	movs	r3, #0
 8019644:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	2b00      	cmp	r3, #0
 801964a:	d10b      	bne.n	8019664 <xTimerGenericCommand+0x30>
	__asm volatile
 801964c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019650:	f383 8811 	msr	BASEPRI, r3
 8019654:	f3bf 8f6f 	isb	sy
 8019658:	f3bf 8f4f 	dsb	sy
 801965c:	623b      	str	r3, [r7, #32]
}
 801965e:	bf00      	nop
 8019660:	bf00      	nop
 8019662:	e7fd      	b.n	8019660 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019664:	4b19      	ldr	r3, [pc, #100]	@ (80196cc <xTimerGenericCommand+0x98>)
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d02a      	beq.n	80196c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801966c:	68bb      	ldr	r3, [r7, #8]
 801966e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019678:	68bb      	ldr	r3, [r7, #8]
 801967a:	2b05      	cmp	r3, #5
 801967c:	dc18      	bgt.n	80196b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801967e:	f7ff fdad 	bl	80191dc <xTaskGetSchedulerState>
 8019682:	4603      	mov	r3, r0
 8019684:	2b02      	cmp	r3, #2
 8019686:	d109      	bne.n	801969c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019688:	4b10      	ldr	r3, [pc, #64]	@ (80196cc <xTimerGenericCommand+0x98>)
 801968a:	6818      	ldr	r0, [r3, #0]
 801968c:	f107 0110 	add.w	r1, r7, #16
 8019690:	2300      	movs	r3, #0
 8019692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019694:	f7fe f9a0 	bl	80179d8 <xQueueGenericSend>
 8019698:	6278      	str	r0, [r7, #36]	@ 0x24
 801969a:	e012      	b.n	80196c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801969c:	4b0b      	ldr	r3, [pc, #44]	@ (80196cc <xTimerGenericCommand+0x98>)
 801969e:	6818      	ldr	r0, [r3, #0]
 80196a0:	f107 0110 	add.w	r1, r7, #16
 80196a4:	2300      	movs	r3, #0
 80196a6:	2200      	movs	r2, #0
 80196a8:	f7fe f996 	bl	80179d8 <xQueueGenericSend>
 80196ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80196ae:	e008      	b.n	80196c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80196b0:	4b06      	ldr	r3, [pc, #24]	@ (80196cc <xTimerGenericCommand+0x98>)
 80196b2:	6818      	ldr	r0, [r3, #0]
 80196b4:	f107 0110 	add.w	r1, r7, #16
 80196b8:	2300      	movs	r3, #0
 80196ba:	683a      	ldr	r2, [r7, #0]
 80196bc:	f7fe fa8e 	bl	8017bdc <xQueueGenericSendFromISR>
 80196c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80196c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80196c4:	4618      	mov	r0, r3
 80196c6:	3728      	adds	r7, #40	@ 0x28
 80196c8:	46bd      	mov	sp, r7
 80196ca:	bd80      	pop	{r7, pc}
 80196cc:	200087c0 	.word	0x200087c0

080196d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80196d0:	b580      	push	{r7, lr}
 80196d2:	b088      	sub	sp, #32
 80196d4:	af02      	add	r7, sp, #8
 80196d6:	6078      	str	r0, [r7, #4]
 80196d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80196da:	4b23      	ldr	r3, [pc, #140]	@ (8019768 <prvProcessExpiredTimer+0x98>)
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	68db      	ldr	r3, [r3, #12]
 80196e0:	68db      	ldr	r3, [r3, #12]
 80196e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80196e4:	697b      	ldr	r3, [r7, #20]
 80196e6:	3304      	adds	r3, #4
 80196e8:	4618      	mov	r0, r3
 80196ea:	f7fd ff4d 	bl	8017588 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80196ee:	697b      	ldr	r3, [r7, #20]
 80196f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80196f4:	f003 0304 	and.w	r3, r3, #4
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d023      	beq.n	8019744 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80196fc:	697b      	ldr	r3, [r7, #20]
 80196fe:	699a      	ldr	r2, [r3, #24]
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	18d1      	adds	r1, r2, r3
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	683a      	ldr	r2, [r7, #0]
 8019708:	6978      	ldr	r0, [r7, #20]
 801970a:	f000 f8d5 	bl	80198b8 <prvInsertTimerInActiveList>
 801970e:	4603      	mov	r3, r0
 8019710:	2b00      	cmp	r3, #0
 8019712:	d020      	beq.n	8019756 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019714:	2300      	movs	r3, #0
 8019716:	9300      	str	r3, [sp, #0]
 8019718:	2300      	movs	r3, #0
 801971a:	687a      	ldr	r2, [r7, #4]
 801971c:	2100      	movs	r1, #0
 801971e:	6978      	ldr	r0, [r7, #20]
 8019720:	f7ff ff88 	bl	8019634 <xTimerGenericCommand>
 8019724:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019726:	693b      	ldr	r3, [r7, #16]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d114      	bne.n	8019756 <prvProcessExpiredTimer+0x86>
	__asm volatile
 801972c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019730:	f383 8811 	msr	BASEPRI, r3
 8019734:	f3bf 8f6f 	isb	sy
 8019738:	f3bf 8f4f 	dsb	sy
 801973c:	60fb      	str	r3, [r7, #12]
}
 801973e:	bf00      	nop
 8019740:	bf00      	nop
 8019742:	e7fd      	b.n	8019740 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019744:	697b      	ldr	r3, [r7, #20]
 8019746:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801974a:	f023 0301 	bic.w	r3, r3, #1
 801974e:	b2da      	uxtb	r2, r3
 8019750:	697b      	ldr	r3, [r7, #20]
 8019752:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019756:	697b      	ldr	r3, [r7, #20]
 8019758:	6a1b      	ldr	r3, [r3, #32]
 801975a:	6978      	ldr	r0, [r7, #20]
 801975c:	4798      	blx	r3
}
 801975e:	bf00      	nop
 8019760:	3718      	adds	r7, #24
 8019762:	46bd      	mov	sp, r7
 8019764:	bd80      	pop	{r7, pc}
 8019766:	bf00      	nop
 8019768:	200087b8 	.word	0x200087b8

0801976c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801976c:	b580      	push	{r7, lr}
 801976e:	b084      	sub	sp, #16
 8019770:	af00      	add	r7, sp, #0
 8019772:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019774:	f107 0308 	add.w	r3, r7, #8
 8019778:	4618      	mov	r0, r3
 801977a:	f000 f859 	bl	8019830 <prvGetNextExpireTime>
 801977e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019780:	68bb      	ldr	r3, [r7, #8]
 8019782:	4619      	mov	r1, r3
 8019784:	68f8      	ldr	r0, [r7, #12]
 8019786:	f000 f805 	bl	8019794 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801978a:	f000 f8d7 	bl	801993c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801978e:	bf00      	nop
 8019790:	e7f0      	b.n	8019774 <prvTimerTask+0x8>
	...

08019794 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019794:	b580      	push	{r7, lr}
 8019796:	b084      	sub	sp, #16
 8019798:	af00      	add	r7, sp, #0
 801979a:	6078      	str	r0, [r7, #4]
 801979c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801979e:	f7ff f919 	bl	80189d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80197a2:	f107 0308 	add.w	r3, r7, #8
 80197a6:	4618      	mov	r0, r3
 80197a8:	f000 f866 	bl	8019878 <prvSampleTimeNow>
 80197ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80197ae:	68bb      	ldr	r3, [r7, #8]
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d130      	bne.n	8019816 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80197b4:	683b      	ldr	r3, [r7, #0]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d10a      	bne.n	80197d0 <prvProcessTimerOrBlockTask+0x3c>
 80197ba:	687a      	ldr	r2, [r7, #4]
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	429a      	cmp	r2, r3
 80197c0:	d806      	bhi.n	80197d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80197c2:	f7ff f915 	bl	80189f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80197c6:	68f9      	ldr	r1, [r7, #12]
 80197c8:	6878      	ldr	r0, [r7, #4]
 80197ca:	f7ff ff81 	bl	80196d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80197ce:	e024      	b.n	801981a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80197d0:	683b      	ldr	r3, [r7, #0]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d008      	beq.n	80197e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80197d6:	4b13      	ldr	r3, [pc, #76]	@ (8019824 <prvProcessTimerOrBlockTask+0x90>)
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d101      	bne.n	80197e4 <prvProcessTimerOrBlockTask+0x50>
 80197e0:	2301      	movs	r3, #1
 80197e2:	e000      	b.n	80197e6 <prvProcessTimerOrBlockTask+0x52>
 80197e4:	2300      	movs	r3, #0
 80197e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80197e8:	4b0f      	ldr	r3, [pc, #60]	@ (8019828 <prvProcessTimerOrBlockTask+0x94>)
 80197ea:	6818      	ldr	r0, [r3, #0]
 80197ec:	687a      	ldr	r2, [r7, #4]
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	1ad3      	subs	r3, r2, r3
 80197f2:	683a      	ldr	r2, [r7, #0]
 80197f4:	4619      	mov	r1, r3
 80197f6:	f7fe fe55 	bl	80184a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80197fa:	f7ff f8f9 	bl	80189f0 <xTaskResumeAll>
 80197fe:	4603      	mov	r3, r0
 8019800:	2b00      	cmp	r3, #0
 8019802:	d10a      	bne.n	801981a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019804:	4b09      	ldr	r3, [pc, #36]	@ (801982c <prvProcessTimerOrBlockTask+0x98>)
 8019806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801980a:	601a      	str	r2, [r3, #0]
 801980c:	f3bf 8f4f 	dsb	sy
 8019810:	f3bf 8f6f 	isb	sy
}
 8019814:	e001      	b.n	801981a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019816:	f7ff f8eb 	bl	80189f0 <xTaskResumeAll>
}
 801981a:	bf00      	nop
 801981c:	3710      	adds	r7, #16
 801981e:	46bd      	mov	sp, r7
 8019820:	bd80      	pop	{r7, pc}
 8019822:	bf00      	nop
 8019824:	200087bc 	.word	0x200087bc
 8019828:	200087c0 	.word	0x200087c0
 801982c:	e000ed04 	.word	0xe000ed04

08019830 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019830:	b480      	push	{r7}
 8019832:	b085      	sub	sp, #20
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019838:	4b0e      	ldr	r3, [pc, #56]	@ (8019874 <prvGetNextExpireTime+0x44>)
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	681b      	ldr	r3, [r3, #0]
 801983e:	2b00      	cmp	r3, #0
 8019840:	d101      	bne.n	8019846 <prvGetNextExpireTime+0x16>
 8019842:	2201      	movs	r2, #1
 8019844:	e000      	b.n	8019848 <prvGetNextExpireTime+0x18>
 8019846:	2200      	movs	r2, #0
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	2b00      	cmp	r3, #0
 8019852:	d105      	bne.n	8019860 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019854:	4b07      	ldr	r3, [pc, #28]	@ (8019874 <prvGetNextExpireTime+0x44>)
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	68db      	ldr	r3, [r3, #12]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	60fb      	str	r3, [r7, #12]
 801985e:	e001      	b.n	8019864 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019860:	2300      	movs	r3, #0
 8019862:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019864:	68fb      	ldr	r3, [r7, #12]
}
 8019866:	4618      	mov	r0, r3
 8019868:	3714      	adds	r7, #20
 801986a:	46bd      	mov	sp, r7
 801986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019870:	4770      	bx	lr
 8019872:	bf00      	nop
 8019874:	200087b8 	.word	0x200087b8

08019878 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b084      	sub	sp, #16
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019880:	f7ff f954 	bl	8018b2c <xTaskGetTickCount>
 8019884:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019886:	4b0b      	ldr	r3, [pc, #44]	@ (80198b4 <prvSampleTimeNow+0x3c>)
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	68fa      	ldr	r2, [r7, #12]
 801988c:	429a      	cmp	r2, r3
 801988e:	d205      	bcs.n	801989c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019890:	f000 f93a 	bl	8019b08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	2201      	movs	r2, #1
 8019898:	601a      	str	r2, [r3, #0]
 801989a:	e002      	b.n	80198a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	2200      	movs	r2, #0
 80198a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80198a2:	4a04      	ldr	r2, [pc, #16]	@ (80198b4 <prvSampleTimeNow+0x3c>)
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80198a8:	68fb      	ldr	r3, [r7, #12]
}
 80198aa:	4618      	mov	r0, r3
 80198ac:	3710      	adds	r7, #16
 80198ae:	46bd      	mov	sp, r7
 80198b0:	bd80      	pop	{r7, pc}
 80198b2:	bf00      	nop
 80198b4:	200087c8 	.word	0x200087c8

080198b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80198b8:	b580      	push	{r7, lr}
 80198ba:	b086      	sub	sp, #24
 80198bc:	af00      	add	r7, sp, #0
 80198be:	60f8      	str	r0, [r7, #12]
 80198c0:	60b9      	str	r1, [r7, #8]
 80198c2:	607a      	str	r2, [r7, #4]
 80198c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80198c6:	2300      	movs	r3, #0
 80198c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	68ba      	ldr	r2, [r7, #8]
 80198ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	68fa      	ldr	r2, [r7, #12]
 80198d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80198d6:	68ba      	ldr	r2, [r7, #8]
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	429a      	cmp	r2, r3
 80198dc:	d812      	bhi.n	8019904 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80198de:	687a      	ldr	r2, [r7, #4]
 80198e0:	683b      	ldr	r3, [r7, #0]
 80198e2:	1ad2      	subs	r2, r2, r3
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	699b      	ldr	r3, [r3, #24]
 80198e8:	429a      	cmp	r2, r3
 80198ea:	d302      	bcc.n	80198f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80198ec:	2301      	movs	r3, #1
 80198ee:	617b      	str	r3, [r7, #20]
 80198f0:	e01b      	b.n	801992a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80198f2:	4b10      	ldr	r3, [pc, #64]	@ (8019934 <prvInsertTimerInActiveList+0x7c>)
 80198f4:	681a      	ldr	r2, [r3, #0]
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	3304      	adds	r3, #4
 80198fa:	4619      	mov	r1, r3
 80198fc:	4610      	mov	r0, r2
 80198fe:	f7fd fe0a 	bl	8017516 <vListInsert>
 8019902:	e012      	b.n	801992a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019904:	687a      	ldr	r2, [r7, #4]
 8019906:	683b      	ldr	r3, [r7, #0]
 8019908:	429a      	cmp	r2, r3
 801990a:	d206      	bcs.n	801991a <prvInsertTimerInActiveList+0x62>
 801990c:	68ba      	ldr	r2, [r7, #8]
 801990e:	683b      	ldr	r3, [r7, #0]
 8019910:	429a      	cmp	r2, r3
 8019912:	d302      	bcc.n	801991a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019914:	2301      	movs	r3, #1
 8019916:	617b      	str	r3, [r7, #20]
 8019918:	e007      	b.n	801992a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801991a:	4b07      	ldr	r3, [pc, #28]	@ (8019938 <prvInsertTimerInActiveList+0x80>)
 801991c:	681a      	ldr	r2, [r3, #0]
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	3304      	adds	r3, #4
 8019922:	4619      	mov	r1, r3
 8019924:	4610      	mov	r0, r2
 8019926:	f7fd fdf6 	bl	8017516 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801992a:	697b      	ldr	r3, [r7, #20]
}
 801992c:	4618      	mov	r0, r3
 801992e:	3718      	adds	r7, #24
 8019930:	46bd      	mov	sp, r7
 8019932:	bd80      	pop	{r7, pc}
 8019934:	200087bc 	.word	0x200087bc
 8019938:	200087b8 	.word	0x200087b8

0801993c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b08e      	sub	sp, #56	@ 0x38
 8019940:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019942:	e0ce      	b.n	8019ae2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	2b00      	cmp	r3, #0
 8019948:	da19      	bge.n	801997e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801994a:	1d3b      	adds	r3, r7, #4
 801994c:	3304      	adds	r3, #4
 801994e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019952:	2b00      	cmp	r3, #0
 8019954:	d10b      	bne.n	801996e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8019956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801995a:	f383 8811 	msr	BASEPRI, r3
 801995e:	f3bf 8f6f 	isb	sy
 8019962:	f3bf 8f4f 	dsb	sy
 8019966:	61fb      	str	r3, [r7, #28]
}
 8019968:	bf00      	nop
 801996a:	bf00      	nop
 801996c:	e7fd      	b.n	801996a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801996e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019974:	6850      	ldr	r0, [r2, #4]
 8019976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019978:	6892      	ldr	r2, [r2, #8]
 801997a:	4611      	mov	r1, r2
 801997c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	2b00      	cmp	r3, #0
 8019982:	f2c0 80ae 	blt.w	8019ae2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801998c:	695b      	ldr	r3, [r3, #20]
 801998e:	2b00      	cmp	r3, #0
 8019990:	d004      	beq.n	801999c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019994:	3304      	adds	r3, #4
 8019996:	4618      	mov	r0, r3
 8019998:	f7fd fdf6 	bl	8017588 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801999c:	463b      	mov	r3, r7
 801999e:	4618      	mov	r0, r3
 80199a0:	f7ff ff6a 	bl	8019878 <prvSampleTimeNow>
 80199a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	2b09      	cmp	r3, #9
 80199aa:	f200 8097 	bhi.w	8019adc <prvProcessReceivedCommands+0x1a0>
 80199ae:	a201      	add	r2, pc, #4	@ (adr r2, 80199b4 <prvProcessReceivedCommands+0x78>)
 80199b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199b4:	080199dd 	.word	0x080199dd
 80199b8:	080199dd 	.word	0x080199dd
 80199bc:	080199dd 	.word	0x080199dd
 80199c0:	08019a53 	.word	0x08019a53
 80199c4:	08019a67 	.word	0x08019a67
 80199c8:	08019ab3 	.word	0x08019ab3
 80199cc:	080199dd 	.word	0x080199dd
 80199d0:	080199dd 	.word	0x080199dd
 80199d4:	08019a53 	.word	0x08019a53
 80199d8:	08019a67 	.word	0x08019a67
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80199dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80199e2:	f043 0301 	orr.w	r3, r3, #1
 80199e6:	b2da      	uxtb	r2, r3
 80199e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80199ee:	68ba      	ldr	r2, [r7, #8]
 80199f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199f2:	699b      	ldr	r3, [r3, #24]
 80199f4:	18d1      	adds	r1, r2, r3
 80199f6:	68bb      	ldr	r3, [r7, #8]
 80199f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80199fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80199fc:	f7ff ff5c 	bl	80198b8 <prvInsertTimerInActiveList>
 8019a00:	4603      	mov	r3, r0
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d06c      	beq.n	8019ae0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a08:	6a1b      	ldr	r3, [r3, #32]
 8019a0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019a0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019a14:	f003 0304 	and.w	r3, r3, #4
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d061      	beq.n	8019ae0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019a1c:	68ba      	ldr	r2, [r7, #8]
 8019a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a20:	699b      	ldr	r3, [r3, #24]
 8019a22:	441a      	add	r2, r3
 8019a24:	2300      	movs	r3, #0
 8019a26:	9300      	str	r3, [sp, #0]
 8019a28:	2300      	movs	r3, #0
 8019a2a:	2100      	movs	r1, #0
 8019a2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019a2e:	f7ff fe01 	bl	8019634 <xTimerGenericCommand>
 8019a32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019a34:	6a3b      	ldr	r3, [r7, #32]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d152      	bne.n	8019ae0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8019a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a3e:	f383 8811 	msr	BASEPRI, r3
 8019a42:	f3bf 8f6f 	isb	sy
 8019a46:	f3bf 8f4f 	dsb	sy
 8019a4a:	61bb      	str	r3, [r7, #24]
}
 8019a4c:	bf00      	nop
 8019a4e:	bf00      	nop
 8019a50:	e7fd      	b.n	8019a4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019a58:	f023 0301 	bic.w	r3, r3, #1
 8019a5c:	b2da      	uxtb	r2, r3
 8019a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8019a64:	e03d      	b.n	8019ae2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019a6c:	f043 0301 	orr.w	r3, r3, #1
 8019a70:	b2da      	uxtb	r2, r3
 8019a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019a78:	68ba      	ldr	r2, [r7, #8]
 8019a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a80:	699b      	ldr	r3, [r3, #24]
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d10b      	bne.n	8019a9e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8019a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a8a:	f383 8811 	msr	BASEPRI, r3
 8019a8e:	f3bf 8f6f 	isb	sy
 8019a92:	f3bf 8f4f 	dsb	sy
 8019a96:	617b      	str	r3, [r7, #20]
}
 8019a98:	bf00      	nop
 8019a9a:	bf00      	nop
 8019a9c:	e7fd      	b.n	8019a9a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019aa0:	699a      	ldr	r2, [r3, #24]
 8019aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019aa4:	18d1      	adds	r1, r2, r3
 8019aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019aaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019aac:	f7ff ff04 	bl	80198b8 <prvInsertTimerInActiveList>
					break;
 8019ab0:	e017      	b.n	8019ae2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019ab8:	f003 0302 	and.w	r3, r3, #2
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d103      	bne.n	8019ac8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8019ac0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019ac2:	f000 fbe9 	bl	801a298 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019ac6:	e00c      	b.n	8019ae2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019aca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019ace:	f023 0301 	bic.w	r3, r3, #1
 8019ad2:	b2da      	uxtb	r2, r3
 8019ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ad6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8019ada:	e002      	b.n	8019ae2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8019adc:	bf00      	nop
 8019ade:	e000      	b.n	8019ae2 <prvProcessReceivedCommands+0x1a6>
					break;
 8019ae0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019ae2:	4b08      	ldr	r3, [pc, #32]	@ (8019b04 <prvProcessReceivedCommands+0x1c8>)
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	1d39      	adds	r1, r7, #4
 8019ae8:	2200      	movs	r2, #0
 8019aea:	4618      	mov	r0, r3
 8019aec:	f7fe f914 	bl	8017d18 <xQueueReceive>
 8019af0:	4603      	mov	r3, r0
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	f47f af26 	bne.w	8019944 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8019af8:	bf00      	nop
 8019afa:	bf00      	nop
 8019afc:	3730      	adds	r7, #48	@ 0x30
 8019afe:	46bd      	mov	sp, r7
 8019b00:	bd80      	pop	{r7, pc}
 8019b02:	bf00      	nop
 8019b04:	200087c0 	.word	0x200087c0

08019b08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b088      	sub	sp, #32
 8019b0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019b0e:	e049      	b.n	8019ba4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019b10:	4b2e      	ldr	r3, [pc, #184]	@ (8019bcc <prvSwitchTimerLists+0xc4>)
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	68db      	ldr	r3, [r3, #12]
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8019bcc <prvSwitchTimerLists+0xc4>)
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	68db      	ldr	r3, [r3, #12]
 8019b20:	68db      	ldr	r3, [r3, #12]
 8019b22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	3304      	adds	r3, #4
 8019b28:	4618      	mov	r0, r3
 8019b2a:	f7fd fd2d 	bl	8017588 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	6a1b      	ldr	r3, [r3, #32]
 8019b32:	68f8      	ldr	r0, [r7, #12]
 8019b34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019b3c:	f003 0304 	and.w	r3, r3, #4
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d02f      	beq.n	8019ba4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	699b      	ldr	r3, [r3, #24]
 8019b48:	693a      	ldr	r2, [r7, #16]
 8019b4a:	4413      	add	r3, r2
 8019b4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019b4e:	68ba      	ldr	r2, [r7, #8]
 8019b50:	693b      	ldr	r3, [r7, #16]
 8019b52:	429a      	cmp	r2, r3
 8019b54:	d90e      	bls.n	8019b74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	68ba      	ldr	r2, [r7, #8]
 8019b5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	68fa      	ldr	r2, [r7, #12]
 8019b60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019b62:	4b1a      	ldr	r3, [pc, #104]	@ (8019bcc <prvSwitchTimerLists+0xc4>)
 8019b64:	681a      	ldr	r2, [r3, #0]
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	3304      	adds	r3, #4
 8019b6a:	4619      	mov	r1, r3
 8019b6c:	4610      	mov	r0, r2
 8019b6e:	f7fd fcd2 	bl	8017516 <vListInsert>
 8019b72:	e017      	b.n	8019ba4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019b74:	2300      	movs	r3, #0
 8019b76:	9300      	str	r3, [sp, #0]
 8019b78:	2300      	movs	r3, #0
 8019b7a:	693a      	ldr	r2, [r7, #16]
 8019b7c:	2100      	movs	r1, #0
 8019b7e:	68f8      	ldr	r0, [r7, #12]
 8019b80:	f7ff fd58 	bl	8019634 <xTimerGenericCommand>
 8019b84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	d10b      	bne.n	8019ba4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8019b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b90:	f383 8811 	msr	BASEPRI, r3
 8019b94:	f3bf 8f6f 	isb	sy
 8019b98:	f3bf 8f4f 	dsb	sy
 8019b9c:	603b      	str	r3, [r7, #0]
}
 8019b9e:	bf00      	nop
 8019ba0:	bf00      	nop
 8019ba2:	e7fd      	b.n	8019ba0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019ba4:	4b09      	ldr	r3, [pc, #36]	@ (8019bcc <prvSwitchTimerLists+0xc4>)
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d1b0      	bne.n	8019b10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019bae:	4b07      	ldr	r3, [pc, #28]	@ (8019bcc <prvSwitchTimerLists+0xc4>)
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019bb4:	4b06      	ldr	r3, [pc, #24]	@ (8019bd0 <prvSwitchTimerLists+0xc8>)
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	4a04      	ldr	r2, [pc, #16]	@ (8019bcc <prvSwitchTimerLists+0xc4>)
 8019bba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019bbc:	4a04      	ldr	r2, [pc, #16]	@ (8019bd0 <prvSwitchTimerLists+0xc8>)
 8019bbe:	697b      	ldr	r3, [r7, #20]
 8019bc0:	6013      	str	r3, [r2, #0]
}
 8019bc2:	bf00      	nop
 8019bc4:	3718      	adds	r7, #24
 8019bc6:	46bd      	mov	sp, r7
 8019bc8:	bd80      	pop	{r7, pc}
 8019bca:	bf00      	nop
 8019bcc:	200087b8 	.word	0x200087b8
 8019bd0:	200087bc 	.word	0x200087bc

08019bd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019bd4:	b580      	push	{r7, lr}
 8019bd6:	b082      	sub	sp, #8
 8019bd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019bda:	f000 f96d 	bl	8019eb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019bde:	4b15      	ldr	r3, [pc, #84]	@ (8019c34 <prvCheckForValidListAndQueue+0x60>)
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d120      	bne.n	8019c28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019be6:	4814      	ldr	r0, [pc, #80]	@ (8019c38 <prvCheckForValidListAndQueue+0x64>)
 8019be8:	f7fd fc44 	bl	8017474 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019bec:	4813      	ldr	r0, [pc, #76]	@ (8019c3c <prvCheckForValidListAndQueue+0x68>)
 8019bee:	f7fd fc41 	bl	8017474 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019bf2:	4b13      	ldr	r3, [pc, #76]	@ (8019c40 <prvCheckForValidListAndQueue+0x6c>)
 8019bf4:	4a10      	ldr	r2, [pc, #64]	@ (8019c38 <prvCheckForValidListAndQueue+0x64>)
 8019bf6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019bf8:	4b12      	ldr	r3, [pc, #72]	@ (8019c44 <prvCheckForValidListAndQueue+0x70>)
 8019bfa:	4a10      	ldr	r2, [pc, #64]	@ (8019c3c <prvCheckForValidListAndQueue+0x68>)
 8019bfc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019bfe:	2300      	movs	r3, #0
 8019c00:	9300      	str	r3, [sp, #0]
 8019c02:	4b11      	ldr	r3, [pc, #68]	@ (8019c48 <prvCheckForValidListAndQueue+0x74>)
 8019c04:	4a11      	ldr	r2, [pc, #68]	@ (8019c4c <prvCheckForValidListAndQueue+0x78>)
 8019c06:	2110      	movs	r1, #16
 8019c08:	200a      	movs	r0, #10
 8019c0a:	f7fd fd51 	bl	80176b0 <xQueueGenericCreateStatic>
 8019c0e:	4603      	mov	r3, r0
 8019c10:	4a08      	ldr	r2, [pc, #32]	@ (8019c34 <prvCheckForValidListAndQueue+0x60>)
 8019c12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019c14:	4b07      	ldr	r3, [pc, #28]	@ (8019c34 <prvCheckForValidListAndQueue+0x60>)
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d005      	beq.n	8019c28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019c1c:	4b05      	ldr	r3, [pc, #20]	@ (8019c34 <prvCheckForValidListAndQueue+0x60>)
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	490b      	ldr	r1, [pc, #44]	@ (8019c50 <prvCheckForValidListAndQueue+0x7c>)
 8019c22:	4618      	mov	r0, r3
 8019c24:	f7fe fc14 	bl	8018450 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019c28:	f000 f978 	bl	8019f1c <vPortExitCritical>
}
 8019c2c:	bf00      	nop
 8019c2e:	46bd      	mov	sp, r7
 8019c30:	bd80      	pop	{r7, pc}
 8019c32:	bf00      	nop
 8019c34:	200087c0 	.word	0x200087c0
 8019c38:	20008790 	.word	0x20008790
 8019c3c:	200087a4 	.word	0x200087a4
 8019c40:	200087b8 	.word	0x200087b8
 8019c44:	200087bc 	.word	0x200087bc
 8019c48:	2000886c 	.word	0x2000886c
 8019c4c:	200087cc 	.word	0x200087cc
 8019c50:	0801b7c0 	.word	0x0801b7c0

08019c54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019c54:	b480      	push	{r7}
 8019c56:	b085      	sub	sp, #20
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	60f8      	str	r0, [r7, #12]
 8019c5c:	60b9      	str	r1, [r7, #8]
 8019c5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	3b04      	subs	r3, #4
 8019c64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019c66:	68fb      	ldr	r3, [r7, #12]
 8019c68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8019c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	3b04      	subs	r3, #4
 8019c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019c74:	68bb      	ldr	r3, [r7, #8]
 8019c76:	f023 0201 	bic.w	r2, r3, #1
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	3b04      	subs	r3, #4
 8019c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019c84:	4a0c      	ldr	r2, [pc, #48]	@ (8019cb8 <pxPortInitialiseStack+0x64>)
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	3b14      	subs	r3, #20
 8019c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019c90:	687a      	ldr	r2, [r7, #4]
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019c96:	68fb      	ldr	r3, [r7, #12]
 8019c98:	3b04      	subs	r3, #4
 8019c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	f06f 0202 	mvn.w	r2, #2
 8019ca2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019ca4:	68fb      	ldr	r3, [r7, #12]
 8019ca6:	3b20      	subs	r3, #32
 8019ca8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019caa:	68fb      	ldr	r3, [r7, #12]
}
 8019cac:	4618      	mov	r0, r3
 8019cae:	3714      	adds	r7, #20
 8019cb0:	46bd      	mov	sp, r7
 8019cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb6:	4770      	bx	lr
 8019cb8:	08019cbd 	.word	0x08019cbd

08019cbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019cbc:	b480      	push	{r7}
 8019cbe:	b085      	sub	sp, #20
 8019cc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019cc2:	2300      	movs	r3, #0
 8019cc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019cc6:	4b13      	ldr	r3, [pc, #76]	@ (8019d14 <prvTaskExitError+0x58>)
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019cce:	d00b      	beq.n	8019ce8 <prvTaskExitError+0x2c>
	__asm volatile
 8019cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cd4:	f383 8811 	msr	BASEPRI, r3
 8019cd8:	f3bf 8f6f 	isb	sy
 8019cdc:	f3bf 8f4f 	dsb	sy
 8019ce0:	60fb      	str	r3, [r7, #12]
}
 8019ce2:	bf00      	nop
 8019ce4:	bf00      	nop
 8019ce6:	e7fd      	b.n	8019ce4 <prvTaskExitError+0x28>
	__asm volatile
 8019ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cec:	f383 8811 	msr	BASEPRI, r3
 8019cf0:	f3bf 8f6f 	isb	sy
 8019cf4:	f3bf 8f4f 	dsb	sy
 8019cf8:	60bb      	str	r3, [r7, #8]
}
 8019cfa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019cfc:	bf00      	nop
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d0fc      	beq.n	8019cfe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019d04:	bf00      	nop
 8019d06:	bf00      	nop
 8019d08:	3714      	adds	r7, #20
 8019d0a:	46bd      	mov	sp, r7
 8019d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d10:	4770      	bx	lr
 8019d12:	bf00      	nop
 8019d14:	20000084 	.word	0x20000084
	...

08019d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019d20:	4b07      	ldr	r3, [pc, #28]	@ (8019d40 <pxCurrentTCBConst2>)
 8019d22:	6819      	ldr	r1, [r3, #0]
 8019d24:	6808      	ldr	r0, [r1, #0]
 8019d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d2a:	f380 8809 	msr	PSP, r0
 8019d2e:	f3bf 8f6f 	isb	sy
 8019d32:	f04f 0000 	mov.w	r0, #0
 8019d36:	f380 8811 	msr	BASEPRI, r0
 8019d3a:	4770      	bx	lr
 8019d3c:	f3af 8000 	nop.w

08019d40 <pxCurrentTCBConst2>:
 8019d40:	20008290 	.word	0x20008290
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019d44:	bf00      	nop
 8019d46:	bf00      	nop

08019d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019d48:	4808      	ldr	r0, [pc, #32]	@ (8019d6c <prvPortStartFirstTask+0x24>)
 8019d4a:	6800      	ldr	r0, [r0, #0]
 8019d4c:	6800      	ldr	r0, [r0, #0]
 8019d4e:	f380 8808 	msr	MSP, r0
 8019d52:	f04f 0000 	mov.w	r0, #0
 8019d56:	f380 8814 	msr	CONTROL, r0
 8019d5a:	b662      	cpsie	i
 8019d5c:	b661      	cpsie	f
 8019d5e:	f3bf 8f4f 	dsb	sy
 8019d62:	f3bf 8f6f 	isb	sy
 8019d66:	df00      	svc	0
 8019d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019d6a:	bf00      	nop
 8019d6c:	e000ed08 	.word	0xe000ed08

08019d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019d70:	b580      	push	{r7, lr}
 8019d72:	b086      	sub	sp, #24
 8019d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019d76:	4b47      	ldr	r3, [pc, #284]	@ (8019e94 <xPortStartScheduler+0x124>)
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	4a47      	ldr	r2, [pc, #284]	@ (8019e98 <xPortStartScheduler+0x128>)
 8019d7c:	4293      	cmp	r3, r2
 8019d7e:	d10b      	bne.n	8019d98 <xPortStartScheduler+0x28>
	__asm volatile
 8019d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d84:	f383 8811 	msr	BASEPRI, r3
 8019d88:	f3bf 8f6f 	isb	sy
 8019d8c:	f3bf 8f4f 	dsb	sy
 8019d90:	613b      	str	r3, [r7, #16]
}
 8019d92:	bf00      	nop
 8019d94:	bf00      	nop
 8019d96:	e7fd      	b.n	8019d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019d98:	4b3e      	ldr	r3, [pc, #248]	@ (8019e94 <xPortStartScheduler+0x124>)
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8019e9c <xPortStartScheduler+0x12c>)
 8019d9e:	4293      	cmp	r3, r2
 8019da0:	d10b      	bne.n	8019dba <xPortStartScheduler+0x4a>
	__asm volatile
 8019da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019da6:	f383 8811 	msr	BASEPRI, r3
 8019daa:	f3bf 8f6f 	isb	sy
 8019dae:	f3bf 8f4f 	dsb	sy
 8019db2:	60fb      	str	r3, [r7, #12]
}
 8019db4:	bf00      	nop
 8019db6:	bf00      	nop
 8019db8:	e7fd      	b.n	8019db6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019dba:	4b39      	ldr	r3, [pc, #228]	@ (8019ea0 <xPortStartScheduler+0x130>)
 8019dbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019dbe:	697b      	ldr	r3, [r7, #20]
 8019dc0:	781b      	ldrb	r3, [r3, #0]
 8019dc2:	b2db      	uxtb	r3, r3
 8019dc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019dc6:	697b      	ldr	r3, [r7, #20]
 8019dc8:	22ff      	movs	r2, #255	@ 0xff
 8019dca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019dcc:	697b      	ldr	r3, [r7, #20]
 8019dce:	781b      	ldrb	r3, [r3, #0]
 8019dd0:	b2db      	uxtb	r3, r3
 8019dd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019dd4:	78fb      	ldrb	r3, [r7, #3]
 8019dd6:	b2db      	uxtb	r3, r3
 8019dd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8019ddc:	b2da      	uxtb	r2, r3
 8019dde:	4b31      	ldr	r3, [pc, #196]	@ (8019ea4 <xPortStartScheduler+0x134>)
 8019de0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019de2:	4b31      	ldr	r3, [pc, #196]	@ (8019ea8 <xPortStartScheduler+0x138>)
 8019de4:	2207      	movs	r2, #7
 8019de6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019de8:	e009      	b.n	8019dfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8019dea:	4b2f      	ldr	r3, [pc, #188]	@ (8019ea8 <xPortStartScheduler+0x138>)
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	3b01      	subs	r3, #1
 8019df0:	4a2d      	ldr	r2, [pc, #180]	@ (8019ea8 <xPortStartScheduler+0x138>)
 8019df2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019df4:	78fb      	ldrb	r3, [r7, #3]
 8019df6:	b2db      	uxtb	r3, r3
 8019df8:	005b      	lsls	r3, r3, #1
 8019dfa:	b2db      	uxtb	r3, r3
 8019dfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019dfe:	78fb      	ldrb	r3, [r7, #3]
 8019e00:	b2db      	uxtb	r3, r3
 8019e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019e06:	2b80      	cmp	r3, #128	@ 0x80
 8019e08:	d0ef      	beq.n	8019dea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019e0a:	4b27      	ldr	r3, [pc, #156]	@ (8019ea8 <xPortStartScheduler+0x138>)
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	f1c3 0307 	rsb	r3, r3, #7
 8019e12:	2b04      	cmp	r3, #4
 8019e14:	d00b      	beq.n	8019e2e <xPortStartScheduler+0xbe>
	__asm volatile
 8019e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e1a:	f383 8811 	msr	BASEPRI, r3
 8019e1e:	f3bf 8f6f 	isb	sy
 8019e22:	f3bf 8f4f 	dsb	sy
 8019e26:	60bb      	str	r3, [r7, #8]
}
 8019e28:	bf00      	nop
 8019e2a:	bf00      	nop
 8019e2c:	e7fd      	b.n	8019e2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8019ea8 <xPortStartScheduler+0x138>)
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	021b      	lsls	r3, r3, #8
 8019e34:	4a1c      	ldr	r2, [pc, #112]	@ (8019ea8 <xPortStartScheduler+0x138>)
 8019e36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019e38:	4b1b      	ldr	r3, [pc, #108]	@ (8019ea8 <xPortStartScheduler+0x138>)
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8019e40:	4a19      	ldr	r2, [pc, #100]	@ (8019ea8 <xPortStartScheduler+0x138>)
 8019e42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	b2da      	uxtb	r2, r3
 8019e48:	697b      	ldr	r3, [r7, #20]
 8019e4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019e4c:	4b17      	ldr	r3, [pc, #92]	@ (8019eac <xPortStartScheduler+0x13c>)
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	4a16      	ldr	r2, [pc, #88]	@ (8019eac <xPortStartScheduler+0x13c>)
 8019e52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8019e56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019e58:	4b14      	ldr	r3, [pc, #80]	@ (8019eac <xPortStartScheduler+0x13c>)
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	4a13      	ldr	r2, [pc, #76]	@ (8019eac <xPortStartScheduler+0x13c>)
 8019e5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8019e62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019e64:	f000 f8da 	bl	801a01c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019e68:	4b11      	ldr	r3, [pc, #68]	@ (8019eb0 <xPortStartScheduler+0x140>)
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019e6e:	f000 f8f9 	bl	801a064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019e72:	4b10      	ldr	r3, [pc, #64]	@ (8019eb4 <xPortStartScheduler+0x144>)
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	4a0f      	ldr	r2, [pc, #60]	@ (8019eb4 <xPortStartScheduler+0x144>)
 8019e78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8019e7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019e7e:	f7ff ff63 	bl	8019d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019e82:	f7fe ff1d 	bl	8018cc0 <vTaskSwitchContext>
	prvTaskExitError();
 8019e86:	f7ff ff19 	bl	8019cbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019e8a:	2300      	movs	r3, #0
}
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	3718      	adds	r7, #24
 8019e90:	46bd      	mov	sp, r7
 8019e92:	bd80      	pop	{r7, pc}
 8019e94:	e000ed00 	.word	0xe000ed00
 8019e98:	410fc271 	.word	0x410fc271
 8019e9c:	410fc270 	.word	0x410fc270
 8019ea0:	e000e400 	.word	0xe000e400
 8019ea4:	200088bc 	.word	0x200088bc
 8019ea8:	200088c0 	.word	0x200088c0
 8019eac:	e000ed20 	.word	0xe000ed20
 8019eb0:	20000084 	.word	0x20000084
 8019eb4:	e000ef34 	.word	0xe000ef34

08019eb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019eb8:	b480      	push	{r7}
 8019eba:	b083      	sub	sp, #12
 8019ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8019ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ec2:	f383 8811 	msr	BASEPRI, r3
 8019ec6:	f3bf 8f6f 	isb	sy
 8019eca:	f3bf 8f4f 	dsb	sy
 8019ece:	607b      	str	r3, [r7, #4]
}
 8019ed0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019ed2:	4b10      	ldr	r3, [pc, #64]	@ (8019f14 <vPortEnterCritical+0x5c>)
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	3301      	adds	r3, #1
 8019ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8019f14 <vPortEnterCritical+0x5c>)
 8019eda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019edc:	4b0d      	ldr	r3, [pc, #52]	@ (8019f14 <vPortEnterCritical+0x5c>)
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	2b01      	cmp	r3, #1
 8019ee2:	d110      	bne.n	8019f06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8019f18 <vPortEnterCritical+0x60>)
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	b2db      	uxtb	r3, r3
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d00b      	beq.n	8019f06 <vPortEnterCritical+0x4e>
	__asm volatile
 8019eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ef2:	f383 8811 	msr	BASEPRI, r3
 8019ef6:	f3bf 8f6f 	isb	sy
 8019efa:	f3bf 8f4f 	dsb	sy
 8019efe:	603b      	str	r3, [r7, #0]
}
 8019f00:	bf00      	nop
 8019f02:	bf00      	nop
 8019f04:	e7fd      	b.n	8019f02 <vPortEnterCritical+0x4a>
	}
}
 8019f06:	bf00      	nop
 8019f08:	370c      	adds	r7, #12
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f10:	4770      	bx	lr
 8019f12:	bf00      	nop
 8019f14:	20000084 	.word	0x20000084
 8019f18:	e000ed04 	.word	0xe000ed04

08019f1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019f1c:	b480      	push	{r7}
 8019f1e:	b083      	sub	sp, #12
 8019f20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019f22:	4b12      	ldr	r3, [pc, #72]	@ (8019f6c <vPortExitCritical+0x50>)
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d10b      	bne.n	8019f42 <vPortExitCritical+0x26>
	__asm volatile
 8019f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f2e:	f383 8811 	msr	BASEPRI, r3
 8019f32:	f3bf 8f6f 	isb	sy
 8019f36:	f3bf 8f4f 	dsb	sy
 8019f3a:	607b      	str	r3, [r7, #4]
}
 8019f3c:	bf00      	nop
 8019f3e:	bf00      	nop
 8019f40:	e7fd      	b.n	8019f3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019f42:	4b0a      	ldr	r3, [pc, #40]	@ (8019f6c <vPortExitCritical+0x50>)
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	3b01      	subs	r3, #1
 8019f48:	4a08      	ldr	r2, [pc, #32]	@ (8019f6c <vPortExitCritical+0x50>)
 8019f4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019f4c:	4b07      	ldr	r3, [pc, #28]	@ (8019f6c <vPortExitCritical+0x50>)
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d105      	bne.n	8019f60 <vPortExitCritical+0x44>
 8019f54:	2300      	movs	r3, #0
 8019f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019f58:	683b      	ldr	r3, [r7, #0]
 8019f5a:	f383 8811 	msr	BASEPRI, r3
}
 8019f5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019f60:	bf00      	nop
 8019f62:	370c      	adds	r7, #12
 8019f64:	46bd      	mov	sp, r7
 8019f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f6a:	4770      	bx	lr
 8019f6c:	20000084 	.word	0x20000084

08019f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019f70:	f3ef 8009 	mrs	r0, PSP
 8019f74:	f3bf 8f6f 	isb	sy
 8019f78:	4b15      	ldr	r3, [pc, #84]	@ (8019fd0 <pxCurrentTCBConst>)
 8019f7a:	681a      	ldr	r2, [r3, #0]
 8019f7c:	f01e 0f10 	tst.w	lr, #16
 8019f80:	bf08      	it	eq
 8019f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f8a:	6010      	str	r0, [r2, #0]
 8019f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019f90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8019f94:	f380 8811 	msr	BASEPRI, r0
 8019f98:	f3bf 8f4f 	dsb	sy
 8019f9c:	f3bf 8f6f 	isb	sy
 8019fa0:	f7fe fe8e 	bl	8018cc0 <vTaskSwitchContext>
 8019fa4:	f04f 0000 	mov.w	r0, #0
 8019fa8:	f380 8811 	msr	BASEPRI, r0
 8019fac:	bc09      	pop	{r0, r3}
 8019fae:	6819      	ldr	r1, [r3, #0]
 8019fb0:	6808      	ldr	r0, [r1, #0]
 8019fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fb6:	f01e 0f10 	tst.w	lr, #16
 8019fba:	bf08      	it	eq
 8019fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019fc0:	f380 8809 	msr	PSP, r0
 8019fc4:	f3bf 8f6f 	isb	sy
 8019fc8:	4770      	bx	lr
 8019fca:	bf00      	nop
 8019fcc:	f3af 8000 	nop.w

08019fd0 <pxCurrentTCBConst>:
 8019fd0:	20008290 	.word	0x20008290
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019fd4:	bf00      	nop
 8019fd6:	bf00      	nop

08019fd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b082      	sub	sp, #8
 8019fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8019fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fe2:	f383 8811 	msr	BASEPRI, r3
 8019fe6:	f3bf 8f6f 	isb	sy
 8019fea:	f3bf 8f4f 	dsb	sy
 8019fee:	607b      	str	r3, [r7, #4]
}
 8019ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019ff2:	f7fe fdab 	bl	8018b4c <xTaskIncrementTick>
 8019ff6:	4603      	mov	r3, r0
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d003      	beq.n	801a004 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019ffc:	4b06      	ldr	r3, [pc, #24]	@ (801a018 <xPortSysTickHandler+0x40>)
 8019ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a002:	601a      	str	r2, [r3, #0]
 801a004:	2300      	movs	r3, #0
 801a006:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a008:	683b      	ldr	r3, [r7, #0]
 801a00a:	f383 8811 	msr	BASEPRI, r3
}
 801a00e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a010:	bf00      	nop
 801a012:	3708      	adds	r7, #8
 801a014:	46bd      	mov	sp, r7
 801a016:	bd80      	pop	{r7, pc}
 801a018:	e000ed04 	.word	0xe000ed04

0801a01c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a01c:	b480      	push	{r7}
 801a01e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a020:	4b0b      	ldr	r3, [pc, #44]	@ (801a050 <vPortSetupTimerInterrupt+0x34>)
 801a022:	2200      	movs	r2, #0
 801a024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a026:	4b0b      	ldr	r3, [pc, #44]	@ (801a054 <vPortSetupTimerInterrupt+0x38>)
 801a028:	2200      	movs	r2, #0
 801a02a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a02c:	4b0a      	ldr	r3, [pc, #40]	@ (801a058 <vPortSetupTimerInterrupt+0x3c>)
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	4a0a      	ldr	r2, [pc, #40]	@ (801a05c <vPortSetupTimerInterrupt+0x40>)
 801a032:	fba2 2303 	umull	r2, r3, r2, r3
 801a036:	099b      	lsrs	r3, r3, #6
 801a038:	4a09      	ldr	r2, [pc, #36]	@ (801a060 <vPortSetupTimerInterrupt+0x44>)
 801a03a:	3b01      	subs	r3, #1
 801a03c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a03e:	4b04      	ldr	r3, [pc, #16]	@ (801a050 <vPortSetupTimerInterrupt+0x34>)
 801a040:	2207      	movs	r2, #7
 801a042:	601a      	str	r2, [r3, #0]
}
 801a044:	bf00      	nop
 801a046:	46bd      	mov	sp, r7
 801a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a04c:	4770      	bx	lr
 801a04e:	bf00      	nop
 801a050:	e000e010 	.word	0xe000e010
 801a054:	e000e018 	.word	0xe000e018
 801a058:	20000008 	.word	0x20000008
 801a05c:	10624dd3 	.word	0x10624dd3
 801a060:	e000e014 	.word	0xe000e014

0801a064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a064:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801a074 <vPortEnableVFP+0x10>
 801a068:	6801      	ldr	r1, [r0, #0]
 801a06a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801a06e:	6001      	str	r1, [r0, #0]
 801a070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a072:	bf00      	nop
 801a074:	e000ed88 	.word	0xe000ed88

0801a078 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a078:	b480      	push	{r7}
 801a07a:	b085      	sub	sp, #20
 801a07c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a07e:	f3ef 8305 	mrs	r3, IPSR
 801a082:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a084:	68fb      	ldr	r3, [r7, #12]
 801a086:	2b0f      	cmp	r3, #15
 801a088:	d915      	bls.n	801a0b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a08a:	4a18      	ldr	r2, [pc, #96]	@ (801a0ec <vPortValidateInterruptPriority+0x74>)
 801a08c:	68fb      	ldr	r3, [r7, #12]
 801a08e:	4413      	add	r3, r2
 801a090:	781b      	ldrb	r3, [r3, #0]
 801a092:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a094:	4b16      	ldr	r3, [pc, #88]	@ (801a0f0 <vPortValidateInterruptPriority+0x78>)
 801a096:	781b      	ldrb	r3, [r3, #0]
 801a098:	7afa      	ldrb	r2, [r7, #11]
 801a09a:	429a      	cmp	r2, r3
 801a09c:	d20b      	bcs.n	801a0b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801a09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a0a2:	f383 8811 	msr	BASEPRI, r3
 801a0a6:	f3bf 8f6f 	isb	sy
 801a0aa:	f3bf 8f4f 	dsb	sy
 801a0ae:	607b      	str	r3, [r7, #4]
}
 801a0b0:	bf00      	nop
 801a0b2:	bf00      	nop
 801a0b4:	e7fd      	b.n	801a0b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a0b6:	4b0f      	ldr	r3, [pc, #60]	@ (801a0f4 <vPortValidateInterruptPriority+0x7c>)
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801a0be:	4b0e      	ldr	r3, [pc, #56]	@ (801a0f8 <vPortValidateInterruptPriority+0x80>)
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	429a      	cmp	r2, r3
 801a0c4:	d90b      	bls.n	801a0de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 801a0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a0ca:	f383 8811 	msr	BASEPRI, r3
 801a0ce:	f3bf 8f6f 	isb	sy
 801a0d2:	f3bf 8f4f 	dsb	sy
 801a0d6:	603b      	str	r3, [r7, #0]
}
 801a0d8:	bf00      	nop
 801a0da:	bf00      	nop
 801a0dc:	e7fd      	b.n	801a0da <vPortValidateInterruptPriority+0x62>
	}
 801a0de:	bf00      	nop
 801a0e0:	3714      	adds	r7, #20
 801a0e2:	46bd      	mov	sp, r7
 801a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e8:	4770      	bx	lr
 801a0ea:	bf00      	nop
 801a0ec:	e000e3f0 	.word	0xe000e3f0
 801a0f0:	200088bc 	.word	0x200088bc
 801a0f4:	e000ed0c 	.word	0xe000ed0c
 801a0f8:	200088c0 	.word	0x200088c0

0801a0fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b08a      	sub	sp, #40	@ 0x28
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a104:	2300      	movs	r3, #0
 801a106:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a108:	f7fe fc64 	bl	80189d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a10c:	4b5c      	ldr	r3, [pc, #368]	@ (801a280 <pvPortMalloc+0x184>)
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	2b00      	cmp	r3, #0
 801a112:	d101      	bne.n	801a118 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a114:	f000 f924 	bl	801a360 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a118:	4b5a      	ldr	r3, [pc, #360]	@ (801a284 <pvPortMalloc+0x188>)
 801a11a:	681a      	ldr	r2, [r3, #0]
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	4013      	ands	r3, r2
 801a120:	2b00      	cmp	r3, #0
 801a122:	f040 8095 	bne.w	801a250 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d01e      	beq.n	801a16a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801a12c:	2208      	movs	r2, #8
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	4413      	add	r3, r2
 801a132:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	f003 0307 	and.w	r3, r3, #7
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d015      	beq.n	801a16a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	f023 0307 	bic.w	r3, r3, #7
 801a144:	3308      	adds	r3, #8
 801a146:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	f003 0307 	and.w	r3, r3, #7
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d00b      	beq.n	801a16a <pvPortMalloc+0x6e>
	__asm volatile
 801a152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a156:	f383 8811 	msr	BASEPRI, r3
 801a15a:	f3bf 8f6f 	isb	sy
 801a15e:	f3bf 8f4f 	dsb	sy
 801a162:	617b      	str	r3, [r7, #20]
}
 801a164:	bf00      	nop
 801a166:	bf00      	nop
 801a168:	e7fd      	b.n	801a166 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d06f      	beq.n	801a250 <pvPortMalloc+0x154>
 801a170:	4b45      	ldr	r3, [pc, #276]	@ (801a288 <pvPortMalloc+0x18c>)
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	687a      	ldr	r2, [r7, #4]
 801a176:	429a      	cmp	r2, r3
 801a178:	d86a      	bhi.n	801a250 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a17a:	4b44      	ldr	r3, [pc, #272]	@ (801a28c <pvPortMalloc+0x190>)
 801a17c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a17e:	4b43      	ldr	r3, [pc, #268]	@ (801a28c <pvPortMalloc+0x190>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a184:	e004      	b.n	801a190 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 801a186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a188:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a192:	685b      	ldr	r3, [r3, #4]
 801a194:	687a      	ldr	r2, [r7, #4]
 801a196:	429a      	cmp	r2, r3
 801a198:	d903      	bls.n	801a1a2 <pvPortMalloc+0xa6>
 801a19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d1f1      	bne.n	801a186 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a1a2:	4b37      	ldr	r3, [pc, #220]	@ (801a280 <pvPortMalloc+0x184>)
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a1a8:	429a      	cmp	r2, r3
 801a1aa:	d051      	beq.n	801a250 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a1ac:	6a3b      	ldr	r3, [r7, #32]
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	2208      	movs	r2, #8
 801a1b2:	4413      	add	r3, r2
 801a1b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1b8:	681a      	ldr	r2, [r3, #0]
 801a1ba:	6a3b      	ldr	r3, [r7, #32]
 801a1bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1c0:	685a      	ldr	r2, [r3, #4]
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	1ad2      	subs	r2, r2, r3
 801a1c6:	2308      	movs	r3, #8
 801a1c8:	005b      	lsls	r3, r3, #1
 801a1ca:	429a      	cmp	r2, r3
 801a1cc:	d920      	bls.n	801a210 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a1ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	4413      	add	r3, r2
 801a1d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a1d6:	69bb      	ldr	r3, [r7, #24]
 801a1d8:	f003 0307 	and.w	r3, r3, #7
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d00b      	beq.n	801a1f8 <pvPortMalloc+0xfc>
	__asm volatile
 801a1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1e4:	f383 8811 	msr	BASEPRI, r3
 801a1e8:	f3bf 8f6f 	isb	sy
 801a1ec:	f3bf 8f4f 	dsb	sy
 801a1f0:	613b      	str	r3, [r7, #16]
}
 801a1f2:	bf00      	nop
 801a1f4:	bf00      	nop
 801a1f6:	e7fd      	b.n	801a1f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1fa:	685a      	ldr	r2, [r3, #4]
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	1ad2      	subs	r2, r2, r3
 801a200:	69bb      	ldr	r3, [r7, #24]
 801a202:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a206:	687a      	ldr	r2, [r7, #4]
 801a208:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a20a:	69b8      	ldr	r0, [r7, #24]
 801a20c:	f000 f90a 	bl	801a424 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a210:	4b1d      	ldr	r3, [pc, #116]	@ (801a288 <pvPortMalloc+0x18c>)
 801a212:	681a      	ldr	r2, [r3, #0]
 801a214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a216:	685b      	ldr	r3, [r3, #4]
 801a218:	1ad3      	subs	r3, r2, r3
 801a21a:	4a1b      	ldr	r2, [pc, #108]	@ (801a288 <pvPortMalloc+0x18c>)
 801a21c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a21e:	4b1a      	ldr	r3, [pc, #104]	@ (801a288 <pvPortMalloc+0x18c>)
 801a220:	681a      	ldr	r2, [r3, #0]
 801a222:	4b1b      	ldr	r3, [pc, #108]	@ (801a290 <pvPortMalloc+0x194>)
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	429a      	cmp	r2, r3
 801a228:	d203      	bcs.n	801a232 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a22a:	4b17      	ldr	r3, [pc, #92]	@ (801a288 <pvPortMalloc+0x18c>)
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	4a18      	ldr	r2, [pc, #96]	@ (801a290 <pvPortMalloc+0x194>)
 801a230:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a234:	685a      	ldr	r2, [r3, #4]
 801a236:	4b13      	ldr	r3, [pc, #76]	@ (801a284 <pvPortMalloc+0x188>)
 801a238:	681b      	ldr	r3, [r3, #0]
 801a23a:	431a      	orrs	r2, r3
 801a23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a23e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a242:	2200      	movs	r2, #0
 801a244:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a246:	4b13      	ldr	r3, [pc, #76]	@ (801a294 <pvPortMalloc+0x198>)
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	3301      	adds	r3, #1
 801a24c:	4a11      	ldr	r2, [pc, #68]	@ (801a294 <pvPortMalloc+0x198>)
 801a24e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a250:	f7fe fbce 	bl	80189f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a254:	69fb      	ldr	r3, [r7, #28]
 801a256:	f003 0307 	and.w	r3, r3, #7
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d00b      	beq.n	801a276 <pvPortMalloc+0x17a>
	__asm volatile
 801a25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a262:	f383 8811 	msr	BASEPRI, r3
 801a266:	f3bf 8f6f 	isb	sy
 801a26a:	f3bf 8f4f 	dsb	sy
 801a26e:	60fb      	str	r3, [r7, #12]
}
 801a270:	bf00      	nop
 801a272:	bf00      	nop
 801a274:	e7fd      	b.n	801a272 <pvPortMalloc+0x176>
	return pvReturn;
 801a276:	69fb      	ldr	r3, [r7, #28]
}
 801a278:	4618      	mov	r0, r3
 801a27a:	3728      	adds	r7, #40	@ 0x28
 801a27c:	46bd      	mov	sp, r7
 801a27e:	bd80      	pop	{r7, pc}
 801a280:	2000a0cc 	.word	0x2000a0cc
 801a284:	2000a0e0 	.word	0x2000a0e0
 801a288:	2000a0d0 	.word	0x2000a0d0
 801a28c:	2000a0c4 	.word	0x2000a0c4
 801a290:	2000a0d4 	.word	0x2000a0d4
 801a294:	2000a0d8 	.word	0x2000a0d8

0801a298 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a298:	b580      	push	{r7, lr}
 801a29a:	b086      	sub	sp, #24
 801a29c:	af00      	add	r7, sp, #0
 801a29e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d04f      	beq.n	801a34a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a2aa:	2308      	movs	r3, #8
 801a2ac:	425b      	negs	r3, r3
 801a2ae:	697a      	ldr	r2, [r7, #20]
 801a2b0:	4413      	add	r3, r2
 801a2b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a2b4:	697b      	ldr	r3, [r7, #20]
 801a2b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a2b8:	693b      	ldr	r3, [r7, #16]
 801a2ba:	685a      	ldr	r2, [r3, #4]
 801a2bc:	4b25      	ldr	r3, [pc, #148]	@ (801a354 <vPortFree+0xbc>)
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	4013      	ands	r3, r2
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d10b      	bne.n	801a2de <vPortFree+0x46>
	__asm volatile
 801a2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a2ca:	f383 8811 	msr	BASEPRI, r3
 801a2ce:	f3bf 8f6f 	isb	sy
 801a2d2:	f3bf 8f4f 	dsb	sy
 801a2d6:	60fb      	str	r3, [r7, #12]
}
 801a2d8:	bf00      	nop
 801a2da:	bf00      	nop
 801a2dc:	e7fd      	b.n	801a2da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a2de:	693b      	ldr	r3, [r7, #16]
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d00b      	beq.n	801a2fe <vPortFree+0x66>
	__asm volatile
 801a2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a2ea:	f383 8811 	msr	BASEPRI, r3
 801a2ee:	f3bf 8f6f 	isb	sy
 801a2f2:	f3bf 8f4f 	dsb	sy
 801a2f6:	60bb      	str	r3, [r7, #8]
}
 801a2f8:	bf00      	nop
 801a2fa:	bf00      	nop
 801a2fc:	e7fd      	b.n	801a2fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a2fe:	693b      	ldr	r3, [r7, #16]
 801a300:	685a      	ldr	r2, [r3, #4]
 801a302:	4b14      	ldr	r3, [pc, #80]	@ (801a354 <vPortFree+0xbc>)
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	4013      	ands	r3, r2
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d01e      	beq.n	801a34a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a30c:	693b      	ldr	r3, [r7, #16]
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	2b00      	cmp	r3, #0
 801a312:	d11a      	bne.n	801a34a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a314:	693b      	ldr	r3, [r7, #16]
 801a316:	685a      	ldr	r2, [r3, #4]
 801a318:	4b0e      	ldr	r3, [pc, #56]	@ (801a354 <vPortFree+0xbc>)
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	43db      	mvns	r3, r3
 801a31e:	401a      	ands	r2, r3
 801a320:	693b      	ldr	r3, [r7, #16]
 801a322:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a324:	f7fe fb56 	bl	80189d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a328:	693b      	ldr	r3, [r7, #16]
 801a32a:	685a      	ldr	r2, [r3, #4]
 801a32c:	4b0a      	ldr	r3, [pc, #40]	@ (801a358 <vPortFree+0xc0>)
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	4413      	add	r3, r2
 801a332:	4a09      	ldr	r2, [pc, #36]	@ (801a358 <vPortFree+0xc0>)
 801a334:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a336:	6938      	ldr	r0, [r7, #16]
 801a338:	f000 f874 	bl	801a424 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a33c:	4b07      	ldr	r3, [pc, #28]	@ (801a35c <vPortFree+0xc4>)
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	3301      	adds	r3, #1
 801a342:	4a06      	ldr	r2, [pc, #24]	@ (801a35c <vPortFree+0xc4>)
 801a344:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a346:	f7fe fb53 	bl	80189f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a34a:	bf00      	nop
 801a34c:	3718      	adds	r7, #24
 801a34e:	46bd      	mov	sp, r7
 801a350:	bd80      	pop	{r7, pc}
 801a352:	bf00      	nop
 801a354:	2000a0e0 	.word	0x2000a0e0
 801a358:	2000a0d0 	.word	0x2000a0d0
 801a35c:	2000a0dc 	.word	0x2000a0dc

0801a360 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a360:	b480      	push	{r7}
 801a362:	b085      	sub	sp, #20
 801a364:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a366:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801a36a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a36c:	4b27      	ldr	r3, [pc, #156]	@ (801a40c <prvHeapInit+0xac>)
 801a36e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	f003 0307 	and.w	r3, r3, #7
 801a376:	2b00      	cmp	r3, #0
 801a378:	d00c      	beq.n	801a394 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	3307      	adds	r3, #7
 801a37e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a380:	68fb      	ldr	r3, [r7, #12]
 801a382:	f023 0307 	bic.w	r3, r3, #7
 801a386:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a388:	68ba      	ldr	r2, [r7, #8]
 801a38a:	68fb      	ldr	r3, [r7, #12]
 801a38c:	1ad3      	subs	r3, r2, r3
 801a38e:	4a1f      	ldr	r2, [pc, #124]	@ (801a40c <prvHeapInit+0xac>)
 801a390:	4413      	add	r3, r2
 801a392:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a394:	68fb      	ldr	r3, [r7, #12]
 801a396:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a398:	4a1d      	ldr	r2, [pc, #116]	@ (801a410 <prvHeapInit+0xb0>)
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a39e:	4b1c      	ldr	r3, [pc, #112]	@ (801a410 <prvHeapInit+0xb0>)
 801a3a0:	2200      	movs	r2, #0
 801a3a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	68ba      	ldr	r2, [r7, #8]
 801a3a8:	4413      	add	r3, r2
 801a3aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a3ac:	2208      	movs	r2, #8
 801a3ae:	68fb      	ldr	r3, [r7, #12]
 801a3b0:	1a9b      	subs	r3, r3, r2
 801a3b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	f023 0307 	bic.w	r3, r3, #7
 801a3ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	4a15      	ldr	r2, [pc, #84]	@ (801a414 <prvHeapInit+0xb4>)
 801a3c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a3c2:	4b14      	ldr	r3, [pc, #80]	@ (801a414 <prvHeapInit+0xb4>)
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a3ca:	4b12      	ldr	r3, [pc, #72]	@ (801a414 <prvHeapInit+0xb4>)
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	2200      	movs	r2, #0
 801a3d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a3d6:	683b      	ldr	r3, [r7, #0]
 801a3d8:	68fa      	ldr	r2, [r7, #12]
 801a3da:	1ad2      	subs	r2, r2, r3
 801a3dc:	683b      	ldr	r3, [r7, #0]
 801a3de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a3e0:	4b0c      	ldr	r3, [pc, #48]	@ (801a414 <prvHeapInit+0xb4>)
 801a3e2:	681a      	ldr	r2, [r3, #0]
 801a3e4:	683b      	ldr	r3, [r7, #0]
 801a3e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a3e8:	683b      	ldr	r3, [r7, #0]
 801a3ea:	685b      	ldr	r3, [r3, #4]
 801a3ec:	4a0a      	ldr	r2, [pc, #40]	@ (801a418 <prvHeapInit+0xb8>)
 801a3ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a3f0:	683b      	ldr	r3, [r7, #0]
 801a3f2:	685b      	ldr	r3, [r3, #4]
 801a3f4:	4a09      	ldr	r2, [pc, #36]	@ (801a41c <prvHeapInit+0xbc>)
 801a3f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a3f8:	4b09      	ldr	r3, [pc, #36]	@ (801a420 <prvHeapInit+0xc0>)
 801a3fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801a3fe:	601a      	str	r2, [r3, #0]
}
 801a400:	bf00      	nop
 801a402:	3714      	adds	r7, #20
 801a404:	46bd      	mov	sp, r7
 801a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a40a:	4770      	bx	lr
 801a40c:	200088c4 	.word	0x200088c4
 801a410:	2000a0c4 	.word	0x2000a0c4
 801a414:	2000a0cc 	.word	0x2000a0cc
 801a418:	2000a0d4 	.word	0x2000a0d4
 801a41c:	2000a0d0 	.word	0x2000a0d0
 801a420:	2000a0e0 	.word	0x2000a0e0

0801a424 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a424:	b480      	push	{r7}
 801a426:	b085      	sub	sp, #20
 801a428:	af00      	add	r7, sp, #0
 801a42a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a42c:	4b28      	ldr	r3, [pc, #160]	@ (801a4d0 <prvInsertBlockIntoFreeList+0xac>)
 801a42e:	60fb      	str	r3, [r7, #12]
 801a430:	e002      	b.n	801a438 <prvInsertBlockIntoFreeList+0x14>
 801a432:	68fb      	ldr	r3, [r7, #12]
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	60fb      	str	r3, [r7, #12]
 801a438:	68fb      	ldr	r3, [r7, #12]
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	687a      	ldr	r2, [r7, #4]
 801a43e:	429a      	cmp	r2, r3
 801a440:	d8f7      	bhi.n	801a432 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a446:	68fb      	ldr	r3, [r7, #12]
 801a448:	685b      	ldr	r3, [r3, #4]
 801a44a:	68ba      	ldr	r2, [r7, #8]
 801a44c:	4413      	add	r3, r2
 801a44e:	687a      	ldr	r2, [r7, #4]
 801a450:	429a      	cmp	r2, r3
 801a452:	d108      	bne.n	801a466 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	685a      	ldr	r2, [r3, #4]
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	685b      	ldr	r3, [r3, #4]
 801a45c:	441a      	add	r2, r3
 801a45e:	68fb      	ldr	r3, [r7, #12]
 801a460:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a462:	68fb      	ldr	r3, [r7, #12]
 801a464:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	685b      	ldr	r3, [r3, #4]
 801a46e:	68ba      	ldr	r2, [r7, #8]
 801a470:	441a      	add	r2, r3
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	429a      	cmp	r2, r3
 801a478:	d118      	bne.n	801a4ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a47a:	68fb      	ldr	r3, [r7, #12]
 801a47c:	681a      	ldr	r2, [r3, #0]
 801a47e:	4b15      	ldr	r3, [pc, #84]	@ (801a4d4 <prvInsertBlockIntoFreeList+0xb0>)
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	429a      	cmp	r2, r3
 801a484:	d00d      	beq.n	801a4a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	685a      	ldr	r2, [r3, #4]
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	685b      	ldr	r3, [r3, #4]
 801a490:	441a      	add	r2, r3
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	681a      	ldr	r2, [r3, #0]
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	601a      	str	r2, [r3, #0]
 801a4a0:	e008      	b.n	801a4b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a4a2:	4b0c      	ldr	r3, [pc, #48]	@ (801a4d4 <prvInsertBlockIntoFreeList+0xb0>)
 801a4a4:	681a      	ldr	r2, [r3, #0]
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	601a      	str	r2, [r3, #0]
 801a4aa:	e003      	b.n	801a4b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a4ac:	68fb      	ldr	r3, [r7, #12]
 801a4ae:	681a      	ldr	r2, [r3, #0]
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a4b4:	68fa      	ldr	r2, [r7, #12]
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	429a      	cmp	r2, r3
 801a4ba:	d002      	beq.n	801a4c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	687a      	ldr	r2, [r7, #4]
 801a4c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a4c2:	bf00      	nop
 801a4c4:	3714      	adds	r7, #20
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4cc:	4770      	bx	lr
 801a4ce:	bf00      	nop
 801a4d0:	2000a0c4 	.word	0x2000a0c4
 801a4d4:	2000a0cc 	.word	0x2000a0cc

0801a4d8 <MX_TOF_Init>:
static void MX_53L4A2_SimpleRanging_Process(void);
static void print_result(RANGING_SENSOR_Result_t *Result);
static int32_t decimal_part(float_t x);

void MX_TOF_Init(void)
{
 801a4d8:	b580      	push	{r7, lr}
 801a4da:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L4A2_SimpleRanging_Init();
 801a4dc:	f000 f802 	bl	801a4e4 <MX_53L4A2_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 801a4e0:	bf00      	nop
 801a4e2:	bd80      	pop	{r7, pc}

0801a4e4 <MX_53L4A2_SimpleRanging_Init>:

  /* USER CODE END TOF_Process_PostTreatment */
}

static void MX_53L4A2_SimpleRanging_Init(void)
{
 801a4e4:	b580      	push	{r7, lr}
 801a4e6:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 801a4e8:	2000      	movs	r0, #0
 801a4ea:	f7f8 f955 	bl	8012798 <BSP_COM_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 801a4ee:	2101      	movs	r1, #1
 801a4f0:	2000      	movs	r0, #0
 801a4f2:	f7f8 f8c3 	bl	801267c <BSP_PB_Init>

  /* reset XSHUT (XSDN) pin */
  HAL_GPIO_WritePin(VL53L4A2_XSHUT_C_PORT, VL53L4A2_XSHUT_C_PIN, GPIO_PIN_RESET);
 801a4f6:	2200      	movs	r2, #0
 801a4f8:	2101      	movs	r1, #1
 801a4fa:	480c      	ldr	r0, [pc, #48]	@ (801a52c <MX_53L4A2_SimpleRanging_Init+0x48>)
 801a4fc:	f7f8 fe16 	bl	801312c <HAL_GPIO_WritePin>
  HAL_Delay(2);
 801a500:	2002      	movs	r0, #2
 801a502:	f7f8 fa63 	bl	80129cc <HAL_Delay>
  HAL_GPIO_WritePin(VL53L4A2_XSHUT_C_PORT, VL53L4A2_XSHUT_C_PIN, GPIO_PIN_SET);
 801a506:	2201      	movs	r2, #1
 801a508:	2101      	movs	r1, #1
 801a50a:	4808      	ldr	r0, [pc, #32]	@ (801a52c <MX_53L4A2_SimpleRanging_Init+0x48>)
 801a50c:	f7f8 fe0e 	bl	801312c <HAL_GPIO_WritePin>
  HAL_Delay(2);
 801a510:	2002      	movs	r0, #2
 801a512:	f7f8 fa5b 	bl	80129cc <HAL_Delay>

  printf("53L4A2 Simple Ranging demo application\n");
 801a516:	4806      	ldr	r0, [pc, #24]	@ (801a530 <MX_53L4A2_SimpleRanging_Init+0x4c>)
 801a518:	f000 f964 	bl	801a7e4 <puts>
  status = VL53L4A2_RANGING_SENSOR_Init(VL53L4A2_DEV_CENTER);
 801a51c:	2001      	movs	r0, #1
 801a51e:	f7e6 ffc6 	bl	80014ae <VL53L4A2_RANGING_SENSOR_Init>
 801a522:	4603      	mov	r3, r0
 801a524:	4a03      	ldr	r2, [pc, #12]	@ (801a534 <MX_53L4A2_SimpleRanging_Init+0x50>)
 801a526:	6013      	str	r3, [r2, #0]
  /*if (status != BSP_ERROR_NONE)
  {
    printf("VL53L4A2_RANGING_SENSOR_Init failed\n");
    while (1);
  }*/
}
 801a528:	bf00      	nop
 801a52a:	bd80      	pop	{r7, pc}
 801a52c:	48000400 	.word	0x48000400
 801a530:	0801b7c8 	.word	0x0801b7c8
 801a534:	2000a0e4 	.word	0x2000a0e4

0801a538 <BSP_PB_Callback>:
  int32_t int_part = (int32_t) x;
  return (int32_t)((x - int_part) * 100);
}

void BSP_PB_Callback(Button_TypeDef Button)
{
 801a538:	b480      	push	{r7}
 801a53a:	b083      	sub	sp, #12
 801a53c:	af00      	add	r7, sp, #0
 801a53e:	4603      	mov	r3, r0
 801a540:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 801a542:	4b04      	ldr	r3, [pc, #16]	@ (801a554 <BSP_PB_Callback+0x1c>)
 801a544:	2201      	movs	r2, #1
 801a546:	701a      	strb	r2, [r3, #0]
}
 801a548:	bf00      	nop
 801a54a:	370c      	adds	r7, #12
 801a54c:	46bd      	mov	sp, r7
 801a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a552:	4770      	bx	lr
 801a554:	2000a0e8 	.word	0x2000a0e8

0801a558 <HAL_GPIO_EXTI_Callback>:
    ToF_EventDetected = 1;
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801a558:	b480      	push	{r7}
 801a55a:	b083      	sub	sp, #12
 801a55c:	af00      	add	r7, sp, #0
 801a55e:	4603      	mov	r3, r0
 801a560:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 801a562:	88fb      	ldrh	r3, [r7, #6]
 801a564:	2b01      	cmp	r3, #1
 801a566:	d102      	bne.n	801a56e <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 801a568:	4b04      	ldr	r3, [pc, #16]	@ (801a57c <HAL_GPIO_EXTI_Callback+0x24>)
 801a56a:	2201      	movs	r2, #1
 801a56c:	701a      	strb	r2, [r3, #0]
  }
}
 801a56e:	bf00      	nop
 801a570:	370c      	adds	r7, #12
 801a572:	46bd      	mov	sp, r7
 801a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a578:	4770      	bx	lr
 801a57a:	bf00      	nop
 801a57c:	2000a0e9 	.word	0x2000a0e9

0801a580 <std>:
 801a580:	2300      	movs	r3, #0
 801a582:	b510      	push	{r4, lr}
 801a584:	4604      	mov	r4, r0
 801a586:	e9c0 3300 	strd	r3, r3, [r0]
 801a58a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a58e:	6083      	str	r3, [r0, #8]
 801a590:	8181      	strh	r1, [r0, #12]
 801a592:	6643      	str	r3, [r0, #100]	@ 0x64
 801a594:	81c2      	strh	r2, [r0, #14]
 801a596:	6183      	str	r3, [r0, #24]
 801a598:	4619      	mov	r1, r3
 801a59a:	2208      	movs	r2, #8
 801a59c:	305c      	adds	r0, #92	@ 0x5c
 801a59e:	f000 fa01 	bl	801a9a4 <memset>
 801a5a2:	4b0d      	ldr	r3, [pc, #52]	@ (801a5d8 <std+0x58>)
 801a5a4:	6263      	str	r3, [r4, #36]	@ 0x24
 801a5a6:	4b0d      	ldr	r3, [pc, #52]	@ (801a5dc <std+0x5c>)
 801a5a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a5aa:	4b0d      	ldr	r3, [pc, #52]	@ (801a5e0 <std+0x60>)
 801a5ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a5ae:	4b0d      	ldr	r3, [pc, #52]	@ (801a5e4 <std+0x64>)
 801a5b0:	6323      	str	r3, [r4, #48]	@ 0x30
 801a5b2:	4b0d      	ldr	r3, [pc, #52]	@ (801a5e8 <std+0x68>)
 801a5b4:	6224      	str	r4, [r4, #32]
 801a5b6:	429c      	cmp	r4, r3
 801a5b8:	d006      	beq.n	801a5c8 <std+0x48>
 801a5ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a5be:	4294      	cmp	r4, r2
 801a5c0:	d002      	beq.n	801a5c8 <std+0x48>
 801a5c2:	33d0      	adds	r3, #208	@ 0xd0
 801a5c4:	429c      	cmp	r4, r3
 801a5c6:	d105      	bne.n	801a5d4 <std+0x54>
 801a5c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a5d0:	f000 baca 	b.w	801ab68 <__retarget_lock_init_recursive>
 801a5d4:	bd10      	pop	{r4, pc}
 801a5d6:	bf00      	nop
 801a5d8:	0801a7f5 	.word	0x0801a7f5
 801a5dc:	0801a817 	.word	0x0801a817
 801a5e0:	0801a84f 	.word	0x0801a84f
 801a5e4:	0801a873 	.word	0x0801a873
 801a5e8:	2000a0ec 	.word	0x2000a0ec

0801a5ec <stdio_exit_handler>:
 801a5ec:	4a02      	ldr	r2, [pc, #8]	@ (801a5f8 <stdio_exit_handler+0xc>)
 801a5ee:	4903      	ldr	r1, [pc, #12]	@ (801a5fc <stdio_exit_handler+0x10>)
 801a5f0:	4803      	ldr	r0, [pc, #12]	@ (801a600 <stdio_exit_handler+0x14>)
 801a5f2:	f000 b869 	b.w	801a6c8 <_fwalk_sglue>
 801a5f6:	bf00      	nop
 801a5f8:	20000088 	.word	0x20000088
 801a5fc:	0801b425 	.word	0x0801b425
 801a600:	20000098 	.word	0x20000098

0801a604 <cleanup_stdio>:
 801a604:	6841      	ldr	r1, [r0, #4]
 801a606:	4b0c      	ldr	r3, [pc, #48]	@ (801a638 <cleanup_stdio+0x34>)
 801a608:	4299      	cmp	r1, r3
 801a60a:	b510      	push	{r4, lr}
 801a60c:	4604      	mov	r4, r0
 801a60e:	d001      	beq.n	801a614 <cleanup_stdio+0x10>
 801a610:	f000 ff08 	bl	801b424 <_fflush_r>
 801a614:	68a1      	ldr	r1, [r4, #8]
 801a616:	4b09      	ldr	r3, [pc, #36]	@ (801a63c <cleanup_stdio+0x38>)
 801a618:	4299      	cmp	r1, r3
 801a61a:	d002      	beq.n	801a622 <cleanup_stdio+0x1e>
 801a61c:	4620      	mov	r0, r4
 801a61e:	f000 ff01 	bl	801b424 <_fflush_r>
 801a622:	68e1      	ldr	r1, [r4, #12]
 801a624:	4b06      	ldr	r3, [pc, #24]	@ (801a640 <cleanup_stdio+0x3c>)
 801a626:	4299      	cmp	r1, r3
 801a628:	d004      	beq.n	801a634 <cleanup_stdio+0x30>
 801a62a:	4620      	mov	r0, r4
 801a62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a630:	f000 bef8 	b.w	801b424 <_fflush_r>
 801a634:	bd10      	pop	{r4, pc}
 801a636:	bf00      	nop
 801a638:	2000a0ec 	.word	0x2000a0ec
 801a63c:	2000a154 	.word	0x2000a154
 801a640:	2000a1bc 	.word	0x2000a1bc

0801a644 <global_stdio_init.part.0>:
 801a644:	b510      	push	{r4, lr}
 801a646:	4b0b      	ldr	r3, [pc, #44]	@ (801a674 <global_stdio_init.part.0+0x30>)
 801a648:	4c0b      	ldr	r4, [pc, #44]	@ (801a678 <global_stdio_init.part.0+0x34>)
 801a64a:	4a0c      	ldr	r2, [pc, #48]	@ (801a67c <global_stdio_init.part.0+0x38>)
 801a64c:	601a      	str	r2, [r3, #0]
 801a64e:	4620      	mov	r0, r4
 801a650:	2200      	movs	r2, #0
 801a652:	2104      	movs	r1, #4
 801a654:	f7ff ff94 	bl	801a580 <std>
 801a658:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a65c:	2201      	movs	r2, #1
 801a65e:	2109      	movs	r1, #9
 801a660:	f7ff ff8e 	bl	801a580 <std>
 801a664:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a668:	2202      	movs	r2, #2
 801a66a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a66e:	2112      	movs	r1, #18
 801a670:	f7ff bf86 	b.w	801a580 <std>
 801a674:	2000a224 	.word	0x2000a224
 801a678:	2000a0ec 	.word	0x2000a0ec
 801a67c:	0801a5ed 	.word	0x0801a5ed

0801a680 <__sfp_lock_acquire>:
 801a680:	4801      	ldr	r0, [pc, #4]	@ (801a688 <__sfp_lock_acquire+0x8>)
 801a682:	f000 ba72 	b.w	801ab6a <__retarget_lock_acquire_recursive>
 801a686:	bf00      	nop
 801a688:	2000a22d 	.word	0x2000a22d

0801a68c <__sfp_lock_release>:
 801a68c:	4801      	ldr	r0, [pc, #4]	@ (801a694 <__sfp_lock_release+0x8>)
 801a68e:	f000 ba6d 	b.w	801ab6c <__retarget_lock_release_recursive>
 801a692:	bf00      	nop
 801a694:	2000a22d 	.word	0x2000a22d

0801a698 <__sinit>:
 801a698:	b510      	push	{r4, lr}
 801a69a:	4604      	mov	r4, r0
 801a69c:	f7ff fff0 	bl	801a680 <__sfp_lock_acquire>
 801a6a0:	6a23      	ldr	r3, [r4, #32]
 801a6a2:	b11b      	cbz	r3, 801a6ac <__sinit+0x14>
 801a6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6a8:	f7ff bff0 	b.w	801a68c <__sfp_lock_release>
 801a6ac:	4b04      	ldr	r3, [pc, #16]	@ (801a6c0 <__sinit+0x28>)
 801a6ae:	6223      	str	r3, [r4, #32]
 801a6b0:	4b04      	ldr	r3, [pc, #16]	@ (801a6c4 <__sinit+0x2c>)
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d1f5      	bne.n	801a6a4 <__sinit+0xc>
 801a6b8:	f7ff ffc4 	bl	801a644 <global_stdio_init.part.0>
 801a6bc:	e7f2      	b.n	801a6a4 <__sinit+0xc>
 801a6be:	bf00      	nop
 801a6c0:	0801a605 	.word	0x0801a605
 801a6c4:	2000a224 	.word	0x2000a224

0801a6c8 <_fwalk_sglue>:
 801a6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a6cc:	4607      	mov	r7, r0
 801a6ce:	4688      	mov	r8, r1
 801a6d0:	4614      	mov	r4, r2
 801a6d2:	2600      	movs	r6, #0
 801a6d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a6d8:	f1b9 0901 	subs.w	r9, r9, #1
 801a6dc:	d505      	bpl.n	801a6ea <_fwalk_sglue+0x22>
 801a6de:	6824      	ldr	r4, [r4, #0]
 801a6e0:	2c00      	cmp	r4, #0
 801a6e2:	d1f7      	bne.n	801a6d4 <_fwalk_sglue+0xc>
 801a6e4:	4630      	mov	r0, r6
 801a6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6ea:	89ab      	ldrh	r3, [r5, #12]
 801a6ec:	2b01      	cmp	r3, #1
 801a6ee:	d907      	bls.n	801a700 <_fwalk_sglue+0x38>
 801a6f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a6f4:	3301      	adds	r3, #1
 801a6f6:	d003      	beq.n	801a700 <_fwalk_sglue+0x38>
 801a6f8:	4629      	mov	r1, r5
 801a6fa:	4638      	mov	r0, r7
 801a6fc:	47c0      	blx	r8
 801a6fe:	4306      	orrs	r6, r0
 801a700:	3568      	adds	r5, #104	@ 0x68
 801a702:	e7e9      	b.n	801a6d8 <_fwalk_sglue+0x10>

0801a704 <iprintf>:
 801a704:	b40f      	push	{r0, r1, r2, r3}
 801a706:	b507      	push	{r0, r1, r2, lr}
 801a708:	4906      	ldr	r1, [pc, #24]	@ (801a724 <iprintf+0x20>)
 801a70a:	ab04      	add	r3, sp, #16
 801a70c:	6808      	ldr	r0, [r1, #0]
 801a70e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a712:	6881      	ldr	r1, [r0, #8]
 801a714:	9301      	str	r3, [sp, #4]
 801a716:	f000 fb5b 	bl	801add0 <_vfiprintf_r>
 801a71a:	b003      	add	sp, #12
 801a71c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a720:	b004      	add	sp, #16
 801a722:	4770      	bx	lr
 801a724:	20000094 	.word	0x20000094

0801a728 <putchar>:
 801a728:	4b02      	ldr	r3, [pc, #8]	@ (801a734 <putchar+0xc>)
 801a72a:	4601      	mov	r1, r0
 801a72c:	6818      	ldr	r0, [r3, #0]
 801a72e:	6882      	ldr	r2, [r0, #8]
 801a730:	f000 bf02 	b.w	801b538 <_putc_r>
 801a734:	20000094 	.word	0x20000094

0801a738 <_puts_r>:
 801a738:	6a03      	ldr	r3, [r0, #32]
 801a73a:	b570      	push	{r4, r5, r6, lr}
 801a73c:	6884      	ldr	r4, [r0, #8]
 801a73e:	4605      	mov	r5, r0
 801a740:	460e      	mov	r6, r1
 801a742:	b90b      	cbnz	r3, 801a748 <_puts_r+0x10>
 801a744:	f7ff ffa8 	bl	801a698 <__sinit>
 801a748:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a74a:	07db      	lsls	r3, r3, #31
 801a74c:	d405      	bmi.n	801a75a <_puts_r+0x22>
 801a74e:	89a3      	ldrh	r3, [r4, #12]
 801a750:	0598      	lsls	r0, r3, #22
 801a752:	d402      	bmi.n	801a75a <_puts_r+0x22>
 801a754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a756:	f000 fa08 	bl	801ab6a <__retarget_lock_acquire_recursive>
 801a75a:	89a3      	ldrh	r3, [r4, #12]
 801a75c:	0719      	lsls	r1, r3, #28
 801a75e:	d502      	bpl.n	801a766 <_puts_r+0x2e>
 801a760:	6923      	ldr	r3, [r4, #16]
 801a762:	2b00      	cmp	r3, #0
 801a764:	d135      	bne.n	801a7d2 <_puts_r+0x9a>
 801a766:	4621      	mov	r1, r4
 801a768:	4628      	mov	r0, r5
 801a76a:	f000 f8c5 	bl	801a8f8 <__swsetup_r>
 801a76e:	b380      	cbz	r0, 801a7d2 <_puts_r+0x9a>
 801a770:	f04f 35ff 	mov.w	r5, #4294967295
 801a774:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a776:	07da      	lsls	r2, r3, #31
 801a778:	d405      	bmi.n	801a786 <_puts_r+0x4e>
 801a77a:	89a3      	ldrh	r3, [r4, #12]
 801a77c:	059b      	lsls	r3, r3, #22
 801a77e:	d402      	bmi.n	801a786 <_puts_r+0x4e>
 801a780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a782:	f000 f9f3 	bl	801ab6c <__retarget_lock_release_recursive>
 801a786:	4628      	mov	r0, r5
 801a788:	bd70      	pop	{r4, r5, r6, pc}
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	da04      	bge.n	801a798 <_puts_r+0x60>
 801a78e:	69a2      	ldr	r2, [r4, #24]
 801a790:	429a      	cmp	r2, r3
 801a792:	dc17      	bgt.n	801a7c4 <_puts_r+0x8c>
 801a794:	290a      	cmp	r1, #10
 801a796:	d015      	beq.n	801a7c4 <_puts_r+0x8c>
 801a798:	6823      	ldr	r3, [r4, #0]
 801a79a:	1c5a      	adds	r2, r3, #1
 801a79c:	6022      	str	r2, [r4, #0]
 801a79e:	7019      	strb	r1, [r3, #0]
 801a7a0:	68a3      	ldr	r3, [r4, #8]
 801a7a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a7a6:	3b01      	subs	r3, #1
 801a7a8:	60a3      	str	r3, [r4, #8]
 801a7aa:	2900      	cmp	r1, #0
 801a7ac:	d1ed      	bne.n	801a78a <_puts_r+0x52>
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	da11      	bge.n	801a7d6 <_puts_r+0x9e>
 801a7b2:	4622      	mov	r2, r4
 801a7b4:	210a      	movs	r1, #10
 801a7b6:	4628      	mov	r0, r5
 801a7b8:	f000 f85f 	bl	801a87a <__swbuf_r>
 801a7bc:	3001      	adds	r0, #1
 801a7be:	d0d7      	beq.n	801a770 <_puts_r+0x38>
 801a7c0:	250a      	movs	r5, #10
 801a7c2:	e7d7      	b.n	801a774 <_puts_r+0x3c>
 801a7c4:	4622      	mov	r2, r4
 801a7c6:	4628      	mov	r0, r5
 801a7c8:	f000 f857 	bl	801a87a <__swbuf_r>
 801a7cc:	3001      	adds	r0, #1
 801a7ce:	d1e7      	bne.n	801a7a0 <_puts_r+0x68>
 801a7d0:	e7ce      	b.n	801a770 <_puts_r+0x38>
 801a7d2:	3e01      	subs	r6, #1
 801a7d4:	e7e4      	b.n	801a7a0 <_puts_r+0x68>
 801a7d6:	6823      	ldr	r3, [r4, #0]
 801a7d8:	1c5a      	adds	r2, r3, #1
 801a7da:	6022      	str	r2, [r4, #0]
 801a7dc:	220a      	movs	r2, #10
 801a7de:	701a      	strb	r2, [r3, #0]
 801a7e0:	e7ee      	b.n	801a7c0 <_puts_r+0x88>
	...

0801a7e4 <puts>:
 801a7e4:	4b02      	ldr	r3, [pc, #8]	@ (801a7f0 <puts+0xc>)
 801a7e6:	4601      	mov	r1, r0
 801a7e8:	6818      	ldr	r0, [r3, #0]
 801a7ea:	f7ff bfa5 	b.w	801a738 <_puts_r>
 801a7ee:	bf00      	nop
 801a7f0:	20000094 	.word	0x20000094

0801a7f4 <__sread>:
 801a7f4:	b510      	push	{r4, lr}
 801a7f6:	460c      	mov	r4, r1
 801a7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7fc:	f000 f966 	bl	801aacc <_read_r>
 801a800:	2800      	cmp	r0, #0
 801a802:	bfab      	itete	ge
 801a804:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a806:	89a3      	ldrhlt	r3, [r4, #12]
 801a808:	181b      	addge	r3, r3, r0
 801a80a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a80e:	bfac      	ite	ge
 801a810:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a812:	81a3      	strhlt	r3, [r4, #12]
 801a814:	bd10      	pop	{r4, pc}

0801a816 <__swrite>:
 801a816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a81a:	461f      	mov	r7, r3
 801a81c:	898b      	ldrh	r3, [r1, #12]
 801a81e:	05db      	lsls	r3, r3, #23
 801a820:	4605      	mov	r5, r0
 801a822:	460c      	mov	r4, r1
 801a824:	4616      	mov	r6, r2
 801a826:	d505      	bpl.n	801a834 <__swrite+0x1e>
 801a828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a82c:	2302      	movs	r3, #2
 801a82e:	2200      	movs	r2, #0
 801a830:	f000 f93a 	bl	801aaa8 <_lseek_r>
 801a834:	89a3      	ldrh	r3, [r4, #12]
 801a836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a83a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a83e:	81a3      	strh	r3, [r4, #12]
 801a840:	4632      	mov	r2, r6
 801a842:	463b      	mov	r3, r7
 801a844:	4628      	mov	r0, r5
 801a846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a84a:	f000 b951 	b.w	801aaf0 <_write_r>

0801a84e <__sseek>:
 801a84e:	b510      	push	{r4, lr}
 801a850:	460c      	mov	r4, r1
 801a852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a856:	f000 f927 	bl	801aaa8 <_lseek_r>
 801a85a:	1c43      	adds	r3, r0, #1
 801a85c:	89a3      	ldrh	r3, [r4, #12]
 801a85e:	bf15      	itete	ne
 801a860:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a862:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a866:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a86a:	81a3      	strheq	r3, [r4, #12]
 801a86c:	bf18      	it	ne
 801a86e:	81a3      	strhne	r3, [r4, #12]
 801a870:	bd10      	pop	{r4, pc}

0801a872 <__sclose>:
 801a872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a876:	f000 b8b1 	b.w	801a9dc <_close_r>

0801a87a <__swbuf_r>:
 801a87a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a87c:	460e      	mov	r6, r1
 801a87e:	4614      	mov	r4, r2
 801a880:	4605      	mov	r5, r0
 801a882:	b118      	cbz	r0, 801a88c <__swbuf_r+0x12>
 801a884:	6a03      	ldr	r3, [r0, #32]
 801a886:	b90b      	cbnz	r3, 801a88c <__swbuf_r+0x12>
 801a888:	f7ff ff06 	bl	801a698 <__sinit>
 801a88c:	69a3      	ldr	r3, [r4, #24]
 801a88e:	60a3      	str	r3, [r4, #8]
 801a890:	89a3      	ldrh	r3, [r4, #12]
 801a892:	071a      	lsls	r2, r3, #28
 801a894:	d501      	bpl.n	801a89a <__swbuf_r+0x20>
 801a896:	6923      	ldr	r3, [r4, #16]
 801a898:	b943      	cbnz	r3, 801a8ac <__swbuf_r+0x32>
 801a89a:	4621      	mov	r1, r4
 801a89c:	4628      	mov	r0, r5
 801a89e:	f000 f82b 	bl	801a8f8 <__swsetup_r>
 801a8a2:	b118      	cbz	r0, 801a8ac <__swbuf_r+0x32>
 801a8a4:	f04f 37ff 	mov.w	r7, #4294967295
 801a8a8:	4638      	mov	r0, r7
 801a8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8ac:	6823      	ldr	r3, [r4, #0]
 801a8ae:	6922      	ldr	r2, [r4, #16]
 801a8b0:	1a98      	subs	r0, r3, r2
 801a8b2:	6963      	ldr	r3, [r4, #20]
 801a8b4:	b2f6      	uxtb	r6, r6
 801a8b6:	4283      	cmp	r3, r0
 801a8b8:	4637      	mov	r7, r6
 801a8ba:	dc05      	bgt.n	801a8c8 <__swbuf_r+0x4e>
 801a8bc:	4621      	mov	r1, r4
 801a8be:	4628      	mov	r0, r5
 801a8c0:	f000 fdb0 	bl	801b424 <_fflush_r>
 801a8c4:	2800      	cmp	r0, #0
 801a8c6:	d1ed      	bne.n	801a8a4 <__swbuf_r+0x2a>
 801a8c8:	68a3      	ldr	r3, [r4, #8]
 801a8ca:	3b01      	subs	r3, #1
 801a8cc:	60a3      	str	r3, [r4, #8]
 801a8ce:	6823      	ldr	r3, [r4, #0]
 801a8d0:	1c5a      	adds	r2, r3, #1
 801a8d2:	6022      	str	r2, [r4, #0]
 801a8d4:	701e      	strb	r6, [r3, #0]
 801a8d6:	6962      	ldr	r2, [r4, #20]
 801a8d8:	1c43      	adds	r3, r0, #1
 801a8da:	429a      	cmp	r2, r3
 801a8dc:	d004      	beq.n	801a8e8 <__swbuf_r+0x6e>
 801a8de:	89a3      	ldrh	r3, [r4, #12]
 801a8e0:	07db      	lsls	r3, r3, #31
 801a8e2:	d5e1      	bpl.n	801a8a8 <__swbuf_r+0x2e>
 801a8e4:	2e0a      	cmp	r6, #10
 801a8e6:	d1df      	bne.n	801a8a8 <__swbuf_r+0x2e>
 801a8e8:	4621      	mov	r1, r4
 801a8ea:	4628      	mov	r0, r5
 801a8ec:	f000 fd9a 	bl	801b424 <_fflush_r>
 801a8f0:	2800      	cmp	r0, #0
 801a8f2:	d0d9      	beq.n	801a8a8 <__swbuf_r+0x2e>
 801a8f4:	e7d6      	b.n	801a8a4 <__swbuf_r+0x2a>
	...

0801a8f8 <__swsetup_r>:
 801a8f8:	b538      	push	{r3, r4, r5, lr}
 801a8fa:	4b29      	ldr	r3, [pc, #164]	@ (801a9a0 <__swsetup_r+0xa8>)
 801a8fc:	4605      	mov	r5, r0
 801a8fe:	6818      	ldr	r0, [r3, #0]
 801a900:	460c      	mov	r4, r1
 801a902:	b118      	cbz	r0, 801a90c <__swsetup_r+0x14>
 801a904:	6a03      	ldr	r3, [r0, #32]
 801a906:	b90b      	cbnz	r3, 801a90c <__swsetup_r+0x14>
 801a908:	f7ff fec6 	bl	801a698 <__sinit>
 801a90c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a910:	0719      	lsls	r1, r3, #28
 801a912:	d422      	bmi.n	801a95a <__swsetup_r+0x62>
 801a914:	06da      	lsls	r2, r3, #27
 801a916:	d407      	bmi.n	801a928 <__swsetup_r+0x30>
 801a918:	2209      	movs	r2, #9
 801a91a:	602a      	str	r2, [r5, #0]
 801a91c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a920:	81a3      	strh	r3, [r4, #12]
 801a922:	f04f 30ff 	mov.w	r0, #4294967295
 801a926:	e033      	b.n	801a990 <__swsetup_r+0x98>
 801a928:	0758      	lsls	r0, r3, #29
 801a92a:	d512      	bpl.n	801a952 <__swsetup_r+0x5a>
 801a92c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a92e:	b141      	cbz	r1, 801a942 <__swsetup_r+0x4a>
 801a930:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a934:	4299      	cmp	r1, r3
 801a936:	d002      	beq.n	801a93e <__swsetup_r+0x46>
 801a938:	4628      	mov	r0, r5
 801a93a:	f000 f927 	bl	801ab8c <_free_r>
 801a93e:	2300      	movs	r3, #0
 801a940:	6363      	str	r3, [r4, #52]	@ 0x34
 801a942:	89a3      	ldrh	r3, [r4, #12]
 801a944:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a948:	81a3      	strh	r3, [r4, #12]
 801a94a:	2300      	movs	r3, #0
 801a94c:	6063      	str	r3, [r4, #4]
 801a94e:	6923      	ldr	r3, [r4, #16]
 801a950:	6023      	str	r3, [r4, #0]
 801a952:	89a3      	ldrh	r3, [r4, #12]
 801a954:	f043 0308 	orr.w	r3, r3, #8
 801a958:	81a3      	strh	r3, [r4, #12]
 801a95a:	6923      	ldr	r3, [r4, #16]
 801a95c:	b94b      	cbnz	r3, 801a972 <__swsetup_r+0x7a>
 801a95e:	89a3      	ldrh	r3, [r4, #12]
 801a960:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a968:	d003      	beq.n	801a972 <__swsetup_r+0x7a>
 801a96a:	4621      	mov	r1, r4
 801a96c:	4628      	mov	r0, r5
 801a96e:	f000 fda7 	bl	801b4c0 <__smakebuf_r>
 801a972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a976:	f013 0201 	ands.w	r2, r3, #1
 801a97a:	d00a      	beq.n	801a992 <__swsetup_r+0x9a>
 801a97c:	2200      	movs	r2, #0
 801a97e:	60a2      	str	r2, [r4, #8]
 801a980:	6962      	ldr	r2, [r4, #20]
 801a982:	4252      	negs	r2, r2
 801a984:	61a2      	str	r2, [r4, #24]
 801a986:	6922      	ldr	r2, [r4, #16]
 801a988:	b942      	cbnz	r2, 801a99c <__swsetup_r+0xa4>
 801a98a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a98e:	d1c5      	bne.n	801a91c <__swsetup_r+0x24>
 801a990:	bd38      	pop	{r3, r4, r5, pc}
 801a992:	0799      	lsls	r1, r3, #30
 801a994:	bf58      	it	pl
 801a996:	6962      	ldrpl	r2, [r4, #20]
 801a998:	60a2      	str	r2, [r4, #8]
 801a99a:	e7f4      	b.n	801a986 <__swsetup_r+0x8e>
 801a99c:	2000      	movs	r0, #0
 801a99e:	e7f7      	b.n	801a990 <__swsetup_r+0x98>
 801a9a0:	20000094 	.word	0x20000094

0801a9a4 <memset>:
 801a9a4:	4402      	add	r2, r0
 801a9a6:	4603      	mov	r3, r0
 801a9a8:	4293      	cmp	r3, r2
 801a9aa:	d100      	bne.n	801a9ae <memset+0xa>
 801a9ac:	4770      	bx	lr
 801a9ae:	f803 1b01 	strb.w	r1, [r3], #1
 801a9b2:	e7f9      	b.n	801a9a8 <memset+0x4>

0801a9b4 <strncpy>:
 801a9b4:	b510      	push	{r4, lr}
 801a9b6:	3901      	subs	r1, #1
 801a9b8:	4603      	mov	r3, r0
 801a9ba:	b132      	cbz	r2, 801a9ca <strncpy+0x16>
 801a9bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a9c0:	f803 4b01 	strb.w	r4, [r3], #1
 801a9c4:	3a01      	subs	r2, #1
 801a9c6:	2c00      	cmp	r4, #0
 801a9c8:	d1f7      	bne.n	801a9ba <strncpy+0x6>
 801a9ca:	441a      	add	r2, r3
 801a9cc:	2100      	movs	r1, #0
 801a9ce:	4293      	cmp	r3, r2
 801a9d0:	d100      	bne.n	801a9d4 <strncpy+0x20>
 801a9d2:	bd10      	pop	{r4, pc}
 801a9d4:	f803 1b01 	strb.w	r1, [r3], #1
 801a9d8:	e7f9      	b.n	801a9ce <strncpy+0x1a>
	...

0801a9dc <_close_r>:
 801a9dc:	b538      	push	{r3, r4, r5, lr}
 801a9de:	4d06      	ldr	r5, [pc, #24]	@ (801a9f8 <_close_r+0x1c>)
 801a9e0:	2300      	movs	r3, #0
 801a9e2:	4604      	mov	r4, r0
 801a9e4:	4608      	mov	r0, r1
 801a9e6:	602b      	str	r3, [r5, #0]
 801a9e8:	f7e6 fc6b 	bl	80012c2 <_close>
 801a9ec:	1c43      	adds	r3, r0, #1
 801a9ee:	d102      	bne.n	801a9f6 <_close_r+0x1a>
 801a9f0:	682b      	ldr	r3, [r5, #0]
 801a9f2:	b103      	cbz	r3, 801a9f6 <_close_r+0x1a>
 801a9f4:	6023      	str	r3, [r4, #0]
 801a9f6:	bd38      	pop	{r3, r4, r5, pc}
 801a9f8:	2000a228 	.word	0x2000a228

0801a9fc <_reclaim_reent>:
 801a9fc:	4b29      	ldr	r3, [pc, #164]	@ (801aaa4 <_reclaim_reent+0xa8>)
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	4283      	cmp	r3, r0
 801aa02:	b570      	push	{r4, r5, r6, lr}
 801aa04:	4604      	mov	r4, r0
 801aa06:	d04b      	beq.n	801aaa0 <_reclaim_reent+0xa4>
 801aa08:	69c3      	ldr	r3, [r0, #28]
 801aa0a:	b1ab      	cbz	r3, 801aa38 <_reclaim_reent+0x3c>
 801aa0c:	68db      	ldr	r3, [r3, #12]
 801aa0e:	b16b      	cbz	r3, 801aa2c <_reclaim_reent+0x30>
 801aa10:	2500      	movs	r5, #0
 801aa12:	69e3      	ldr	r3, [r4, #28]
 801aa14:	68db      	ldr	r3, [r3, #12]
 801aa16:	5959      	ldr	r1, [r3, r5]
 801aa18:	2900      	cmp	r1, #0
 801aa1a:	d13b      	bne.n	801aa94 <_reclaim_reent+0x98>
 801aa1c:	3504      	adds	r5, #4
 801aa1e:	2d80      	cmp	r5, #128	@ 0x80
 801aa20:	d1f7      	bne.n	801aa12 <_reclaim_reent+0x16>
 801aa22:	69e3      	ldr	r3, [r4, #28]
 801aa24:	4620      	mov	r0, r4
 801aa26:	68d9      	ldr	r1, [r3, #12]
 801aa28:	f000 f8b0 	bl	801ab8c <_free_r>
 801aa2c:	69e3      	ldr	r3, [r4, #28]
 801aa2e:	6819      	ldr	r1, [r3, #0]
 801aa30:	b111      	cbz	r1, 801aa38 <_reclaim_reent+0x3c>
 801aa32:	4620      	mov	r0, r4
 801aa34:	f000 f8aa 	bl	801ab8c <_free_r>
 801aa38:	6961      	ldr	r1, [r4, #20]
 801aa3a:	b111      	cbz	r1, 801aa42 <_reclaim_reent+0x46>
 801aa3c:	4620      	mov	r0, r4
 801aa3e:	f000 f8a5 	bl	801ab8c <_free_r>
 801aa42:	69e1      	ldr	r1, [r4, #28]
 801aa44:	b111      	cbz	r1, 801aa4c <_reclaim_reent+0x50>
 801aa46:	4620      	mov	r0, r4
 801aa48:	f000 f8a0 	bl	801ab8c <_free_r>
 801aa4c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801aa4e:	b111      	cbz	r1, 801aa56 <_reclaim_reent+0x5a>
 801aa50:	4620      	mov	r0, r4
 801aa52:	f000 f89b 	bl	801ab8c <_free_r>
 801aa56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801aa58:	b111      	cbz	r1, 801aa60 <_reclaim_reent+0x64>
 801aa5a:	4620      	mov	r0, r4
 801aa5c:	f000 f896 	bl	801ab8c <_free_r>
 801aa60:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801aa62:	b111      	cbz	r1, 801aa6a <_reclaim_reent+0x6e>
 801aa64:	4620      	mov	r0, r4
 801aa66:	f000 f891 	bl	801ab8c <_free_r>
 801aa6a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801aa6c:	b111      	cbz	r1, 801aa74 <_reclaim_reent+0x78>
 801aa6e:	4620      	mov	r0, r4
 801aa70:	f000 f88c 	bl	801ab8c <_free_r>
 801aa74:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801aa76:	b111      	cbz	r1, 801aa7e <_reclaim_reent+0x82>
 801aa78:	4620      	mov	r0, r4
 801aa7a:	f000 f887 	bl	801ab8c <_free_r>
 801aa7e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801aa80:	b111      	cbz	r1, 801aa88 <_reclaim_reent+0x8c>
 801aa82:	4620      	mov	r0, r4
 801aa84:	f000 f882 	bl	801ab8c <_free_r>
 801aa88:	6a23      	ldr	r3, [r4, #32]
 801aa8a:	b14b      	cbz	r3, 801aaa0 <_reclaim_reent+0xa4>
 801aa8c:	4620      	mov	r0, r4
 801aa8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa92:	4718      	bx	r3
 801aa94:	680e      	ldr	r6, [r1, #0]
 801aa96:	4620      	mov	r0, r4
 801aa98:	f000 f878 	bl	801ab8c <_free_r>
 801aa9c:	4631      	mov	r1, r6
 801aa9e:	e7bb      	b.n	801aa18 <_reclaim_reent+0x1c>
 801aaa0:	bd70      	pop	{r4, r5, r6, pc}
 801aaa2:	bf00      	nop
 801aaa4:	20000094 	.word	0x20000094

0801aaa8 <_lseek_r>:
 801aaa8:	b538      	push	{r3, r4, r5, lr}
 801aaaa:	4d07      	ldr	r5, [pc, #28]	@ (801aac8 <_lseek_r+0x20>)
 801aaac:	4604      	mov	r4, r0
 801aaae:	4608      	mov	r0, r1
 801aab0:	4611      	mov	r1, r2
 801aab2:	2200      	movs	r2, #0
 801aab4:	602a      	str	r2, [r5, #0]
 801aab6:	461a      	mov	r2, r3
 801aab8:	f7e6 fc2a 	bl	8001310 <_lseek>
 801aabc:	1c43      	adds	r3, r0, #1
 801aabe:	d102      	bne.n	801aac6 <_lseek_r+0x1e>
 801aac0:	682b      	ldr	r3, [r5, #0]
 801aac2:	b103      	cbz	r3, 801aac6 <_lseek_r+0x1e>
 801aac4:	6023      	str	r3, [r4, #0]
 801aac6:	bd38      	pop	{r3, r4, r5, pc}
 801aac8:	2000a228 	.word	0x2000a228

0801aacc <_read_r>:
 801aacc:	b538      	push	{r3, r4, r5, lr}
 801aace:	4d07      	ldr	r5, [pc, #28]	@ (801aaec <_read_r+0x20>)
 801aad0:	4604      	mov	r4, r0
 801aad2:	4608      	mov	r0, r1
 801aad4:	4611      	mov	r1, r2
 801aad6:	2200      	movs	r2, #0
 801aad8:	602a      	str	r2, [r5, #0]
 801aada:	461a      	mov	r2, r3
 801aadc:	f7e6 fbd4 	bl	8001288 <_read>
 801aae0:	1c43      	adds	r3, r0, #1
 801aae2:	d102      	bne.n	801aaea <_read_r+0x1e>
 801aae4:	682b      	ldr	r3, [r5, #0]
 801aae6:	b103      	cbz	r3, 801aaea <_read_r+0x1e>
 801aae8:	6023      	str	r3, [r4, #0]
 801aaea:	bd38      	pop	{r3, r4, r5, pc}
 801aaec:	2000a228 	.word	0x2000a228

0801aaf0 <_write_r>:
 801aaf0:	b538      	push	{r3, r4, r5, lr}
 801aaf2:	4d07      	ldr	r5, [pc, #28]	@ (801ab10 <_write_r+0x20>)
 801aaf4:	4604      	mov	r4, r0
 801aaf6:	4608      	mov	r0, r1
 801aaf8:	4611      	mov	r1, r2
 801aafa:	2200      	movs	r2, #0
 801aafc:	602a      	str	r2, [r5, #0]
 801aafe:	461a      	mov	r2, r3
 801ab00:	f7e5 fdac 	bl	800065c <_write>
 801ab04:	1c43      	adds	r3, r0, #1
 801ab06:	d102      	bne.n	801ab0e <_write_r+0x1e>
 801ab08:	682b      	ldr	r3, [r5, #0]
 801ab0a:	b103      	cbz	r3, 801ab0e <_write_r+0x1e>
 801ab0c:	6023      	str	r3, [r4, #0]
 801ab0e:	bd38      	pop	{r3, r4, r5, pc}
 801ab10:	2000a228 	.word	0x2000a228

0801ab14 <__errno>:
 801ab14:	4b01      	ldr	r3, [pc, #4]	@ (801ab1c <__errno+0x8>)
 801ab16:	6818      	ldr	r0, [r3, #0]
 801ab18:	4770      	bx	lr
 801ab1a:	bf00      	nop
 801ab1c:	20000094 	.word	0x20000094

0801ab20 <__libc_init_array>:
 801ab20:	b570      	push	{r4, r5, r6, lr}
 801ab22:	4d0d      	ldr	r5, [pc, #52]	@ (801ab58 <__libc_init_array+0x38>)
 801ab24:	4c0d      	ldr	r4, [pc, #52]	@ (801ab5c <__libc_init_array+0x3c>)
 801ab26:	1b64      	subs	r4, r4, r5
 801ab28:	10a4      	asrs	r4, r4, #2
 801ab2a:	2600      	movs	r6, #0
 801ab2c:	42a6      	cmp	r6, r4
 801ab2e:	d109      	bne.n	801ab44 <__libc_init_array+0x24>
 801ab30:	4d0b      	ldr	r5, [pc, #44]	@ (801ab60 <__libc_init_array+0x40>)
 801ab32:	4c0c      	ldr	r4, [pc, #48]	@ (801ab64 <__libc_init_array+0x44>)
 801ab34:	f000 fd66 	bl	801b604 <_init>
 801ab38:	1b64      	subs	r4, r4, r5
 801ab3a:	10a4      	asrs	r4, r4, #2
 801ab3c:	2600      	movs	r6, #0
 801ab3e:	42a6      	cmp	r6, r4
 801ab40:	d105      	bne.n	801ab4e <__libc_init_array+0x2e>
 801ab42:	bd70      	pop	{r4, r5, r6, pc}
 801ab44:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab48:	4798      	blx	r3
 801ab4a:	3601      	adds	r6, #1
 801ab4c:	e7ee      	b.n	801ab2c <__libc_init_array+0xc>
 801ab4e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab52:	4798      	blx	r3
 801ab54:	3601      	adds	r6, #1
 801ab56:	e7f2      	b.n	801ab3e <__libc_init_array+0x1e>
 801ab58:	0801baec 	.word	0x0801baec
 801ab5c:	0801baec 	.word	0x0801baec
 801ab60:	0801baec 	.word	0x0801baec
 801ab64:	0801baf0 	.word	0x0801baf0

0801ab68 <__retarget_lock_init_recursive>:
 801ab68:	4770      	bx	lr

0801ab6a <__retarget_lock_acquire_recursive>:
 801ab6a:	4770      	bx	lr

0801ab6c <__retarget_lock_release_recursive>:
 801ab6c:	4770      	bx	lr

0801ab6e <memcpy>:
 801ab6e:	440a      	add	r2, r1
 801ab70:	4291      	cmp	r1, r2
 801ab72:	f100 33ff 	add.w	r3, r0, #4294967295
 801ab76:	d100      	bne.n	801ab7a <memcpy+0xc>
 801ab78:	4770      	bx	lr
 801ab7a:	b510      	push	{r4, lr}
 801ab7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ab80:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ab84:	4291      	cmp	r1, r2
 801ab86:	d1f9      	bne.n	801ab7c <memcpy+0xe>
 801ab88:	bd10      	pop	{r4, pc}
	...

0801ab8c <_free_r>:
 801ab8c:	b538      	push	{r3, r4, r5, lr}
 801ab8e:	4605      	mov	r5, r0
 801ab90:	2900      	cmp	r1, #0
 801ab92:	d041      	beq.n	801ac18 <_free_r+0x8c>
 801ab94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ab98:	1f0c      	subs	r4, r1, #4
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	bfb8      	it	lt
 801ab9e:	18e4      	addlt	r4, r4, r3
 801aba0:	f000 f8e0 	bl	801ad64 <__malloc_lock>
 801aba4:	4a1d      	ldr	r2, [pc, #116]	@ (801ac1c <_free_r+0x90>)
 801aba6:	6813      	ldr	r3, [r2, #0]
 801aba8:	b933      	cbnz	r3, 801abb8 <_free_r+0x2c>
 801abaa:	6063      	str	r3, [r4, #4]
 801abac:	6014      	str	r4, [r2, #0]
 801abae:	4628      	mov	r0, r5
 801abb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801abb4:	f000 b8dc 	b.w	801ad70 <__malloc_unlock>
 801abb8:	42a3      	cmp	r3, r4
 801abba:	d908      	bls.n	801abce <_free_r+0x42>
 801abbc:	6820      	ldr	r0, [r4, #0]
 801abbe:	1821      	adds	r1, r4, r0
 801abc0:	428b      	cmp	r3, r1
 801abc2:	bf01      	itttt	eq
 801abc4:	6819      	ldreq	r1, [r3, #0]
 801abc6:	685b      	ldreq	r3, [r3, #4]
 801abc8:	1809      	addeq	r1, r1, r0
 801abca:	6021      	streq	r1, [r4, #0]
 801abcc:	e7ed      	b.n	801abaa <_free_r+0x1e>
 801abce:	461a      	mov	r2, r3
 801abd0:	685b      	ldr	r3, [r3, #4]
 801abd2:	b10b      	cbz	r3, 801abd8 <_free_r+0x4c>
 801abd4:	42a3      	cmp	r3, r4
 801abd6:	d9fa      	bls.n	801abce <_free_r+0x42>
 801abd8:	6811      	ldr	r1, [r2, #0]
 801abda:	1850      	adds	r0, r2, r1
 801abdc:	42a0      	cmp	r0, r4
 801abde:	d10b      	bne.n	801abf8 <_free_r+0x6c>
 801abe0:	6820      	ldr	r0, [r4, #0]
 801abe2:	4401      	add	r1, r0
 801abe4:	1850      	adds	r0, r2, r1
 801abe6:	4283      	cmp	r3, r0
 801abe8:	6011      	str	r1, [r2, #0]
 801abea:	d1e0      	bne.n	801abae <_free_r+0x22>
 801abec:	6818      	ldr	r0, [r3, #0]
 801abee:	685b      	ldr	r3, [r3, #4]
 801abf0:	6053      	str	r3, [r2, #4]
 801abf2:	4408      	add	r0, r1
 801abf4:	6010      	str	r0, [r2, #0]
 801abf6:	e7da      	b.n	801abae <_free_r+0x22>
 801abf8:	d902      	bls.n	801ac00 <_free_r+0x74>
 801abfa:	230c      	movs	r3, #12
 801abfc:	602b      	str	r3, [r5, #0]
 801abfe:	e7d6      	b.n	801abae <_free_r+0x22>
 801ac00:	6820      	ldr	r0, [r4, #0]
 801ac02:	1821      	adds	r1, r4, r0
 801ac04:	428b      	cmp	r3, r1
 801ac06:	bf04      	itt	eq
 801ac08:	6819      	ldreq	r1, [r3, #0]
 801ac0a:	685b      	ldreq	r3, [r3, #4]
 801ac0c:	6063      	str	r3, [r4, #4]
 801ac0e:	bf04      	itt	eq
 801ac10:	1809      	addeq	r1, r1, r0
 801ac12:	6021      	streq	r1, [r4, #0]
 801ac14:	6054      	str	r4, [r2, #4]
 801ac16:	e7ca      	b.n	801abae <_free_r+0x22>
 801ac18:	bd38      	pop	{r3, r4, r5, pc}
 801ac1a:	bf00      	nop
 801ac1c:	2000a234 	.word	0x2000a234

0801ac20 <sbrk_aligned>:
 801ac20:	b570      	push	{r4, r5, r6, lr}
 801ac22:	4e0f      	ldr	r6, [pc, #60]	@ (801ac60 <sbrk_aligned+0x40>)
 801ac24:	460c      	mov	r4, r1
 801ac26:	6831      	ldr	r1, [r6, #0]
 801ac28:	4605      	mov	r5, r0
 801ac2a:	b911      	cbnz	r1, 801ac32 <sbrk_aligned+0x12>
 801ac2c:	f000 fcda 	bl	801b5e4 <_sbrk_r>
 801ac30:	6030      	str	r0, [r6, #0]
 801ac32:	4621      	mov	r1, r4
 801ac34:	4628      	mov	r0, r5
 801ac36:	f000 fcd5 	bl	801b5e4 <_sbrk_r>
 801ac3a:	1c43      	adds	r3, r0, #1
 801ac3c:	d103      	bne.n	801ac46 <sbrk_aligned+0x26>
 801ac3e:	f04f 34ff 	mov.w	r4, #4294967295
 801ac42:	4620      	mov	r0, r4
 801ac44:	bd70      	pop	{r4, r5, r6, pc}
 801ac46:	1cc4      	adds	r4, r0, #3
 801ac48:	f024 0403 	bic.w	r4, r4, #3
 801ac4c:	42a0      	cmp	r0, r4
 801ac4e:	d0f8      	beq.n	801ac42 <sbrk_aligned+0x22>
 801ac50:	1a21      	subs	r1, r4, r0
 801ac52:	4628      	mov	r0, r5
 801ac54:	f000 fcc6 	bl	801b5e4 <_sbrk_r>
 801ac58:	3001      	adds	r0, #1
 801ac5a:	d1f2      	bne.n	801ac42 <sbrk_aligned+0x22>
 801ac5c:	e7ef      	b.n	801ac3e <sbrk_aligned+0x1e>
 801ac5e:	bf00      	nop
 801ac60:	2000a230 	.word	0x2000a230

0801ac64 <_malloc_r>:
 801ac64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac68:	1ccd      	adds	r5, r1, #3
 801ac6a:	f025 0503 	bic.w	r5, r5, #3
 801ac6e:	3508      	adds	r5, #8
 801ac70:	2d0c      	cmp	r5, #12
 801ac72:	bf38      	it	cc
 801ac74:	250c      	movcc	r5, #12
 801ac76:	2d00      	cmp	r5, #0
 801ac78:	4606      	mov	r6, r0
 801ac7a:	db01      	blt.n	801ac80 <_malloc_r+0x1c>
 801ac7c:	42a9      	cmp	r1, r5
 801ac7e:	d904      	bls.n	801ac8a <_malloc_r+0x26>
 801ac80:	230c      	movs	r3, #12
 801ac82:	6033      	str	r3, [r6, #0]
 801ac84:	2000      	movs	r0, #0
 801ac86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ad60 <_malloc_r+0xfc>
 801ac8e:	f000 f869 	bl	801ad64 <__malloc_lock>
 801ac92:	f8d8 3000 	ldr.w	r3, [r8]
 801ac96:	461c      	mov	r4, r3
 801ac98:	bb44      	cbnz	r4, 801acec <_malloc_r+0x88>
 801ac9a:	4629      	mov	r1, r5
 801ac9c:	4630      	mov	r0, r6
 801ac9e:	f7ff ffbf 	bl	801ac20 <sbrk_aligned>
 801aca2:	1c43      	adds	r3, r0, #1
 801aca4:	4604      	mov	r4, r0
 801aca6:	d158      	bne.n	801ad5a <_malloc_r+0xf6>
 801aca8:	f8d8 4000 	ldr.w	r4, [r8]
 801acac:	4627      	mov	r7, r4
 801acae:	2f00      	cmp	r7, #0
 801acb0:	d143      	bne.n	801ad3a <_malloc_r+0xd6>
 801acb2:	2c00      	cmp	r4, #0
 801acb4:	d04b      	beq.n	801ad4e <_malloc_r+0xea>
 801acb6:	6823      	ldr	r3, [r4, #0]
 801acb8:	4639      	mov	r1, r7
 801acba:	4630      	mov	r0, r6
 801acbc:	eb04 0903 	add.w	r9, r4, r3
 801acc0:	f000 fc90 	bl	801b5e4 <_sbrk_r>
 801acc4:	4581      	cmp	r9, r0
 801acc6:	d142      	bne.n	801ad4e <_malloc_r+0xea>
 801acc8:	6821      	ldr	r1, [r4, #0]
 801acca:	1a6d      	subs	r5, r5, r1
 801accc:	4629      	mov	r1, r5
 801acce:	4630      	mov	r0, r6
 801acd0:	f7ff ffa6 	bl	801ac20 <sbrk_aligned>
 801acd4:	3001      	adds	r0, #1
 801acd6:	d03a      	beq.n	801ad4e <_malloc_r+0xea>
 801acd8:	6823      	ldr	r3, [r4, #0]
 801acda:	442b      	add	r3, r5
 801acdc:	6023      	str	r3, [r4, #0]
 801acde:	f8d8 3000 	ldr.w	r3, [r8]
 801ace2:	685a      	ldr	r2, [r3, #4]
 801ace4:	bb62      	cbnz	r2, 801ad40 <_malloc_r+0xdc>
 801ace6:	f8c8 7000 	str.w	r7, [r8]
 801acea:	e00f      	b.n	801ad0c <_malloc_r+0xa8>
 801acec:	6822      	ldr	r2, [r4, #0]
 801acee:	1b52      	subs	r2, r2, r5
 801acf0:	d420      	bmi.n	801ad34 <_malloc_r+0xd0>
 801acf2:	2a0b      	cmp	r2, #11
 801acf4:	d917      	bls.n	801ad26 <_malloc_r+0xc2>
 801acf6:	1961      	adds	r1, r4, r5
 801acf8:	42a3      	cmp	r3, r4
 801acfa:	6025      	str	r5, [r4, #0]
 801acfc:	bf18      	it	ne
 801acfe:	6059      	strne	r1, [r3, #4]
 801ad00:	6863      	ldr	r3, [r4, #4]
 801ad02:	bf08      	it	eq
 801ad04:	f8c8 1000 	streq.w	r1, [r8]
 801ad08:	5162      	str	r2, [r4, r5]
 801ad0a:	604b      	str	r3, [r1, #4]
 801ad0c:	4630      	mov	r0, r6
 801ad0e:	f000 f82f 	bl	801ad70 <__malloc_unlock>
 801ad12:	f104 000b 	add.w	r0, r4, #11
 801ad16:	1d23      	adds	r3, r4, #4
 801ad18:	f020 0007 	bic.w	r0, r0, #7
 801ad1c:	1ac2      	subs	r2, r0, r3
 801ad1e:	bf1c      	itt	ne
 801ad20:	1a1b      	subne	r3, r3, r0
 801ad22:	50a3      	strne	r3, [r4, r2]
 801ad24:	e7af      	b.n	801ac86 <_malloc_r+0x22>
 801ad26:	6862      	ldr	r2, [r4, #4]
 801ad28:	42a3      	cmp	r3, r4
 801ad2a:	bf0c      	ite	eq
 801ad2c:	f8c8 2000 	streq.w	r2, [r8]
 801ad30:	605a      	strne	r2, [r3, #4]
 801ad32:	e7eb      	b.n	801ad0c <_malloc_r+0xa8>
 801ad34:	4623      	mov	r3, r4
 801ad36:	6864      	ldr	r4, [r4, #4]
 801ad38:	e7ae      	b.n	801ac98 <_malloc_r+0x34>
 801ad3a:	463c      	mov	r4, r7
 801ad3c:	687f      	ldr	r7, [r7, #4]
 801ad3e:	e7b6      	b.n	801acae <_malloc_r+0x4a>
 801ad40:	461a      	mov	r2, r3
 801ad42:	685b      	ldr	r3, [r3, #4]
 801ad44:	42a3      	cmp	r3, r4
 801ad46:	d1fb      	bne.n	801ad40 <_malloc_r+0xdc>
 801ad48:	2300      	movs	r3, #0
 801ad4a:	6053      	str	r3, [r2, #4]
 801ad4c:	e7de      	b.n	801ad0c <_malloc_r+0xa8>
 801ad4e:	230c      	movs	r3, #12
 801ad50:	6033      	str	r3, [r6, #0]
 801ad52:	4630      	mov	r0, r6
 801ad54:	f000 f80c 	bl	801ad70 <__malloc_unlock>
 801ad58:	e794      	b.n	801ac84 <_malloc_r+0x20>
 801ad5a:	6005      	str	r5, [r0, #0]
 801ad5c:	e7d6      	b.n	801ad0c <_malloc_r+0xa8>
 801ad5e:	bf00      	nop
 801ad60:	2000a234 	.word	0x2000a234

0801ad64 <__malloc_lock>:
 801ad64:	4801      	ldr	r0, [pc, #4]	@ (801ad6c <__malloc_lock+0x8>)
 801ad66:	f7ff bf00 	b.w	801ab6a <__retarget_lock_acquire_recursive>
 801ad6a:	bf00      	nop
 801ad6c:	2000a22c 	.word	0x2000a22c

0801ad70 <__malloc_unlock>:
 801ad70:	4801      	ldr	r0, [pc, #4]	@ (801ad78 <__malloc_unlock+0x8>)
 801ad72:	f7ff befb 	b.w	801ab6c <__retarget_lock_release_recursive>
 801ad76:	bf00      	nop
 801ad78:	2000a22c 	.word	0x2000a22c

0801ad7c <__sfputc_r>:
 801ad7c:	6893      	ldr	r3, [r2, #8]
 801ad7e:	3b01      	subs	r3, #1
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	b410      	push	{r4}
 801ad84:	6093      	str	r3, [r2, #8]
 801ad86:	da08      	bge.n	801ad9a <__sfputc_r+0x1e>
 801ad88:	6994      	ldr	r4, [r2, #24]
 801ad8a:	42a3      	cmp	r3, r4
 801ad8c:	db01      	blt.n	801ad92 <__sfputc_r+0x16>
 801ad8e:	290a      	cmp	r1, #10
 801ad90:	d103      	bne.n	801ad9a <__sfputc_r+0x1e>
 801ad92:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad96:	f7ff bd70 	b.w	801a87a <__swbuf_r>
 801ad9a:	6813      	ldr	r3, [r2, #0]
 801ad9c:	1c58      	adds	r0, r3, #1
 801ad9e:	6010      	str	r0, [r2, #0]
 801ada0:	7019      	strb	r1, [r3, #0]
 801ada2:	4608      	mov	r0, r1
 801ada4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ada8:	4770      	bx	lr

0801adaa <__sfputs_r>:
 801adaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adac:	4606      	mov	r6, r0
 801adae:	460f      	mov	r7, r1
 801adb0:	4614      	mov	r4, r2
 801adb2:	18d5      	adds	r5, r2, r3
 801adb4:	42ac      	cmp	r4, r5
 801adb6:	d101      	bne.n	801adbc <__sfputs_r+0x12>
 801adb8:	2000      	movs	r0, #0
 801adba:	e007      	b.n	801adcc <__sfputs_r+0x22>
 801adbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801adc0:	463a      	mov	r2, r7
 801adc2:	4630      	mov	r0, r6
 801adc4:	f7ff ffda 	bl	801ad7c <__sfputc_r>
 801adc8:	1c43      	adds	r3, r0, #1
 801adca:	d1f3      	bne.n	801adb4 <__sfputs_r+0xa>
 801adcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801add0 <_vfiprintf_r>:
 801add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801add4:	460d      	mov	r5, r1
 801add6:	b09d      	sub	sp, #116	@ 0x74
 801add8:	4614      	mov	r4, r2
 801adda:	4698      	mov	r8, r3
 801addc:	4606      	mov	r6, r0
 801adde:	b118      	cbz	r0, 801ade8 <_vfiprintf_r+0x18>
 801ade0:	6a03      	ldr	r3, [r0, #32]
 801ade2:	b90b      	cbnz	r3, 801ade8 <_vfiprintf_r+0x18>
 801ade4:	f7ff fc58 	bl	801a698 <__sinit>
 801ade8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801adea:	07d9      	lsls	r1, r3, #31
 801adec:	d405      	bmi.n	801adfa <_vfiprintf_r+0x2a>
 801adee:	89ab      	ldrh	r3, [r5, #12]
 801adf0:	059a      	lsls	r2, r3, #22
 801adf2:	d402      	bmi.n	801adfa <_vfiprintf_r+0x2a>
 801adf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801adf6:	f7ff feb8 	bl	801ab6a <__retarget_lock_acquire_recursive>
 801adfa:	89ab      	ldrh	r3, [r5, #12]
 801adfc:	071b      	lsls	r3, r3, #28
 801adfe:	d501      	bpl.n	801ae04 <_vfiprintf_r+0x34>
 801ae00:	692b      	ldr	r3, [r5, #16]
 801ae02:	b99b      	cbnz	r3, 801ae2c <_vfiprintf_r+0x5c>
 801ae04:	4629      	mov	r1, r5
 801ae06:	4630      	mov	r0, r6
 801ae08:	f7ff fd76 	bl	801a8f8 <__swsetup_r>
 801ae0c:	b170      	cbz	r0, 801ae2c <_vfiprintf_r+0x5c>
 801ae0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ae10:	07dc      	lsls	r4, r3, #31
 801ae12:	d504      	bpl.n	801ae1e <_vfiprintf_r+0x4e>
 801ae14:	f04f 30ff 	mov.w	r0, #4294967295
 801ae18:	b01d      	add	sp, #116	@ 0x74
 801ae1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae1e:	89ab      	ldrh	r3, [r5, #12]
 801ae20:	0598      	lsls	r0, r3, #22
 801ae22:	d4f7      	bmi.n	801ae14 <_vfiprintf_r+0x44>
 801ae24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ae26:	f7ff fea1 	bl	801ab6c <__retarget_lock_release_recursive>
 801ae2a:	e7f3      	b.n	801ae14 <_vfiprintf_r+0x44>
 801ae2c:	2300      	movs	r3, #0
 801ae2e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae30:	2320      	movs	r3, #32
 801ae32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ae36:	f8cd 800c 	str.w	r8, [sp, #12]
 801ae3a:	2330      	movs	r3, #48	@ 0x30
 801ae3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801afec <_vfiprintf_r+0x21c>
 801ae40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ae44:	f04f 0901 	mov.w	r9, #1
 801ae48:	4623      	mov	r3, r4
 801ae4a:	469a      	mov	sl, r3
 801ae4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae50:	b10a      	cbz	r2, 801ae56 <_vfiprintf_r+0x86>
 801ae52:	2a25      	cmp	r2, #37	@ 0x25
 801ae54:	d1f9      	bne.n	801ae4a <_vfiprintf_r+0x7a>
 801ae56:	ebba 0b04 	subs.w	fp, sl, r4
 801ae5a:	d00b      	beq.n	801ae74 <_vfiprintf_r+0xa4>
 801ae5c:	465b      	mov	r3, fp
 801ae5e:	4622      	mov	r2, r4
 801ae60:	4629      	mov	r1, r5
 801ae62:	4630      	mov	r0, r6
 801ae64:	f7ff ffa1 	bl	801adaa <__sfputs_r>
 801ae68:	3001      	adds	r0, #1
 801ae6a:	f000 80a7 	beq.w	801afbc <_vfiprintf_r+0x1ec>
 801ae6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ae70:	445a      	add	r2, fp
 801ae72:	9209      	str	r2, [sp, #36]	@ 0x24
 801ae74:	f89a 3000 	ldrb.w	r3, [sl]
 801ae78:	2b00      	cmp	r3, #0
 801ae7a:	f000 809f 	beq.w	801afbc <_vfiprintf_r+0x1ec>
 801ae7e:	2300      	movs	r3, #0
 801ae80:	f04f 32ff 	mov.w	r2, #4294967295
 801ae84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ae88:	f10a 0a01 	add.w	sl, sl, #1
 801ae8c:	9304      	str	r3, [sp, #16]
 801ae8e:	9307      	str	r3, [sp, #28]
 801ae90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ae94:	931a      	str	r3, [sp, #104]	@ 0x68
 801ae96:	4654      	mov	r4, sl
 801ae98:	2205      	movs	r2, #5
 801ae9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae9e:	4853      	ldr	r0, [pc, #332]	@ (801afec <_vfiprintf_r+0x21c>)
 801aea0:	f7e5 f96e 	bl	8000180 <memchr>
 801aea4:	9a04      	ldr	r2, [sp, #16]
 801aea6:	b9d8      	cbnz	r0, 801aee0 <_vfiprintf_r+0x110>
 801aea8:	06d1      	lsls	r1, r2, #27
 801aeaa:	bf44      	itt	mi
 801aeac:	2320      	movmi	r3, #32
 801aeae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801aeb2:	0713      	lsls	r3, r2, #28
 801aeb4:	bf44      	itt	mi
 801aeb6:	232b      	movmi	r3, #43	@ 0x2b
 801aeb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801aebc:	f89a 3000 	ldrb.w	r3, [sl]
 801aec0:	2b2a      	cmp	r3, #42	@ 0x2a
 801aec2:	d015      	beq.n	801aef0 <_vfiprintf_r+0x120>
 801aec4:	9a07      	ldr	r2, [sp, #28]
 801aec6:	4654      	mov	r4, sl
 801aec8:	2000      	movs	r0, #0
 801aeca:	f04f 0c0a 	mov.w	ip, #10
 801aece:	4621      	mov	r1, r4
 801aed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aed4:	3b30      	subs	r3, #48	@ 0x30
 801aed6:	2b09      	cmp	r3, #9
 801aed8:	d94b      	bls.n	801af72 <_vfiprintf_r+0x1a2>
 801aeda:	b1b0      	cbz	r0, 801af0a <_vfiprintf_r+0x13a>
 801aedc:	9207      	str	r2, [sp, #28]
 801aede:	e014      	b.n	801af0a <_vfiprintf_r+0x13a>
 801aee0:	eba0 0308 	sub.w	r3, r0, r8
 801aee4:	fa09 f303 	lsl.w	r3, r9, r3
 801aee8:	4313      	orrs	r3, r2
 801aeea:	9304      	str	r3, [sp, #16]
 801aeec:	46a2      	mov	sl, r4
 801aeee:	e7d2      	b.n	801ae96 <_vfiprintf_r+0xc6>
 801aef0:	9b03      	ldr	r3, [sp, #12]
 801aef2:	1d19      	adds	r1, r3, #4
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	9103      	str	r1, [sp, #12]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	bfbb      	ittet	lt
 801aefc:	425b      	neglt	r3, r3
 801aefe:	f042 0202 	orrlt.w	r2, r2, #2
 801af02:	9307      	strge	r3, [sp, #28]
 801af04:	9307      	strlt	r3, [sp, #28]
 801af06:	bfb8      	it	lt
 801af08:	9204      	strlt	r2, [sp, #16]
 801af0a:	7823      	ldrb	r3, [r4, #0]
 801af0c:	2b2e      	cmp	r3, #46	@ 0x2e
 801af0e:	d10a      	bne.n	801af26 <_vfiprintf_r+0x156>
 801af10:	7863      	ldrb	r3, [r4, #1]
 801af12:	2b2a      	cmp	r3, #42	@ 0x2a
 801af14:	d132      	bne.n	801af7c <_vfiprintf_r+0x1ac>
 801af16:	9b03      	ldr	r3, [sp, #12]
 801af18:	1d1a      	adds	r2, r3, #4
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	9203      	str	r2, [sp, #12]
 801af1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801af22:	3402      	adds	r4, #2
 801af24:	9305      	str	r3, [sp, #20]
 801af26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801affc <_vfiprintf_r+0x22c>
 801af2a:	7821      	ldrb	r1, [r4, #0]
 801af2c:	2203      	movs	r2, #3
 801af2e:	4650      	mov	r0, sl
 801af30:	f7e5 f926 	bl	8000180 <memchr>
 801af34:	b138      	cbz	r0, 801af46 <_vfiprintf_r+0x176>
 801af36:	9b04      	ldr	r3, [sp, #16]
 801af38:	eba0 000a 	sub.w	r0, r0, sl
 801af3c:	2240      	movs	r2, #64	@ 0x40
 801af3e:	4082      	lsls	r2, r0
 801af40:	4313      	orrs	r3, r2
 801af42:	3401      	adds	r4, #1
 801af44:	9304      	str	r3, [sp, #16]
 801af46:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af4a:	4829      	ldr	r0, [pc, #164]	@ (801aff0 <_vfiprintf_r+0x220>)
 801af4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801af50:	2206      	movs	r2, #6
 801af52:	f7e5 f915 	bl	8000180 <memchr>
 801af56:	2800      	cmp	r0, #0
 801af58:	d03f      	beq.n	801afda <_vfiprintf_r+0x20a>
 801af5a:	4b26      	ldr	r3, [pc, #152]	@ (801aff4 <_vfiprintf_r+0x224>)
 801af5c:	bb1b      	cbnz	r3, 801afa6 <_vfiprintf_r+0x1d6>
 801af5e:	9b03      	ldr	r3, [sp, #12]
 801af60:	3307      	adds	r3, #7
 801af62:	f023 0307 	bic.w	r3, r3, #7
 801af66:	3308      	adds	r3, #8
 801af68:	9303      	str	r3, [sp, #12]
 801af6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af6c:	443b      	add	r3, r7
 801af6e:	9309      	str	r3, [sp, #36]	@ 0x24
 801af70:	e76a      	b.n	801ae48 <_vfiprintf_r+0x78>
 801af72:	fb0c 3202 	mla	r2, ip, r2, r3
 801af76:	460c      	mov	r4, r1
 801af78:	2001      	movs	r0, #1
 801af7a:	e7a8      	b.n	801aece <_vfiprintf_r+0xfe>
 801af7c:	2300      	movs	r3, #0
 801af7e:	3401      	adds	r4, #1
 801af80:	9305      	str	r3, [sp, #20]
 801af82:	4619      	mov	r1, r3
 801af84:	f04f 0c0a 	mov.w	ip, #10
 801af88:	4620      	mov	r0, r4
 801af8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801af8e:	3a30      	subs	r2, #48	@ 0x30
 801af90:	2a09      	cmp	r2, #9
 801af92:	d903      	bls.n	801af9c <_vfiprintf_r+0x1cc>
 801af94:	2b00      	cmp	r3, #0
 801af96:	d0c6      	beq.n	801af26 <_vfiprintf_r+0x156>
 801af98:	9105      	str	r1, [sp, #20]
 801af9a:	e7c4      	b.n	801af26 <_vfiprintf_r+0x156>
 801af9c:	fb0c 2101 	mla	r1, ip, r1, r2
 801afa0:	4604      	mov	r4, r0
 801afa2:	2301      	movs	r3, #1
 801afa4:	e7f0      	b.n	801af88 <_vfiprintf_r+0x1b8>
 801afa6:	ab03      	add	r3, sp, #12
 801afa8:	9300      	str	r3, [sp, #0]
 801afaa:	462a      	mov	r2, r5
 801afac:	4b12      	ldr	r3, [pc, #72]	@ (801aff8 <_vfiprintf_r+0x228>)
 801afae:	a904      	add	r1, sp, #16
 801afb0:	4630      	mov	r0, r6
 801afb2:	f3af 8000 	nop.w
 801afb6:	4607      	mov	r7, r0
 801afb8:	1c78      	adds	r0, r7, #1
 801afba:	d1d6      	bne.n	801af6a <_vfiprintf_r+0x19a>
 801afbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801afbe:	07d9      	lsls	r1, r3, #31
 801afc0:	d405      	bmi.n	801afce <_vfiprintf_r+0x1fe>
 801afc2:	89ab      	ldrh	r3, [r5, #12]
 801afc4:	059a      	lsls	r2, r3, #22
 801afc6:	d402      	bmi.n	801afce <_vfiprintf_r+0x1fe>
 801afc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801afca:	f7ff fdcf 	bl	801ab6c <__retarget_lock_release_recursive>
 801afce:	89ab      	ldrh	r3, [r5, #12]
 801afd0:	065b      	lsls	r3, r3, #25
 801afd2:	f53f af1f 	bmi.w	801ae14 <_vfiprintf_r+0x44>
 801afd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801afd8:	e71e      	b.n	801ae18 <_vfiprintf_r+0x48>
 801afda:	ab03      	add	r3, sp, #12
 801afdc:	9300      	str	r3, [sp, #0]
 801afde:	462a      	mov	r2, r5
 801afe0:	4b05      	ldr	r3, [pc, #20]	@ (801aff8 <_vfiprintf_r+0x228>)
 801afe2:	a904      	add	r1, sp, #16
 801afe4:	4630      	mov	r0, r6
 801afe6:	f000 f879 	bl	801b0dc <_printf_i>
 801afea:	e7e4      	b.n	801afb6 <_vfiprintf_r+0x1e6>
 801afec:	0801bab0 	.word	0x0801bab0
 801aff0:	0801baba 	.word	0x0801baba
 801aff4:	00000000 	.word	0x00000000
 801aff8:	0801adab 	.word	0x0801adab
 801affc:	0801bab6 	.word	0x0801bab6

0801b000 <_printf_common>:
 801b000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b004:	4616      	mov	r6, r2
 801b006:	4698      	mov	r8, r3
 801b008:	688a      	ldr	r2, [r1, #8]
 801b00a:	690b      	ldr	r3, [r1, #16]
 801b00c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b010:	4293      	cmp	r3, r2
 801b012:	bfb8      	it	lt
 801b014:	4613      	movlt	r3, r2
 801b016:	6033      	str	r3, [r6, #0]
 801b018:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b01c:	4607      	mov	r7, r0
 801b01e:	460c      	mov	r4, r1
 801b020:	b10a      	cbz	r2, 801b026 <_printf_common+0x26>
 801b022:	3301      	adds	r3, #1
 801b024:	6033      	str	r3, [r6, #0]
 801b026:	6823      	ldr	r3, [r4, #0]
 801b028:	0699      	lsls	r1, r3, #26
 801b02a:	bf42      	ittt	mi
 801b02c:	6833      	ldrmi	r3, [r6, #0]
 801b02e:	3302      	addmi	r3, #2
 801b030:	6033      	strmi	r3, [r6, #0]
 801b032:	6825      	ldr	r5, [r4, #0]
 801b034:	f015 0506 	ands.w	r5, r5, #6
 801b038:	d106      	bne.n	801b048 <_printf_common+0x48>
 801b03a:	f104 0a19 	add.w	sl, r4, #25
 801b03e:	68e3      	ldr	r3, [r4, #12]
 801b040:	6832      	ldr	r2, [r6, #0]
 801b042:	1a9b      	subs	r3, r3, r2
 801b044:	42ab      	cmp	r3, r5
 801b046:	dc26      	bgt.n	801b096 <_printf_common+0x96>
 801b048:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b04c:	6822      	ldr	r2, [r4, #0]
 801b04e:	3b00      	subs	r3, #0
 801b050:	bf18      	it	ne
 801b052:	2301      	movne	r3, #1
 801b054:	0692      	lsls	r2, r2, #26
 801b056:	d42b      	bmi.n	801b0b0 <_printf_common+0xb0>
 801b058:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b05c:	4641      	mov	r1, r8
 801b05e:	4638      	mov	r0, r7
 801b060:	47c8      	blx	r9
 801b062:	3001      	adds	r0, #1
 801b064:	d01e      	beq.n	801b0a4 <_printf_common+0xa4>
 801b066:	6823      	ldr	r3, [r4, #0]
 801b068:	6922      	ldr	r2, [r4, #16]
 801b06a:	f003 0306 	and.w	r3, r3, #6
 801b06e:	2b04      	cmp	r3, #4
 801b070:	bf02      	ittt	eq
 801b072:	68e5      	ldreq	r5, [r4, #12]
 801b074:	6833      	ldreq	r3, [r6, #0]
 801b076:	1aed      	subeq	r5, r5, r3
 801b078:	68a3      	ldr	r3, [r4, #8]
 801b07a:	bf0c      	ite	eq
 801b07c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b080:	2500      	movne	r5, #0
 801b082:	4293      	cmp	r3, r2
 801b084:	bfc4      	itt	gt
 801b086:	1a9b      	subgt	r3, r3, r2
 801b088:	18ed      	addgt	r5, r5, r3
 801b08a:	2600      	movs	r6, #0
 801b08c:	341a      	adds	r4, #26
 801b08e:	42b5      	cmp	r5, r6
 801b090:	d11a      	bne.n	801b0c8 <_printf_common+0xc8>
 801b092:	2000      	movs	r0, #0
 801b094:	e008      	b.n	801b0a8 <_printf_common+0xa8>
 801b096:	2301      	movs	r3, #1
 801b098:	4652      	mov	r2, sl
 801b09a:	4641      	mov	r1, r8
 801b09c:	4638      	mov	r0, r7
 801b09e:	47c8      	blx	r9
 801b0a0:	3001      	adds	r0, #1
 801b0a2:	d103      	bne.n	801b0ac <_printf_common+0xac>
 801b0a4:	f04f 30ff 	mov.w	r0, #4294967295
 801b0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0ac:	3501      	adds	r5, #1
 801b0ae:	e7c6      	b.n	801b03e <_printf_common+0x3e>
 801b0b0:	18e1      	adds	r1, r4, r3
 801b0b2:	1c5a      	adds	r2, r3, #1
 801b0b4:	2030      	movs	r0, #48	@ 0x30
 801b0b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b0ba:	4422      	add	r2, r4
 801b0bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b0c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b0c4:	3302      	adds	r3, #2
 801b0c6:	e7c7      	b.n	801b058 <_printf_common+0x58>
 801b0c8:	2301      	movs	r3, #1
 801b0ca:	4622      	mov	r2, r4
 801b0cc:	4641      	mov	r1, r8
 801b0ce:	4638      	mov	r0, r7
 801b0d0:	47c8      	blx	r9
 801b0d2:	3001      	adds	r0, #1
 801b0d4:	d0e6      	beq.n	801b0a4 <_printf_common+0xa4>
 801b0d6:	3601      	adds	r6, #1
 801b0d8:	e7d9      	b.n	801b08e <_printf_common+0x8e>
	...

0801b0dc <_printf_i>:
 801b0dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b0e0:	7e0f      	ldrb	r7, [r1, #24]
 801b0e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b0e4:	2f78      	cmp	r7, #120	@ 0x78
 801b0e6:	4691      	mov	r9, r2
 801b0e8:	4680      	mov	r8, r0
 801b0ea:	460c      	mov	r4, r1
 801b0ec:	469a      	mov	sl, r3
 801b0ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b0f2:	d807      	bhi.n	801b104 <_printf_i+0x28>
 801b0f4:	2f62      	cmp	r7, #98	@ 0x62
 801b0f6:	d80a      	bhi.n	801b10e <_printf_i+0x32>
 801b0f8:	2f00      	cmp	r7, #0
 801b0fa:	f000 80d2 	beq.w	801b2a2 <_printf_i+0x1c6>
 801b0fe:	2f58      	cmp	r7, #88	@ 0x58
 801b100:	f000 80b9 	beq.w	801b276 <_printf_i+0x19a>
 801b104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b108:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b10c:	e03a      	b.n	801b184 <_printf_i+0xa8>
 801b10e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b112:	2b15      	cmp	r3, #21
 801b114:	d8f6      	bhi.n	801b104 <_printf_i+0x28>
 801b116:	a101      	add	r1, pc, #4	@ (adr r1, 801b11c <_printf_i+0x40>)
 801b118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b11c:	0801b175 	.word	0x0801b175
 801b120:	0801b189 	.word	0x0801b189
 801b124:	0801b105 	.word	0x0801b105
 801b128:	0801b105 	.word	0x0801b105
 801b12c:	0801b105 	.word	0x0801b105
 801b130:	0801b105 	.word	0x0801b105
 801b134:	0801b189 	.word	0x0801b189
 801b138:	0801b105 	.word	0x0801b105
 801b13c:	0801b105 	.word	0x0801b105
 801b140:	0801b105 	.word	0x0801b105
 801b144:	0801b105 	.word	0x0801b105
 801b148:	0801b289 	.word	0x0801b289
 801b14c:	0801b1b3 	.word	0x0801b1b3
 801b150:	0801b243 	.word	0x0801b243
 801b154:	0801b105 	.word	0x0801b105
 801b158:	0801b105 	.word	0x0801b105
 801b15c:	0801b2ab 	.word	0x0801b2ab
 801b160:	0801b105 	.word	0x0801b105
 801b164:	0801b1b3 	.word	0x0801b1b3
 801b168:	0801b105 	.word	0x0801b105
 801b16c:	0801b105 	.word	0x0801b105
 801b170:	0801b24b 	.word	0x0801b24b
 801b174:	6833      	ldr	r3, [r6, #0]
 801b176:	1d1a      	adds	r2, r3, #4
 801b178:	681b      	ldr	r3, [r3, #0]
 801b17a:	6032      	str	r2, [r6, #0]
 801b17c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b180:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b184:	2301      	movs	r3, #1
 801b186:	e09d      	b.n	801b2c4 <_printf_i+0x1e8>
 801b188:	6833      	ldr	r3, [r6, #0]
 801b18a:	6820      	ldr	r0, [r4, #0]
 801b18c:	1d19      	adds	r1, r3, #4
 801b18e:	6031      	str	r1, [r6, #0]
 801b190:	0606      	lsls	r6, r0, #24
 801b192:	d501      	bpl.n	801b198 <_printf_i+0xbc>
 801b194:	681d      	ldr	r5, [r3, #0]
 801b196:	e003      	b.n	801b1a0 <_printf_i+0xc4>
 801b198:	0645      	lsls	r5, r0, #25
 801b19a:	d5fb      	bpl.n	801b194 <_printf_i+0xb8>
 801b19c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b1a0:	2d00      	cmp	r5, #0
 801b1a2:	da03      	bge.n	801b1ac <_printf_i+0xd0>
 801b1a4:	232d      	movs	r3, #45	@ 0x2d
 801b1a6:	426d      	negs	r5, r5
 801b1a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b1ac:	4859      	ldr	r0, [pc, #356]	@ (801b314 <_printf_i+0x238>)
 801b1ae:	230a      	movs	r3, #10
 801b1b0:	e011      	b.n	801b1d6 <_printf_i+0xfa>
 801b1b2:	6821      	ldr	r1, [r4, #0]
 801b1b4:	6833      	ldr	r3, [r6, #0]
 801b1b6:	0608      	lsls	r0, r1, #24
 801b1b8:	f853 5b04 	ldr.w	r5, [r3], #4
 801b1bc:	d402      	bmi.n	801b1c4 <_printf_i+0xe8>
 801b1be:	0649      	lsls	r1, r1, #25
 801b1c0:	bf48      	it	mi
 801b1c2:	b2ad      	uxthmi	r5, r5
 801b1c4:	2f6f      	cmp	r7, #111	@ 0x6f
 801b1c6:	4853      	ldr	r0, [pc, #332]	@ (801b314 <_printf_i+0x238>)
 801b1c8:	6033      	str	r3, [r6, #0]
 801b1ca:	bf14      	ite	ne
 801b1cc:	230a      	movne	r3, #10
 801b1ce:	2308      	moveq	r3, #8
 801b1d0:	2100      	movs	r1, #0
 801b1d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b1d6:	6866      	ldr	r6, [r4, #4]
 801b1d8:	60a6      	str	r6, [r4, #8]
 801b1da:	2e00      	cmp	r6, #0
 801b1dc:	bfa2      	ittt	ge
 801b1de:	6821      	ldrge	r1, [r4, #0]
 801b1e0:	f021 0104 	bicge.w	r1, r1, #4
 801b1e4:	6021      	strge	r1, [r4, #0]
 801b1e6:	b90d      	cbnz	r5, 801b1ec <_printf_i+0x110>
 801b1e8:	2e00      	cmp	r6, #0
 801b1ea:	d04b      	beq.n	801b284 <_printf_i+0x1a8>
 801b1ec:	4616      	mov	r6, r2
 801b1ee:	fbb5 f1f3 	udiv	r1, r5, r3
 801b1f2:	fb03 5711 	mls	r7, r3, r1, r5
 801b1f6:	5dc7      	ldrb	r7, [r0, r7]
 801b1f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b1fc:	462f      	mov	r7, r5
 801b1fe:	42bb      	cmp	r3, r7
 801b200:	460d      	mov	r5, r1
 801b202:	d9f4      	bls.n	801b1ee <_printf_i+0x112>
 801b204:	2b08      	cmp	r3, #8
 801b206:	d10b      	bne.n	801b220 <_printf_i+0x144>
 801b208:	6823      	ldr	r3, [r4, #0]
 801b20a:	07df      	lsls	r7, r3, #31
 801b20c:	d508      	bpl.n	801b220 <_printf_i+0x144>
 801b20e:	6923      	ldr	r3, [r4, #16]
 801b210:	6861      	ldr	r1, [r4, #4]
 801b212:	4299      	cmp	r1, r3
 801b214:	bfde      	ittt	le
 801b216:	2330      	movle	r3, #48	@ 0x30
 801b218:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b21c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b220:	1b92      	subs	r2, r2, r6
 801b222:	6122      	str	r2, [r4, #16]
 801b224:	f8cd a000 	str.w	sl, [sp]
 801b228:	464b      	mov	r3, r9
 801b22a:	aa03      	add	r2, sp, #12
 801b22c:	4621      	mov	r1, r4
 801b22e:	4640      	mov	r0, r8
 801b230:	f7ff fee6 	bl	801b000 <_printf_common>
 801b234:	3001      	adds	r0, #1
 801b236:	d14a      	bne.n	801b2ce <_printf_i+0x1f2>
 801b238:	f04f 30ff 	mov.w	r0, #4294967295
 801b23c:	b004      	add	sp, #16
 801b23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b242:	6823      	ldr	r3, [r4, #0]
 801b244:	f043 0320 	orr.w	r3, r3, #32
 801b248:	6023      	str	r3, [r4, #0]
 801b24a:	4833      	ldr	r0, [pc, #204]	@ (801b318 <_printf_i+0x23c>)
 801b24c:	2778      	movs	r7, #120	@ 0x78
 801b24e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b252:	6823      	ldr	r3, [r4, #0]
 801b254:	6831      	ldr	r1, [r6, #0]
 801b256:	061f      	lsls	r7, r3, #24
 801b258:	f851 5b04 	ldr.w	r5, [r1], #4
 801b25c:	d402      	bmi.n	801b264 <_printf_i+0x188>
 801b25e:	065f      	lsls	r7, r3, #25
 801b260:	bf48      	it	mi
 801b262:	b2ad      	uxthmi	r5, r5
 801b264:	6031      	str	r1, [r6, #0]
 801b266:	07d9      	lsls	r1, r3, #31
 801b268:	bf44      	itt	mi
 801b26a:	f043 0320 	orrmi.w	r3, r3, #32
 801b26e:	6023      	strmi	r3, [r4, #0]
 801b270:	b11d      	cbz	r5, 801b27a <_printf_i+0x19e>
 801b272:	2310      	movs	r3, #16
 801b274:	e7ac      	b.n	801b1d0 <_printf_i+0xf4>
 801b276:	4827      	ldr	r0, [pc, #156]	@ (801b314 <_printf_i+0x238>)
 801b278:	e7e9      	b.n	801b24e <_printf_i+0x172>
 801b27a:	6823      	ldr	r3, [r4, #0]
 801b27c:	f023 0320 	bic.w	r3, r3, #32
 801b280:	6023      	str	r3, [r4, #0]
 801b282:	e7f6      	b.n	801b272 <_printf_i+0x196>
 801b284:	4616      	mov	r6, r2
 801b286:	e7bd      	b.n	801b204 <_printf_i+0x128>
 801b288:	6833      	ldr	r3, [r6, #0]
 801b28a:	6825      	ldr	r5, [r4, #0]
 801b28c:	6961      	ldr	r1, [r4, #20]
 801b28e:	1d18      	adds	r0, r3, #4
 801b290:	6030      	str	r0, [r6, #0]
 801b292:	062e      	lsls	r6, r5, #24
 801b294:	681b      	ldr	r3, [r3, #0]
 801b296:	d501      	bpl.n	801b29c <_printf_i+0x1c0>
 801b298:	6019      	str	r1, [r3, #0]
 801b29a:	e002      	b.n	801b2a2 <_printf_i+0x1c6>
 801b29c:	0668      	lsls	r0, r5, #25
 801b29e:	d5fb      	bpl.n	801b298 <_printf_i+0x1bc>
 801b2a0:	8019      	strh	r1, [r3, #0]
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	6123      	str	r3, [r4, #16]
 801b2a6:	4616      	mov	r6, r2
 801b2a8:	e7bc      	b.n	801b224 <_printf_i+0x148>
 801b2aa:	6833      	ldr	r3, [r6, #0]
 801b2ac:	1d1a      	adds	r2, r3, #4
 801b2ae:	6032      	str	r2, [r6, #0]
 801b2b0:	681e      	ldr	r6, [r3, #0]
 801b2b2:	6862      	ldr	r2, [r4, #4]
 801b2b4:	2100      	movs	r1, #0
 801b2b6:	4630      	mov	r0, r6
 801b2b8:	f7e4 ff62 	bl	8000180 <memchr>
 801b2bc:	b108      	cbz	r0, 801b2c2 <_printf_i+0x1e6>
 801b2be:	1b80      	subs	r0, r0, r6
 801b2c0:	6060      	str	r0, [r4, #4]
 801b2c2:	6863      	ldr	r3, [r4, #4]
 801b2c4:	6123      	str	r3, [r4, #16]
 801b2c6:	2300      	movs	r3, #0
 801b2c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b2cc:	e7aa      	b.n	801b224 <_printf_i+0x148>
 801b2ce:	6923      	ldr	r3, [r4, #16]
 801b2d0:	4632      	mov	r2, r6
 801b2d2:	4649      	mov	r1, r9
 801b2d4:	4640      	mov	r0, r8
 801b2d6:	47d0      	blx	sl
 801b2d8:	3001      	adds	r0, #1
 801b2da:	d0ad      	beq.n	801b238 <_printf_i+0x15c>
 801b2dc:	6823      	ldr	r3, [r4, #0]
 801b2de:	079b      	lsls	r3, r3, #30
 801b2e0:	d413      	bmi.n	801b30a <_printf_i+0x22e>
 801b2e2:	68e0      	ldr	r0, [r4, #12]
 801b2e4:	9b03      	ldr	r3, [sp, #12]
 801b2e6:	4298      	cmp	r0, r3
 801b2e8:	bfb8      	it	lt
 801b2ea:	4618      	movlt	r0, r3
 801b2ec:	e7a6      	b.n	801b23c <_printf_i+0x160>
 801b2ee:	2301      	movs	r3, #1
 801b2f0:	4632      	mov	r2, r6
 801b2f2:	4649      	mov	r1, r9
 801b2f4:	4640      	mov	r0, r8
 801b2f6:	47d0      	blx	sl
 801b2f8:	3001      	adds	r0, #1
 801b2fa:	d09d      	beq.n	801b238 <_printf_i+0x15c>
 801b2fc:	3501      	adds	r5, #1
 801b2fe:	68e3      	ldr	r3, [r4, #12]
 801b300:	9903      	ldr	r1, [sp, #12]
 801b302:	1a5b      	subs	r3, r3, r1
 801b304:	42ab      	cmp	r3, r5
 801b306:	dcf2      	bgt.n	801b2ee <_printf_i+0x212>
 801b308:	e7eb      	b.n	801b2e2 <_printf_i+0x206>
 801b30a:	2500      	movs	r5, #0
 801b30c:	f104 0619 	add.w	r6, r4, #25
 801b310:	e7f5      	b.n	801b2fe <_printf_i+0x222>
 801b312:	bf00      	nop
 801b314:	0801bac1 	.word	0x0801bac1
 801b318:	0801bad2 	.word	0x0801bad2

0801b31c <__sflush_r>:
 801b31c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b324:	0716      	lsls	r6, r2, #28
 801b326:	4605      	mov	r5, r0
 801b328:	460c      	mov	r4, r1
 801b32a:	d454      	bmi.n	801b3d6 <__sflush_r+0xba>
 801b32c:	684b      	ldr	r3, [r1, #4]
 801b32e:	2b00      	cmp	r3, #0
 801b330:	dc02      	bgt.n	801b338 <__sflush_r+0x1c>
 801b332:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b334:	2b00      	cmp	r3, #0
 801b336:	dd48      	ble.n	801b3ca <__sflush_r+0xae>
 801b338:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b33a:	2e00      	cmp	r6, #0
 801b33c:	d045      	beq.n	801b3ca <__sflush_r+0xae>
 801b33e:	2300      	movs	r3, #0
 801b340:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b344:	682f      	ldr	r7, [r5, #0]
 801b346:	6a21      	ldr	r1, [r4, #32]
 801b348:	602b      	str	r3, [r5, #0]
 801b34a:	d030      	beq.n	801b3ae <__sflush_r+0x92>
 801b34c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b34e:	89a3      	ldrh	r3, [r4, #12]
 801b350:	0759      	lsls	r1, r3, #29
 801b352:	d505      	bpl.n	801b360 <__sflush_r+0x44>
 801b354:	6863      	ldr	r3, [r4, #4]
 801b356:	1ad2      	subs	r2, r2, r3
 801b358:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b35a:	b10b      	cbz	r3, 801b360 <__sflush_r+0x44>
 801b35c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b35e:	1ad2      	subs	r2, r2, r3
 801b360:	2300      	movs	r3, #0
 801b362:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b364:	6a21      	ldr	r1, [r4, #32]
 801b366:	4628      	mov	r0, r5
 801b368:	47b0      	blx	r6
 801b36a:	1c43      	adds	r3, r0, #1
 801b36c:	89a3      	ldrh	r3, [r4, #12]
 801b36e:	d106      	bne.n	801b37e <__sflush_r+0x62>
 801b370:	6829      	ldr	r1, [r5, #0]
 801b372:	291d      	cmp	r1, #29
 801b374:	d82b      	bhi.n	801b3ce <__sflush_r+0xb2>
 801b376:	4a2a      	ldr	r2, [pc, #168]	@ (801b420 <__sflush_r+0x104>)
 801b378:	410a      	asrs	r2, r1
 801b37a:	07d6      	lsls	r6, r2, #31
 801b37c:	d427      	bmi.n	801b3ce <__sflush_r+0xb2>
 801b37e:	2200      	movs	r2, #0
 801b380:	6062      	str	r2, [r4, #4]
 801b382:	04d9      	lsls	r1, r3, #19
 801b384:	6922      	ldr	r2, [r4, #16]
 801b386:	6022      	str	r2, [r4, #0]
 801b388:	d504      	bpl.n	801b394 <__sflush_r+0x78>
 801b38a:	1c42      	adds	r2, r0, #1
 801b38c:	d101      	bne.n	801b392 <__sflush_r+0x76>
 801b38e:	682b      	ldr	r3, [r5, #0]
 801b390:	b903      	cbnz	r3, 801b394 <__sflush_r+0x78>
 801b392:	6560      	str	r0, [r4, #84]	@ 0x54
 801b394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b396:	602f      	str	r7, [r5, #0]
 801b398:	b1b9      	cbz	r1, 801b3ca <__sflush_r+0xae>
 801b39a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b39e:	4299      	cmp	r1, r3
 801b3a0:	d002      	beq.n	801b3a8 <__sflush_r+0x8c>
 801b3a2:	4628      	mov	r0, r5
 801b3a4:	f7ff fbf2 	bl	801ab8c <_free_r>
 801b3a8:	2300      	movs	r3, #0
 801b3aa:	6363      	str	r3, [r4, #52]	@ 0x34
 801b3ac:	e00d      	b.n	801b3ca <__sflush_r+0xae>
 801b3ae:	2301      	movs	r3, #1
 801b3b0:	4628      	mov	r0, r5
 801b3b2:	47b0      	blx	r6
 801b3b4:	4602      	mov	r2, r0
 801b3b6:	1c50      	adds	r0, r2, #1
 801b3b8:	d1c9      	bne.n	801b34e <__sflush_r+0x32>
 801b3ba:	682b      	ldr	r3, [r5, #0]
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d0c6      	beq.n	801b34e <__sflush_r+0x32>
 801b3c0:	2b1d      	cmp	r3, #29
 801b3c2:	d001      	beq.n	801b3c8 <__sflush_r+0xac>
 801b3c4:	2b16      	cmp	r3, #22
 801b3c6:	d11e      	bne.n	801b406 <__sflush_r+0xea>
 801b3c8:	602f      	str	r7, [r5, #0]
 801b3ca:	2000      	movs	r0, #0
 801b3cc:	e022      	b.n	801b414 <__sflush_r+0xf8>
 801b3ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b3d2:	b21b      	sxth	r3, r3
 801b3d4:	e01b      	b.n	801b40e <__sflush_r+0xf2>
 801b3d6:	690f      	ldr	r7, [r1, #16]
 801b3d8:	2f00      	cmp	r7, #0
 801b3da:	d0f6      	beq.n	801b3ca <__sflush_r+0xae>
 801b3dc:	0793      	lsls	r3, r2, #30
 801b3de:	680e      	ldr	r6, [r1, #0]
 801b3e0:	bf08      	it	eq
 801b3e2:	694b      	ldreq	r3, [r1, #20]
 801b3e4:	600f      	str	r7, [r1, #0]
 801b3e6:	bf18      	it	ne
 801b3e8:	2300      	movne	r3, #0
 801b3ea:	eba6 0807 	sub.w	r8, r6, r7
 801b3ee:	608b      	str	r3, [r1, #8]
 801b3f0:	f1b8 0f00 	cmp.w	r8, #0
 801b3f4:	dde9      	ble.n	801b3ca <__sflush_r+0xae>
 801b3f6:	6a21      	ldr	r1, [r4, #32]
 801b3f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b3fa:	4643      	mov	r3, r8
 801b3fc:	463a      	mov	r2, r7
 801b3fe:	4628      	mov	r0, r5
 801b400:	47b0      	blx	r6
 801b402:	2800      	cmp	r0, #0
 801b404:	dc08      	bgt.n	801b418 <__sflush_r+0xfc>
 801b406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b40a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b40e:	81a3      	strh	r3, [r4, #12]
 801b410:	f04f 30ff 	mov.w	r0, #4294967295
 801b414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b418:	4407      	add	r7, r0
 801b41a:	eba8 0800 	sub.w	r8, r8, r0
 801b41e:	e7e7      	b.n	801b3f0 <__sflush_r+0xd4>
 801b420:	dfbffffe 	.word	0xdfbffffe

0801b424 <_fflush_r>:
 801b424:	b538      	push	{r3, r4, r5, lr}
 801b426:	690b      	ldr	r3, [r1, #16]
 801b428:	4605      	mov	r5, r0
 801b42a:	460c      	mov	r4, r1
 801b42c:	b913      	cbnz	r3, 801b434 <_fflush_r+0x10>
 801b42e:	2500      	movs	r5, #0
 801b430:	4628      	mov	r0, r5
 801b432:	bd38      	pop	{r3, r4, r5, pc}
 801b434:	b118      	cbz	r0, 801b43e <_fflush_r+0x1a>
 801b436:	6a03      	ldr	r3, [r0, #32]
 801b438:	b90b      	cbnz	r3, 801b43e <_fflush_r+0x1a>
 801b43a:	f7ff f92d 	bl	801a698 <__sinit>
 801b43e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b442:	2b00      	cmp	r3, #0
 801b444:	d0f3      	beq.n	801b42e <_fflush_r+0xa>
 801b446:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b448:	07d0      	lsls	r0, r2, #31
 801b44a:	d404      	bmi.n	801b456 <_fflush_r+0x32>
 801b44c:	0599      	lsls	r1, r3, #22
 801b44e:	d402      	bmi.n	801b456 <_fflush_r+0x32>
 801b450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b452:	f7ff fb8a 	bl	801ab6a <__retarget_lock_acquire_recursive>
 801b456:	4628      	mov	r0, r5
 801b458:	4621      	mov	r1, r4
 801b45a:	f7ff ff5f 	bl	801b31c <__sflush_r>
 801b45e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b460:	07da      	lsls	r2, r3, #31
 801b462:	4605      	mov	r5, r0
 801b464:	d4e4      	bmi.n	801b430 <_fflush_r+0xc>
 801b466:	89a3      	ldrh	r3, [r4, #12]
 801b468:	059b      	lsls	r3, r3, #22
 801b46a:	d4e1      	bmi.n	801b430 <_fflush_r+0xc>
 801b46c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b46e:	f7ff fb7d 	bl	801ab6c <__retarget_lock_release_recursive>
 801b472:	e7dd      	b.n	801b430 <_fflush_r+0xc>

0801b474 <__swhatbuf_r>:
 801b474:	b570      	push	{r4, r5, r6, lr}
 801b476:	460c      	mov	r4, r1
 801b478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b47c:	2900      	cmp	r1, #0
 801b47e:	b096      	sub	sp, #88	@ 0x58
 801b480:	4615      	mov	r5, r2
 801b482:	461e      	mov	r6, r3
 801b484:	da0d      	bge.n	801b4a2 <__swhatbuf_r+0x2e>
 801b486:	89a3      	ldrh	r3, [r4, #12]
 801b488:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b48c:	f04f 0100 	mov.w	r1, #0
 801b490:	bf14      	ite	ne
 801b492:	2340      	movne	r3, #64	@ 0x40
 801b494:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b498:	2000      	movs	r0, #0
 801b49a:	6031      	str	r1, [r6, #0]
 801b49c:	602b      	str	r3, [r5, #0]
 801b49e:	b016      	add	sp, #88	@ 0x58
 801b4a0:	bd70      	pop	{r4, r5, r6, pc}
 801b4a2:	466a      	mov	r2, sp
 801b4a4:	f000 f87c 	bl	801b5a0 <_fstat_r>
 801b4a8:	2800      	cmp	r0, #0
 801b4aa:	dbec      	blt.n	801b486 <__swhatbuf_r+0x12>
 801b4ac:	9901      	ldr	r1, [sp, #4]
 801b4ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b4b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b4b6:	4259      	negs	r1, r3
 801b4b8:	4159      	adcs	r1, r3
 801b4ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b4be:	e7eb      	b.n	801b498 <__swhatbuf_r+0x24>

0801b4c0 <__smakebuf_r>:
 801b4c0:	898b      	ldrh	r3, [r1, #12]
 801b4c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b4c4:	079d      	lsls	r5, r3, #30
 801b4c6:	4606      	mov	r6, r0
 801b4c8:	460c      	mov	r4, r1
 801b4ca:	d507      	bpl.n	801b4dc <__smakebuf_r+0x1c>
 801b4cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b4d0:	6023      	str	r3, [r4, #0]
 801b4d2:	6123      	str	r3, [r4, #16]
 801b4d4:	2301      	movs	r3, #1
 801b4d6:	6163      	str	r3, [r4, #20]
 801b4d8:	b003      	add	sp, #12
 801b4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4dc:	ab01      	add	r3, sp, #4
 801b4de:	466a      	mov	r2, sp
 801b4e0:	f7ff ffc8 	bl	801b474 <__swhatbuf_r>
 801b4e4:	9f00      	ldr	r7, [sp, #0]
 801b4e6:	4605      	mov	r5, r0
 801b4e8:	4639      	mov	r1, r7
 801b4ea:	4630      	mov	r0, r6
 801b4ec:	f7ff fbba 	bl	801ac64 <_malloc_r>
 801b4f0:	b948      	cbnz	r0, 801b506 <__smakebuf_r+0x46>
 801b4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b4f6:	059a      	lsls	r2, r3, #22
 801b4f8:	d4ee      	bmi.n	801b4d8 <__smakebuf_r+0x18>
 801b4fa:	f023 0303 	bic.w	r3, r3, #3
 801b4fe:	f043 0302 	orr.w	r3, r3, #2
 801b502:	81a3      	strh	r3, [r4, #12]
 801b504:	e7e2      	b.n	801b4cc <__smakebuf_r+0xc>
 801b506:	89a3      	ldrh	r3, [r4, #12]
 801b508:	6020      	str	r0, [r4, #0]
 801b50a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b50e:	81a3      	strh	r3, [r4, #12]
 801b510:	9b01      	ldr	r3, [sp, #4]
 801b512:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b516:	b15b      	cbz	r3, 801b530 <__smakebuf_r+0x70>
 801b518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b51c:	4630      	mov	r0, r6
 801b51e:	f000 f851 	bl	801b5c4 <_isatty_r>
 801b522:	b128      	cbz	r0, 801b530 <__smakebuf_r+0x70>
 801b524:	89a3      	ldrh	r3, [r4, #12]
 801b526:	f023 0303 	bic.w	r3, r3, #3
 801b52a:	f043 0301 	orr.w	r3, r3, #1
 801b52e:	81a3      	strh	r3, [r4, #12]
 801b530:	89a3      	ldrh	r3, [r4, #12]
 801b532:	431d      	orrs	r5, r3
 801b534:	81a5      	strh	r5, [r4, #12]
 801b536:	e7cf      	b.n	801b4d8 <__smakebuf_r+0x18>

0801b538 <_putc_r>:
 801b538:	b570      	push	{r4, r5, r6, lr}
 801b53a:	460d      	mov	r5, r1
 801b53c:	4614      	mov	r4, r2
 801b53e:	4606      	mov	r6, r0
 801b540:	b118      	cbz	r0, 801b54a <_putc_r+0x12>
 801b542:	6a03      	ldr	r3, [r0, #32]
 801b544:	b90b      	cbnz	r3, 801b54a <_putc_r+0x12>
 801b546:	f7ff f8a7 	bl	801a698 <__sinit>
 801b54a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b54c:	07d8      	lsls	r0, r3, #31
 801b54e:	d405      	bmi.n	801b55c <_putc_r+0x24>
 801b550:	89a3      	ldrh	r3, [r4, #12]
 801b552:	0599      	lsls	r1, r3, #22
 801b554:	d402      	bmi.n	801b55c <_putc_r+0x24>
 801b556:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b558:	f7ff fb07 	bl	801ab6a <__retarget_lock_acquire_recursive>
 801b55c:	68a3      	ldr	r3, [r4, #8]
 801b55e:	3b01      	subs	r3, #1
 801b560:	2b00      	cmp	r3, #0
 801b562:	60a3      	str	r3, [r4, #8]
 801b564:	da05      	bge.n	801b572 <_putc_r+0x3a>
 801b566:	69a2      	ldr	r2, [r4, #24]
 801b568:	4293      	cmp	r3, r2
 801b56a:	db12      	blt.n	801b592 <_putc_r+0x5a>
 801b56c:	b2eb      	uxtb	r3, r5
 801b56e:	2b0a      	cmp	r3, #10
 801b570:	d00f      	beq.n	801b592 <_putc_r+0x5a>
 801b572:	6823      	ldr	r3, [r4, #0]
 801b574:	1c5a      	adds	r2, r3, #1
 801b576:	6022      	str	r2, [r4, #0]
 801b578:	701d      	strb	r5, [r3, #0]
 801b57a:	b2ed      	uxtb	r5, r5
 801b57c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b57e:	07da      	lsls	r2, r3, #31
 801b580:	d405      	bmi.n	801b58e <_putc_r+0x56>
 801b582:	89a3      	ldrh	r3, [r4, #12]
 801b584:	059b      	lsls	r3, r3, #22
 801b586:	d402      	bmi.n	801b58e <_putc_r+0x56>
 801b588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b58a:	f7ff faef 	bl	801ab6c <__retarget_lock_release_recursive>
 801b58e:	4628      	mov	r0, r5
 801b590:	bd70      	pop	{r4, r5, r6, pc}
 801b592:	4629      	mov	r1, r5
 801b594:	4622      	mov	r2, r4
 801b596:	4630      	mov	r0, r6
 801b598:	f7ff f96f 	bl	801a87a <__swbuf_r>
 801b59c:	4605      	mov	r5, r0
 801b59e:	e7ed      	b.n	801b57c <_putc_r+0x44>

0801b5a0 <_fstat_r>:
 801b5a0:	b538      	push	{r3, r4, r5, lr}
 801b5a2:	4d07      	ldr	r5, [pc, #28]	@ (801b5c0 <_fstat_r+0x20>)
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	4604      	mov	r4, r0
 801b5a8:	4608      	mov	r0, r1
 801b5aa:	4611      	mov	r1, r2
 801b5ac:	602b      	str	r3, [r5, #0]
 801b5ae:	f7e5 fe94 	bl	80012da <_fstat>
 801b5b2:	1c43      	adds	r3, r0, #1
 801b5b4:	d102      	bne.n	801b5bc <_fstat_r+0x1c>
 801b5b6:	682b      	ldr	r3, [r5, #0]
 801b5b8:	b103      	cbz	r3, 801b5bc <_fstat_r+0x1c>
 801b5ba:	6023      	str	r3, [r4, #0]
 801b5bc:	bd38      	pop	{r3, r4, r5, pc}
 801b5be:	bf00      	nop
 801b5c0:	2000a228 	.word	0x2000a228

0801b5c4 <_isatty_r>:
 801b5c4:	b538      	push	{r3, r4, r5, lr}
 801b5c6:	4d06      	ldr	r5, [pc, #24]	@ (801b5e0 <_isatty_r+0x1c>)
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	4604      	mov	r4, r0
 801b5cc:	4608      	mov	r0, r1
 801b5ce:	602b      	str	r3, [r5, #0]
 801b5d0:	f7e5 fe93 	bl	80012fa <_isatty>
 801b5d4:	1c43      	adds	r3, r0, #1
 801b5d6:	d102      	bne.n	801b5de <_isatty_r+0x1a>
 801b5d8:	682b      	ldr	r3, [r5, #0]
 801b5da:	b103      	cbz	r3, 801b5de <_isatty_r+0x1a>
 801b5dc:	6023      	str	r3, [r4, #0]
 801b5de:	bd38      	pop	{r3, r4, r5, pc}
 801b5e0:	2000a228 	.word	0x2000a228

0801b5e4 <_sbrk_r>:
 801b5e4:	b538      	push	{r3, r4, r5, lr}
 801b5e6:	4d06      	ldr	r5, [pc, #24]	@ (801b600 <_sbrk_r+0x1c>)
 801b5e8:	2300      	movs	r3, #0
 801b5ea:	4604      	mov	r4, r0
 801b5ec:	4608      	mov	r0, r1
 801b5ee:	602b      	str	r3, [r5, #0]
 801b5f0:	f7e5 fe9c 	bl	800132c <_sbrk>
 801b5f4:	1c43      	adds	r3, r0, #1
 801b5f6:	d102      	bne.n	801b5fe <_sbrk_r+0x1a>
 801b5f8:	682b      	ldr	r3, [r5, #0]
 801b5fa:	b103      	cbz	r3, 801b5fe <_sbrk_r+0x1a>
 801b5fc:	6023      	str	r3, [r4, #0]
 801b5fe:	bd38      	pop	{r3, r4, r5, pc}
 801b600:	2000a228 	.word	0x2000a228

0801b604 <_init>:
 801b604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b606:	bf00      	nop
 801b608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b60a:	bc08      	pop	{r3}
 801b60c:	469e      	mov	lr, r3
 801b60e:	4770      	bx	lr

0801b610 <_fini>:
 801b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b612:	bf00      	nop
 801b614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b616:	bc08      	pop	{r3}
 801b618:	469e      	mov	lr, r3
 801b61a:	4770      	bx	lr
